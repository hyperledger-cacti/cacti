/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.CreatePaymentRequest
import org.openapitools.client.models.CreatePaymentResponse
import org.openapitools.client.models.DeployRoleManager200Response
import org.openapitools.client.models.InsertBambooHarvestRequest
import org.openapitools.client.models.InsertBambooHarvestResponse
import org.openapitools.client.models.InsertBookshelfRequest
import org.openapitools.client.models.InsertBookshelfResponse
import org.openapitools.client.models.InsertManufacturerDataRequest
import org.openapitools.client.models.InsertManufacturerDataResponse
import org.openapitools.client.models.InsertShipmentRequest
import org.openapitools.client.models.InsertShipmentResponse
import org.openapitools.client.models.ListBambooHarvestResponse
import org.openapitools.client.models.ListBookshelfResponse
import org.openapitools.client.models.ListManufacturerDataResponse
import org.openapitools.client.models.ListShipmentResponse
import org.openapitools.client.models.ProcessPaymentRequest
import org.openapitools.client.models.ProcessPaymentResponse
import org.openapitools.client.models.UpdateBookshelfStatusRequest
import org.openapitools.client.models.UpdateBookshelfStatusV1200Response

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class DefaultApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Create a new payment for a product
     * 
     * @param createPaymentRequest  (optional)
     * @return CreatePaymentResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createPayment(createPaymentRequest: CreatePaymentRequest? = null) : CreatePaymentResponse {
        val localVarResponse = createPaymentWithHttpInfo(createPaymentRequest = createPaymentRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreatePaymentResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a new payment for a product
     * 
     * @param createPaymentRequest  (optional)
     * @return ApiResponse<CreatePaymentResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createPaymentWithHttpInfo(createPaymentRequest: CreatePaymentRequest?) : ApiResponse<CreatePaymentResponse?> {
        val localVariableConfig = createPaymentRequestConfig(createPaymentRequest = createPaymentRequest)

        return request<CreatePaymentRequest, CreatePaymentResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createPayment
     *
     * @param createPaymentRequest  (optional)
     * @return RequestConfig
     */
    fun createPaymentRequestConfig(createPaymentRequest: CreatePaymentRequest?) : RequestConfig<CreatePaymentRequest> {
        val localVariableBody = createPaymentRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-example-supply-chain-backend/create-payment",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Deploy RoleManager contract
     * 
     * @return DeployRoleManager200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deployRoleManager() : DeployRoleManager200Response {
        val localVarResponse = deployRoleManagerWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DeployRoleManager200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Deploy RoleManager contract
     * 
     * @return ApiResponse<DeployRoleManager200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deployRoleManagerWithHttpInfo() : ApiResponse<DeployRoleManager200Response?> {
        val localVariableConfig = deployRoleManagerRequestConfig()

        return request<Unit, DeployRoleManager200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deployRoleManager
     *
     * @return RequestConfig
     */
    fun deployRoleManagerRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-example-supply-chain-backend/deploy-role-manager",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Inserts the provided BambooHarvest entity to the ledger.
     * 
     * @param insertBambooHarvestRequest  (optional)
     * @return InsertBambooHarvestResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun insertBambooHarvestV1(insertBambooHarvestRequest: InsertBambooHarvestRequest? = null) : InsertBambooHarvestResponse {
        val localVarResponse = insertBambooHarvestV1WithHttpInfo(insertBambooHarvestRequest = insertBambooHarvestRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InsertBambooHarvestResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Inserts the provided BambooHarvest entity to the ledger.
     * 
     * @param insertBambooHarvestRequest  (optional)
     * @return ApiResponse<InsertBambooHarvestResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun insertBambooHarvestV1WithHttpInfo(insertBambooHarvestRequest: InsertBambooHarvestRequest?) : ApiResponse<InsertBambooHarvestResponse?> {
        val localVariableConfig = insertBambooHarvestV1RequestConfig(insertBambooHarvestRequest = insertBambooHarvestRequest)

        return request<InsertBambooHarvestRequest, InsertBambooHarvestResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation insertBambooHarvestV1
     *
     * @param insertBambooHarvestRequest  (optional)
     * @return RequestConfig
     */
    fun insertBambooHarvestV1RequestConfig(insertBambooHarvestRequest: InsertBambooHarvestRequest?) : RequestConfig<InsertBambooHarvestRequest> {
        val localVariableBody = insertBambooHarvestRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-example-supply-chain-backend/insert-bamboo-harvest",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Inserts the provided Bookshelf entity to the ledger.
     * 
     * @param insertBookshelfRequest  (optional)
     * @return InsertBookshelfResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun insertBookshelfV1(insertBookshelfRequest: InsertBookshelfRequest? = null) : InsertBookshelfResponse {
        val localVarResponse = insertBookshelfV1WithHttpInfo(insertBookshelfRequest = insertBookshelfRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InsertBookshelfResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Inserts the provided Bookshelf entity to the ledger.
     * 
     * @param insertBookshelfRequest  (optional)
     * @return ApiResponse<InsertBookshelfResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun insertBookshelfV1WithHttpInfo(insertBookshelfRequest: InsertBookshelfRequest?) : ApiResponse<InsertBookshelfResponse?> {
        val localVariableConfig = insertBookshelfV1RequestConfig(insertBookshelfRequest = insertBookshelfRequest)

        return request<InsertBookshelfRequest, InsertBookshelfResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation insertBookshelfV1
     *
     * @param insertBookshelfRequest  (optional)
     * @return RequestConfig
     */
    fun insertBookshelfV1RequestConfig(insertBookshelfRequest: InsertBookshelfRequest?) : RequestConfig<InsertBookshelfRequest> {
        val localVariableBody = insertBookshelfRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-example-supply-chain-backend/insert-bookshelf",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Inserts manufacturer data to the Fabric ledger
     * 
     * @param insertManufacturerDataRequest  (optional)
     * @return InsertManufacturerDataResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun insertManufacturerDataV1(insertManufacturerDataRequest: InsertManufacturerDataRequest? = null) : InsertManufacturerDataResponse {
        val localVarResponse = insertManufacturerDataV1WithHttpInfo(insertManufacturerDataRequest = insertManufacturerDataRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InsertManufacturerDataResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Inserts manufacturer data to the Fabric ledger
     * 
     * @param insertManufacturerDataRequest  (optional)
     * @return ApiResponse<InsertManufacturerDataResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun insertManufacturerDataV1WithHttpInfo(insertManufacturerDataRequest: InsertManufacturerDataRequest?) : ApiResponse<InsertManufacturerDataResponse?> {
        val localVariableConfig = insertManufacturerDataV1RequestConfig(insertManufacturerDataRequest = insertManufacturerDataRequest)

        return request<InsertManufacturerDataRequest, InsertManufacturerDataResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation insertManufacturerDataV1
     *
     * @param insertManufacturerDataRequest  (optional)
     * @return RequestConfig
     */
    fun insertManufacturerDataV1RequestConfig(insertManufacturerDataRequest: InsertManufacturerDataRequest?) : RequestConfig<InsertManufacturerDataRequest> {
        val localVariableBody = insertManufacturerDataRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-example-supply-chain-backend/insert-manufacturer-data",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Inserts the provided Shipment entity to the ledger.
     * 
     * @param insertShipmentRequest  (optional)
     * @return InsertShipmentResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun insertShipmentV1(insertShipmentRequest: InsertShipmentRequest? = null) : InsertShipmentResponse {
        val localVarResponse = insertShipmentV1WithHttpInfo(insertShipmentRequest = insertShipmentRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InsertShipmentResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Inserts the provided Shipment entity to the ledger.
     * 
     * @param insertShipmentRequest  (optional)
     * @return ApiResponse<InsertShipmentResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun insertShipmentV1WithHttpInfo(insertShipmentRequest: InsertShipmentRequest?) : ApiResponse<InsertShipmentResponse?> {
        val localVariableConfig = insertShipmentV1RequestConfig(insertShipmentRequest = insertShipmentRequest)

        return request<InsertShipmentRequest, InsertShipmentResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation insertShipmentV1
     *
     * @param insertShipmentRequest  (optional)
     * @return RequestConfig
     */
    fun insertShipmentV1RequestConfig(insertShipmentRequest: InsertShipmentRequest?) : RequestConfig<InsertShipmentRequest> {
        val localVariableBody = insertShipmentRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-example-supply-chain-backend/insert-shipment",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Lists all the BambooHarvest entities stored on the ledger.
     * 
     * @return ListBambooHarvestResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listBambooHarvestV1() : ListBambooHarvestResponse {
        val localVarResponse = listBambooHarvestV1WithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ListBambooHarvestResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Lists all the BambooHarvest entities stored on the ledger.
     * 
     * @return ApiResponse<ListBambooHarvestResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listBambooHarvestV1WithHttpInfo() : ApiResponse<ListBambooHarvestResponse?> {
        val localVariableConfig = listBambooHarvestV1RequestConfig()

        return request<Unit, ListBambooHarvestResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listBambooHarvestV1
     *
     * @return RequestConfig
     */
    fun listBambooHarvestV1RequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/plugins/@hyperledger/cactus-example-supply-chain-backend/list-bamboo-harvest",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Lists all the Bookshelf entities stored on the ledger.
     * 
     * @return ListBookshelfResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listBookshelfV1() : ListBookshelfResponse {
        val localVarResponse = listBookshelfV1WithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ListBookshelfResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Lists all the Bookshelf entities stored on the ledger.
     * 
     * @return ApiResponse<ListBookshelfResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listBookshelfV1WithHttpInfo() : ApiResponse<ListBookshelfResponse?> {
        val localVariableConfig = listBookshelfV1RequestConfig()

        return request<Unit, ListBookshelfResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listBookshelfV1
     *
     * @return RequestConfig
     */
    fun listBookshelfV1RequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/plugins/@hyperledger/cactus-example-supply-chain-backend/list-bookshelf",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * List all manufacturer data
     * 
     * @return ListManufacturerDataResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listManufacturerDataV1() : ListManufacturerDataResponse {
        val localVarResponse = listManufacturerDataV1WithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ListManufacturerDataResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List all manufacturer data
     * 
     * @return ApiResponse<ListManufacturerDataResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listManufacturerDataV1WithHttpInfo() : ApiResponse<ListManufacturerDataResponse?> {
        val localVariableConfig = listManufacturerDataV1RequestConfig()

        return request<Unit, ListManufacturerDataResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listManufacturerDataV1
     *
     * @return RequestConfig
     */
    fun listManufacturerDataV1RequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/plugins/@hyperledger/cactus-example-supply-chain-backend/list-manufacturer-data",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Lists all the Shipments entities stored on the ledger.
     * 
     * @return ListShipmentResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listShipmentV1() : ListShipmentResponse {
        val localVarResponse = listShipmentV1WithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ListShipmentResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Lists all the Shipments entities stored on the ledger.
     * 
     * @return ApiResponse<ListShipmentResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listShipmentV1WithHttpInfo() : ApiResponse<ListShipmentResponse?> {
        val localVariableConfig = listShipmentV1RequestConfig()

        return request<Unit, ListShipmentResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listShipmentV1
     *
     * @return RequestConfig
     */
    fun listShipmentV1RequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/plugins/@hyperledger/cactus-example-supply-chain-backend/list-shipment",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Process an existing payment
     * 
     * @param processPaymentRequest  (optional)
     * @return ProcessPaymentResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun processPayment(processPaymentRequest: ProcessPaymentRequest? = null) : ProcessPaymentResponse {
        val localVarResponse = processPaymentWithHttpInfo(processPaymentRequest = processPaymentRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ProcessPaymentResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Process an existing payment
     * 
     * @param processPaymentRequest  (optional)
     * @return ApiResponse<ProcessPaymentResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun processPaymentWithHttpInfo(processPaymentRequest: ProcessPaymentRequest?) : ApiResponse<ProcessPaymentResponse?> {
        val localVariableConfig = processPaymentRequestConfig(processPaymentRequest = processPaymentRequest)

        return request<ProcessPaymentRequest, ProcessPaymentResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation processPayment
     *
     * @param processPaymentRequest  (optional)
     * @return RequestConfig
     */
    fun processPaymentRequestConfig(processPaymentRequest: ProcessPaymentRequest?) : RequestConfig<ProcessPaymentRequest> {
        val localVariableBody = processPaymentRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-example-supply-chain-backend/process-payment",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Updates the status of a bookshelf entity on the ledger.
     * 
     * @param updateBookshelfStatusRequest  (optional)
     * @return UpdateBookshelfStatusV1200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateBookshelfStatusV1(updateBookshelfStatusRequest: UpdateBookshelfStatusRequest? = null) : UpdateBookshelfStatusV1200Response {
        val localVarResponse = updateBookshelfStatusV1WithHttpInfo(updateBookshelfStatusRequest = updateBookshelfStatusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UpdateBookshelfStatusV1200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Updates the status of a bookshelf entity on the ledger.
     * 
     * @param updateBookshelfStatusRequest  (optional)
     * @return ApiResponse<UpdateBookshelfStatusV1200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateBookshelfStatusV1WithHttpInfo(updateBookshelfStatusRequest: UpdateBookshelfStatusRequest?) : ApiResponse<UpdateBookshelfStatusV1200Response?> {
        val localVariableConfig = updateBookshelfStatusV1RequestConfig(updateBookshelfStatusRequest = updateBookshelfStatusRequest)

        return request<UpdateBookshelfStatusRequest, UpdateBookshelfStatusV1200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateBookshelfStatusV1
     *
     * @param updateBookshelfStatusRequest  (optional)
     * @return RequestConfig
     */
    fun updateBookshelfStatusV1RequestConfig(updateBookshelfStatusRequest: UpdateBookshelfStatusRequest?) : RequestConfig<UpdateBookshelfStatusRequest> {
        val localVariableBody = updateBookshelfStatusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-example-supply-chain-backend/update-bookshelf-status",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
