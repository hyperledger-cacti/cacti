/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.DeleteBambooHarvestV1200Response
import org.openapitools.client.models.DeleteBambooHarvestV1400Response
import org.openapitools.client.models.DeleteBambooHarvestV1Request
import org.openapitools.client.models.UpdateBambooHarvestStatusRequest
import org.openapitools.client.models.UpdateShipmentStatus200Response
import org.openapitools.client.models.UpdateShipmentStatus500Response
import org.openapitools.client.models.UpdateShipmentStatusRequest

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class SupplyChainApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Delete a bamboo harvest record
     * 
     * @param deleteBambooHarvestV1Request 
     * @return DeleteBambooHarvestV1200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteBambooHarvestV1(deleteBambooHarvestV1Request: DeleteBambooHarvestV1Request) : DeleteBambooHarvestV1200Response {
        val localVarResponse = deleteBambooHarvestV1WithHttpInfo(deleteBambooHarvestV1Request = deleteBambooHarvestV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DeleteBambooHarvestV1200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete a bamboo harvest record
     * 
     * @param deleteBambooHarvestV1Request 
     * @return ApiResponse<DeleteBambooHarvestV1200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteBambooHarvestV1WithHttpInfo(deleteBambooHarvestV1Request: DeleteBambooHarvestV1Request) : ApiResponse<DeleteBambooHarvestV1200Response?> {
        val localVariableConfig = deleteBambooHarvestV1RequestConfig(deleteBambooHarvestV1Request = deleteBambooHarvestV1Request)

        return request<DeleteBambooHarvestV1Request, DeleteBambooHarvestV1200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteBambooHarvestV1
     *
     * @param deleteBambooHarvestV1Request 
     * @return RequestConfig
     */
    fun deleteBambooHarvestV1RequestConfig(deleteBambooHarvestV1Request: DeleteBambooHarvestV1Request) : RequestConfig<DeleteBambooHarvestV1Request> {
        val localVariableBody = deleteBambooHarvestV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-example-supply-chain-backend/delete-bamboo-harvest",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Update Bamboo Harvest Status
     * 
     * @param updateBambooHarvestStatusRequest  (optional)
     * @return UpdateShipmentStatus200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateBambooHarvestStatus(updateBambooHarvestStatusRequest: UpdateBambooHarvestStatusRequest? = null) : UpdateShipmentStatus200Response {
        val localVarResponse = updateBambooHarvestStatusWithHttpInfo(updateBambooHarvestStatusRequest = updateBambooHarvestStatusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UpdateShipmentStatus200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update Bamboo Harvest Status
     * 
     * @param updateBambooHarvestStatusRequest  (optional)
     * @return ApiResponse<UpdateShipmentStatus200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateBambooHarvestStatusWithHttpInfo(updateBambooHarvestStatusRequest: UpdateBambooHarvestStatusRequest?) : ApiResponse<UpdateShipmentStatus200Response?> {
        val localVariableConfig = updateBambooHarvestStatusRequestConfig(updateBambooHarvestStatusRequest = updateBambooHarvestStatusRequest)

        return request<UpdateBambooHarvestStatusRequest, UpdateShipmentStatus200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateBambooHarvestStatus
     *
     * @param updateBambooHarvestStatusRequest  (optional)
     * @return RequestConfig
     */
    fun updateBambooHarvestStatusRequestConfig(updateBambooHarvestStatusRequest: UpdateBambooHarvestStatusRequest?) : RequestConfig<UpdateBambooHarvestStatusRequest> {
        val localVariableBody = updateBambooHarvestStatusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-example-supply-chain-backend/update-bamboo-harvest-status",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Update Shipment Status
     * 
     * @param updateShipmentStatusRequest  (optional)
     * @return UpdateShipmentStatus200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateShipmentStatus(updateShipmentStatusRequest: UpdateShipmentStatusRequest? = null) : UpdateShipmentStatus200Response {
        val localVarResponse = updateShipmentStatusWithHttpInfo(updateShipmentStatusRequest = updateShipmentStatusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UpdateShipmentStatus200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update Shipment Status
     * 
     * @param updateShipmentStatusRequest  (optional)
     * @return ApiResponse<UpdateShipmentStatus200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateShipmentStatusWithHttpInfo(updateShipmentStatusRequest: UpdateShipmentStatusRequest?) : ApiResponse<UpdateShipmentStatus200Response?> {
        val localVariableConfig = updateShipmentStatusRequestConfig(updateShipmentStatusRequest = updateShipmentStatusRequest)

        return request<UpdateShipmentStatusRequest, UpdateShipmentStatus200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateShipmentStatus
     *
     * @param updateShipmentStatusRequest  (optional)
     * @return RequestConfig
     */
    fun updateShipmentStatusRequestConfig(updateShipmentStatusRequest: UpdateShipmentStatusRequest?) : RequestConfig<UpdateShipmentStatusRequest> {
        val localVariableBody = updateShipmentStatusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-example-supply-chain-backend/update-shipment-status",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
