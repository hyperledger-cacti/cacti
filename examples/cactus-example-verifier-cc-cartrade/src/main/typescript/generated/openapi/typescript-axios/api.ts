/* tslint:disable */
/* eslint-disable */
/**
 * Hyperledger Cactus Example Business Logic Plugin - Cartrade
 * Demonstrates how to use the Verifier CC plugin for trading cars.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GetBalanceV1Request
 */
export interface GetBalanceV1Request {
    /**
     * 
     * @type {string}
     * @memberof GetBalanceV1Request
     */
    address: string;
    /**
     * 
     * @type {any}
     * @memberof GetBalanceV1Request
     */
    defaultBlock?: any | null;
}
/**
 * 
 * @export
 * @interface GetBalanceV1Response
 */
export interface GetBalanceV1Response {
    /**
     * 
     * @type {string}
     * @memberof GetBalanceV1Response
     */
    balance: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum WatchBlocksV1 {
    Subscribe = 'org.hyperledger.cactus.api.async.besu.WatchBlocksV1.Subscribe',
    Next = 'org.hyperledger.cactus.api.async.besu.WatchBlocksV1.Next',
    Unsubscribe = 'org.hyperledger.cactus.api.async.besu.WatchBlocksV1.Unsubscribe',
    Error = 'org.hyperledger.cactus.api.async.besu.WatchBlocksV1.Error',
    Complete = 'org.hyperledger.cactus.api.async.besu.WatchBlocksV1.Complete'
}

/**
 * 
 * @export
 * @interface WatchBlocksV1Progress
 */
export interface WatchBlocksV1Progress {
    /**
     * 
     * @type {any}
     * @memberof WatchBlocksV1Progress
     */
    blockHeader: any | null;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Return balance of an address of a given block
         * @param {GetBalanceV1Request} [getBalanceV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalanceV1: async (getBalanceV1Request?: GetBalanceV1Request, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/get-balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getBalanceV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Return balance of an address of a given block
         * @param {GetBalanceV1Request} [getBalanceV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBalanceV1(getBalanceV1Request?: GetBalanceV1Request, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBalanceV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBalanceV1(getBalanceV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Return balance of an address of a given block
         * @param {GetBalanceV1Request} [getBalanceV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalanceV1(getBalanceV1Request?: GetBalanceV1Request, options?: any): AxiosPromise<GetBalanceV1Response> {
            return localVarFp.getBalanceV1(getBalanceV1Request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Return balance of an address of a given block
     * @param {GetBalanceV1Request} [getBalanceV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBalanceV1(getBalanceV1Request?: GetBalanceV1Request, options?: any) {
        return DefaultApiFp(this.configuration).getBalanceV1(getBalanceV1Request, options).then((request) => request(this.axios, this.basePath));
    }
}


