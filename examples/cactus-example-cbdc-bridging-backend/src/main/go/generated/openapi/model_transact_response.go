/*
CBDC-example backend API

Cactus-Example 

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactResponse{}

// TransactResponse Response schema for a transaction request.
type TransactResponse struct {
	StatusResponse StatusResponse `json:"statusResponse"`
}

type _TransactResponse TransactResponse

// NewTransactResponse instantiates a new TransactResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactResponse(statusResponse StatusResponse) *TransactResponse {
	this := TransactResponse{}
	this.StatusResponse = statusResponse
	return &this
}

// NewTransactResponseWithDefaults instantiates a new TransactResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactResponseWithDefaults() *TransactResponse {
	this := TransactResponse{}
	return &this
}

// GetStatusResponse returns the StatusResponse field value
func (o *TransactResponse) GetStatusResponse() StatusResponse {
	if o == nil {
		var ret StatusResponse
		return ret
	}

	return o.StatusResponse
}

// GetStatusResponseOk returns a tuple with the StatusResponse field value
// and a boolean to check if the value has been set.
func (o *TransactResponse) GetStatusResponseOk() (*StatusResponse, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatusResponse, true
}

// SetStatusResponse sets field value
func (o *TransactResponse) SetStatusResponse(v StatusResponse) {
	o.StatusResponse = v
}

func (o TransactResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["statusResponse"] = o.StatusResponse
	return toSerialize, nil
}

func (o *TransactResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"statusResponse",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactResponse := _TransactResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactResponse)

	if err != nil {
		return err
	}

	*o = TransactResponse(varTransactResponse)

	return err
}

type NullableTransactResponse struct {
	value *TransactResponse
	isSet bool
}

func (v NullableTransactResponse) Get() *TransactResponse {
	return v.value
}

func (v *NullableTransactResponse) Set(val *TransactResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactResponse(val *TransactResponse) *NullableTransactResponse {
	return &NullableTransactResponse{value: val, isSet: true}
}

func (v NullableTransactResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


