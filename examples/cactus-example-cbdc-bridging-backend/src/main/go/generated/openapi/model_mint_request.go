/*
CBDC-example backend API

Cactus-Example 

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MintRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MintRequest{}

// MintRequest Request schema for minting an asset.
type MintRequest struct {
	User string `json:"user"`
	Amount string `json:"amount"`
	Ledger AssetType `json:"ledger"`
}

type _MintRequest MintRequest

// NewMintRequest instantiates a new MintRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMintRequest(user string, amount string, ledger AssetType) *MintRequest {
	this := MintRequest{}
	this.User = user
	this.Amount = amount
	this.Ledger = ledger
	return &this
}

// NewMintRequestWithDefaults instantiates a new MintRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMintRequestWithDefaults() *MintRequest {
	this := MintRequest{}
	return &this
}

// GetUser returns the User field value
func (o *MintRequest) GetUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *MintRequest) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *MintRequest) SetUser(v string) {
	o.User = v
}

// GetAmount returns the Amount field value
func (o *MintRequest) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *MintRequest) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *MintRequest) SetAmount(v string) {
	o.Amount = v
}

// GetLedger returns the Ledger field value
func (o *MintRequest) GetLedger() AssetType {
	if o == nil {
		var ret AssetType
		return ret
	}

	return o.Ledger
}

// GetLedgerOk returns a tuple with the Ledger field value
// and a boolean to check if the value has been set.
func (o *MintRequest) GetLedgerOk() (*AssetType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ledger, true
}

// SetLedger sets field value
func (o *MintRequest) SetLedger(v AssetType) {
	o.Ledger = v
}

func (o MintRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MintRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["user"] = o.User
	toSerialize["amount"] = o.Amount
	toSerialize["ledger"] = o.Ledger
	return toSerialize, nil
}

func (o *MintRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"user",
		"amount",
		"ledger",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMintRequest := _MintRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMintRequest)

	if err != nil {
		return err
	}

	*o = MintRequest(varMintRequest)

	return err
}

type NullableMintRequest struct {
	value *MintRequest
	isSet bool
}

func (v NullableMintRequest) Get() *MintRequest {
	return v.value
}

func (v *NullableMintRequest) Set(val *MintRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMintRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMintRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMintRequest(val *MintRequest) *NullableMintRequest {
	return &NullableMintRequest{value: val, isSet: true}
}

func (v NullableMintRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMintRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


