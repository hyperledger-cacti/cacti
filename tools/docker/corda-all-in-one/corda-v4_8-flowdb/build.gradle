import static org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_17
import static org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9

buildscript { //properties that you need to build the project

    Properties constants = new Properties()
    file("$projectDir/../constants.properties").withInputStream { constants.load(it) }

    ext {
        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_core_release_group =  constants.getProperty("cordaCoreReleaseGroup")
        corda_release_version = constants.getProperty("cordaVersion")
        corda_core_release_version = constants.getProperty("cordaCoreVersion")
        corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
        kotlin_version = constants.getProperty("kotlinVersion")
        junit_version = constants.getProperty("junitVersion")
        quasar_version = constants.getProperty("quasarVersion")
        log4j_version = constants.getProperty("log4jVersion")
        slf4j_version = constants.getProperty("slf4jVersion")
        corda_shell_version = constants.getProperty("cordaShellVersion")
        corda_platform_version = constants.getProperty("platformVersion").toInteger()

        testJvmArgs = ['--add-opens', 'java.base/java.time=ALL-UNNAMED', '--add-opens', 'java.base/java.io=ALL-UNNAMED',
                       '--add-opens', 'java.base/java.util=ALL-UNNAMED', '--add-opens', 'java.base/java.net=ALL-UNNAMED',
                       '--add-opens', 'java.base/java.nio=ALL-UNNAMED', '--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED',
                       '--add-opens', 'java.base/java.security.cert=ALL-UNNAMED', '--add-opens', 'java.base/java.security=ALL-UNNAMED',
                       '--add-opens', 'java.base/javax.net.ssl=ALL-UNNAMED', '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
                       '--add-opens', 'java.base/java.util.concurrent=ALL-UNNAMED', '--add-opens', 'java.sql/java.sql=ALL-UNNAMED',]
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://download.corda.net/maven/corda-releases' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    }
}

allprojects { //Properties that you need to compile your project (The application)
    apply from: "${rootProject.projectDir}/../repositories.gradle"
    apply plugin: 'org.jetbrains.kotlin.jvm'

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        compilerOptions {
            languageVersion = KOTLIN_1_9
            apiVersion = KOTLIN_1_9
            jvmTarget = JVM_17
            javaParameters = true   // Useful for reflection.
            freeCompilerArgs = ['-Xjvm-default=all-compatibility']
            allWarningsAsErrors = true
        }
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

//Module dependencies
dependencies {
    // Corda dependencies.
    cordaBootstrapper "$corda_release_group:corda-node-api:$corda_release_version"
    corda "$corda_release_group:corda:$corda_release_version"

    // CorDapp dependencies.
    cordapp project(":workflows")

    cordaProvided "$corda_core_release_group:corda-core:$corda_core_release_version"
    cordaProvided "org.apache.logging.log4j:log4j-slf4j2-impl:${log4j_version}"
    cordaProvided "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaProvided "org.slf4j:jul-to-slf4j:$slf4j_version"
    cordaDriver "net.corda:corda-shell:$corda_shell_version"
}

cordapp {
    targetPlatformVersion corda_platform_version.toInteger()
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp project(':workflows')
        runSchemaMigration = true //This configuration is for any CorDapps with custom schema, We will leave this as true to avoid
        //problems for developers who are not familiar with Corda. If you are not using custom schemas, you can change
        //it to false for quicker project compiling time.
    }
    node {
        name "O=PartyA,L=London,C=GB"
        p2pPort 10005
        rpcSettings {
            address("0.0.0.0:10006")
            adminAddress("0.0.0.0:10046")
        }
        rpcUsers = [[user: "user1", "password": "test", "permissions": [
                "StartFlow.com.flowdb.AddTokenValueFlow",
                "StartFlow.com.flowdb.UpdateTokenValueFlow",
                "StartFlow.com.flowdb.QueryTokenValueFlow",
                // Without this, the connector cannot connect - fails with the error logs below"
                // Permission Exception establishing connection: User not authorized to perform RPC call public abstract net.corda.core.node.NodeInfo net.corda.core.messaging.CordaRPCOps.nodeInfo() with target []'
                "InvokeRpc.nodeInfo",

                // net.corda.client.rpc.PermissionException: User not authorized to perform RPC call public abstract java.util.List net.corda.core.messaging.CordaRPCOps.registeredFlows() with target []
                "InvokeRpc.registeredFlows",
                "InvokeRpc.startFlowDynamic"
        ]]]
    }
}
