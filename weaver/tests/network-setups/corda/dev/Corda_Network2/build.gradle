buildscript {
    Properties constants = new Properties()
    file("$projectDir/./constants.properties").withInputStream { constants.load(it) }

    ext {
        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_core_release_group =  constants.getProperty("cordaCoreReleaseGroup")
        corda_release_version = constants.getProperty("cordaVersion")
        corda_core_release_version = constants.getProperty("cordaCoreVersion")
        corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
        kotlin_version = constants.getProperty("kotlinVersion")
        junit_version = constants.getProperty("junitVersion")
        log4j_version = constants.getProperty("log4jVersion")
        slf4j_version = constants.getProperty("slf4jVersion")
        corda_platform_version = constants.getProperty("platformVersion").toInteger()
        tokens_release_group = 'com.r3.corda.lib.tokens'
        tokens_release_version = '1.2'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
    }
}

apply plugin: 'net.corda.plugins.cordformation'

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // Corda dependencies.
    cordaRuntime "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    // Token SDK dependencies.
    cordapp "$tokens_release_group:tokens-contracts:$tokens_release_version"
    cordapp "$tokens_release_group:tokens-workflows:$tokens_release_version"
}


repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url 'https://software.r3.com/artifactory/corda' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://software.r3.com/artifactory/corda-lib' }
}

task ganache {
    subprojects {
        if (it.project.name != "clients") {
            dependsOn jar
            doLast {
                copy {
                    from "${buildDir}/libs"
                    into "${rootDir}/build/libs"
                }
            }
        }
    }
}

task deployNodes(type: net.corda.plugins.Cordform) {
    Properties constants = new Properties()
    file("$projectDir/./constants.properties").withInputStream { constants.load(it) }

    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp("$tokens_release_group:tokens-contracts:$tokens_release_version")
        cordapp("$tokens_release_group:tokens-workflows:$tokens_release_version")
        runSchemaMigration = true
    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating : false]
        p2pPort 30002
        rpcSettings {
            address("localhost:30003")
            adminAddress("localhost:30043")
        }
    }
    node {
        name "O=PartyA,L=London,C=GB"
        p2pPort 30004
        rpcSettings {
            address("localhost:30006")
            adminAddress("localhost:30046")
        }
        rpcUsers = [
                [ user: "clientUser1", "password": "test", "permissions": ["ALL"]],
                [ user: "driverUser1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=PartyB,L=London,C=GB"
        p2pPort 30007
        rpcSettings {
            address("localhost:30009")
            adminAddress("localhost:30049")
        }
        rpcUsers = [
                [ user: "clientUser1", "password": "test", "permissions": ["ALL"]],
                [ user: "driverUser1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=PartyC,L=London,C=GB"
        p2pPort 30010
        rpcSettings {
            address("localhost:30012")
            adminAddress("localhost:30052")
        }
        rpcUsers = [
                [ user: "clientUser1", "password": "test", "permissions": ["ALL"]],
                [ user: "driverUser1", "password": "test", "permissions": ["ALL"]]]
    }
}

task prepareDockerNodes(type: net.corda.plugins.Dockerform, dependsOn: ['jar']) {
    dockerImage = "corda/corda-zulu-java1.8-$corda_release_version"
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp("$tokens_release_group:tokens-contracts:$tokens_release_version")
        cordapp("$tokens_release_group:tokens-workflows:$tokens_release_version")
        runSchemaMigration = true
    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: false]
        p2pPort 30002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10005")
        }
    }
    node {
        name "O=PartyA,L=London,C=GB"
        p2pPort 30004
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10005")
        }
        rpcUsers = [
                [ user: "clientUser1", "password": "test", "permissions": ["ALL"]],
                [ user: "driverUser1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=PartyB,L=London,C=GB"
        p2pPort 30007
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10005")
        }
        rpcUsers = [
                [ user: "clientUser1", "password": "test", "permissions": ["ALL"]],
                [ user: "driverUser1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=PartyC,L=London,C=GB"
        p2pPort 30010
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10005")
        }
        rpcUsers = [
                [ user: "clientUser1", "password": "test", "permissions": ["ALL"]],
                [ user: "driverUser1", "password": "test", "permissions": ["ALL"]]]
    }
}
