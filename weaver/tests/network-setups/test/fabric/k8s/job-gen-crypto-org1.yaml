#
# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

apiVersion: batch/v1
kind: Job
metadata:
  name: gen-crypto-org1
spec:
  template:
    spec:
      volumes:
        - name: network1-secrets
          persistentVolumeClaim:
            claimName: network1-secrets
      containers:
      - name: gen-crypto-org1
        image: hyperledger/fabric-ca:1.4
        env:
          - name: DOMAIN
            value: org1
          - name: NODE_HOSTNAME
            value: peer0-org1-network1
          - name: CA_NAME
            value: ca-org1-network1
          - name: CA_URL
            value: ca-org1-network1:7054
          - name: CA_CERT_FILE
            value: ca-org1-network1-7054-ca-org1-network1.pem
          - name: FABRIC_CA_CLIENT_HOME
            value: /var/pvc1/peerOrganizations/org1
          - name: TLS_CACERT_PATH
            value: /var/pvc1/fabric-ca/org1/tls-cert.pem
        volumeMounts:
          - name: network1-secrets
            mountPath: /var/pvc1
        command: ["/bin/sh",  "-c"]
        args: ['echo;
                echo "Enroll the CA admin";
                echo;
                mkdir -p ${FABRIC_CA_CLIENT_HOME};

                export FABRIC_CA_CLIENT_HOME=${FABRIC_CA_CLIENT_HOME}/;

                set -x;
                fabric-ca-client enroll -u https://admin:adminpw@${CA_URL} --caname ${CA_NAME} --tls.certfiles ${TLS_CACERT_PATH};
                set +x;

                echo "NodeOUs:\n  Enable: true\n  ClientOUIdentifier:\n    Certificate: cacerts/${CA_CERT_FILE}\n    OrganizationalUnitIdentifier: client\n  PeerOUIdentifier:\n    Certificate: cacerts/${CA_CERT_FILE}\n    OrganizationalUnitIdentifier: peer\n  AdminOUIdentifier:\n    Certificate: cacerts/${CA_CERT_FILE}\n    OrganizationalUnitIdentifier: admin\n  OrdererOUIdentifier:\n    Certificate: cacerts/${CA_CERT_FILE}\n    OrganizationalUnitIdentifier: orderer" > ${FABRIC_CA_CLIENT_HOME}/msp/config.yaml;

                echo;
                echo "Register peer0";
                echo;
                set -x;
                fabric-ca-client register --caname ${CA_NAME} --id.name peer0 --id.secret peer0pw --id.type peer --tls.certfiles ${TLS_CACERT_PATH};
                set +x;

                echo;
                echo "Register user";
                echo;
                set -x;
                fabric-ca-client register --caname ${CA_NAME} --id.name user1 --id.secret user1pw --id.type client --tls.certfiles ${TLS_CACERT_PATH};
                set +x;

                echo;
                echo "Register the org admin";
                echo;
                set -x;
                fabric-ca-client register --caname ${CA_NAME} --id.name org1admin --id.secret org1adminpw --id.type admin --tls.certfiles ${TLS_CACERT_PATH};
                set +x;

                mkdir -p ${FABRIC_CA_CLIENT_HOME}/peers;
                mkdir -p ${FABRIC_CA_CLIENT_HOME}/peers/${NODE_HOSTNAME};

                echo;
                echo "## Generate the peer0 msp";
                echo;
                set -x;
                fabric-ca-client enroll -u https://peer0:peer0pw@${CA_URL} --caname ${CA_NAME} -M ${FABRIC_CA_CLIENT_HOME}/peers/${NODE_HOSTNAME}/msp --csr.hosts ${NODE_HOSTNAME} --tls.certfiles ${TLS_CACERT_PATH};
                set +x;

                cp ${FABRIC_CA_CLIENT_HOME}/msp/config.yaml ${FABRIC_CA_CLIENT_HOME}/peers/${NODE_HOSTNAME}/msp/config.yaml;

                echo;
                echo "## Generate the peer0-tls certificates";
                echo;
                set -x;
                fabric-ca-client enroll -u https://peer0:peer0pw@${CA_URL} --caname ${CA_NAME} -M ${FABRIC_CA_CLIENT_HOME}/peers/${NODE_HOSTNAME}/tls --enrollment.profile tls --csr.hosts ${NODE_HOSTNAME} --csr.hosts localhost --tls.certfiles ${TLS_CACERT_PATH};
                set +x;


                cp ${FABRIC_CA_CLIENT_HOME}/peers/${NODE_HOSTNAME}/tls/tlscacerts/* ${FABRIC_CA_CLIENT_HOME}/peers/${NODE_HOSTNAME}/tls/ca.crt;
                cp ${FABRIC_CA_CLIENT_HOME}/peers/${NODE_HOSTNAME}/tls/signcerts/* ${FABRIC_CA_CLIENT_HOME}/peers/${NODE_HOSTNAME}/tls/server.crt;
                cp ${FABRIC_CA_CLIENT_HOME}/peers/${NODE_HOSTNAME}/tls/keystore/* ${FABRIC_CA_CLIENT_HOME}/peers/${NODE_HOSTNAME}/tls/server.key;

                mkdir -p ${FABRIC_CA_CLIENT_HOME}/msp/tlscacerts;
                cp ${FABRIC_CA_CLIENT_HOME}/peers/${NODE_HOSTNAME}/tls/tlscacerts/* ${FABRIC_CA_CLIENT_HOME}/msp/tlscacerts/ca.crt;

                mkdir -p ${FABRIC_CA_CLIENT_HOME}/tlsca;
                cp ${FABRIC_CA_CLIENT_HOME}/peers/${NODE_HOSTNAME}/tls/tlscacerts/* ${FABRIC_CA_CLIENT_HOME}/tlsca/tlsca.${DOMAIN}-cert.pem;

                mkdir -p ${FABRIC_CA_CLIENT_HOME}/ca;
                cp ${FABRIC_CA_CLIENT_HOME}/peers/${NODE_HOSTNAME}/msp/cacerts/* ${FABRIC_CA_CLIENT_HOME}/ca/ca.${DOMAIN}-cert.pem;

                mkdir -p ${FABRIC_CA_CLIENT_HOME}/users;
                mkdir -p ${FABRIC_CA_CLIENT_HOME}/users/User1@${DOMAIN};

                echo;
                echo "## Generate the user msp";
                echo;
                set -x;
                fabric-ca-client enroll -u https://user1:user1pw@${CA_URL} --caname ${CA_NAME} -M ${FABRIC_CA_CLIENT_HOME}/users/User1@${DOMAIN}/msp --tls.certfiles ${TLS_CACERT_PATH};
                set +x;

                cp ${FABRIC_CA_CLIENT_HOME}/msp/config.yaml ${FABRIC_CA_CLIENT_HOME}/users/User1@${DOMAIN}/msp/config.yaml;

                mkdir -p ${FABRIC_CA_CLIENT_HOME}/users/Admin@${DOMAIN};

                echo;
                echo "## Generate the org admin msp";
                echo;
                set -x;
                fabric-ca-client enroll -u https://org1admin:org1adminpw@${CA_URL} --caname ${CA_NAME} -M ${FABRIC_CA_CLIENT_HOME}/users/Admin@${DOMAIN}/msp --tls.certfiles ${TLS_CACERT_PATH};
                set +x;

                cp ${FABRIC_CA_CLIENT_HOME}/msp/config.yaml ${FABRIC_CA_CLIENT_HOME}/users/Admin@${DOMAIN}/msp/config.yaml;']
      restartPolicy: Never
  backoffLimit: 4
