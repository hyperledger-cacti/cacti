/*
 * Copyright IBM Corp. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

package com.cordaSimpleApplication.contract

import com.cordaSimpleApplication.state.AssetState
import net.corda.core.contracts.CommandData
import net.corda.core.contracts.Contract
import net.corda.core.contracts.requireSingleCommand
import net.corda.core.contracts.requireThat
import net.corda.core.transactions.LedgerTransaction

/**
 * An implementation of a sample asset in Corda.
 *
 * This contract enforces rules regarding the creation of a valid [AssetState], and operations on [AssetState].
 *
 * For a new [AssetState] to be issued onto the ledger, a transaction is required which takes:
 * - Zero input states.
 * - One output state: the new [AssetState].
 * - An Create() command with the public keys of the owner of the asset.
 *
 */
class AssetContract : Contract {
    companion object {
        @JvmStatic
        val ID = "com.cordaSimpleApplication.contract.AssetContract"
    }

    /**
     * The verify() function of all the states' contracts must not throw an exception for a transaction to be
     * considered valid.
     */
    override fun verify(tx: LedgerTransaction) {
        val command = tx.commands.requireSingleCommand<AssetContract.Commands>()
        when (command.value) {
            is AssetContract.Commands.Issue -> requireThat {
                // Generic constraints around the fungible token asset issuance transaction.
                "No inputs should be consumed when issuing an asset." using (tx.inputsOfType<AssetState>().isEmpty())
                "Only one output state should be created." using (tx.outputsOfType<AssetState>().size == 1)
                val outputState = tx.outputsOfType<AssetState>().single()
                val requiredSigners = outputState.participants.map { it.owningKey }
                "The participants must be the signers." using (command.signers.containsAll(requiredSigners))
            }
            is AssetContract.Commands.Delete -> requireThat {
                // Generic constraints around the asset deletion transaction
                "Only one input state should be consumed with deletion of an asset." using (tx.inputsOfType<AssetState>().size == 1)
                "No output state should be created." using (tx.outputsOfType<AssetState>().isEmpty())
                val inputState = tx.inputsOfType<AssetState>()[0]
                val requiredSigners = listOf(inputState.owner.owningKey)
                "The asset owner must be the signer." using (command.signers.containsAll(requiredSigners))
            }
            is AssetContract.Commands.Merge -> requireThat {
                // Generic constraints around the transaction that merges two asset states into one
                "Two input states should be consumed for merging." using (tx.inputsOfType<AssetState>().size == 2)
                val inputState1 = tx.inputsOfType<AssetState>()[0]
                val inputState2 = tx.inputsOfType<AssetState>()[1]
                "Both assets to be merged should belong to the same owner." using (inputState1.owner == inputState2.owner)
                "Both assets to be merged should be of same token type." using (inputState1.tokenType == inputState2.tokenType)
                "Only one output state should be created." using (tx.outputsOfType<AssetState>().size == 1)
                val mergedState = tx.outputsOfType<AssetState>().single()
                val requiredSigners = mergedState.participants.map { it.owningKey }
                "The participants must be the signers." using (command.signers.containsAll(requiredSigners))
                "The output state should belong to the same owner as the input states." using (inputState1.owner == mergedState.owner)
                "The number of fungible asset tokens before and after merge should be same." using (inputState1.quantity + inputState2.quantity == mergedState.quantity)
                "The merged asset token type should be same as the input asset token type." using (inputState1.tokenType == mergedState.tokenType)
            }
            is AssetContract.Commands.Split -> requireThat {
                // Generic constraints around the transaction that splits an asset state into two asset states
                "One input state should be consumed for splitting." using (tx.inputsOfType<AssetState>().size == 1)
                val splitState = tx.inputsOfType<AssetState>()[0]
                "Two output states should be created." using (tx.outputsOfType<AssetState>().size == 2)
                val outputState1 = tx.outputsOfType<AssetState>()[0]
                val outputState2 = tx.outputsOfType<AssetState>()[1]
                "Both assets generated by split should belong to the same owner." using (outputState1.owner == outputState2.owner)
                "Both assets generated by split should of the same token type." using (outputState1.tokenType == outputState2.tokenType)
                val requiredSigners = outputState1.participants.map { it.owningKey }
                "The participants must be the signers." using (command.signers.containsAll(requiredSigners))
                "The output states should belong to the same owner as the input states." using (splitState.owner == outputState1.owner)
                "The number of fungible asset tokens before and after split should be same." using (splitState.quantity == outputState1.quantity + outputState2.quantity)
                "The asset token type to be split should be same as the output assets' token type." using (splitState.tokenType == outputState1.tokenType)
            }
            is AssetContract.Commands.Transfer -> requireThat {
                // Generic constraints around the transaction that transfers ownership of an asset from one Party to other Party
                "One input state should be consumed for transferring." using (tx.inputsOfType<AssetState>().size == 1)
                val inputState = tx.inputsOfType<AssetState>()[0]
                "One output state only should be created." using (tx.outputsOfType<AssetState>().size == 1)
                val outputState = tx.outputsOfType<AssetState>()[0]
                "The input and output states part of the transfer should have the same quantity." using (inputState.quantity == outputState.quantity)
                "The input and output states part of the transfer should be of same token type." using (inputState.tokenType == outputState.tokenType)
                "The input and output states part of the transfer should not belong to the same owner." using (inputState.owner != outputState.owner)
                val requiredSigners = listOf(inputState.owner.owningKey, outputState.owner.owningKey)
                "The owners of the input and output assets must be the signers." using (command.signers.containsAll(requiredSigners))
            }
        }
    }

    /**
     * This contract implements the commands: Issue, Delete, Merge, Split and Transfer.
     */
    interface Commands : CommandData {
        class Issue : Commands
        class Delete : Commands
        class Merge : Commands
        class Split : Commands
        class Transfer : Commands

        // Flow that will read the total fungible token assets of a given type
    }
}
