import static org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_17
import static org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9

buildscript {
    ext.coroutines_version = "1.8.1"
    ext.protobuf_version = "3.25.3"
    ext.grpc_version = "1.65.0" // CURRENT_GRPC_VERSION
    ext.grpc_kotlin_version = "1.4.1" // CURRENT_GRPC_KOTLIN_VERSION
    ext.kotlin_version = "1.9.23"
    
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    }

}

plugins {
    id "maven-publish"
    id 'java'
    id 'com.google.protobuf' version '0.9.4'
    id 'idea'
}

repositories {
	mavenLocal()
	mavenCentral()
	maven { url 'https://repo1.maven.org/maven2' }
	maven { url 'https://jitpack.io' }
}

apply plugin: 'kotlin'

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    compilerOptions {
        languageVersion = KOTLIN_1_9
        apiVersion = KOTLIN_1_9
        jvmTarget = JVM_17
        javaParameters = true   // Useful for reflection.
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

compileJava {
    options.compilerArgs << '-parameters'
}

jar {
    // This makes the JAR's SHA-256 hash repeatable.
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

sourceSets {
  main {
    proto {
      // In addition to the default "src/main/proto"
	  srcDir "../fabric-protos"
	  srcDir "../protos"
    }
  }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "io.grpc:grpc-kotlin-stub:$grpc_kotlin_version"
    implementation "com.google.protobuf:protobuf-java:$protobuf_version"
    implementation "com.google.protobuf:protobuf-java-util:$protobuf_version"
    implementation "io.grpc:grpc-netty-shaded:$grpc_version"
    implementation "io.grpc:grpc-protobuf:$grpc_version"
    implementation "io.grpc:grpc-stub:$grpc_version"
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53' // necessary for Java 9+

}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:$protobuf_version" }
    plugins {
        // Specify protoc to generate using kotlin protobuf plugin
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$grpc_version"
        }
        // Specify protoc to generate using our grpc kotlin plugin
        grpckt {
            artifact = "io.grpc:protoc-gen-grpc-kotlin:$grpc_kotlin_version:jdk8@jar"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                // Generate Java gRPC classes
                grpc { }
                // Generate Kotlin gRPC using the custom plugin from library
                grpckt { }
            }
        }
    }
}

publishing {
    Properties constants = new Properties()
    
    // Handling if github.properties is not specified
    def styler = 'black red green yellow blue magenta cyan white'
            .split().toList().withIndex(30)
            .collectEntries { key, val -> [(key) : { "\033[${val}m${it}\033[0m" }] }
    if (file("$projectDir/./github.properties").exists()) {
        file("$projectDir/./github.properties").withInputStream { constants.load(it) }
    }
    else {
        println "${styler['red']('Warning')}: Publish won't work. Please use github.properties.template to create github.properties"
    }
    
    publications {
        protos(MavenPublication) {
			groupId = project.properties['group']
			artifactId = 'protos-java-kt'
			version = project.properties['version']
			from components.java
        }
    }
	repositories {
		maven {
			url constants.url
			credentials {
				username constants.username
				password constants.password
			}
		}
	}
}
