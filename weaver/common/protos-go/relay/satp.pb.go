// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.4
// source: relay/satp.proto

package relay

import (
	common "github.com/hyperledger/cacti/weaver/common/protos-go/v2/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransferProposalClaimsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageType                 string `protobuf:"bytes,1,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	AssetAssetId                string `protobuf:"bytes,2,opt,name=asset_asset_id,json=assetAssetId,proto3" json:"asset_asset_id,omitempty"`
	AssetProfileId              string `protobuf:"bytes,3,opt,name=asset_profile_id,json=assetProfileId,proto3" json:"asset_profile_id,omitempty"`
	VerifiedOriginatorEntityId  string `protobuf:"bytes,4,opt,name=verified_originator_entity_id,json=verifiedOriginatorEntityId,proto3" json:"verified_originator_entity_id,omitempty"`
	VerifiedBeneficiaryEntityId string `protobuf:"bytes,5,opt,name=verified_beneficiary_entity_id,json=verifiedBeneficiaryEntityId,proto3" json:"verified_beneficiary_entity_id,omitempty"`
	OriginatorPubkey            string `protobuf:"bytes,6,opt,name=originator_pubkey,json=originatorPubkey,proto3" json:"originator_pubkey,omitempty"`
	BeneficiaryPubkey           string `protobuf:"bytes,7,opt,name=beneficiary_pubkey,json=beneficiaryPubkey,proto3" json:"beneficiary_pubkey,omitempty"`
	SenderGatewayNetworkId      string `protobuf:"bytes,8,opt,name=sender_gateway_network_id,json=senderGatewayNetworkId,proto3" json:"sender_gateway_network_id,omitempty"`
	RecipientGatewayNetworkId   string `protobuf:"bytes,9,opt,name=recipient_gateway_network_id,json=recipientGatewayNetworkId,proto3" json:"recipient_gateway_network_id,omitempty"`
	ClientIdentityPubkey        string `protobuf:"bytes,10,opt,name=client_identity_pubkey,json=clientIdentityPubkey,proto3" json:"client_identity_pubkey,omitempty"`
	ServerIdentityPubkey        string `protobuf:"bytes,11,opt,name=server_identity_pubkey,json=serverIdentityPubkey,proto3" json:"server_identity_pubkey,omitempty"`
	SenderGatewayOwnerId        string `protobuf:"bytes,12,opt,name=sender_gateway_owner_id,json=senderGatewayOwnerId,proto3" json:"sender_gateway_owner_id,omitempty"`
	ReceiverGatewayOwnerId      string `protobuf:"bytes,13,opt,name=receiver_gateway_owner_id,json=receiverGatewayOwnerId,proto3" json:"receiver_gateway_owner_id,omitempty"`
}

func (x *TransferProposalClaimsRequest) Reset() {
	*x = TransferProposalClaimsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_satp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferProposalClaimsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferProposalClaimsRequest) ProtoMessage() {}

func (x *TransferProposalClaimsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relay_satp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferProposalClaimsRequest.ProtoReflect.Descriptor instead.
func (*TransferProposalClaimsRequest) Descriptor() ([]byte, []int) {
	return file_relay_satp_proto_rawDescGZIP(), []int{0}
}

func (x *TransferProposalClaimsRequest) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *TransferProposalClaimsRequest) GetAssetAssetId() string {
	if x != nil {
		return x.AssetAssetId
	}
	return ""
}

func (x *TransferProposalClaimsRequest) GetAssetProfileId() string {
	if x != nil {
		return x.AssetProfileId
	}
	return ""
}

func (x *TransferProposalClaimsRequest) GetVerifiedOriginatorEntityId() string {
	if x != nil {
		return x.VerifiedOriginatorEntityId
	}
	return ""
}

func (x *TransferProposalClaimsRequest) GetVerifiedBeneficiaryEntityId() string {
	if x != nil {
		return x.VerifiedBeneficiaryEntityId
	}
	return ""
}

func (x *TransferProposalClaimsRequest) GetOriginatorPubkey() string {
	if x != nil {
		return x.OriginatorPubkey
	}
	return ""
}

func (x *TransferProposalClaimsRequest) GetBeneficiaryPubkey() string {
	if x != nil {
		return x.BeneficiaryPubkey
	}
	return ""
}

func (x *TransferProposalClaimsRequest) GetSenderGatewayNetworkId() string {
	if x != nil {
		return x.SenderGatewayNetworkId
	}
	return ""
}

func (x *TransferProposalClaimsRequest) GetRecipientGatewayNetworkId() string {
	if x != nil {
		return x.RecipientGatewayNetworkId
	}
	return ""
}

func (x *TransferProposalClaimsRequest) GetClientIdentityPubkey() string {
	if x != nil {
		return x.ClientIdentityPubkey
	}
	return ""
}

func (x *TransferProposalClaimsRequest) GetServerIdentityPubkey() string {
	if x != nil {
		return x.ServerIdentityPubkey
	}
	return ""
}

func (x *TransferProposalClaimsRequest) GetSenderGatewayOwnerId() string {
	if x != nil {
		return x.SenderGatewayOwnerId
	}
	return ""
}

func (x *TransferProposalClaimsRequest) GetReceiverGatewayOwnerId() string {
	if x != nil {
		return x.ReceiverGatewayOwnerId
	}
	return ""
}

type TransferProposalReceiptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageType                 string `protobuf:"bytes,1,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	AssetAssetId                string `protobuf:"bytes,2,opt,name=asset_asset_id,json=assetAssetId,proto3" json:"asset_asset_id,omitempty"`
	AssetProfileId              string `protobuf:"bytes,3,opt,name=asset_profile_id,json=assetProfileId,proto3" json:"asset_profile_id,omitempty"`
	VerifiedOriginatorEntityId  string `protobuf:"bytes,4,opt,name=verified_originator_entity_id,json=verifiedOriginatorEntityId,proto3" json:"verified_originator_entity_id,omitempty"`
	VerifiedBeneficiaryEntityId string `protobuf:"bytes,5,opt,name=verified_beneficiary_entity_id,json=verifiedBeneficiaryEntityId,proto3" json:"verified_beneficiary_entity_id,omitempty"`
	OriginatorPubkey            string `protobuf:"bytes,6,opt,name=originator_pubkey,json=originatorPubkey,proto3" json:"originator_pubkey,omitempty"`
	BeneficiaryPubkey           string `protobuf:"bytes,7,opt,name=beneficiary_pubkey,json=beneficiaryPubkey,proto3" json:"beneficiary_pubkey,omitempty"`
	SenderGatewayNetworkId      string `protobuf:"bytes,8,opt,name=sender_gateway_network_id,json=senderGatewayNetworkId,proto3" json:"sender_gateway_network_id,omitempty"`
	RecipientGatewayNetworkId   string `protobuf:"bytes,9,opt,name=recipient_gateway_network_id,json=recipientGatewayNetworkId,proto3" json:"recipient_gateway_network_id,omitempty"`
	ClientIdentityPubkey        string `protobuf:"bytes,10,opt,name=client_identity_pubkey,json=clientIdentityPubkey,proto3" json:"client_identity_pubkey,omitempty"`
	ServerIdentityPubkey        string `protobuf:"bytes,11,opt,name=server_identity_pubkey,json=serverIdentityPubkey,proto3" json:"server_identity_pubkey,omitempty"`
	SenderGatewayOwnerId        string `protobuf:"bytes,12,opt,name=sender_gateway_owner_id,json=senderGatewayOwnerId,proto3" json:"sender_gateway_owner_id,omitempty"`
	ReceiverGatewayOwnerId      string `protobuf:"bytes,13,opt,name=receiver_gateway_owner_id,json=receiverGatewayOwnerId,proto3" json:"receiver_gateway_owner_id,omitempty"`
}

func (x *TransferProposalReceiptRequest) Reset() {
	*x = TransferProposalReceiptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_satp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferProposalReceiptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferProposalReceiptRequest) ProtoMessage() {}

func (x *TransferProposalReceiptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relay_satp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferProposalReceiptRequest.ProtoReflect.Descriptor instead.
func (*TransferProposalReceiptRequest) Descriptor() ([]byte, []int) {
	return file_relay_satp_proto_rawDescGZIP(), []int{1}
}

func (x *TransferProposalReceiptRequest) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *TransferProposalReceiptRequest) GetAssetAssetId() string {
	if x != nil {
		return x.AssetAssetId
	}
	return ""
}

func (x *TransferProposalReceiptRequest) GetAssetProfileId() string {
	if x != nil {
		return x.AssetProfileId
	}
	return ""
}

func (x *TransferProposalReceiptRequest) GetVerifiedOriginatorEntityId() string {
	if x != nil {
		return x.VerifiedOriginatorEntityId
	}
	return ""
}

func (x *TransferProposalReceiptRequest) GetVerifiedBeneficiaryEntityId() string {
	if x != nil {
		return x.VerifiedBeneficiaryEntityId
	}
	return ""
}

func (x *TransferProposalReceiptRequest) GetOriginatorPubkey() string {
	if x != nil {
		return x.OriginatorPubkey
	}
	return ""
}

func (x *TransferProposalReceiptRequest) GetBeneficiaryPubkey() string {
	if x != nil {
		return x.BeneficiaryPubkey
	}
	return ""
}

func (x *TransferProposalReceiptRequest) GetSenderGatewayNetworkId() string {
	if x != nil {
		return x.SenderGatewayNetworkId
	}
	return ""
}

func (x *TransferProposalReceiptRequest) GetRecipientGatewayNetworkId() string {
	if x != nil {
		return x.RecipientGatewayNetworkId
	}
	return ""
}

func (x *TransferProposalReceiptRequest) GetClientIdentityPubkey() string {
	if x != nil {
		return x.ClientIdentityPubkey
	}
	return ""
}

func (x *TransferProposalReceiptRequest) GetServerIdentityPubkey() string {
	if x != nil {
		return x.ServerIdentityPubkey
	}
	return ""
}

func (x *TransferProposalReceiptRequest) GetSenderGatewayOwnerId() string {
	if x != nil {
		return x.SenderGatewayOwnerId
	}
	return ""
}

func (x *TransferProposalReceiptRequest) GetReceiverGatewayOwnerId() string {
	if x != nil {
		return x.ReceiverGatewayOwnerId
	}
	return ""
}

type TransferCommenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageType            string `protobuf:"bytes,1,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	SessionId              string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TransferContextId      string `protobuf:"bytes,3,opt,name=transfer_context_id,json=transferContextId,proto3" json:"transfer_context_id,omitempty"`
	ClientIdentityPubkey   string `protobuf:"bytes,4,opt,name=client_identity_pubkey,json=clientIdentityPubkey,proto3" json:"client_identity_pubkey,omitempty"`
	ServerIdentityPubkey   string `protobuf:"bytes,5,opt,name=server_identity_pubkey,json=serverIdentityPubkey,proto3" json:"server_identity_pubkey,omitempty"`
	HashTransferInitClaims string `protobuf:"bytes,6,opt,name=hash_transfer_init_claims,json=hashTransferInitClaims,proto3" json:"hash_transfer_init_claims,omitempty"`
	HashPrevMessage        string `protobuf:"bytes,7,opt,name=hash_prev_message,json=hashPrevMessage,proto3" json:"hash_prev_message,omitempty"`
	ClientTransferNumber   string `protobuf:"bytes,8,opt,name=client_transfer_number,json=clientTransferNumber,proto3" json:"client_transfer_number,omitempty"`
	ClientSignature        string `protobuf:"bytes,9,opt,name=client_signature,json=clientSignature,proto3" json:"client_signature,omitempty"`
}

func (x *TransferCommenceRequest) Reset() {
	*x = TransferCommenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_satp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferCommenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferCommenceRequest) ProtoMessage() {}

func (x *TransferCommenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relay_satp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferCommenceRequest.ProtoReflect.Descriptor instead.
func (*TransferCommenceRequest) Descriptor() ([]byte, []int) {
	return file_relay_satp_proto_rawDescGZIP(), []int{2}
}

func (x *TransferCommenceRequest) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *TransferCommenceRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *TransferCommenceRequest) GetTransferContextId() string {
	if x != nil {
		return x.TransferContextId
	}
	return ""
}

func (x *TransferCommenceRequest) GetClientIdentityPubkey() string {
	if x != nil {
		return x.ClientIdentityPubkey
	}
	return ""
}

func (x *TransferCommenceRequest) GetServerIdentityPubkey() string {
	if x != nil {
		return x.ServerIdentityPubkey
	}
	return ""
}

func (x *TransferCommenceRequest) GetHashTransferInitClaims() string {
	if x != nil {
		return x.HashTransferInitClaims
	}
	return ""
}

func (x *TransferCommenceRequest) GetHashPrevMessage() string {
	if x != nil {
		return x.HashPrevMessage
	}
	return ""
}

func (x *TransferCommenceRequest) GetClientTransferNumber() string {
	if x != nil {
		return x.ClientTransferNumber
	}
	return ""
}

func (x *TransferCommenceRequest) GetClientSignature() string {
	if x != nil {
		return x.ClientSignature
	}
	return ""
}

type AckCommenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageType          string `protobuf:"bytes,1,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	SessionId            string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TransferContextId    string `protobuf:"bytes,3,opt,name=transfer_context_id,json=transferContextId,proto3" json:"transfer_context_id,omitempty"`
	ClientIdentityPubkey string `protobuf:"bytes,4,opt,name=client_identity_pubkey,json=clientIdentityPubkey,proto3" json:"client_identity_pubkey,omitempty"`
	ServerIdentityPubkey string `protobuf:"bytes,5,opt,name=server_identity_pubkey,json=serverIdentityPubkey,proto3" json:"server_identity_pubkey,omitempty"`
	HashPrevMessage      string `protobuf:"bytes,6,opt,name=hash_prev_message,json=hashPrevMessage,proto3" json:"hash_prev_message,omitempty"`
	ServerTransferNumber string `protobuf:"bytes,7,opt,name=server_transfer_number,json=serverTransferNumber,proto3" json:"server_transfer_number,omitempty"`
	ServerSignature      string `protobuf:"bytes,8,opt,name=server_signature,json=serverSignature,proto3" json:"server_signature,omitempty"`
}

func (x *AckCommenceRequest) Reset() {
	*x = AckCommenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_satp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckCommenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckCommenceRequest) ProtoMessage() {}

func (x *AckCommenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relay_satp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckCommenceRequest.ProtoReflect.Descriptor instead.
func (*AckCommenceRequest) Descriptor() ([]byte, []int) {
	return file_relay_satp_proto_rawDescGZIP(), []int{3}
}

func (x *AckCommenceRequest) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *AckCommenceRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *AckCommenceRequest) GetTransferContextId() string {
	if x != nil {
		return x.TransferContextId
	}
	return ""
}

func (x *AckCommenceRequest) GetClientIdentityPubkey() string {
	if x != nil {
		return x.ClientIdentityPubkey
	}
	return ""
}

func (x *AckCommenceRequest) GetServerIdentityPubkey() string {
	if x != nil {
		return x.ServerIdentityPubkey
	}
	return ""
}

func (x *AckCommenceRequest) GetHashPrevMessage() string {
	if x != nil {
		return x.HashPrevMessage
	}
	return ""
}

func (x *AckCommenceRequest) GetServerTransferNumber() string {
	if x != nil {
		return x.ServerTransferNumber
	}
	return ""
}

func (x *AckCommenceRequest) GetServerSignature() string {
	if x != nil {
		return x.ServerSignature
	}
	return ""
}

type SendAssetStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageType          string `protobuf:"bytes,1,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	SessionId            string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TransferContextId    string `protobuf:"bytes,3,opt,name=transfer_context_id,json=transferContextId,proto3" json:"transfer_context_id,omitempty"`
	ClientIdentityPubkey string `protobuf:"bytes,4,opt,name=client_identity_pubkey,json=clientIdentityPubkey,proto3" json:"client_identity_pubkey,omitempty"`
	ServerIdentityPubkey string `protobuf:"bytes,5,opt,name=server_identity_pubkey,json=serverIdentityPubkey,proto3" json:"server_identity_pubkey,omitempty"`
	HashPrevMessage      string `protobuf:"bytes,6,opt,name=hash_prev_message,json=hashPrevMessage,proto3" json:"hash_prev_message,omitempty"`
	ServerTransferNumber string `protobuf:"bytes,7,opt,name=server_transfer_number,json=serverTransferNumber,proto3" json:"server_transfer_number,omitempty"`
	ServerSignature      string `protobuf:"bytes,8,opt,name=server_signature,json=serverSignature,proto3" json:"server_signature,omitempty"`
	Status               string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SendAssetStatusRequest) Reset() {
	*x = SendAssetStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_satp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendAssetStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAssetStatusRequest) ProtoMessage() {}

func (x *SendAssetStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relay_satp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAssetStatusRequest.ProtoReflect.Descriptor instead.
func (*SendAssetStatusRequest) Descriptor() ([]byte, []int) {
	return file_relay_satp_proto_rawDescGZIP(), []int{4}
}

func (x *SendAssetStatusRequest) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *SendAssetStatusRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SendAssetStatusRequest) GetTransferContextId() string {
	if x != nil {
		return x.TransferContextId
	}
	return ""
}

func (x *SendAssetStatusRequest) GetClientIdentityPubkey() string {
	if x != nil {
		return x.ClientIdentityPubkey
	}
	return ""
}

func (x *SendAssetStatusRequest) GetServerIdentityPubkey() string {
	if x != nil {
		return x.ServerIdentityPubkey
	}
	return ""
}

func (x *SendAssetStatusRequest) GetHashPrevMessage() string {
	if x != nil {
		return x.HashPrevMessage
	}
	return ""
}

func (x *SendAssetStatusRequest) GetServerTransferNumber() string {
	if x != nil {
		return x.ServerTransferNumber
	}
	return ""
}

func (x *SendAssetStatusRequest) GetServerSignature() string {
	if x != nil {
		return x.ServerSignature
	}
	return ""
}

func (x *SendAssetStatusRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type LockAssertionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageType              string `protobuf:"bytes,1,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	SessionId                string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TransferContextId        string `protobuf:"bytes,3,opt,name=transfer_context_id,json=transferContextId,proto3" json:"transfer_context_id,omitempty"`
	ClientIdentityPubkey     string `protobuf:"bytes,4,opt,name=client_identity_pubkey,json=clientIdentityPubkey,proto3" json:"client_identity_pubkey,omitempty"`
	ServerIdentityPubkey     string `protobuf:"bytes,5,opt,name=server_identity_pubkey,json=serverIdentityPubkey,proto3" json:"server_identity_pubkey,omitempty"`
	LockAssertionClaim       string `protobuf:"bytes,6,opt,name=lock_assertion_claim,json=lockAssertionClaim,proto3" json:"lock_assertion_claim,omitempty"`
	LockAssertionClaimFormat string `protobuf:"bytes,7,opt,name=lock_assertion_claim_format,json=lockAssertionClaimFormat,proto3" json:"lock_assertion_claim_format,omitempty"`
	LockAssertionExpiration  string `protobuf:"bytes,8,opt,name=lock_assertion_expiration,json=lockAssertionExpiration,proto3" json:"lock_assertion_expiration,omitempty"`
	HashPrevMessage          string `protobuf:"bytes,9,opt,name=hash_prev_message,json=hashPrevMessage,proto3" json:"hash_prev_message,omitempty"`
	ClientTransferNumber     string `protobuf:"bytes,10,opt,name=client_transfer_number,json=clientTransferNumber,proto3" json:"client_transfer_number,omitempty"`
	ClientSignature          string `protobuf:"bytes,11,opt,name=client_signature,json=clientSignature,proto3" json:"client_signature,omitempty"`
}

func (x *LockAssertionRequest) Reset() {
	*x = LockAssertionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_satp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockAssertionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockAssertionRequest) ProtoMessage() {}

func (x *LockAssertionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relay_satp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockAssertionRequest.ProtoReflect.Descriptor instead.
func (*LockAssertionRequest) Descriptor() ([]byte, []int) {
	return file_relay_satp_proto_rawDescGZIP(), []int{5}
}

func (x *LockAssertionRequest) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *LockAssertionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *LockAssertionRequest) GetTransferContextId() string {
	if x != nil {
		return x.TransferContextId
	}
	return ""
}

func (x *LockAssertionRequest) GetClientIdentityPubkey() string {
	if x != nil {
		return x.ClientIdentityPubkey
	}
	return ""
}

func (x *LockAssertionRequest) GetServerIdentityPubkey() string {
	if x != nil {
		return x.ServerIdentityPubkey
	}
	return ""
}

func (x *LockAssertionRequest) GetLockAssertionClaim() string {
	if x != nil {
		return x.LockAssertionClaim
	}
	return ""
}

func (x *LockAssertionRequest) GetLockAssertionClaimFormat() string {
	if x != nil {
		return x.LockAssertionClaimFormat
	}
	return ""
}

func (x *LockAssertionRequest) GetLockAssertionExpiration() string {
	if x != nil {
		return x.LockAssertionExpiration
	}
	return ""
}

func (x *LockAssertionRequest) GetHashPrevMessage() string {
	if x != nil {
		return x.HashPrevMessage
	}
	return ""
}

func (x *LockAssertionRequest) GetClientTransferNumber() string {
	if x != nil {
		return x.ClientTransferNumber
	}
	return ""
}

func (x *LockAssertionRequest) GetClientSignature() string {
	if x != nil {
		return x.ClientSignature
	}
	return ""
}

type LockAssertionReceiptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageType          string `protobuf:"bytes,1,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	SessionId            string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TransferContextId    string `protobuf:"bytes,3,opt,name=transfer_context_id,json=transferContextId,proto3" json:"transfer_context_id,omitempty"`
	ClientIdentityPubkey string `protobuf:"bytes,4,opt,name=client_identity_pubkey,json=clientIdentityPubkey,proto3" json:"client_identity_pubkey,omitempty"`
	ServerIdentityPubkey string `protobuf:"bytes,5,opt,name=server_identity_pubkey,json=serverIdentityPubkey,proto3" json:"server_identity_pubkey,omitempty"`
	HashPrevMessage      string `protobuf:"bytes,6,opt,name=hash_prev_message,json=hashPrevMessage,proto3" json:"hash_prev_message,omitempty"`
	ServerTransferNumber string `protobuf:"bytes,7,opt,name=server_transfer_number,json=serverTransferNumber,proto3" json:"server_transfer_number,omitempty"`
	ServerSignature      string `protobuf:"bytes,8,opt,name=server_signature,json=serverSignature,proto3" json:"server_signature,omitempty"`
}

func (x *LockAssertionReceiptRequest) Reset() {
	*x = LockAssertionReceiptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_satp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockAssertionReceiptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockAssertionReceiptRequest) ProtoMessage() {}

func (x *LockAssertionReceiptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relay_satp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockAssertionReceiptRequest.ProtoReflect.Descriptor instead.
func (*LockAssertionReceiptRequest) Descriptor() ([]byte, []int) {
	return file_relay_satp_proto_rawDescGZIP(), []int{6}
}

func (x *LockAssertionReceiptRequest) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *LockAssertionReceiptRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *LockAssertionReceiptRequest) GetTransferContextId() string {
	if x != nil {
		return x.TransferContextId
	}
	return ""
}

func (x *LockAssertionReceiptRequest) GetClientIdentityPubkey() string {
	if x != nil {
		return x.ClientIdentityPubkey
	}
	return ""
}

func (x *LockAssertionReceiptRequest) GetServerIdentityPubkey() string {
	if x != nil {
		return x.ServerIdentityPubkey
	}
	return ""
}

func (x *LockAssertionReceiptRequest) GetHashPrevMessage() string {
	if x != nil {
		return x.HashPrevMessage
	}
	return ""
}

func (x *LockAssertionReceiptRequest) GetServerTransferNumber() string {
	if x != nil {
		return x.ServerTransferNumber
	}
	return ""
}

func (x *LockAssertionReceiptRequest) GetServerSignature() string {
	if x != nil {
		return x.ServerSignature
	}
	return ""
}

type CommitPrepareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageType       string `protobuf:"bytes,1,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	SessionId         string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TransferContextId string `protobuf:"bytes,3,opt,name=transfer_context_id,json=transferContextId,proto3" json:"transfer_context_id,omitempty"`
}

func (x *CommitPrepareRequest) Reset() {
	*x = CommitPrepareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_satp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitPrepareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitPrepareRequest) ProtoMessage() {}

func (x *CommitPrepareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relay_satp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitPrepareRequest.ProtoReflect.Descriptor instead.
func (*CommitPrepareRequest) Descriptor() ([]byte, []int) {
	return file_relay_satp_proto_rawDescGZIP(), []int{7}
}

func (x *CommitPrepareRequest) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *CommitPrepareRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CommitPrepareRequest) GetTransferContextId() string {
	if x != nil {
		return x.TransferContextId
	}
	return ""
}

type CommitReadyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageType       string `protobuf:"bytes,1,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	SessionId         string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TransferContextId string `protobuf:"bytes,3,opt,name=transfer_context_id,json=transferContextId,proto3" json:"transfer_context_id,omitempty"`
}

func (x *CommitReadyRequest) Reset() {
	*x = CommitReadyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_satp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitReadyRequest) ProtoMessage() {}

func (x *CommitReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relay_satp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitReadyRequest.ProtoReflect.Descriptor instead.
func (*CommitReadyRequest) Descriptor() ([]byte, []int) {
	return file_relay_satp_proto_rawDescGZIP(), []int{8}
}

func (x *CommitReadyRequest) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *CommitReadyRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CommitReadyRequest) GetTransferContextId() string {
	if x != nil {
		return x.TransferContextId
	}
	return ""
}

type CommitFinalAssertionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageType       string `protobuf:"bytes,1,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	SessionId         string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TransferContextId string `protobuf:"bytes,3,opt,name=transfer_context_id,json=transferContextId,proto3" json:"transfer_context_id,omitempty"`
}

func (x *CommitFinalAssertionRequest) Reset() {
	*x = CommitFinalAssertionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_satp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitFinalAssertionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitFinalAssertionRequest) ProtoMessage() {}

func (x *CommitFinalAssertionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relay_satp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitFinalAssertionRequest.ProtoReflect.Descriptor instead.
func (*CommitFinalAssertionRequest) Descriptor() ([]byte, []int) {
	return file_relay_satp_proto_rawDescGZIP(), []int{9}
}

func (x *CommitFinalAssertionRequest) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *CommitFinalAssertionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CommitFinalAssertionRequest) GetTransferContextId() string {
	if x != nil {
		return x.TransferContextId
	}
	return ""
}

type AckFinalReceiptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageType       string `protobuf:"bytes,1,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	SessionId         string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TransferContextId string `protobuf:"bytes,3,opt,name=transfer_context_id,json=transferContextId,proto3" json:"transfer_context_id,omitempty"`
}

func (x *AckFinalReceiptRequest) Reset() {
	*x = AckFinalReceiptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_satp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckFinalReceiptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckFinalReceiptRequest) ProtoMessage() {}

func (x *AckFinalReceiptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relay_satp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckFinalReceiptRequest.ProtoReflect.Descriptor instead.
func (*AckFinalReceiptRequest) Descriptor() ([]byte, []int) {
	return file_relay_satp_proto_rawDescGZIP(), []int{10}
}

func (x *AckFinalReceiptRequest) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *AckFinalReceiptRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *AckFinalReceiptRequest) GetTransferContextId() string {
	if x != nil {
		return x.TransferContextId
	}
	return ""
}

type TransferCompletedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageType       string `protobuf:"bytes,1,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	SessionId         string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TransferContextId string `protobuf:"bytes,3,opt,name=transfer_context_id,json=transferContextId,proto3" json:"transfer_context_id,omitempty"`
}

func (x *TransferCompletedRequest) Reset() {
	*x = TransferCompletedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_relay_satp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferCompletedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferCompletedRequest) ProtoMessage() {}

func (x *TransferCompletedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relay_satp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferCompletedRequest.ProtoReflect.Descriptor instead.
func (*TransferCompletedRequest) Descriptor() ([]byte, []int) {
	return file_relay_satp_proto_rawDescGZIP(), []int{11}
}

func (x *TransferCompletedRequest) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *TransferCompletedRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *TransferCompletedRequest) GetTransferContextId() string {
	if x != nil {
		return x.TransferContextId
	}
	return ""
}

var File_relay_satp_proto protoreflect.FileDescriptor

var file_relay_satp_proto_rawDesc = []byte{
	0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2f, 0x73, 0x61, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x73, 0x61, 0x74, 0x70, 0x1a, 0x10,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xd0, 0x05, 0x0a, 0x1d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79,
	0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x62, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x72, 0x79, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xd1, 0x05, 0x0a, 0x1e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x1e,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x2d,
	0x0a, 0x12, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a,
	0x19, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12,
	0x34, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0xbf, 0x03, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x12, 0x39, 0x0a, 0x19, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x68, 0x61, 0x73, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x68, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x68, 0x50, 0x72, 0x65,
	0x76, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xff, 0x02, 0x0a, 0x12, 0x41, 0x63,
	0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x2a,
	0x0a, 0x11, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x68, 0x50,
	0x72, 0x65, 0x76, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x9b, 0x03, 0x0a, 0x16,
	0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x34,
	0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x65,
	0x76, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x68, 0x61, 0x73, 0x68, 0x50, 0x72, 0x65, 0x76, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xae, 0x04, 0x0a, 0x14, 0x4c, 0x6f,
	0x63, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x12, 0x30, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x12, 0x3d, 0x0a, 0x1b, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x73, 0x73,
	0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x3a, 0x0a, 0x19, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x68, 0x50, 0x72,
	0x65, 0x76, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x88, 0x03, 0x0a, 0x1b, 0x4c,
	0x6f, 0x63, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x68,
	0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x68, 0x50, 0x72, 0x65, 0x76, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64,
	0x22, 0x86, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x1b, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x16,
	0x41, 0x63, 0x6b, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x18, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x32, 0x9e, 0x07, 0x0a, 0x04, 0x53, 0x41, 0x54, 0x50,
	0x12, 0x56, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x29, 0x2e, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x2e, 0x73, 0x61, 0x74, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61,
	0x63, 0x6b, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x12, 0x2a, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x73, 0x61, 0x74, 0x70,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x63, 0x6b, 0x2e, 0x41, 0x63, 0x6b,
	0x22, 0x00, 0x12, 0x4a, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x73,
	0x61, 0x74, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x63, 0x6b, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x40,
	0x0a, 0x0b, 0x41, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x2e,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x73, 0x61, 0x74, 0x70, 0x2e, 0x41, 0x63, 0x6b, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x63, 0x6b, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00,
	0x12, 0x48, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x22, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x73, 0x61, 0x74, 0x70,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x61, 0x63, 0x6b, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0d, 0x4c, 0x6f,
	0x63, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x2e, 0x73, 0x61, 0x74, 0x70, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x41, 0x73, 0x73,
	0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x63, 0x6b, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x14, 0x4c, 0x6f, 0x63, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x27, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x2e, 0x73, 0x61, 0x74, 0x70, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x63, 0x6b, 0x2e, 0x41,
	0x63, 0x6b, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x20, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x73, 0x61,
	0x74, 0x70, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x61, 0x63, 0x6b, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0b, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1e, 0x2e, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x2e, 0x73, 0x61, 0x74, 0x70, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x61, 0x63, 0x6b, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x14,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x73, 0x61, 0x74,
	0x70, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x73, 0x73,
	0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x63, 0x6b, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00,
	0x12, 0x48, 0x0a, 0x0f, 0x41, 0x63, 0x6b, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x12, 0x22, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x73, 0x61, 0x74, 0x70,
	0x2e, 0x41, 0x63, 0x6b, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x61, 0x63, 0x6b, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x11, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x24, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x73, 0x61, 0x74, 0x70, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61,
	0x63, 0x6b, 0x2e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x42, 0x77, 0x0a, 0x36, 0x6f, 0x72, 0x67, 0x2e,
	0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x61, 0x63, 0x74,
	0x69, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x63, 0x61, 0x63, 0x74, 0x69,
	0x2f, 0x77, 0x65, 0x61, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_relay_satp_proto_rawDescOnce sync.Once
	file_relay_satp_proto_rawDescData = file_relay_satp_proto_rawDesc
)

func file_relay_satp_proto_rawDescGZIP() []byte {
	file_relay_satp_proto_rawDescOnce.Do(func() {
		file_relay_satp_proto_rawDescData = protoimpl.X.CompressGZIP(file_relay_satp_proto_rawDescData)
	})
	return file_relay_satp_proto_rawDescData
}

var file_relay_satp_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_relay_satp_proto_goTypes = []interface{}{
	(*TransferProposalClaimsRequest)(nil),  // 0: relay.satp.TransferProposalClaimsRequest
	(*TransferProposalReceiptRequest)(nil), // 1: relay.satp.TransferProposalReceiptRequest
	(*TransferCommenceRequest)(nil),        // 2: relay.satp.TransferCommenceRequest
	(*AckCommenceRequest)(nil),             // 3: relay.satp.AckCommenceRequest
	(*SendAssetStatusRequest)(nil),         // 4: relay.satp.SendAssetStatusRequest
	(*LockAssertionRequest)(nil),           // 5: relay.satp.LockAssertionRequest
	(*LockAssertionReceiptRequest)(nil),    // 6: relay.satp.LockAssertionReceiptRequest
	(*CommitPrepareRequest)(nil),           // 7: relay.satp.CommitPrepareRequest
	(*CommitReadyRequest)(nil),             // 8: relay.satp.CommitReadyRequest
	(*CommitFinalAssertionRequest)(nil),    // 9: relay.satp.CommitFinalAssertionRequest
	(*AckFinalReceiptRequest)(nil),         // 10: relay.satp.AckFinalReceiptRequest
	(*TransferCompletedRequest)(nil),       // 11: relay.satp.TransferCompletedRequest
	(*common.Ack)(nil),                     // 12: common.ack.Ack
}
var file_relay_satp_proto_depIdxs = []int32{
	0,  // 0: relay.satp.SATP.TransferProposalClaims:input_type -> relay.satp.TransferProposalClaimsRequest
	1,  // 1: relay.satp.SATP.TransferProposalReceipt:input_type -> relay.satp.TransferProposalReceiptRequest
	2,  // 2: relay.satp.SATP.TransferCommence:input_type -> relay.satp.TransferCommenceRequest
	3,  // 3: relay.satp.SATP.AckCommence:input_type -> relay.satp.AckCommenceRequest
	4,  // 4: relay.satp.SATP.SendAssetStatus:input_type -> relay.satp.SendAssetStatusRequest
	5,  // 5: relay.satp.SATP.LockAssertion:input_type -> relay.satp.LockAssertionRequest
	6,  // 6: relay.satp.SATP.LockAssertionReceipt:input_type -> relay.satp.LockAssertionReceiptRequest
	7,  // 7: relay.satp.SATP.CommitPrepare:input_type -> relay.satp.CommitPrepareRequest
	8,  // 8: relay.satp.SATP.CommitReady:input_type -> relay.satp.CommitReadyRequest
	9,  // 9: relay.satp.SATP.CommitFinalAssertion:input_type -> relay.satp.CommitFinalAssertionRequest
	10, // 10: relay.satp.SATP.AckFinalReceipt:input_type -> relay.satp.AckFinalReceiptRequest
	11, // 11: relay.satp.SATP.TransferCompleted:input_type -> relay.satp.TransferCompletedRequest
	12, // 12: relay.satp.SATP.TransferProposalClaims:output_type -> common.ack.Ack
	12, // 13: relay.satp.SATP.TransferProposalReceipt:output_type -> common.ack.Ack
	12, // 14: relay.satp.SATP.TransferCommence:output_type -> common.ack.Ack
	12, // 15: relay.satp.SATP.AckCommence:output_type -> common.ack.Ack
	12, // 16: relay.satp.SATP.SendAssetStatus:output_type -> common.ack.Ack
	12, // 17: relay.satp.SATP.LockAssertion:output_type -> common.ack.Ack
	12, // 18: relay.satp.SATP.LockAssertionReceipt:output_type -> common.ack.Ack
	12, // 19: relay.satp.SATP.CommitPrepare:output_type -> common.ack.Ack
	12, // 20: relay.satp.SATP.CommitReady:output_type -> common.ack.Ack
	12, // 21: relay.satp.SATP.CommitFinalAssertion:output_type -> common.ack.Ack
	12, // 22: relay.satp.SATP.AckFinalReceipt:output_type -> common.ack.Ack
	12, // 23: relay.satp.SATP.TransferCompleted:output_type -> common.ack.Ack
	12, // [12:24] is the sub-list for method output_type
	0,  // [0:12] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_relay_satp_proto_init() }
func file_relay_satp_proto_init() {
	if File_relay_satp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_relay_satp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferProposalClaimsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_satp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferProposalReceiptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_satp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferCommenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_satp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckCommenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_satp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendAssetStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_satp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockAssertionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_satp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockAssertionReceiptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_satp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitPrepareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_satp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitReadyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_satp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitFinalAssertionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_satp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckFinalReceiptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_relay_satp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferCompletedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_relay_satp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_relay_satp_proto_goTypes,
		DependencyIndexes: file_relay_satp_proto_depIdxs,
		MessageInfos:      file_relay_satp_proto_msgTypes,
	}.Build()
	File_relay_satp_proto = out.File
	file_relay_satp_proto_rawDesc = nil
	file_relay_satp_proto_goTypes = nil
	file_relay_satp_proto_depIdxs = nil
}
