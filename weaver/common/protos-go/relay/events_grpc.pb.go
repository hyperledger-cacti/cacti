// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package relay

import (
	context "context"
	common "github.com/hyperledger-labs/weaver-dlt-interoperability/common/protos-go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventSubscribeClient is the client API for EventSubscribe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventSubscribeClient interface {
	// the dest-relay forwards the request from client as EventSubscription to the src-relay
	SubscribeEvent(ctx context.Context, in *common.EventSubscription, opts ...grpc.CallOption) (*common.Ack, error)
	// Src-relay based upon query (EventSubscription) forwards the same response (Ack)
	// from driver to the dest-relay by calling a new endpoint in dest-relay
	SendSubscriptionStatus(ctx context.Context, in *common.Ack, opts ...grpc.CallOption) (*common.Ack, error)
	// Src-driver status of event subscription (Ack)
	// to the src-relay by calling a new endpoint in src-relay
	SendDriverSubscriptionStatus(ctx context.Context, in *common.Ack, opts ...grpc.CallOption) (*common.Ack, error)
}

type eventSubscribeClient struct {
	cc grpc.ClientConnInterface
}

func NewEventSubscribeClient(cc grpc.ClientConnInterface) EventSubscribeClient {
	return &eventSubscribeClient{cc}
}

func (c *eventSubscribeClient) SubscribeEvent(ctx context.Context, in *common.EventSubscription, opts ...grpc.CallOption) (*common.Ack, error) {
	out := new(common.Ack)
	err := c.cc.Invoke(ctx, "/relay.events.EventSubscribe/SubscribeEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventSubscribeClient) SendSubscriptionStatus(ctx context.Context, in *common.Ack, opts ...grpc.CallOption) (*common.Ack, error) {
	out := new(common.Ack)
	err := c.cc.Invoke(ctx, "/relay.events.EventSubscribe/SendSubscriptionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventSubscribeClient) SendDriverSubscriptionStatus(ctx context.Context, in *common.Ack, opts ...grpc.CallOption) (*common.Ack, error) {
	out := new(common.Ack)
	err := c.cc.Invoke(ctx, "/relay.events.EventSubscribe/SendDriverSubscriptionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventSubscribeServer is the server API for EventSubscribe service.
// All implementations must embed UnimplementedEventSubscribeServer
// for forward compatibility
type EventSubscribeServer interface {
	// the dest-relay forwards the request from client as EventSubscription to the src-relay
	SubscribeEvent(context.Context, *common.EventSubscription) (*common.Ack, error)
	// Src-relay based upon query (EventSubscription) forwards the same response (Ack)
	// from driver to the dest-relay by calling a new endpoint in dest-relay
	SendSubscriptionStatus(context.Context, *common.Ack) (*common.Ack, error)
	// Src-driver status of event subscription (Ack)
	// to the src-relay by calling a new endpoint in src-relay
	SendDriverSubscriptionStatus(context.Context, *common.Ack) (*common.Ack, error)
	mustEmbedUnimplementedEventSubscribeServer()
}

// UnimplementedEventSubscribeServer must be embedded to have forward compatible implementations.
type UnimplementedEventSubscribeServer struct {
}

func (UnimplementedEventSubscribeServer) SubscribeEvent(context.Context, *common.EventSubscription) (*common.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeEvent not implemented")
}
func (UnimplementedEventSubscribeServer) SendSubscriptionStatus(context.Context, *common.Ack) (*common.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSubscriptionStatus not implemented")
}
func (UnimplementedEventSubscribeServer) SendDriverSubscriptionStatus(context.Context, *common.Ack) (*common.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDriverSubscriptionStatus not implemented")
}
func (UnimplementedEventSubscribeServer) mustEmbedUnimplementedEventSubscribeServer() {}

// UnsafeEventSubscribeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventSubscribeServer will
// result in compilation errors.
type UnsafeEventSubscribeServer interface {
	mustEmbedUnimplementedEventSubscribeServer()
}

func RegisterEventSubscribeServer(s grpc.ServiceRegistrar, srv EventSubscribeServer) {
	s.RegisterService(&EventSubscribe_ServiceDesc, srv)
}

func _EventSubscribe_SubscribeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.EventSubscription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventSubscribeServer).SubscribeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.events.EventSubscribe/SubscribeEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventSubscribeServer).SubscribeEvent(ctx, req.(*common.EventSubscription))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventSubscribe_SendSubscriptionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventSubscribeServer).SendSubscriptionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.events.EventSubscribe/SendSubscriptionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventSubscribeServer).SendSubscriptionStatus(ctx, req.(*common.Ack))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventSubscribe_SendDriverSubscriptionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Ack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventSubscribeServer).SendDriverSubscriptionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.events.EventSubscribe/SendDriverSubscriptionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventSubscribeServer).SendDriverSubscriptionStatus(ctx, req.(*common.Ack))
	}
	return interceptor(ctx, in, info, handler)
}

// EventSubscribe_ServiceDesc is the grpc.ServiceDesc for EventSubscribe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventSubscribe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relay.events.EventSubscribe",
	HandlerType: (*EventSubscribeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubscribeEvent",
			Handler:    _EventSubscribe_SubscribeEvent_Handler,
		},
		{
			MethodName: "SendSubscriptionStatus",
			Handler:    _EventSubscribe_SendSubscriptionStatus_Handler,
		},
		{
			MethodName: "SendDriverSubscriptionStatus",
			Handler:    _EventSubscribe_SendDriverSubscriptionStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relay/events.proto",
}

// EventPublishClient is the client API for EventPublish service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventPublishClient interface {
	// src-driver forwards the state as part of event subscription to src-relay
	SendDriverState(ctx context.Context, in *common.ViewPayload, opts ...grpc.CallOption) (*common.Ack, error)
	// src-relay will forward the state as part of event subscription to dest-relay
	SendState(ctx context.Context, in *common.ViewPayload, opts ...grpc.CallOption) (*common.Ack, error)
}

type eventPublishClient struct {
	cc grpc.ClientConnInterface
}

func NewEventPublishClient(cc grpc.ClientConnInterface) EventPublishClient {
	return &eventPublishClient{cc}
}

func (c *eventPublishClient) SendDriverState(ctx context.Context, in *common.ViewPayload, opts ...grpc.CallOption) (*common.Ack, error) {
	out := new(common.Ack)
	err := c.cc.Invoke(ctx, "/relay.events.EventPublish/SendDriverState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventPublishClient) SendState(ctx context.Context, in *common.ViewPayload, opts ...grpc.CallOption) (*common.Ack, error) {
	out := new(common.Ack)
	err := c.cc.Invoke(ctx, "/relay.events.EventPublish/SendState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventPublishServer is the server API for EventPublish service.
// All implementations must embed UnimplementedEventPublishServer
// for forward compatibility
type EventPublishServer interface {
	// src-driver forwards the state as part of event subscription to src-relay
	SendDriverState(context.Context, *common.ViewPayload) (*common.Ack, error)
	// src-relay will forward the state as part of event subscription to dest-relay
	SendState(context.Context, *common.ViewPayload) (*common.Ack, error)
	mustEmbedUnimplementedEventPublishServer()
}

// UnimplementedEventPublishServer must be embedded to have forward compatible implementations.
type UnimplementedEventPublishServer struct {
}

func (UnimplementedEventPublishServer) SendDriverState(context.Context, *common.ViewPayload) (*common.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDriverState not implemented")
}
func (UnimplementedEventPublishServer) SendState(context.Context, *common.ViewPayload) (*common.Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendState not implemented")
}
func (UnimplementedEventPublishServer) mustEmbedUnimplementedEventPublishServer() {}

// UnsafeEventPublishServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventPublishServer will
// result in compilation errors.
type UnsafeEventPublishServer interface {
	mustEmbedUnimplementedEventPublishServer()
}

func RegisterEventPublishServer(s grpc.ServiceRegistrar, srv EventPublishServer) {
	s.RegisterService(&EventPublish_ServiceDesc, srv)
}

func _EventPublish_SendDriverState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ViewPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventPublishServer).SendDriverState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.events.EventPublish/SendDriverState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventPublishServer).SendDriverState(ctx, req.(*common.ViewPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventPublish_SendState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ViewPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventPublishServer).SendState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.events.EventPublish/SendState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventPublishServer).SendState(ctx, req.(*common.ViewPayload))
	}
	return interceptor(ctx, in, info, handler)
}

// EventPublish_ServiceDesc is the grpc.ServiceDesc for EventPublish service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventPublish_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relay.events.EventPublish",
	HandlerType: (*EventPublishServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendDriverState",
			Handler:    _EventPublish_SendDriverState_Handler,
		},
		{
			MethodName: "SendState",
			Handler:    _EventPublish_SendState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relay/events.proto",
}
