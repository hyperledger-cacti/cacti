syntax = "proto3";

package identity.agent;

import "common/ack.proto";

option java_package = "com.weaver.protos.identity.agent";
option go_package = "github.com/hyperledger-labs/weaver-dlt-interoperability/common/protos-go/identity";

// definitions of all messages used in the datatransfer protocol
service IINAgent {
  // user or agent triggers a sync of external/foreign network unit's state
  rpc SyncExternalState(SecurityDomainMemberIdentity) returns (common.ack.Ack) {}
  // Requesting network unit's state from a foreign IIN agent.
  rpc RequestIdentityConfiguration(SecurityDomainMemberIdentityRequest) returns (common.ack.Ack){}
  // Handling network unit's state sent by a foreign IIN agent.
  rpc SendIdentityConfiguration(AttestedMembership) returns (common.ack.Ack){}
  // Requesting attestation from a local IIN agent.
  rpc RequestAttestation(CounterAttestedMembership) returns (common.ack.Ack){}
  // Handling attestation sent by a local IIN agent.
  rpc SendAttestation(CounterAttestedMembership) returns (common.ack.Ack){}
}

// Unique identifier for a unit of a network that runs an IIN agent
message SecurityDomainMemberIdentity {
  string security_domain = 1;
  string member_id = 2;
}

message SecurityDomainMemberIdentityRequest {
  SecurityDomainMemberIdentity source_network = 1;
  SecurityDomainMemberIdentity requesting_network = 2;
  string nonce = 3;
}

// Association of signature (over arbitrary data) and signer identity
message Attestation {
  SecurityDomainMemberIdentity unit_identity = 1;
  string certificate = 2;
  string signature = 3;
  string nonce = 4;
  uint64 timestamp = 5;
}

// Attested security domain membership by a single member
message AttestedMembership {
  oneof response {
    string membership = 1;         // 'common.membership.Membership': Serialized and Base64-encoded
    string error = 2;
  }
  Attestation attestation = 3;
}

// Counter attestation over security domain membership attested by its participants
message CounterAttestedMembership {
  message AttestedMembershipSet {
    string membership = 1;                   // 'common.membership.Membership': Serialized and Base64-encoded
    repeated Attestation attestations = 2;
  }
  oneof response {
    string attested_membership_set = 1;         // 'AttestedMembershipSet': Serialized and Base64-encoded
    string error = 2;
  }
  repeated Attestation attestations = 3;
}
