// source: identity/agent.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var common_ack_pb = require('../common/ack_pb.js');
goog.object.extend(proto, common_ack_pb);
goog.exportSymbol('proto.identity.agent.Attestation', null, global);
goog.exportSymbol('proto.identity.agent.AttestedMembership', null, global);
goog.exportSymbol('proto.identity.agent.AttestedMembership.ResponseCase', null, global);
goog.exportSymbol('proto.identity.agent.CounterAttestedMembership', null, global);
goog.exportSymbol('proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet', null, global);
goog.exportSymbol('proto.identity.agent.CounterAttestedMembership.ResponseCase', null, global);
goog.exportSymbol('proto.identity.agent.SecurityDomainMemberIdentity', null, global);
goog.exportSymbol('proto.identity.agent.SecurityDomainMemberIdentityRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.agent.SecurityDomainMemberIdentity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.agent.SecurityDomainMemberIdentity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.agent.SecurityDomainMemberIdentity.displayName = 'proto.identity.agent.SecurityDomainMemberIdentity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.agent.SecurityDomainMemberIdentityRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.agent.SecurityDomainMemberIdentityRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.agent.SecurityDomainMemberIdentityRequest.displayName = 'proto.identity.agent.SecurityDomainMemberIdentityRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.agent.Attestation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.identity.agent.Attestation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.agent.Attestation.displayName = 'proto.identity.agent.Attestation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.agent.AttestedMembership = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.identity.agent.AttestedMembership.oneofGroups_);
};
goog.inherits(proto.identity.agent.AttestedMembership, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.agent.AttestedMembership.displayName = 'proto.identity.agent.AttestedMembership';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.agent.CounterAttestedMembership = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.identity.agent.CounterAttestedMembership.repeatedFields_, proto.identity.agent.CounterAttestedMembership.oneofGroups_);
};
goog.inherits(proto.identity.agent.CounterAttestedMembership, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.agent.CounterAttestedMembership.displayName = 'proto.identity.agent.CounterAttestedMembership';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet.repeatedFields_, null);
};
goog.inherits(proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet.displayName = 'proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.agent.SecurityDomainMemberIdentity.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.agent.SecurityDomainMemberIdentity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.agent.SecurityDomainMemberIdentity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.agent.SecurityDomainMemberIdentity.toObject = function(includeInstance, msg) {
  var f, obj = {
    securityDomain: jspb.Message.getFieldWithDefault(msg, 1, ""),
    memberId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.agent.SecurityDomainMemberIdentity}
 */
proto.identity.agent.SecurityDomainMemberIdentity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.agent.SecurityDomainMemberIdentity;
  return proto.identity.agent.SecurityDomainMemberIdentity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.agent.SecurityDomainMemberIdentity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.agent.SecurityDomainMemberIdentity}
 */
proto.identity.agent.SecurityDomainMemberIdentity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecurityDomain(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemberId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.agent.SecurityDomainMemberIdentity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.agent.SecurityDomainMemberIdentity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.agent.SecurityDomainMemberIdentity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.agent.SecurityDomainMemberIdentity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecurityDomain();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMemberId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string security_domain = 1;
 * @return {string}
 */
proto.identity.agent.SecurityDomainMemberIdentity.prototype.getSecurityDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.agent.SecurityDomainMemberIdentity} returns this
 */
proto.identity.agent.SecurityDomainMemberIdentity.prototype.setSecurityDomain = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string member_id = 2;
 * @return {string}
 */
proto.identity.agent.SecurityDomainMemberIdentity.prototype.getMemberId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.agent.SecurityDomainMemberIdentity} returns this
 */
proto.identity.agent.SecurityDomainMemberIdentity.prototype.setMemberId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.agent.SecurityDomainMemberIdentityRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.agent.SecurityDomainMemberIdentityRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.agent.SecurityDomainMemberIdentityRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.agent.SecurityDomainMemberIdentityRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceNetwork: (f = msg.getSourceNetwork()) && proto.identity.agent.SecurityDomainMemberIdentity.toObject(includeInstance, f),
    requestingNetwork: (f = msg.getRequestingNetwork()) && proto.identity.agent.SecurityDomainMemberIdentity.toObject(includeInstance, f),
    nonce: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.agent.SecurityDomainMemberIdentityRequest}
 */
proto.identity.agent.SecurityDomainMemberIdentityRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.agent.SecurityDomainMemberIdentityRequest;
  return proto.identity.agent.SecurityDomainMemberIdentityRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.agent.SecurityDomainMemberIdentityRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.agent.SecurityDomainMemberIdentityRequest}
 */
proto.identity.agent.SecurityDomainMemberIdentityRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.identity.agent.SecurityDomainMemberIdentity;
      reader.readMessage(value,proto.identity.agent.SecurityDomainMemberIdentity.deserializeBinaryFromReader);
      msg.setSourceNetwork(value);
      break;
    case 2:
      var value = new proto.identity.agent.SecurityDomainMemberIdentity;
      reader.readMessage(value,proto.identity.agent.SecurityDomainMemberIdentity.deserializeBinaryFromReader);
      msg.setRequestingNetwork(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.agent.SecurityDomainMemberIdentityRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.agent.SecurityDomainMemberIdentityRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.agent.SecurityDomainMemberIdentityRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.agent.SecurityDomainMemberIdentityRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceNetwork();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.identity.agent.SecurityDomainMemberIdentity.serializeBinaryToWriter
    );
  }
  f = message.getRequestingNetwork();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.identity.agent.SecurityDomainMemberIdentity.serializeBinaryToWriter
    );
  }
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional SecurityDomainMemberIdentity source_network = 1;
 * @return {?proto.identity.agent.SecurityDomainMemberIdentity}
 */
proto.identity.agent.SecurityDomainMemberIdentityRequest.prototype.getSourceNetwork = function() {
  return /** @type{?proto.identity.agent.SecurityDomainMemberIdentity} */ (
    jspb.Message.getWrapperField(this, proto.identity.agent.SecurityDomainMemberIdentity, 1));
};


/**
 * @param {?proto.identity.agent.SecurityDomainMemberIdentity|undefined} value
 * @return {!proto.identity.agent.SecurityDomainMemberIdentityRequest} returns this
*/
proto.identity.agent.SecurityDomainMemberIdentityRequest.prototype.setSourceNetwork = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.agent.SecurityDomainMemberIdentityRequest} returns this
 */
proto.identity.agent.SecurityDomainMemberIdentityRequest.prototype.clearSourceNetwork = function() {
  return this.setSourceNetwork(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.agent.SecurityDomainMemberIdentityRequest.prototype.hasSourceNetwork = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SecurityDomainMemberIdentity requesting_network = 2;
 * @return {?proto.identity.agent.SecurityDomainMemberIdentity}
 */
proto.identity.agent.SecurityDomainMemberIdentityRequest.prototype.getRequestingNetwork = function() {
  return /** @type{?proto.identity.agent.SecurityDomainMemberIdentity} */ (
    jspb.Message.getWrapperField(this, proto.identity.agent.SecurityDomainMemberIdentity, 2));
};


/**
 * @param {?proto.identity.agent.SecurityDomainMemberIdentity|undefined} value
 * @return {!proto.identity.agent.SecurityDomainMemberIdentityRequest} returns this
*/
proto.identity.agent.SecurityDomainMemberIdentityRequest.prototype.setRequestingNetwork = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.agent.SecurityDomainMemberIdentityRequest} returns this
 */
proto.identity.agent.SecurityDomainMemberIdentityRequest.prototype.clearRequestingNetwork = function() {
  return this.setRequestingNetwork(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.agent.SecurityDomainMemberIdentityRequest.prototype.hasRequestingNetwork = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string nonce = 3;
 * @return {string}
 */
proto.identity.agent.SecurityDomainMemberIdentityRequest.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.agent.SecurityDomainMemberIdentityRequest} returns this
 */
proto.identity.agent.SecurityDomainMemberIdentityRequest.prototype.setNonce = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.agent.Attestation.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.agent.Attestation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.agent.Attestation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.agent.Attestation.toObject = function(includeInstance, msg) {
  var f, obj = {
    unitIdentity: (f = msg.getUnitIdentity()) && proto.identity.agent.SecurityDomainMemberIdentity.toObject(includeInstance, f),
    certificate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    signature: jspb.Message.getFieldWithDefault(msg, 3, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 4, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.agent.Attestation}
 */
proto.identity.agent.Attestation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.agent.Attestation;
  return proto.identity.agent.Attestation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.agent.Attestation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.agent.Attestation}
 */
proto.identity.agent.Attestation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.identity.agent.SecurityDomainMemberIdentity;
      reader.readMessage(value,proto.identity.agent.SecurityDomainMemberIdentity.deserializeBinaryFromReader);
      msg.setUnitIdentity(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCertificate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonce(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.agent.Attestation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.agent.Attestation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.agent.Attestation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.agent.Attestation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnitIdentity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.identity.agent.SecurityDomainMemberIdentity.serializeBinaryToWriter
    );
  }
  f = message.getCertificate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional SecurityDomainMemberIdentity unit_identity = 1;
 * @return {?proto.identity.agent.SecurityDomainMemberIdentity}
 */
proto.identity.agent.Attestation.prototype.getUnitIdentity = function() {
  return /** @type{?proto.identity.agent.SecurityDomainMemberIdentity} */ (
    jspb.Message.getWrapperField(this, proto.identity.agent.SecurityDomainMemberIdentity, 1));
};


/**
 * @param {?proto.identity.agent.SecurityDomainMemberIdentity|undefined} value
 * @return {!proto.identity.agent.Attestation} returns this
*/
proto.identity.agent.Attestation.prototype.setUnitIdentity = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.agent.Attestation} returns this
 */
proto.identity.agent.Attestation.prototype.clearUnitIdentity = function() {
  return this.setUnitIdentity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.agent.Attestation.prototype.hasUnitIdentity = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string certificate = 2;
 * @return {string}
 */
proto.identity.agent.Attestation.prototype.getCertificate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.agent.Attestation} returns this
 */
proto.identity.agent.Attestation.prototype.setCertificate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string signature = 3;
 * @return {string}
 */
proto.identity.agent.Attestation.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.agent.Attestation} returns this
 */
proto.identity.agent.Attestation.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string nonce = 4;
 * @return {string}
 */
proto.identity.agent.Attestation.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.agent.Attestation} returns this
 */
proto.identity.agent.Attestation.prototype.setNonce = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 timestamp = 5;
 * @return {number}
 */
proto.identity.agent.Attestation.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.identity.agent.Attestation} returns this
 */
proto.identity.agent.Attestation.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.identity.agent.AttestedMembership.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.identity.agent.AttestedMembership.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  MEMBERSHIP: 1,
  ERROR: 2
};

/**
 * @return {proto.identity.agent.AttestedMembership.ResponseCase}
 */
proto.identity.agent.AttestedMembership.prototype.getResponseCase = function() {
  return /** @type {proto.identity.agent.AttestedMembership.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.identity.agent.AttestedMembership.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.agent.AttestedMembership.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.agent.AttestedMembership.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.agent.AttestedMembership} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.agent.AttestedMembership.toObject = function(includeInstance, msg) {
  var f, obj = {
    membership: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: jspb.Message.getFieldWithDefault(msg, 2, ""),
    attestation: (f = msg.getAttestation()) && proto.identity.agent.Attestation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.agent.AttestedMembership}
 */
proto.identity.agent.AttestedMembership.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.agent.AttestedMembership;
  return proto.identity.agent.AttestedMembership.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.agent.AttestedMembership} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.agent.AttestedMembership}
 */
proto.identity.agent.AttestedMembership.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMembership(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 3:
      var value = new proto.identity.agent.Attestation;
      reader.readMessage(value,proto.identity.agent.Attestation.deserializeBinaryFromReader);
      msg.setAttestation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.agent.AttestedMembership.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.agent.AttestedMembership.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.agent.AttestedMembership} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.agent.AttestedMembership.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAttestation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.identity.agent.Attestation.serializeBinaryToWriter
    );
  }
};


/**
 * optional string membership = 1;
 * @return {string}
 */
proto.identity.agent.AttestedMembership.prototype.getMembership = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.agent.AttestedMembership} returns this
 */
proto.identity.agent.AttestedMembership.prototype.setMembership = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.identity.agent.AttestedMembership.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.identity.agent.AttestedMembership} returns this
 */
proto.identity.agent.AttestedMembership.prototype.clearMembership = function() {
  return jspb.Message.setOneofField(this, 1, proto.identity.agent.AttestedMembership.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.agent.AttestedMembership.prototype.hasMembership = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.identity.agent.AttestedMembership.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.agent.AttestedMembership} returns this
 */
proto.identity.agent.AttestedMembership.prototype.setError = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.identity.agent.AttestedMembership.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.identity.agent.AttestedMembership} returns this
 */
proto.identity.agent.AttestedMembership.prototype.clearError = function() {
  return jspb.Message.setOneofField(this, 2, proto.identity.agent.AttestedMembership.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.agent.AttestedMembership.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Attestation attestation = 3;
 * @return {?proto.identity.agent.Attestation}
 */
proto.identity.agent.AttestedMembership.prototype.getAttestation = function() {
  return /** @type{?proto.identity.agent.Attestation} */ (
    jspb.Message.getWrapperField(this, proto.identity.agent.Attestation, 3));
};


/**
 * @param {?proto.identity.agent.Attestation|undefined} value
 * @return {!proto.identity.agent.AttestedMembership} returns this
*/
proto.identity.agent.AttestedMembership.prototype.setAttestation = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.identity.agent.AttestedMembership} returns this
 */
proto.identity.agent.AttestedMembership.prototype.clearAttestation = function() {
  return this.setAttestation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.agent.AttestedMembership.prototype.hasAttestation = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.identity.agent.CounterAttestedMembership.repeatedFields_ = [3];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.identity.agent.CounterAttestedMembership.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.identity.agent.CounterAttestedMembership.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  ATTESTED_MEMBERSHIP_SET: 1,
  ERROR: 2
};

/**
 * @return {proto.identity.agent.CounterAttestedMembership.ResponseCase}
 */
proto.identity.agent.CounterAttestedMembership.prototype.getResponseCase = function() {
  return /** @type {proto.identity.agent.CounterAttestedMembership.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.identity.agent.CounterAttestedMembership.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.agent.CounterAttestedMembership.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.agent.CounterAttestedMembership.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.agent.CounterAttestedMembership} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.agent.CounterAttestedMembership.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestedMembershipSet: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: jspb.Message.getFieldWithDefault(msg, 2, ""),
    attestationsList: jspb.Message.toObjectList(msg.getAttestationsList(),
    proto.identity.agent.Attestation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.agent.CounterAttestedMembership}
 */
proto.identity.agent.CounterAttestedMembership.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.agent.CounterAttestedMembership;
  return proto.identity.agent.CounterAttestedMembership.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.agent.CounterAttestedMembership} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.agent.CounterAttestedMembership}
 */
proto.identity.agent.CounterAttestedMembership.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAttestedMembershipSet(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 3:
      var value = new proto.identity.agent.Attestation;
      reader.readMessage(value,proto.identity.agent.Attestation.deserializeBinaryFromReader);
      msg.addAttestations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.agent.CounterAttestedMembership.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.agent.CounterAttestedMembership.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.agent.CounterAttestedMembership} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.agent.CounterAttestedMembership.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAttestationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.identity.agent.Attestation.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet.prototype.toObject = function(opt_includeInstance) {
  return proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    membership: jspb.Message.getFieldWithDefault(msg, 1, ""),
    attestationsList: jspb.Message.toObjectList(msg.getAttestationsList(),
    proto.identity.agent.Attestation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet}
 */
proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet;
  return proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet}
 */
proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMembership(value);
      break;
    case 2:
      var value = new proto.identity.agent.Attestation;
      reader.readMessage(value,proto.identity.agent.Attestation.deserializeBinaryFromReader);
      msg.addAttestations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMembership();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAttestationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.identity.agent.Attestation.serializeBinaryToWriter
    );
  }
};


/**
 * optional string membership = 1;
 * @return {string}
 */
proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet.prototype.getMembership = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet} returns this
 */
proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet.prototype.setMembership = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Attestation attestations = 2;
 * @return {!Array<!proto.identity.agent.Attestation>}
 */
proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet.prototype.getAttestationsList = function() {
  return /** @type{!Array<!proto.identity.agent.Attestation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.identity.agent.Attestation, 2));
};


/**
 * @param {!Array<!proto.identity.agent.Attestation>} value
 * @return {!proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet} returns this
*/
proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet.prototype.setAttestationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.identity.agent.Attestation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.identity.agent.Attestation}
 */
proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet.prototype.addAttestations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.identity.agent.Attestation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet} returns this
 */
proto.identity.agent.CounterAttestedMembership.AttestedMembershipSet.prototype.clearAttestationsList = function() {
  return this.setAttestationsList([]);
};


/**
 * optional string attested_membership_set = 1;
 * @return {string}
 */
proto.identity.agent.CounterAttestedMembership.prototype.getAttestedMembershipSet = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.agent.CounterAttestedMembership} returns this
 */
proto.identity.agent.CounterAttestedMembership.prototype.setAttestedMembershipSet = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.identity.agent.CounterAttestedMembership.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.identity.agent.CounterAttestedMembership} returns this
 */
proto.identity.agent.CounterAttestedMembership.prototype.clearAttestedMembershipSet = function() {
  return jspb.Message.setOneofField(this, 1, proto.identity.agent.CounterAttestedMembership.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.agent.CounterAttestedMembership.prototype.hasAttestedMembershipSet = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.identity.agent.CounterAttestedMembership.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.identity.agent.CounterAttestedMembership} returns this
 */
proto.identity.agent.CounterAttestedMembership.prototype.setError = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.identity.agent.CounterAttestedMembership.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.identity.agent.CounterAttestedMembership} returns this
 */
proto.identity.agent.CounterAttestedMembership.prototype.clearError = function() {
  return jspb.Message.setOneofField(this, 2, proto.identity.agent.CounterAttestedMembership.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.identity.agent.CounterAttestedMembership.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Attestation attestations = 3;
 * @return {!Array<!proto.identity.agent.Attestation>}
 */
proto.identity.agent.CounterAttestedMembership.prototype.getAttestationsList = function() {
  return /** @type{!Array<!proto.identity.agent.Attestation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.identity.agent.Attestation, 3));
};


/**
 * @param {!Array<!proto.identity.agent.Attestation>} value
 * @return {!proto.identity.agent.CounterAttestedMembership} returns this
*/
proto.identity.agent.CounterAttestedMembership.prototype.setAttestationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.identity.agent.Attestation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.identity.agent.Attestation}
 */
proto.identity.agent.CounterAttestedMembership.prototype.addAttestations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.identity.agent.Attestation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.identity.agent.CounterAttestedMembership} returns this
 */
proto.identity.agent.CounterAttestedMembership.prototype.clearAttestationsList = function() {
  return this.setAttestationsList([]);
};


goog.object.extend(exports, proto.identity.agent);
