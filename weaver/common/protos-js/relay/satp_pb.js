// source: relay/satp.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var common_ack_pb = require('../common/ack_pb.js');
goog.object.extend(proto, common_ack_pb);
goog.exportSymbol('proto.relay.satp.AckCommenceRequest', null, global);
goog.exportSymbol('proto.relay.satp.AckFinalReceiptRequest', null, global);
goog.exportSymbol('proto.relay.satp.CommitFinalAssertionRequest', null, global);
goog.exportSymbol('proto.relay.satp.CommitPrepareRequest', null, global);
goog.exportSymbol('proto.relay.satp.CommitReadyRequest', null, global);
goog.exportSymbol('proto.relay.satp.LockAssertionReceiptRequest', null, global);
goog.exportSymbol('proto.relay.satp.LockAssertionRequest', null, global);
goog.exportSymbol('proto.relay.satp.SendAssetStatusRequest', null, global);
goog.exportSymbol('proto.relay.satp.TransferCommenceRequest', null, global);
goog.exportSymbol('proto.relay.satp.TransferCompletedRequest', null, global);
goog.exportSymbol('proto.relay.satp.TransferProposalClaimsRequest', null, global);
goog.exportSymbol('proto.relay.satp.TransferProposalReceiptRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.satp.TransferProposalClaimsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.relay.satp.TransferProposalClaimsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.satp.TransferProposalClaimsRequest.displayName = 'proto.relay.satp.TransferProposalClaimsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.satp.TransferProposalReceiptRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.relay.satp.TransferProposalReceiptRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.satp.TransferProposalReceiptRequest.displayName = 'proto.relay.satp.TransferProposalReceiptRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.satp.TransferCommenceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.relay.satp.TransferCommenceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.satp.TransferCommenceRequest.displayName = 'proto.relay.satp.TransferCommenceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.satp.AckCommenceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.relay.satp.AckCommenceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.satp.AckCommenceRequest.displayName = 'proto.relay.satp.AckCommenceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.satp.SendAssetStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.relay.satp.SendAssetStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.satp.SendAssetStatusRequest.displayName = 'proto.relay.satp.SendAssetStatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.satp.LockAssertionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.relay.satp.LockAssertionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.satp.LockAssertionRequest.displayName = 'proto.relay.satp.LockAssertionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.satp.LockAssertionReceiptRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.relay.satp.LockAssertionReceiptRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.satp.LockAssertionReceiptRequest.displayName = 'proto.relay.satp.LockAssertionReceiptRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.satp.CommitPrepareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.relay.satp.CommitPrepareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.satp.CommitPrepareRequest.displayName = 'proto.relay.satp.CommitPrepareRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.satp.CommitReadyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.relay.satp.CommitReadyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.satp.CommitReadyRequest.displayName = 'proto.relay.satp.CommitReadyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.satp.CommitFinalAssertionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.relay.satp.CommitFinalAssertionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.satp.CommitFinalAssertionRequest.displayName = 'proto.relay.satp.CommitFinalAssertionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.satp.AckFinalReceiptRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.relay.satp.AckFinalReceiptRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.satp.AckFinalReceiptRequest.displayName = 'proto.relay.satp.AckFinalReceiptRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.satp.TransferCompletedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.relay.satp.TransferCompletedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.satp.TransferCompletedRequest.displayName = 'proto.relay.satp.TransferCompletedRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.satp.TransferProposalClaimsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.satp.TransferProposalClaimsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.satp.TransferProposalClaimsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    assetAssetId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    assetProfileId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    verifiedOriginatorEntityId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    verifiedBeneficiaryEntityId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    originatorPubkey: jspb.Message.getFieldWithDefault(msg, 6, ""),
    beneficiaryPubkey: jspb.Message.getFieldWithDefault(msg, 7, ""),
    senderGatewayNetworkId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    recipientGatewayNetworkId: jspb.Message.getFieldWithDefault(msg, 9, ""),
    clientIdentityPubkey: jspb.Message.getFieldWithDefault(msg, 10, ""),
    serverIdentityPubkey: jspb.Message.getFieldWithDefault(msg, 11, ""),
    senderGatewayOwnerId: jspb.Message.getFieldWithDefault(msg, 12, ""),
    receiverGatewayOwnerId: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.satp.TransferProposalClaimsRequest}
 */
proto.relay.satp.TransferProposalClaimsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.satp.TransferProposalClaimsRequest;
  return proto.relay.satp.TransferProposalClaimsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.satp.TransferProposalClaimsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.satp.TransferProposalClaimsRequest}
 */
proto.relay.satp.TransferProposalClaimsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetAssetId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetProfileId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerifiedOriginatorEntityId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerifiedBeneficiaryEntityId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOriginatorPubkey(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeneficiaryPubkey(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderGatewayNetworkId(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipientGatewayNetworkId(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientIdentityPubkey(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerIdentityPubkey(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderGatewayOwnerId(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiverGatewayOwnerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.satp.TransferProposalClaimsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.satp.TransferProposalClaimsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.satp.TransferProposalClaimsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAssetAssetId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAssetProfileId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVerifiedOriginatorEntityId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getVerifiedBeneficiaryEntityId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOriginatorPubkey();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBeneficiaryPubkey();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSenderGatewayNetworkId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getRecipientGatewayNetworkId();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getClientIdentityPubkey();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getServerIdentityPubkey();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getSenderGatewayOwnerId();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getReceiverGatewayOwnerId();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional string message_type = 1;
 * @return {string}
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.getMessageType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferProposalClaimsRequest} returns this
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.setMessageType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string asset_asset_id = 2;
 * @return {string}
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.getAssetAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferProposalClaimsRequest} returns this
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.setAssetAssetId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string asset_profile_id = 3;
 * @return {string}
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.getAssetProfileId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferProposalClaimsRequest} returns this
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.setAssetProfileId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string verified_originator_entity_id = 4;
 * @return {string}
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.getVerifiedOriginatorEntityId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferProposalClaimsRequest} returns this
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.setVerifiedOriginatorEntityId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string verified_beneficiary_entity_id = 5;
 * @return {string}
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.getVerifiedBeneficiaryEntityId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferProposalClaimsRequest} returns this
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.setVerifiedBeneficiaryEntityId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string originator_pubkey = 6;
 * @return {string}
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.getOriginatorPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferProposalClaimsRequest} returns this
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.setOriginatorPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string beneficiary_pubkey = 7;
 * @return {string}
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.getBeneficiaryPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferProposalClaimsRequest} returns this
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.setBeneficiaryPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string sender_gateway_network_id = 8;
 * @return {string}
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.getSenderGatewayNetworkId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferProposalClaimsRequest} returns this
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.setSenderGatewayNetworkId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string recipient_gateway_network_id = 9;
 * @return {string}
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.getRecipientGatewayNetworkId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferProposalClaimsRequest} returns this
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.setRecipientGatewayNetworkId = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string client_identity_pubkey = 10;
 * @return {string}
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.getClientIdentityPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferProposalClaimsRequest} returns this
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.setClientIdentityPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string server_identity_pubkey = 11;
 * @return {string}
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.getServerIdentityPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferProposalClaimsRequest} returns this
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.setServerIdentityPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string sender_gateway_owner_id = 12;
 * @return {string}
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.getSenderGatewayOwnerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferProposalClaimsRequest} returns this
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.setSenderGatewayOwnerId = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string receiver_gateway_owner_id = 13;
 * @return {string}
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.getReceiverGatewayOwnerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferProposalClaimsRequest} returns this
 */
proto.relay.satp.TransferProposalClaimsRequest.prototype.setReceiverGatewayOwnerId = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.satp.TransferProposalReceiptRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.satp.TransferProposalReceiptRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.satp.TransferProposalReceiptRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    assetAssetId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    assetProfileId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    verifiedOriginatorEntityId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    verifiedBeneficiaryEntityId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    originatorPubkey: jspb.Message.getFieldWithDefault(msg, 6, ""),
    beneficiaryPubkey: jspb.Message.getFieldWithDefault(msg, 7, ""),
    senderGatewayNetworkId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    recipientGatewayNetworkId: jspb.Message.getFieldWithDefault(msg, 9, ""),
    clientIdentityPubkey: jspb.Message.getFieldWithDefault(msg, 10, ""),
    serverIdentityPubkey: jspb.Message.getFieldWithDefault(msg, 11, ""),
    senderGatewayOwnerId: jspb.Message.getFieldWithDefault(msg, 12, ""),
    receiverGatewayOwnerId: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.satp.TransferProposalReceiptRequest}
 */
proto.relay.satp.TransferProposalReceiptRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.satp.TransferProposalReceiptRequest;
  return proto.relay.satp.TransferProposalReceiptRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.satp.TransferProposalReceiptRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.satp.TransferProposalReceiptRequest}
 */
proto.relay.satp.TransferProposalReceiptRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetAssetId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetProfileId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerifiedOriginatorEntityId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerifiedBeneficiaryEntityId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOriginatorPubkey(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeneficiaryPubkey(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderGatewayNetworkId(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipientGatewayNetworkId(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientIdentityPubkey(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerIdentityPubkey(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderGatewayOwnerId(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiverGatewayOwnerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.satp.TransferProposalReceiptRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.satp.TransferProposalReceiptRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.satp.TransferProposalReceiptRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAssetAssetId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAssetProfileId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVerifiedOriginatorEntityId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getVerifiedBeneficiaryEntityId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOriginatorPubkey();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBeneficiaryPubkey();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getSenderGatewayNetworkId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getRecipientGatewayNetworkId();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getClientIdentityPubkey();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getServerIdentityPubkey();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getSenderGatewayOwnerId();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getReceiverGatewayOwnerId();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional string message_type = 1;
 * @return {string}
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.getMessageType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferProposalReceiptRequest} returns this
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.setMessageType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string asset_asset_id = 2;
 * @return {string}
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.getAssetAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferProposalReceiptRequest} returns this
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.setAssetAssetId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string asset_profile_id = 3;
 * @return {string}
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.getAssetProfileId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferProposalReceiptRequest} returns this
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.setAssetProfileId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string verified_originator_entity_id = 4;
 * @return {string}
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.getVerifiedOriginatorEntityId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferProposalReceiptRequest} returns this
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.setVerifiedOriginatorEntityId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string verified_beneficiary_entity_id = 5;
 * @return {string}
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.getVerifiedBeneficiaryEntityId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferProposalReceiptRequest} returns this
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.setVerifiedBeneficiaryEntityId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string originator_pubkey = 6;
 * @return {string}
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.getOriginatorPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferProposalReceiptRequest} returns this
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.setOriginatorPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string beneficiary_pubkey = 7;
 * @return {string}
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.getBeneficiaryPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferProposalReceiptRequest} returns this
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.setBeneficiaryPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string sender_gateway_network_id = 8;
 * @return {string}
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.getSenderGatewayNetworkId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferProposalReceiptRequest} returns this
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.setSenderGatewayNetworkId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string recipient_gateway_network_id = 9;
 * @return {string}
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.getRecipientGatewayNetworkId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferProposalReceiptRequest} returns this
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.setRecipientGatewayNetworkId = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string client_identity_pubkey = 10;
 * @return {string}
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.getClientIdentityPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferProposalReceiptRequest} returns this
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.setClientIdentityPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string server_identity_pubkey = 11;
 * @return {string}
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.getServerIdentityPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferProposalReceiptRequest} returns this
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.setServerIdentityPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string sender_gateway_owner_id = 12;
 * @return {string}
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.getSenderGatewayOwnerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferProposalReceiptRequest} returns this
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.setSenderGatewayOwnerId = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string receiver_gateway_owner_id = 13;
 * @return {string}
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.getReceiverGatewayOwnerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferProposalReceiptRequest} returns this
 */
proto.relay.satp.TransferProposalReceiptRequest.prototype.setReceiverGatewayOwnerId = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.satp.TransferCommenceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.satp.TransferCommenceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.satp.TransferCommenceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.satp.TransferCommenceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sessionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    transferContextId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    clientIdentityPubkey: jspb.Message.getFieldWithDefault(msg, 4, ""),
    serverIdentityPubkey: jspb.Message.getFieldWithDefault(msg, 5, ""),
    hashTransferInitClaims: jspb.Message.getFieldWithDefault(msg, 6, ""),
    hashPrevMessage: jspb.Message.getFieldWithDefault(msg, 7, ""),
    clientTransferNumber: jspb.Message.getFieldWithDefault(msg, 8, ""),
    clientSignature: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.satp.TransferCommenceRequest}
 */
proto.relay.satp.TransferCommenceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.satp.TransferCommenceRequest;
  return proto.relay.satp.TransferCommenceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.satp.TransferCommenceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.satp.TransferCommenceRequest}
 */
proto.relay.satp.TransferCommenceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransferContextId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientIdentityPubkey(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerIdentityPubkey(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHashTransferInitClaims(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setHashPrevMessage(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientTransferNumber(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.satp.TransferCommenceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.satp.TransferCommenceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.satp.TransferCommenceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.satp.TransferCommenceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTransferContextId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getClientIdentityPubkey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getServerIdentityPubkey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getHashTransferInitClaims();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getHashPrevMessage();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getClientTransferNumber();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getClientSignature();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string message_type = 1;
 * @return {string}
 */
proto.relay.satp.TransferCommenceRequest.prototype.getMessageType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferCommenceRequest} returns this
 */
proto.relay.satp.TransferCommenceRequest.prototype.setMessageType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string session_id = 2;
 * @return {string}
 */
proto.relay.satp.TransferCommenceRequest.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferCommenceRequest} returns this
 */
proto.relay.satp.TransferCommenceRequest.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string transfer_context_id = 3;
 * @return {string}
 */
proto.relay.satp.TransferCommenceRequest.prototype.getTransferContextId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferCommenceRequest} returns this
 */
proto.relay.satp.TransferCommenceRequest.prototype.setTransferContextId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string client_identity_pubkey = 4;
 * @return {string}
 */
proto.relay.satp.TransferCommenceRequest.prototype.getClientIdentityPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferCommenceRequest} returns this
 */
proto.relay.satp.TransferCommenceRequest.prototype.setClientIdentityPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string server_identity_pubkey = 5;
 * @return {string}
 */
proto.relay.satp.TransferCommenceRequest.prototype.getServerIdentityPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferCommenceRequest} returns this
 */
proto.relay.satp.TransferCommenceRequest.prototype.setServerIdentityPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string hash_transfer_init_claims = 6;
 * @return {string}
 */
proto.relay.satp.TransferCommenceRequest.prototype.getHashTransferInitClaims = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferCommenceRequest} returns this
 */
proto.relay.satp.TransferCommenceRequest.prototype.setHashTransferInitClaims = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string hash_prev_message = 7;
 * @return {string}
 */
proto.relay.satp.TransferCommenceRequest.prototype.getHashPrevMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferCommenceRequest} returns this
 */
proto.relay.satp.TransferCommenceRequest.prototype.setHashPrevMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string client_transfer_number = 8;
 * @return {string}
 */
proto.relay.satp.TransferCommenceRequest.prototype.getClientTransferNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferCommenceRequest} returns this
 */
proto.relay.satp.TransferCommenceRequest.prototype.setClientTransferNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string client_signature = 9;
 * @return {string}
 */
proto.relay.satp.TransferCommenceRequest.prototype.getClientSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferCommenceRequest} returns this
 */
proto.relay.satp.TransferCommenceRequest.prototype.setClientSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.satp.AckCommenceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.satp.AckCommenceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.satp.AckCommenceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.satp.AckCommenceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sessionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    transferContextId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    clientIdentityPubkey: jspb.Message.getFieldWithDefault(msg, 4, ""),
    serverIdentityPubkey: jspb.Message.getFieldWithDefault(msg, 5, ""),
    hashPrevMessage: jspb.Message.getFieldWithDefault(msg, 6, ""),
    serverTransferNumber: jspb.Message.getFieldWithDefault(msg, 7, ""),
    serverSignature: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.satp.AckCommenceRequest}
 */
proto.relay.satp.AckCommenceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.satp.AckCommenceRequest;
  return proto.relay.satp.AckCommenceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.satp.AckCommenceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.satp.AckCommenceRequest}
 */
proto.relay.satp.AckCommenceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransferContextId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientIdentityPubkey(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerIdentityPubkey(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHashPrevMessage(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerTransferNumber(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.satp.AckCommenceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.satp.AckCommenceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.satp.AckCommenceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.satp.AckCommenceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTransferContextId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getClientIdentityPubkey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getServerIdentityPubkey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getHashPrevMessage();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getServerTransferNumber();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getServerSignature();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string message_type = 1;
 * @return {string}
 */
proto.relay.satp.AckCommenceRequest.prototype.getMessageType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.AckCommenceRequest} returns this
 */
proto.relay.satp.AckCommenceRequest.prototype.setMessageType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string session_id = 2;
 * @return {string}
 */
proto.relay.satp.AckCommenceRequest.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.AckCommenceRequest} returns this
 */
proto.relay.satp.AckCommenceRequest.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string transfer_context_id = 3;
 * @return {string}
 */
proto.relay.satp.AckCommenceRequest.prototype.getTransferContextId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.AckCommenceRequest} returns this
 */
proto.relay.satp.AckCommenceRequest.prototype.setTransferContextId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string client_identity_pubkey = 4;
 * @return {string}
 */
proto.relay.satp.AckCommenceRequest.prototype.getClientIdentityPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.AckCommenceRequest} returns this
 */
proto.relay.satp.AckCommenceRequest.prototype.setClientIdentityPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string server_identity_pubkey = 5;
 * @return {string}
 */
proto.relay.satp.AckCommenceRequest.prototype.getServerIdentityPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.AckCommenceRequest} returns this
 */
proto.relay.satp.AckCommenceRequest.prototype.setServerIdentityPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string hash_prev_message = 6;
 * @return {string}
 */
proto.relay.satp.AckCommenceRequest.prototype.getHashPrevMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.AckCommenceRequest} returns this
 */
proto.relay.satp.AckCommenceRequest.prototype.setHashPrevMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string server_transfer_number = 7;
 * @return {string}
 */
proto.relay.satp.AckCommenceRequest.prototype.getServerTransferNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.AckCommenceRequest} returns this
 */
proto.relay.satp.AckCommenceRequest.prototype.setServerTransferNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string server_signature = 8;
 * @return {string}
 */
proto.relay.satp.AckCommenceRequest.prototype.getServerSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.AckCommenceRequest} returns this
 */
proto.relay.satp.AckCommenceRequest.prototype.setServerSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.satp.SendAssetStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.satp.SendAssetStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.satp.SendAssetStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.satp.SendAssetStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sessionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    transferContextId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    clientIdentityPubkey: jspb.Message.getFieldWithDefault(msg, 4, ""),
    serverIdentityPubkey: jspb.Message.getFieldWithDefault(msg, 5, ""),
    hashPrevMessage: jspb.Message.getFieldWithDefault(msg, 6, ""),
    serverTransferNumber: jspb.Message.getFieldWithDefault(msg, 7, ""),
    serverSignature: jspb.Message.getFieldWithDefault(msg, 8, ""),
    status: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.satp.SendAssetStatusRequest}
 */
proto.relay.satp.SendAssetStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.satp.SendAssetStatusRequest;
  return proto.relay.satp.SendAssetStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.satp.SendAssetStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.satp.SendAssetStatusRequest}
 */
proto.relay.satp.SendAssetStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransferContextId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientIdentityPubkey(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerIdentityPubkey(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHashPrevMessage(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerTransferNumber(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerSignature(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.satp.SendAssetStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.satp.SendAssetStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.satp.SendAssetStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.satp.SendAssetStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTransferContextId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getClientIdentityPubkey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getServerIdentityPubkey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getHashPrevMessage();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getServerTransferNumber();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getServerSignature();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string message_type = 1;
 * @return {string}
 */
proto.relay.satp.SendAssetStatusRequest.prototype.getMessageType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.SendAssetStatusRequest} returns this
 */
proto.relay.satp.SendAssetStatusRequest.prototype.setMessageType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string session_id = 2;
 * @return {string}
 */
proto.relay.satp.SendAssetStatusRequest.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.SendAssetStatusRequest} returns this
 */
proto.relay.satp.SendAssetStatusRequest.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string transfer_context_id = 3;
 * @return {string}
 */
proto.relay.satp.SendAssetStatusRequest.prototype.getTransferContextId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.SendAssetStatusRequest} returns this
 */
proto.relay.satp.SendAssetStatusRequest.prototype.setTransferContextId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string client_identity_pubkey = 4;
 * @return {string}
 */
proto.relay.satp.SendAssetStatusRequest.prototype.getClientIdentityPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.SendAssetStatusRequest} returns this
 */
proto.relay.satp.SendAssetStatusRequest.prototype.setClientIdentityPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string server_identity_pubkey = 5;
 * @return {string}
 */
proto.relay.satp.SendAssetStatusRequest.prototype.getServerIdentityPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.SendAssetStatusRequest} returns this
 */
proto.relay.satp.SendAssetStatusRequest.prototype.setServerIdentityPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string hash_prev_message = 6;
 * @return {string}
 */
proto.relay.satp.SendAssetStatusRequest.prototype.getHashPrevMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.SendAssetStatusRequest} returns this
 */
proto.relay.satp.SendAssetStatusRequest.prototype.setHashPrevMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string server_transfer_number = 7;
 * @return {string}
 */
proto.relay.satp.SendAssetStatusRequest.prototype.getServerTransferNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.SendAssetStatusRequest} returns this
 */
proto.relay.satp.SendAssetStatusRequest.prototype.setServerTransferNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string server_signature = 8;
 * @return {string}
 */
proto.relay.satp.SendAssetStatusRequest.prototype.getServerSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.SendAssetStatusRequest} returns this
 */
proto.relay.satp.SendAssetStatusRequest.prototype.setServerSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string status = 9;
 * @return {string}
 */
proto.relay.satp.SendAssetStatusRequest.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.SendAssetStatusRequest} returns this
 */
proto.relay.satp.SendAssetStatusRequest.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.satp.LockAssertionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.satp.LockAssertionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.satp.LockAssertionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.satp.LockAssertionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sessionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    transferContextId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    clientIdentityPubkey: jspb.Message.getFieldWithDefault(msg, 4, ""),
    serverIdentityPubkey: jspb.Message.getFieldWithDefault(msg, 5, ""),
    lockAssertionClaim: jspb.Message.getFieldWithDefault(msg, 6, ""),
    lockAssertionClaimFormat: jspb.Message.getFieldWithDefault(msg, 7, ""),
    lockAssertionExpiration: jspb.Message.getFieldWithDefault(msg, 8, ""),
    hashPrevMessage: jspb.Message.getFieldWithDefault(msg, 9, ""),
    clientTransferNumber: jspb.Message.getFieldWithDefault(msg, 10, ""),
    clientSignature: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.satp.LockAssertionRequest}
 */
proto.relay.satp.LockAssertionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.satp.LockAssertionRequest;
  return proto.relay.satp.LockAssertionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.satp.LockAssertionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.satp.LockAssertionRequest}
 */
proto.relay.satp.LockAssertionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransferContextId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientIdentityPubkey(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerIdentityPubkey(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLockAssertionClaim(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setLockAssertionClaimFormat(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLockAssertionExpiration(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setHashPrevMessage(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientTransferNumber(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.satp.LockAssertionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.satp.LockAssertionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.satp.LockAssertionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.satp.LockAssertionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTransferContextId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getClientIdentityPubkey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getServerIdentityPubkey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLockAssertionClaim();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getLockAssertionClaimFormat();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getLockAssertionExpiration();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getHashPrevMessage();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getClientTransferNumber();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getClientSignature();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string message_type = 1;
 * @return {string}
 */
proto.relay.satp.LockAssertionRequest.prototype.getMessageType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.LockAssertionRequest} returns this
 */
proto.relay.satp.LockAssertionRequest.prototype.setMessageType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string session_id = 2;
 * @return {string}
 */
proto.relay.satp.LockAssertionRequest.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.LockAssertionRequest} returns this
 */
proto.relay.satp.LockAssertionRequest.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string transfer_context_id = 3;
 * @return {string}
 */
proto.relay.satp.LockAssertionRequest.prototype.getTransferContextId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.LockAssertionRequest} returns this
 */
proto.relay.satp.LockAssertionRequest.prototype.setTransferContextId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string client_identity_pubkey = 4;
 * @return {string}
 */
proto.relay.satp.LockAssertionRequest.prototype.getClientIdentityPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.LockAssertionRequest} returns this
 */
proto.relay.satp.LockAssertionRequest.prototype.setClientIdentityPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string server_identity_pubkey = 5;
 * @return {string}
 */
proto.relay.satp.LockAssertionRequest.prototype.getServerIdentityPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.LockAssertionRequest} returns this
 */
proto.relay.satp.LockAssertionRequest.prototype.setServerIdentityPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string lock_assertion_claim = 6;
 * @return {string}
 */
proto.relay.satp.LockAssertionRequest.prototype.getLockAssertionClaim = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.LockAssertionRequest} returns this
 */
proto.relay.satp.LockAssertionRequest.prototype.setLockAssertionClaim = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string lock_assertion_claim_format = 7;
 * @return {string}
 */
proto.relay.satp.LockAssertionRequest.prototype.getLockAssertionClaimFormat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.LockAssertionRequest} returns this
 */
proto.relay.satp.LockAssertionRequest.prototype.setLockAssertionClaimFormat = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string lock_assertion_expiration = 8;
 * @return {string}
 */
proto.relay.satp.LockAssertionRequest.prototype.getLockAssertionExpiration = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.LockAssertionRequest} returns this
 */
proto.relay.satp.LockAssertionRequest.prototype.setLockAssertionExpiration = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string hash_prev_message = 9;
 * @return {string}
 */
proto.relay.satp.LockAssertionRequest.prototype.getHashPrevMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.LockAssertionRequest} returns this
 */
proto.relay.satp.LockAssertionRequest.prototype.setHashPrevMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string client_transfer_number = 10;
 * @return {string}
 */
proto.relay.satp.LockAssertionRequest.prototype.getClientTransferNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.LockAssertionRequest} returns this
 */
proto.relay.satp.LockAssertionRequest.prototype.setClientTransferNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string client_signature = 11;
 * @return {string}
 */
proto.relay.satp.LockAssertionRequest.prototype.getClientSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.LockAssertionRequest} returns this
 */
proto.relay.satp.LockAssertionRequest.prototype.setClientSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.satp.LockAssertionReceiptRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.satp.LockAssertionReceiptRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.satp.LockAssertionReceiptRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.satp.LockAssertionReceiptRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sessionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    transferContextId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    clientIdentityPubkey: jspb.Message.getFieldWithDefault(msg, 4, ""),
    serverIdentityPubkey: jspb.Message.getFieldWithDefault(msg, 5, ""),
    hashPrevMessage: jspb.Message.getFieldWithDefault(msg, 6, ""),
    serverTransferNumber: jspb.Message.getFieldWithDefault(msg, 7, ""),
    serverSignature: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.satp.LockAssertionReceiptRequest}
 */
proto.relay.satp.LockAssertionReceiptRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.satp.LockAssertionReceiptRequest;
  return proto.relay.satp.LockAssertionReceiptRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.satp.LockAssertionReceiptRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.satp.LockAssertionReceiptRequest}
 */
proto.relay.satp.LockAssertionReceiptRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransferContextId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientIdentityPubkey(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerIdentityPubkey(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHashPrevMessage(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerTransferNumber(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.satp.LockAssertionReceiptRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.satp.LockAssertionReceiptRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.satp.LockAssertionReceiptRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.satp.LockAssertionReceiptRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTransferContextId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getClientIdentityPubkey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getServerIdentityPubkey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getHashPrevMessage();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getServerTransferNumber();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getServerSignature();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string message_type = 1;
 * @return {string}
 */
proto.relay.satp.LockAssertionReceiptRequest.prototype.getMessageType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.LockAssertionReceiptRequest} returns this
 */
proto.relay.satp.LockAssertionReceiptRequest.prototype.setMessageType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string session_id = 2;
 * @return {string}
 */
proto.relay.satp.LockAssertionReceiptRequest.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.LockAssertionReceiptRequest} returns this
 */
proto.relay.satp.LockAssertionReceiptRequest.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string transfer_context_id = 3;
 * @return {string}
 */
proto.relay.satp.LockAssertionReceiptRequest.prototype.getTransferContextId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.LockAssertionReceiptRequest} returns this
 */
proto.relay.satp.LockAssertionReceiptRequest.prototype.setTransferContextId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string client_identity_pubkey = 4;
 * @return {string}
 */
proto.relay.satp.LockAssertionReceiptRequest.prototype.getClientIdentityPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.LockAssertionReceiptRequest} returns this
 */
proto.relay.satp.LockAssertionReceiptRequest.prototype.setClientIdentityPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string server_identity_pubkey = 5;
 * @return {string}
 */
proto.relay.satp.LockAssertionReceiptRequest.prototype.getServerIdentityPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.LockAssertionReceiptRequest} returns this
 */
proto.relay.satp.LockAssertionReceiptRequest.prototype.setServerIdentityPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string hash_prev_message = 6;
 * @return {string}
 */
proto.relay.satp.LockAssertionReceiptRequest.prototype.getHashPrevMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.LockAssertionReceiptRequest} returns this
 */
proto.relay.satp.LockAssertionReceiptRequest.prototype.setHashPrevMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string server_transfer_number = 7;
 * @return {string}
 */
proto.relay.satp.LockAssertionReceiptRequest.prototype.getServerTransferNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.LockAssertionReceiptRequest} returns this
 */
proto.relay.satp.LockAssertionReceiptRequest.prototype.setServerTransferNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string server_signature = 8;
 * @return {string}
 */
proto.relay.satp.LockAssertionReceiptRequest.prototype.getServerSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.LockAssertionReceiptRequest} returns this
 */
proto.relay.satp.LockAssertionReceiptRequest.prototype.setServerSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.satp.CommitPrepareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.satp.CommitPrepareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.satp.CommitPrepareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.satp.CommitPrepareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sessionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    transferContextId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.satp.CommitPrepareRequest}
 */
proto.relay.satp.CommitPrepareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.satp.CommitPrepareRequest;
  return proto.relay.satp.CommitPrepareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.satp.CommitPrepareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.satp.CommitPrepareRequest}
 */
proto.relay.satp.CommitPrepareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransferContextId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.satp.CommitPrepareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.satp.CommitPrepareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.satp.CommitPrepareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.satp.CommitPrepareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTransferContextId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string message_type = 1;
 * @return {string}
 */
proto.relay.satp.CommitPrepareRequest.prototype.getMessageType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.CommitPrepareRequest} returns this
 */
proto.relay.satp.CommitPrepareRequest.prototype.setMessageType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string session_id = 2;
 * @return {string}
 */
proto.relay.satp.CommitPrepareRequest.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.CommitPrepareRequest} returns this
 */
proto.relay.satp.CommitPrepareRequest.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string transfer_context_id = 3;
 * @return {string}
 */
proto.relay.satp.CommitPrepareRequest.prototype.getTransferContextId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.CommitPrepareRequest} returns this
 */
proto.relay.satp.CommitPrepareRequest.prototype.setTransferContextId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.satp.CommitReadyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.satp.CommitReadyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.satp.CommitReadyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.satp.CommitReadyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sessionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    transferContextId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.satp.CommitReadyRequest}
 */
proto.relay.satp.CommitReadyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.satp.CommitReadyRequest;
  return proto.relay.satp.CommitReadyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.satp.CommitReadyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.satp.CommitReadyRequest}
 */
proto.relay.satp.CommitReadyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransferContextId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.satp.CommitReadyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.satp.CommitReadyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.satp.CommitReadyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.satp.CommitReadyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTransferContextId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string message_type = 1;
 * @return {string}
 */
proto.relay.satp.CommitReadyRequest.prototype.getMessageType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.CommitReadyRequest} returns this
 */
proto.relay.satp.CommitReadyRequest.prototype.setMessageType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string session_id = 2;
 * @return {string}
 */
proto.relay.satp.CommitReadyRequest.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.CommitReadyRequest} returns this
 */
proto.relay.satp.CommitReadyRequest.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string transfer_context_id = 3;
 * @return {string}
 */
proto.relay.satp.CommitReadyRequest.prototype.getTransferContextId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.CommitReadyRequest} returns this
 */
proto.relay.satp.CommitReadyRequest.prototype.setTransferContextId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.satp.CommitFinalAssertionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.satp.CommitFinalAssertionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.satp.CommitFinalAssertionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.satp.CommitFinalAssertionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sessionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    transferContextId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.satp.CommitFinalAssertionRequest}
 */
proto.relay.satp.CommitFinalAssertionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.satp.CommitFinalAssertionRequest;
  return proto.relay.satp.CommitFinalAssertionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.satp.CommitFinalAssertionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.satp.CommitFinalAssertionRequest}
 */
proto.relay.satp.CommitFinalAssertionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransferContextId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.satp.CommitFinalAssertionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.satp.CommitFinalAssertionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.satp.CommitFinalAssertionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.satp.CommitFinalAssertionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTransferContextId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string message_type = 1;
 * @return {string}
 */
proto.relay.satp.CommitFinalAssertionRequest.prototype.getMessageType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.CommitFinalAssertionRequest} returns this
 */
proto.relay.satp.CommitFinalAssertionRequest.prototype.setMessageType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string session_id = 2;
 * @return {string}
 */
proto.relay.satp.CommitFinalAssertionRequest.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.CommitFinalAssertionRequest} returns this
 */
proto.relay.satp.CommitFinalAssertionRequest.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string transfer_context_id = 3;
 * @return {string}
 */
proto.relay.satp.CommitFinalAssertionRequest.prototype.getTransferContextId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.CommitFinalAssertionRequest} returns this
 */
proto.relay.satp.CommitFinalAssertionRequest.prototype.setTransferContextId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.satp.AckFinalReceiptRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.satp.AckFinalReceiptRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.satp.AckFinalReceiptRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.satp.AckFinalReceiptRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sessionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    transferContextId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.satp.AckFinalReceiptRequest}
 */
proto.relay.satp.AckFinalReceiptRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.satp.AckFinalReceiptRequest;
  return proto.relay.satp.AckFinalReceiptRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.satp.AckFinalReceiptRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.satp.AckFinalReceiptRequest}
 */
proto.relay.satp.AckFinalReceiptRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransferContextId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.satp.AckFinalReceiptRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.satp.AckFinalReceiptRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.satp.AckFinalReceiptRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.satp.AckFinalReceiptRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTransferContextId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string message_type = 1;
 * @return {string}
 */
proto.relay.satp.AckFinalReceiptRequest.prototype.getMessageType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.AckFinalReceiptRequest} returns this
 */
proto.relay.satp.AckFinalReceiptRequest.prototype.setMessageType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string session_id = 2;
 * @return {string}
 */
proto.relay.satp.AckFinalReceiptRequest.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.AckFinalReceiptRequest} returns this
 */
proto.relay.satp.AckFinalReceiptRequest.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string transfer_context_id = 3;
 * @return {string}
 */
proto.relay.satp.AckFinalReceiptRequest.prototype.getTransferContextId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.AckFinalReceiptRequest} returns this
 */
proto.relay.satp.AckFinalReceiptRequest.prototype.setTransferContextId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.satp.TransferCompletedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.satp.TransferCompletedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.satp.TransferCompletedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.satp.TransferCompletedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sessionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    transferContextId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.satp.TransferCompletedRequest}
 */
proto.relay.satp.TransferCompletedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.satp.TransferCompletedRequest;
  return proto.relay.satp.TransferCompletedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.satp.TransferCompletedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.satp.TransferCompletedRequest}
 */
proto.relay.satp.TransferCompletedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransferContextId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.satp.TransferCompletedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.satp.TransferCompletedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.satp.TransferCompletedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.satp.TransferCompletedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTransferContextId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string message_type = 1;
 * @return {string}
 */
proto.relay.satp.TransferCompletedRequest.prototype.getMessageType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferCompletedRequest} returns this
 */
proto.relay.satp.TransferCompletedRequest.prototype.setMessageType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string session_id = 2;
 * @return {string}
 */
proto.relay.satp.TransferCompletedRequest.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferCompletedRequest} returns this
 */
proto.relay.satp.TransferCompletedRequest.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string transfer_context_id = 3;
 * @return {string}
 */
proto.relay.satp.TransferCompletedRequest.prototype.getTransferContextId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.satp.TransferCompletedRequest} returns this
 */
proto.relay.satp.TransferCompletedRequest.prototype.setTransferContextId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


goog.object.extend(exports, proto.relay.satp);
