// source: common/asset_locks.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.common.asset_locks.AssetClaim', null, global);
goog.exportSymbol('proto.common.asset_locks.AssetClaimHTLC', null, global);
goog.exportSymbol('proto.common.asset_locks.AssetContractHTLC', null, global);
goog.exportSymbol('proto.common.asset_locks.AssetExchangeAgreement', null, global);
goog.exportSymbol('proto.common.asset_locks.AssetLock', null, global);
goog.exportSymbol('proto.common.asset_locks.AssetLockHTLC', null, global);
goog.exportSymbol('proto.common.asset_locks.FungibleAssetContractHTLC', null, global);
goog.exportSymbol('proto.common.asset_locks.FungibleAssetExchangeAgreement', null, global);
goog.exportSymbol('proto.common.asset_locks.HashMechanism', null, global);
goog.exportSymbol('proto.common.asset_locks.HybridAssetExchangeAgreement', null, global);
goog.exportSymbol('proto.common.asset_locks.LockMechanism', null, global);
goog.exportSymbol('proto.common.asset_locks.TimeSpec', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.asset_locks.AssetLock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.asset_locks.AssetLock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.asset_locks.AssetLock.displayName = 'proto.common.asset_locks.AssetLock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.asset_locks.AssetClaim = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.asset_locks.AssetClaim, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.asset_locks.AssetClaim.displayName = 'proto.common.asset_locks.AssetClaim';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.asset_locks.AssetLockHTLC = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.asset_locks.AssetLockHTLC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.asset_locks.AssetLockHTLC.displayName = 'proto.common.asset_locks.AssetLockHTLC';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.asset_locks.AssetClaimHTLC = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.asset_locks.AssetClaimHTLC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.asset_locks.AssetClaimHTLC.displayName = 'proto.common.asset_locks.AssetClaimHTLC';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.asset_locks.AssetExchangeAgreement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.asset_locks.AssetExchangeAgreement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.asset_locks.AssetExchangeAgreement.displayName = 'proto.common.asset_locks.AssetExchangeAgreement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.asset_locks.HybridAssetExchangeAgreement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.asset_locks.HybridAssetExchangeAgreement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.asset_locks.HybridAssetExchangeAgreement.displayName = 'proto.common.asset_locks.HybridAssetExchangeAgreement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.asset_locks.FungibleAssetExchangeAgreement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.asset_locks.FungibleAssetExchangeAgreement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.asset_locks.FungibleAssetExchangeAgreement.displayName = 'proto.common.asset_locks.FungibleAssetExchangeAgreement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.asset_locks.AssetContractHTLC = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.asset_locks.AssetContractHTLC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.asset_locks.AssetContractHTLC.displayName = 'proto.common.asset_locks.AssetContractHTLC';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.asset_locks.FungibleAssetContractHTLC = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.asset_locks.FungibleAssetContractHTLC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.asset_locks.FungibleAssetContractHTLC.displayName = 'proto.common.asset_locks.FungibleAssetContractHTLC';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.asset_locks.AssetLock.prototype.toObject = function(opt_includeInstance) {
  return proto.common.asset_locks.AssetLock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.asset_locks.AssetLock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.asset_locks.AssetLock.toObject = function(includeInstance, msg) {
  var f, obj = {
    lockmechanism: jspb.Message.getFieldWithDefault(msg, 1, 0),
    lockinfo: msg.getLockinfo_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.asset_locks.AssetLock}
 */
proto.common.asset_locks.AssetLock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.asset_locks.AssetLock;
  return proto.common.asset_locks.AssetLock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.asset_locks.AssetLock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.asset_locks.AssetLock}
 */
proto.common.asset_locks.AssetLock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.common.asset_locks.LockMechanism} */ (reader.readEnum());
      msg.setLockmechanism(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLockinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.asset_locks.AssetLock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.asset_locks.AssetLock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.asset_locks.AssetLock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.asset_locks.AssetLock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLockmechanism();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLockinfo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional LockMechanism lockMechanism = 1;
 * @return {!proto.common.asset_locks.LockMechanism}
 */
proto.common.asset_locks.AssetLock.prototype.getLockmechanism = function() {
  return /** @type {!proto.common.asset_locks.LockMechanism} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.common.asset_locks.LockMechanism} value
 * @return {!proto.common.asset_locks.AssetLock} returns this
 */
proto.common.asset_locks.AssetLock.prototype.setLockmechanism = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes lockInfo = 2;
 * @return {!(string|Uint8Array)}
 */
proto.common.asset_locks.AssetLock.prototype.getLockinfo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes lockInfo = 2;
 * This is a type-conversion wrapper around `getLockinfo()`
 * @return {string}
 */
proto.common.asset_locks.AssetLock.prototype.getLockinfo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLockinfo()));
};


/**
 * optional bytes lockInfo = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLockinfo()`
 * @return {!Uint8Array}
 */
proto.common.asset_locks.AssetLock.prototype.getLockinfo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLockinfo()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.asset_locks.AssetLock} returns this
 */
proto.common.asset_locks.AssetLock.prototype.setLockinfo = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.asset_locks.AssetClaim.prototype.toObject = function(opt_includeInstance) {
  return proto.common.asset_locks.AssetClaim.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.asset_locks.AssetClaim} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.asset_locks.AssetClaim.toObject = function(includeInstance, msg) {
  var f, obj = {
    lockmechanism: jspb.Message.getFieldWithDefault(msg, 1, 0),
    claiminfo: msg.getClaiminfo_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.asset_locks.AssetClaim}
 */
proto.common.asset_locks.AssetClaim.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.asset_locks.AssetClaim;
  return proto.common.asset_locks.AssetClaim.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.asset_locks.AssetClaim} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.asset_locks.AssetClaim}
 */
proto.common.asset_locks.AssetClaim.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.common.asset_locks.LockMechanism} */ (reader.readEnum());
      msg.setLockmechanism(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClaiminfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.asset_locks.AssetClaim.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.asset_locks.AssetClaim.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.asset_locks.AssetClaim} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.asset_locks.AssetClaim.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLockmechanism();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getClaiminfo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional LockMechanism lockMechanism = 1;
 * @return {!proto.common.asset_locks.LockMechanism}
 */
proto.common.asset_locks.AssetClaim.prototype.getLockmechanism = function() {
  return /** @type {!proto.common.asset_locks.LockMechanism} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.common.asset_locks.LockMechanism} value
 * @return {!proto.common.asset_locks.AssetClaim} returns this
 */
proto.common.asset_locks.AssetClaim.prototype.setLockmechanism = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes claimInfo = 2;
 * @return {!(string|Uint8Array)}
 */
proto.common.asset_locks.AssetClaim.prototype.getClaiminfo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes claimInfo = 2;
 * This is a type-conversion wrapper around `getClaiminfo()`
 * @return {string}
 */
proto.common.asset_locks.AssetClaim.prototype.getClaiminfo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClaiminfo()));
};


/**
 * optional bytes claimInfo = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClaiminfo()`
 * @return {!Uint8Array}
 */
proto.common.asset_locks.AssetClaim.prototype.getClaiminfo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClaiminfo()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.asset_locks.AssetClaim} returns this
 */
proto.common.asset_locks.AssetClaim.prototype.setClaiminfo = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.asset_locks.AssetLockHTLC.prototype.toObject = function(opt_includeInstance) {
  return proto.common.asset_locks.AssetLockHTLC.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.asset_locks.AssetLockHTLC} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.asset_locks.AssetLockHTLC.toObject = function(includeInstance, msg) {
  var f, obj = {
    hashmechanism: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hashbase64: msg.getHashbase64_asB64(),
    expirytimesecs: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timespec: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.asset_locks.AssetLockHTLC}
 */
proto.common.asset_locks.AssetLockHTLC.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.asset_locks.AssetLockHTLC;
  return proto.common.asset_locks.AssetLockHTLC.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.asset_locks.AssetLockHTLC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.asset_locks.AssetLockHTLC}
 */
proto.common.asset_locks.AssetLockHTLC.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.common.asset_locks.HashMechanism} */ (reader.readEnum());
      msg.setHashmechanism(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHashbase64(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExpirytimesecs(value);
      break;
    case 4:
      var value = /** @type {!proto.common.asset_locks.TimeSpec} */ (reader.readEnum());
      msg.setTimespec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.asset_locks.AssetLockHTLC.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.asset_locks.AssetLockHTLC.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.asset_locks.AssetLockHTLC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.asset_locks.AssetLockHTLC.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHashmechanism();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getHashbase64_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getExpirytimesecs();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getTimespec();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional HashMechanism hashMechanism = 1;
 * @return {!proto.common.asset_locks.HashMechanism}
 */
proto.common.asset_locks.AssetLockHTLC.prototype.getHashmechanism = function() {
  return /** @type {!proto.common.asset_locks.HashMechanism} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.common.asset_locks.HashMechanism} value
 * @return {!proto.common.asset_locks.AssetLockHTLC} returns this
 */
proto.common.asset_locks.AssetLockHTLC.prototype.setHashmechanism = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes hashBase64 = 2;
 * @return {!(string|Uint8Array)}
 */
proto.common.asset_locks.AssetLockHTLC.prototype.getHashbase64 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes hashBase64 = 2;
 * This is a type-conversion wrapper around `getHashbase64()`
 * @return {string}
 */
proto.common.asset_locks.AssetLockHTLC.prototype.getHashbase64_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHashbase64()));
};


/**
 * optional bytes hashBase64 = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHashbase64()`
 * @return {!Uint8Array}
 */
proto.common.asset_locks.AssetLockHTLC.prototype.getHashbase64_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHashbase64()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.asset_locks.AssetLockHTLC} returns this
 */
proto.common.asset_locks.AssetLockHTLC.prototype.setHashbase64 = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 expiryTimeSecs = 3;
 * @return {number}
 */
proto.common.asset_locks.AssetLockHTLC.prototype.getExpirytimesecs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.asset_locks.AssetLockHTLC} returns this
 */
proto.common.asset_locks.AssetLockHTLC.prototype.setExpirytimesecs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional TimeSpec timeSpec = 4;
 * @return {!proto.common.asset_locks.TimeSpec}
 */
proto.common.asset_locks.AssetLockHTLC.prototype.getTimespec = function() {
  return /** @type {!proto.common.asset_locks.TimeSpec} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.common.asset_locks.TimeSpec} value
 * @return {!proto.common.asset_locks.AssetLockHTLC} returns this
 */
proto.common.asset_locks.AssetLockHTLC.prototype.setTimespec = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.asset_locks.AssetClaimHTLC.prototype.toObject = function(opt_includeInstance) {
  return proto.common.asset_locks.AssetClaimHTLC.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.asset_locks.AssetClaimHTLC} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.asset_locks.AssetClaimHTLC.toObject = function(includeInstance, msg) {
  var f, obj = {
    hashmechanism: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hashpreimagebase64: msg.getHashpreimagebase64_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.asset_locks.AssetClaimHTLC}
 */
proto.common.asset_locks.AssetClaimHTLC.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.asset_locks.AssetClaimHTLC;
  return proto.common.asset_locks.AssetClaimHTLC.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.asset_locks.AssetClaimHTLC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.asset_locks.AssetClaimHTLC}
 */
proto.common.asset_locks.AssetClaimHTLC.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.common.asset_locks.HashMechanism} */ (reader.readEnum());
      msg.setHashmechanism(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHashpreimagebase64(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.asset_locks.AssetClaimHTLC.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.asset_locks.AssetClaimHTLC.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.asset_locks.AssetClaimHTLC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.asset_locks.AssetClaimHTLC.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHashmechanism();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getHashpreimagebase64_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional HashMechanism hashMechanism = 1;
 * @return {!proto.common.asset_locks.HashMechanism}
 */
proto.common.asset_locks.AssetClaimHTLC.prototype.getHashmechanism = function() {
  return /** @type {!proto.common.asset_locks.HashMechanism} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.common.asset_locks.HashMechanism} value
 * @return {!proto.common.asset_locks.AssetClaimHTLC} returns this
 */
proto.common.asset_locks.AssetClaimHTLC.prototype.setHashmechanism = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes hashPreimageBase64 = 2;
 * @return {!(string|Uint8Array)}
 */
proto.common.asset_locks.AssetClaimHTLC.prototype.getHashpreimagebase64 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes hashPreimageBase64 = 2;
 * This is a type-conversion wrapper around `getHashpreimagebase64()`
 * @return {string}
 */
proto.common.asset_locks.AssetClaimHTLC.prototype.getHashpreimagebase64_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHashpreimagebase64()));
};


/**
 * optional bytes hashPreimageBase64 = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHashpreimagebase64()`
 * @return {!Uint8Array}
 */
proto.common.asset_locks.AssetClaimHTLC.prototype.getHashpreimagebase64_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHashpreimagebase64()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.asset_locks.AssetClaimHTLC} returns this
 */
proto.common.asset_locks.AssetClaimHTLC.prototype.setHashpreimagebase64 = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.asset_locks.AssetExchangeAgreement.prototype.toObject = function(opt_includeInstance) {
  return proto.common.asset_locks.AssetExchangeAgreement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.asset_locks.AssetExchangeAgreement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.asset_locks.AssetExchangeAgreement.toObject = function(includeInstance, msg) {
  var f, obj = {
    assettype: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    locker: jspb.Message.getFieldWithDefault(msg, 3, ""),
    recipient: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.asset_locks.AssetExchangeAgreement}
 */
proto.common.asset_locks.AssetExchangeAgreement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.asset_locks.AssetExchangeAgreement;
  return proto.common.asset_locks.AssetExchangeAgreement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.asset_locks.AssetExchangeAgreement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.asset_locks.AssetExchangeAgreement}
 */
proto.common.asset_locks.AssetExchangeAgreement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssettype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocker(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipient(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.asset_locks.AssetExchangeAgreement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.asset_locks.AssetExchangeAgreement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.asset_locks.AssetExchangeAgreement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.asset_locks.AssetExchangeAgreement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssettype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLocker();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRecipient();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string assetType = 1;
 * @return {string}
 */
proto.common.asset_locks.AssetExchangeAgreement.prototype.getAssettype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.asset_locks.AssetExchangeAgreement} returns this
 */
proto.common.asset_locks.AssetExchangeAgreement.prototype.setAssettype = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.common.asset_locks.AssetExchangeAgreement.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.asset_locks.AssetExchangeAgreement} returns this
 */
proto.common.asset_locks.AssetExchangeAgreement.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string locker = 3;
 * @return {string}
 */
proto.common.asset_locks.AssetExchangeAgreement.prototype.getLocker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.asset_locks.AssetExchangeAgreement} returns this
 */
proto.common.asset_locks.AssetExchangeAgreement.prototype.setLocker = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string recipient = 4;
 * @return {string}
 */
proto.common.asset_locks.AssetExchangeAgreement.prototype.getRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.asset_locks.AssetExchangeAgreement} returns this
 */
proto.common.asset_locks.AssetExchangeAgreement.prototype.setRecipient = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.asset_locks.HybridAssetExchangeAgreement.prototype.toObject = function(opt_includeInstance) {
  return proto.common.asset_locks.HybridAssetExchangeAgreement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.asset_locks.HybridAssetExchangeAgreement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.asset_locks.HybridAssetExchangeAgreement.toObject = function(includeInstance, msg) {
  var f, obj = {
    assettype: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    assetdata: msg.getAssetdata_asB64(),
    numunits: jspb.Message.getFieldWithDefault(msg, 4, 0),
    locker: jspb.Message.getFieldWithDefault(msg, 5, ""),
    recipient: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.asset_locks.HybridAssetExchangeAgreement}
 */
proto.common.asset_locks.HybridAssetExchangeAgreement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.asset_locks.HybridAssetExchangeAgreement;
  return proto.common.asset_locks.HybridAssetExchangeAgreement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.asset_locks.HybridAssetExchangeAgreement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.asset_locks.HybridAssetExchangeAgreement}
 */
proto.common.asset_locks.HybridAssetExchangeAgreement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssettype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAssetdata(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumunits(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocker(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipient(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.asset_locks.HybridAssetExchangeAgreement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.asset_locks.HybridAssetExchangeAgreement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.asset_locks.HybridAssetExchangeAgreement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.asset_locks.HybridAssetExchangeAgreement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssettype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAssetdata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getNumunits();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getLocker();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRecipient();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string assetType = 1;
 * @return {string}
 */
proto.common.asset_locks.HybridAssetExchangeAgreement.prototype.getAssettype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.asset_locks.HybridAssetExchangeAgreement} returns this
 */
proto.common.asset_locks.HybridAssetExchangeAgreement.prototype.setAssettype = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.common.asset_locks.HybridAssetExchangeAgreement.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.asset_locks.HybridAssetExchangeAgreement} returns this
 */
proto.common.asset_locks.HybridAssetExchangeAgreement.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes assetData = 3;
 * @return {!(string|Uint8Array)}
 */
proto.common.asset_locks.HybridAssetExchangeAgreement.prototype.getAssetdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes assetData = 3;
 * This is a type-conversion wrapper around `getAssetdata()`
 * @return {string}
 */
proto.common.asset_locks.HybridAssetExchangeAgreement.prototype.getAssetdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAssetdata()));
};


/**
 * optional bytes assetData = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAssetdata()`
 * @return {!Uint8Array}
 */
proto.common.asset_locks.HybridAssetExchangeAgreement.prototype.getAssetdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAssetdata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.asset_locks.HybridAssetExchangeAgreement} returns this
 */
proto.common.asset_locks.HybridAssetExchangeAgreement.prototype.setAssetdata = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint64 numUnits = 4;
 * @return {number}
 */
proto.common.asset_locks.HybridAssetExchangeAgreement.prototype.getNumunits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.asset_locks.HybridAssetExchangeAgreement} returns this
 */
proto.common.asset_locks.HybridAssetExchangeAgreement.prototype.setNumunits = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string locker = 5;
 * @return {string}
 */
proto.common.asset_locks.HybridAssetExchangeAgreement.prototype.getLocker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.asset_locks.HybridAssetExchangeAgreement} returns this
 */
proto.common.asset_locks.HybridAssetExchangeAgreement.prototype.setLocker = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string recipient = 6;
 * @return {string}
 */
proto.common.asset_locks.HybridAssetExchangeAgreement.prototype.getRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.asset_locks.HybridAssetExchangeAgreement} returns this
 */
proto.common.asset_locks.HybridAssetExchangeAgreement.prototype.setRecipient = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.asset_locks.FungibleAssetExchangeAgreement.prototype.toObject = function(opt_includeInstance) {
  return proto.common.asset_locks.FungibleAssetExchangeAgreement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.asset_locks.FungibleAssetExchangeAgreement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.asset_locks.FungibleAssetExchangeAgreement.toObject = function(includeInstance, msg) {
  var f, obj = {
    assettype: jspb.Message.getFieldWithDefault(msg, 1, ""),
    numunits: jspb.Message.getFieldWithDefault(msg, 2, 0),
    locker: jspb.Message.getFieldWithDefault(msg, 3, ""),
    recipient: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.asset_locks.FungibleAssetExchangeAgreement}
 */
proto.common.asset_locks.FungibleAssetExchangeAgreement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.asset_locks.FungibleAssetExchangeAgreement;
  return proto.common.asset_locks.FungibleAssetExchangeAgreement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.asset_locks.FungibleAssetExchangeAgreement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.asset_locks.FungibleAssetExchangeAgreement}
 */
proto.common.asset_locks.FungibleAssetExchangeAgreement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssettype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumunits(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocker(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipient(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.asset_locks.FungibleAssetExchangeAgreement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.asset_locks.FungibleAssetExchangeAgreement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.asset_locks.FungibleAssetExchangeAgreement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.asset_locks.FungibleAssetExchangeAgreement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssettype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNumunits();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getLocker();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRecipient();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string assetType = 1;
 * @return {string}
 */
proto.common.asset_locks.FungibleAssetExchangeAgreement.prototype.getAssettype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.asset_locks.FungibleAssetExchangeAgreement} returns this
 */
proto.common.asset_locks.FungibleAssetExchangeAgreement.prototype.setAssettype = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 numUnits = 2;
 * @return {number}
 */
proto.common.asset_locks.FungibleAssetExchangeAgreement.prototype.getNumunits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.asset_locks.FungibleAssetExchangeAgreement} returns this
 */
proto.common.asset_locks.FungibleAssetExchangeAgreement.prototype.setNumunits = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string locker = 3;
 * @return {string}
 */
proto.common.asset_locks.FungibleAssetExchangeAgreement.prototype.getLocker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.asset_locks.FungibleAssetExchangeAgreement} returns this
 */
proto.common.asset_locks.FungibleAssetExchangeAgreement.prototype.setLocker = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string recipient = 4;
 * @return {string}
 */
proto.common.asset_locks.FungibleAssetExchangeAgreement.prototype.getRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.asset_locks.FungibleAssetExchangeAgreement} returns this
 */
proto.common.asset_locks.FungibleAssetExchangeAgreement.prototype.setRecipient = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.asset_locks.AssetContractHTLC.prototype.toObject = function(opt_includeInstance) {
  return proto.common.asset_locks.AssetContractHTLC.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.asset_locks.AssetContractHTLC} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.asset_locks.AssetContractHTLC.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    agreement: (f = msg.getAgreement()) && proto.common.asset_locks.AssetExchangeAgreement.toObject(includeInstance, f),
    lock: (f = msg.getLock()) && proto.common.asset_locks.AssetLockHTLC.toObject(includeInstance, f),
    claim: (f = msg.getClaim()) && proto.common.asset_locks.AssetClaimHTLC.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.asset_locks.AssetContractHTLC}
 */
proto.common.asset_locks.AssetContractHTLC.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.asset_locks.AssetContractHTLC;
  return proto.common.asset_locks.AssetContractHTLC.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.asset_locks.AssetContractHTLC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.asset_locks.AssetContractHTLC}
 */
proto.common.asset_locks.AssetContractHTLC.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractid(value);
      break;
    case 2:
      var value = new proto.common.asset_locks.AssetExchangeAgreement;
      reader.readMessage(value,proto.common.asset_locks.AssetExchangeAgreement.deserializeBinaryFromReader);
      msg.setAgreement(value);
      break;
    case 3:
      var value = new proto.common.asset_locks.AssetLockHTLC;
      reader.readMessage(value,proto.common.asset_locks.AssetLockHTLC.deserializeBinaryFromReader);
      msg.setLock(value);
      break;
    case 4:
      var value = new proto.common.asset_locks.AssetClaimHTLC;
      reader.readMessage(value,proto.common.asset_locks.AssetClaimHTLC.deserializeBinaryFromReader);
      msg.setClaim(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.asset_locks.AssetContractHTLC.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.asset_locks.AssetContractHTLC.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.asset_locks.AssetContractHTLC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.asset_locks.AssetContractHTLC.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAgreement();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.common.asset_locks.AssetExchangeAgreement.serializeBinaryToWriter
    );
  }
  f = message.getLock();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.common.asset_locks.AssetLockHTLC.serializeBinaryToWriter
    );
  }
  f = message.getClaim();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.common.asset_locks.AssetClaimHTLC.serializeBinaryToWriter
    );
  }
};


/**
 * optional string contractId = 1;
 * @return {string}
 */
proto.common.asset_locks.AssetContractHTLC.prototype.getContractid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.asset_locks.AssetContractHTLC} returns this
 */
proto.common.asset_locks.AssetContractHTLC.prototype.setContractid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AssetExchangeAgreement agreement = 2;
 * @return {?proto.common.asset_locks.AssetExchangeAgreement}
 */
proto.common.asset_locks.AssetContractHTLC.prototype.getAgreement = function() {
  return /** @type{?proto.common.asset_locks.AssetExchangeAgreement} */ (
    jspb.Message.getWrapperField(this, proto.common.asset_locks.AssetExchangeAgreement, 2));
};


/**
 * @param {?proto.common.asset_locks.AssetExchangeAgreement|undefined} value
 * @return {!proto.common.asset_locks.AssetContractHTLC} returns this
*/
proto.common.asset_locks.AssetContractHTLC.prototype.setAgreement = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.asset_locks.AssetContractHTLC} returns this
 */
proto.common.asset_locks.AssetContractHTLC.prototype.clearAgreement = function() {
  return this.setAgreement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.asset_locks.AssetContractHTLC.prototype.hasAgreement = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AssetLockHTLC lock = 3;
 * @return {?proto.common.asset_locks.AssetLockHTLC}
 */
proto.common.asset_locks.AssetContractHTLC.prototype.getLock = function() {
  return /** @type{?proto.common.asset_locks.AssetLockHTLC} */ (
    jspb.Message.getWrapperField(this, proto.common.asset_locks.AssetLockHTLC, 3));
};


/**
 * @param {?proto.common.asset_locks.AssetLockHTLC|undefined} value
 * @return {!proto.common.asset_locks.AssetContractHTLC} returns this
*/
proto.common.asset_locks.AssetContractHTLC.prototype.setLock = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.asset_locks.AssetContractHTLC} returns this
 */
proto.common.asset_locks.AssetContractHTLC.prototype.clearLock = function() {
  return this.setLock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.asset_locks.AssetContractHTLC.prototype.hasLock = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AssetClaimHTLC claim = 4;
 * @return {?proto.common.asset_locks.AssetClaimHTLC}
 */
proto.common.asset_locks.AssetContractHTLC.prototype.getClaim = function() {
  return /** @type{?proto.common.asset_locks.AssetClaimHTLC} */ (
    jspb.Message.getWrapperField(this, proto.common.asset_locks.AssetClaimHTLC, 4));
};


/**
 * @param {?proto.common.asset_locks.AssetClaimHTLC|undefined} value
 * @return {!proto.common.asset_locks.AssetContractHTLC} returns this
*/
proto.common.asset_locks.AssetContractHTLC.prototype.setClaim = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.asset_locks.AssetContractHTLC} returns this
 */
proto.common.asset_locks.AssetContractHTLC.prototype.clearClaim = function() {
  return this.setClaim(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.asset_locks.AssetContractHTLC.prototype.hasClaim = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.asset_locks.FungibleAssetContractHTLC.prototype.toObject = function(opt_includeInstance) {
  return proto.common.asset_locks.FungibleAssetContractHTLC.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.asset_locks.FungibleAssetContractHTLC} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.asset_locks.FungibleAssetContractHTLC.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    agreement: (f = msg.getAgreement()) && proto.common.asset_locks.FungibleAssetExchangeAgreement.toObject(includeInstance, f),
    lock: (f = msg.getLock()) && proto.common.asset_locks.AssetLockHTLC.toObject(includeInstance, f),
    claim: (f = msg.getClaim()) && proto.common.asset_locks.AssetClaimHTLC.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.asset_locks.FungibleAssetContractHTLC}
 */
proto.common.asset_locks.FungibleAssetContractHTLC.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.asset_locks.FungibleAssetContractHTLC;
  return proto.common.asset_locks.FungibleAssetContractHTLC.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.asset_locks.FungibleAssetContractHTLC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.asset_locks.FungibleAssetContractHTLC}
 */
proto.common.asset_locks.FungibleAssetContractHTLC.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractid(value);
      break;
    case 2:
      var value = new proto.common.asset_locks.FungibleAssetExchangeAgreement;
      reader.readMessage(value,proto.common.asset_locks.FungibleAssetExchangeAgreement.deserializeBinaryFromReader);
      msg.setAgreement(value);
      break;
    case 3:
      var value = new proto.common.asset_locks.AssetLockHTLC;
      reader.readMessage(value,proto.common.asset_locks.AssetLockHTLC.deserializeBinaryFromReader);
      msg.setLock(value);
      break;
    case 4:
      var value = new proto.common.asset_locks.AssetClaimHTLC;
      reader.readMessage(value,proto.common.asset_locks.AssetClaimHTLC.deserializeBinaryFromReader);
      msg.setClaim(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.asset_locks.FungibleAssetContractHTLC.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.asset_locks.FungibleAssetContractHTLC.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.asset_locks.FungibleAssetContractHTLC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.asset_locks.FungibleAssetContractHTLC.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAgreement();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.common.asset_locks.FungibleAssetExchangeAgreement.serializeBinaryToWriter
    );
  }
  f = message.getLock();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.common.asset_locks.AssetLockHTLC.serializeBinaryToWriter
    );
  }
  f = message.getClaim();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.common.asset_locks.AssetClaimHTLC.serializeBinaryToWriter
    );
  }
};


/**
 * optional string contractId = 1;
 * @return {string}
 */
proto.common.asset_locks.FungibleAssetContractHTLC.prototype.getContractid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.asset_locks.FungibleAssetContractHTLC} returns this
 */
proto.common.asset_locks.FungibleAssetContractHTLC.prototype.setContractid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional FungibleAssetExchangeAgreement agreement = 2;
 * @return {?proto.common.asset_locks.FungibleAssetExchangeAgreement}
 */
proto.common.asset_locks.FungibleAssetContractHTLC.prototype.getAgreement = function() {
  return /** @type{?proto.common.asset_locks.FungibleAssetExchangeAgreement} */ (
    jspb.Message.getWrapperField(this, proto.common.asset_locks.FungibleAssetExchangeAgreement, 2));
};


/**
 * @param {?proto.common.asset_locks.FungibleAssetExchangeAgreement|undefined} value
 * @return {!proto.common.asset_locks.FungibleAssetContractHTLC} returns this
*/
proto.common.asset_locks.FungibleAssetContractHTLC.prototype.setAgreement = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.asset_locks.FungibleAssetContractHTLC} returns this
 */
proto.common.asset_locks.FungibleAssetContractHTLC.prototype.clearAgreement = function() {
  return this.setAgreement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.asset_locks.FungibleAssetContractHTLC.prototype.hasAgreement = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AssetLockHTLC lock = 3;
 * @return {?proto.common.asset_locks.AssetLockHTLC}
 */
proto.common.asset_locks.FungibleAssetContractHTLC.prototype.getLock = function() {
  return /** @type{?proto.common.asset_locks.AssetLockHTLC} */ (
    jspb.Message.getWrapperField(this, proto.common.asset_locks.AssetLockHTLC, 3));
};


/**
 * @param {?proto.common.asset_locks.AssetLockHTLC|undefined} value
 * @return {!proto.common.asset_locks.FungibleAssetContractHTLC} returns this
*/
proto.common.asset_locks.FungibleAssetContractHTLC.prototype.setLock = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.asset_locks.FungibleAssetContractHTLC} returns this
 */
proto.common.asset_locks.FungibleAssetContractHTLC.prototype.clearLock = function() {
  return this.setLock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.asset_locks.FungibleAssetContractHTLC.prototype.hasLock = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AssetClaimHTLC claim = 4;
 * @return {?proto.common.asset_locks.AssetClaimHTLC}
 */
proto.common.asset_locks.FungibleAssetContractHTLC.prototype.getClaim = function() {
  return /** @type{?proto.common.asset_locks.AssetClaimHTLC} */ (
    jspb.Message.getWrapperField(this, proto.common.asset_locks.AssetClaimHTLC, 4));
};


/**
 * @param {?proto.common.asset_locks.AssetClaimHTLC|undefined} value
 * @return {!proto.common.asset_locks.FungibleAssetContractHTLC} returns this
*/
proto.common.asset_locks.FungibleAssetContractHTLC.prototype.setClaim = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.asset_locks.FungibleAssetContractHTLC} returns this
 */
proto.common.asset_locks.FungibleAssetContractHTLC.prototype.clearClaim = function() {
  return this.setClaim(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.asset_locks.FungibleAssetContractHTLC.prototype.hasClaim = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.common.asset_locks.LockMechanism = {
  HTLC: 0
};

/**
 * @enum {number}
 */
proto.common.asset_locks.HashMechanism = {
  SHA256: 0,
  SHA512: 1
};

/**
 * @enum {number}
 */
proto.common.asset_locks.TimeSpec = {
  EPOCH: 0,
  DURATION: 1
};

goog.object.extend(exports, proto.common.asset_locks);
