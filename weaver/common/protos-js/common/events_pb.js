// source: common/events.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var common_query_pb = require('../common/query_pb.js');
goog.object.extend(proto, common_query_pb);
var common_state_pb = require('../common/state_pb.js');
goog.object.extend(proto, common_state_pb);
goog.exportSymbol('proto.common.events.ContractTransaction', null, global);
goog.exportSymbol('proto.common.events.EventMatcher', null, global);
goog.exportSymbol('proto.common.events.EventPublication', null, global);
goog.exportSymbol('proto.common.events.EventPublication.PublicationTargetCase', null, global);
goog.exportSymbol('proto.common.events.EventState', null, global);
goog.exportSymbol('proto.common.events.EventStates', null, global);
goog.exportSymbol('proto.common.events.EventSubOperation', null, global);
goog.exportSymbol('proto.common.events.EventSubscription', null, global);
goog.exportSymbol('proto.common.events.EventSubscriptionState', null, global);
goog.exportSymbol('proto.common.events.EventSubscriptionState.STATUS', null, global);
goog.exportSymbol('proto.common.events.EventType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.events.EventMatcher = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.events.EventMatcher, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.events.EventMatcher.displayName = 'proto.common.events.EventMatcher';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.events.EventSubscription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.events.EventSubscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.events.EventSubscription.displayName = 'proto.common.events.EventSubscription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.events.EventSubscriptionState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.events.EventSubscriptionState.repeatedFields_, null);
};
goog.inherits(proto.common.events.EventSubscriptionState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.events.EventSubscriptionState.displayName = 'proto.common.events.EventSubscriptionState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.events.ContractTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.events.ContractTransaction.repeatedFields_, null);
};
goog.inherits(proto.common.events.ContractTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.events.ContractTransaction.displayName = 'proto.common.events.ContractTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.events.EventPublication = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.common.events.EventPublication.oneofGroups_);
};
goog.inherits(proto.common.events.EventPublication, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.events.EventPublication.displayName = 'proto.common.events.EventPublication';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.events.EventStates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.events.EventStates.repeatedFields_, null);
};
goog.inherits(proto.common.events.EventStates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.events.EventStates.displayName = 'proto.common.events.EventStates';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.events.EventState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.events.EventState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.events.EventState.displayName = 'proto.common.events.EventState';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.events.EventMatcher.prototype.toObject = function(opt_includeInstance) {
  return proto.common.events.EventMatcher.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.events.EventMatcher} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.events.EventMatcher.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    eventClassId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    transactionLedgerId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    transactionContractId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    transactionFunc: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.events.EventMatcher}
 */
proto.common.events.EventMatcher.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.events.EventMatcher;
  return proto.common.events.EventMatcher.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.events.EventMatcher} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.events.EventMatcher}
 */
proto.common.events.EventMatcher.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.common.events.EventType} */ (reader.readEnum());
      msg.setEventType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventClassId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionLedgerId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionContractId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionFunc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.events.EventMatcher.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.events.EventMatcher.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.events.EventMatcher} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.events.EventMatcher.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getEventClassId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTransactionLedgerId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTransactionContractId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTransactionFunc();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional EventType event_type = 1;
 * @return {!proto.common.events.EventType}
 */
proto.common.events.EventMatcher.prototype.getEventType = function() {
  return /** @type {!proto.common.events.EventType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.common.events.EventType} value
 * @return {!proto.common.events.EventMatcher} returns this
 */
proto.common.events.EventMatcher.prototype.setEventType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string event_class_id = 2;
 * @return {string}
 */
proto.common.events.EventMatcher.prototype.getEventClassId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.events.EventMatcher} returns this
 */
proto.common.events.EventMatcher.prototype.setEventClassId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string transaction_ledger_id = 3;
 * @return {string}
 */
proto.common.events.EventMatcher.prototype.getTransactionLedgerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.events.EventMatcher} returns this
 */
proto.common.events.EventMatcher.prototype.setTransactionLedgerId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string transaction_contract_id = 4;
 * @return {string}
 */
proto.common.events.EventMatcher.prototype.getTransactionContractId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.events.EventMatcher} returns this
 */
proto.common.events.EventMatcher.prototype.setTransactionContractId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string transaction_func = 5;
 * @return {string}
 */
proto.common.events.EventMatcher.prototype.getTransactionFunc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.events.EventMatcher} returns this
 */
proto.common.events.EventMatcher.prototype.setTransactionFunc = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.events.EventSubscription.prototype.toObject = function(opt_includeInstance) {
  return proto.common.events.EventSubscription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.events.EventSubscription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.events.EventSubscription.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventMatcher: (f = msg.getEventMatcher()) && proto.common.events.EventMatcher.toObject(includeInstance, f),
    query: (f = msg.getQuery()) && common_query_pb.Query.toObject(includeInstance, f),
    operation: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.events.EventSubscription}
 */
proto.common.events.EventSubscription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.events.EventSubscription;
  return proto.common.events.EventSubscription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.events.EventSubscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.events.EventSubscription}
 */
proto.common.events.EventSubscription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.events.EventMatcher;
      reader.readMessage(value,proto.common.events.EventMatcher.deserializeBinaryFromReader);
      msg.setEventMatcher(value);
      break;
    case 2:
      var value = new common_query_pb.Query;
      reader.readMessage(value,common_query_pb.Query.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 3:
      var value = /** @type {!proto.common.events.EventSubOperation} */ (reader.readEnum());
      msg.setOperation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.events.EventSubscription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.events.EventSubscription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.events.EventSubscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.events.EventSubscription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventMatcher();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.common.events.EventMatcher.serializeBinaryToWriter
    );
  }
  f = message.getQuery();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_query_pb.Query.serializeBinaryToWriter
    );
  }
  f = message.getOperation();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional EventMatcher event_matcher = 1;
 * @return {?proto.common.events.EventMatcher}
 */
proto.common.events.EventSubscription.prototype.getEventMatcher = function() {
  return /** @type{?proto.common.events.EventMatcher} */ (
    jspb.Message.getWrapperField(this, proto.common.events.EventMatcher, 1));
};


/**
 * @param {?proto.common.events.EventMatcher|undefined} value
 * @return {!proto.common.events.EventSubscription} returns this
*/
proto.common.events.EventSubscription.prototype.setEventMatcher = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.events.EventSubscription} returns this
 */
proto.common.events.EventSubscription.prototype.clearEventMatcher = function() {
  return this.setEventMatcher(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.events.EventSubscription.prototype.hasEventMatcher = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional common.query.Query query = 2;
 * @return {?proto.common.query.Query}
 */
proto.common.events.EventSubscription.prototype.getQuery = function() {
  return /** @type{?proto.common.query.Query} */ (
    jspb.Message.getWrapperField(this, common_query_pb.Query, 2));
};


/**
 * @param {?proto.common.query.Query|undefined} value
 * @return {!proto.common.events.EventSubscription} returns this
*/
proto.common.events.EventSubscription.prototype.setQuery = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.events.EventSubscription} returns this
 */
proto.common.events.EventSubscription.prototype.clearQuery = function() {
  return this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.events.EventSubscription.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EventSubOperation operation = 3;
 * @return {!proto.common.events.EventSubOperation}
 */
proto.common.events.EventSubscription.prototype.getOperation = function() {
  return /** @type {!proto.common.events.EventSubOperation} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.common.events.EventSubOperation} value
 * @return {!proto.common.events.EventSubscription} returns this
 */
proto.common.events.EventSubscription.prototype.setOperation = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.events.EventSubscriptionState.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.events.EventSubscriptionState.prototype.toObject = function(opt_includeInstance) {
  return proto.common.events.EventSubscriptionState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.events.EventSubscriptionState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.events.EventSubscriptionState.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    publishingRequestId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    message: jspb.Message.getFieldWithDefault(msg, 4, ""),
    eventMatcher: (f = msg.getEventMatcher()) && proto.common.events.EventMatcher.toObject(includeInstance, f),
    eventPublicationSpecsList: jspb.Message.toObjectList(msg.getEventPublicationSpecsList(),
    proto.common.events.EventPublication.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.events.EventSubscriptionState}
 */
proto.common.events.EventSubscriptionState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.events.EventSubscriptionState;
  return proto.common.events.EventSubscriptionState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.events.EventSubscriptionState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.events.EventSubscriptionState}
 */
proto.common.events.EventSubscriptionState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublishingRequestId(value);
      break;
    case 3:
      var value = /** @type {!proto.common.events.EventSubscriptionState.STATUS} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 5:
      var value = new proto.common.events.EventMatcher;
      reader.readMessage(value,proto.common.events.EventMatcher.deserializeBinaryFromReader);
      msg.setEventMatcher(value);
      break;
    case 6:
      var value = new proto.common.events.EventPublication;
      reader.readMessage(value,proto.common.events.EventPublication.deserializeBinaryFromReader);
      msg.addEventPublicationSpecs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.events.EventSubscriptionState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.events.EventSubscriptionState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.events.EventSubscriptionState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.events.EventSubscriptionState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPublishingRequestId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEventMatcher();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.common.events.EventMatcher.serializeBinaryToWriter
    );
  }
  f = message.getEventPublicationSpecsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.common.events.EventPublication.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.common.events.EventSubscriptionState.STATUS = {
  SUBSCRIBE_PENDING_ACK: 0,
  SUBSCRIBE_PENDING: 1,
  SUBSCRIBED: 2,
  UNSUBSCRIBE_PENDING_ACK: 3,
  UNSUBSCRIBE_PENDING: 4,
  UNSUBSCRIBED: 5,
  ERROR: 6,
  DUPLICATE_QUERY_SUBSCRIBED: 7
};

/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.common.events.EventSubscriptionState.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.events.EventSubscriptionState} returns this
 */
proto.common.events.EventSubscriptionState.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string publishing_request_id = 2;
 * @return {string}
 */
proto.common.events.EventSubscriptionState.prototype.getPublishingRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.events.EventSubscriptionState} returns this
 */
proto.common.events.EventSubscriptionState.prototype.setPublishingRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional STATUS status = 3;
 * @return {!proto.common.events.EventSubscriptionState.STATUS}
 */
proto.common.events.EventSubscriptionState.prototype.getStatus = function() {
  return /** @type {!proto.common.events.EventSubscriptionState.STATUS} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.common.events.EventSubscriptionState.STATUS} value
 * @return {!proto.common.events.EventSubscriptionState} returns this
 */
proto.common.events.EventSubscriptionState.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string message = 4;
 * @return {string}
 */
proto.common.events.EventSubscriptionState.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.events.EventSubscriptionState} returns this
 */
proto.common.events.EventSubscriptionState.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional EventMatcher event_matcher = 5;
 * @return {?proto.common.events.EventMatcher}
 */
proto.common.events.EventSubscriptionState.prototype.getEventMatcher = function() {
  return /** @type{?proto.common.events.EventMatcher} */ (
    jspb.Message.getWrapperField(this, proto.common.events.EventMatcher, 5));
};


/**
 * @param {?proto.common.events.EventMatcher|undefined} value
 * @return {!proto.common.events.EventSubscriptionState} returns this
*/
proto.common.events.EventSubscriptionState.prototype.setEventMatcher = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.events.EventSubscriptionState} returns this
 */
proto.common.events.EventSubscriptionState.prototype.clearEventMatcher = function() {
  return this.setEventMatcher(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.events.EventSubscriptionState.prototype.hasEventMatcher = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated EventPublication event_publication_specs = 6;
 * @return {!Array<!proto.common.events.EventPublication>}
 */
proto.common.events.EventSubscriptionState.prototype.getEventPublicationSpecsList = function() {
  return /** @type{!Array<!proto.common.events.EventPublication>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.common.events.EventPublication, 6));
};


/**
 * @param {!Array<!proto.common.events.EventPublication>} value
 * @return {!proto.common.events.EventSubscriptionState} returns this
*/
proto.common.events.EventSubscriptionState.prototype.setEventPublicationSpecsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.common.events.EventPublication=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.events.EventPublication}
 */
proto.common.events.EventSubscriptionState.prototype.addEventPublicationSpecs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.common.events.EventPublication, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.events.EventSubscriptionState} returns this
 */
proto.common.events.EventSubscriptionState.prototype.clearEventPublicationSpecsList = function() {
  return this.setEventPublicationSpecsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.events.ContractTransaction.repeatedFields_ = [5,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.events.ContractTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.common.events.ContractTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.events.ContractTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.events.ContractTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    driverId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ledgerId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contractId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    func: jspb.Message.getFieldWithDefault(msg, 4, ""),
    argsList: msg.getArgsList_asB64(),
    replaceArgIndex: jspb.Message.getFieldWithDefault(msg, 6, 0),
    membersList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.events.ContractTransaction}
 */
proto.common.events.ContractTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.events.ContractTransaction;
  return proto.common.events.ContractTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.events.ContractTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.events.ContractTransaction}
 */
proto.common.events.ContractTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDriverId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLedgerId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFunc(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addArgs(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setReplaceArgIndex(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addMembers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.events.ContractTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.events.ContractTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.events.ContractTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.events.ContractTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDriverId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLedgerId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContractId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFunc();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getArgsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      5,
      f
    );
  }
  f = message.getReplaceArgIndex();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
};


/**
 * optional string driver_id = 1;
 * @return {string}
 */
proto.common.events.ContractTransaction.prototype.getDriverId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.events.ContractTransaction} returns this
 */
proto.common.events.ContractTransaction.prototype.setDriverId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ledger_id = 2;
 * @return {string}
 */
proto.common.events.ContractTransaction.prototype.getLedgerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.events.ContractTransaction} returns this
 */
proto.common.events.ContractTransaction.prototype.setLedgerId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string contract_id = 3;
 * @return {string}
 */
proto.common.events.ContractTransaction.prototype.getContractId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.events.ContractTransaction} returns this
 */
proto.common.events.ContractTransaction.prototype.setContractId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string func = 4;
 * @return {string}
 */
proto.common.events.ContractTransaction.prototype.getFunc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.events.ContractTransaction} returns this
 */
proto.common.events.ContractTransaction.prototype.setFunc = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated bytes args = 5;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.common.events.ContractTransaction.prototype.getArgsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * repeated bytes args = 5;
 * This is a type-conversion wrapper around `getArgsList()`
 * @return {!Array<string>}
 */
proto.common.events.ContractTransaction.prototype.getArgsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getArgsList()));
};


/**
 * repeated bytes args = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getArgsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.common.events.ContractTransaction.prototype.getArgsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getArgsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.common.events.ContractTransaction} returns this
 */
proto.common.events.ContractTransaction.prototype.setArgsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.common.events.ContractTransaction} returns this
 */
proto.common.events.ContractTransaction.prototype.addArgs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.events.ContractTransaction} returns this
 */
proto.common.events.ContractTransaction.prototype.clearArgsList = function() {
  return this.setArgsList([]);
};


/**
 * optional uint64 replace_arg_index = 6;
 * @return {number}
 */
proto.common.events.ContractTransaction.prototype.getReplaceArgIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.events.ContractTransaction} returns this
 */
proto.common.events.ContractTransaction.prototype.setReplaceArgIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated string members = 7;
 * @return {!Array<string>}
 */
proto.common.events.ContractTransaction.prototype.getMembersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.common.events.ContractTransaction} returns this
 */
proto.common.events.ContractTransaction.prototype.setMembersList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.common.events.ContractTransaction} returns this
 */
proto.common.events.ContractTransaction.prototype.addMembers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.events.ContractTransaction} returns this
 */
proto.common.events.ContractTransaction.prototype.clearMembersList = function() {
  return this.setMembersList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.common.events.EventPublication.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.common.events.EventPublication.PublicationTargetCase = {
  PUBLICATION_TARGET_NOT_SET: 0,
  CTX: 1,
  APP_URL: 2
};

/**
 * @return {proto.common.events.EventPublication.PublicationTargetCase}
 */
proto.common.events.EventPublication.prototype.getPublicationTargetCase = function() {
  return /** @type {proto.common.events.EventPublication.PublicationTargetCase} */(jspb.Message.computeOneofCase(this, proto.common.events.EventPublication.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.events.EventPublication.prototype.toObject = function(opt_includeInstance) {
  return proto.common.events.EventPublication.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.events.EventPublication} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.events.EventPublication.toObject = function(includeInstance, msg) {
  var f, obj = {
    ctx: (f = msg.getCtx()) && proto.common.events.ContractTransaction.toObject(includeInstance, f),
    appUrl: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.events.EventPublication}
 */
proto.common.events.EventPublication.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.events.EventPublication;
  return proto.common.events.EventPublication.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.events.EventPublication} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.events.EventPublication}
 */
proto.common.events.EventPublication.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.events.ContractTransaction;
      reader.readMessage(value,proto.common.events.ContractTransaction.deserializeBinaryFromReader);
      msg.setCtx(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.events.EventPublication.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.events.EventPublication.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.events.EventPublication} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.events.EventPublication.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCtx();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.common.events.ContractTransaction.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional ContractTransaction ctx = 1;
 * @return {?proto.common.events.ContractTransaction}
 */
proto.common.events.EventPublication.prototype.getCtx = function() {
  return /** @type{?proto.common.events.ContractTransaction} */ (
    jspb.Message.getWrapperField(this, proto.common.events.ContractTransaction, 1));
};


/**
 * @param {?proto.common.events.ContractTransaction|undefined} value
 * @return {!proto.common.events.EventPublication} returns this
*/
proto.common.events.EventPublication.prototype.setCtx = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.common.events.EventPublication.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.events.EventPublication} returns this
 */
proto.common.events.EventPublication.prototype.clearCtx = function() {
  return this.setCtx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.events.EventPublication.prototype.hasCtx = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string app_url = 2;
 * @return {string}
 */
proto.common.events.EventPublication.prototype.getAppUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.events.EventPublication} returns this
 */
proto.common.events.EventPublication.prototype.setAppUrl = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.common.events.EventPublication.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.common.events.EventPublication} returns this
 */
proto.common.events.EventPublication.prototype.clearAppUrl = function() {
  return jspb.Message.setOneofField(this, 2, proto.common.events.EventPublication.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.events.EventPublication.prototype.hasAppUrl = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.events.EventStates.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.events.EventStates.prototype.toObject = function(opt_includeInstance) {
  return proto.common.events.EventStates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.events.EventStates} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.events.EventStates.toObject = function(includeInstance, msg) {
  var f, obj = {
    statesList: jspb.Message.toObjectList(msg.getStatesList(),
    proto.common.events.EventState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.events.EventStates}
 */
proto.common.events.EventStates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.events.EventStates;
  return proto.common.events.EventStates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.events.EventStates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.events.EventStates}
 */
proto.common.events.EventStates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.events.EventState;
      reader.readMessage(value,proto.common.events.EventState.deserializeBinaryFromReader);
      msg.addStates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.events.EventStates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.events.EventStates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.events.EventStates} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.events.EventStates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.common.events.EventState.serializeBinaryToWriter
    );
  }
};


/**
 * repeated EventState states = 1;
 * @return {!Array<!proto.common.events.EventState>}
 */
proto.common.events.EventStates.prototype.getStatesList = function() {
  return /** @type{!Array<!proto.common.events.EventState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.common.events.EventState, 1));
};


/**
 * @param {!Array<!proto.common.events.EventState>} value
 * @return {!proto.common.events.EventStates} returns this
*/
proto.common.events.EventStates.prototype.setStatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.common.events.EventState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.events.EventState}
 */
proto.common.events.EventStates.prototype.addStates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.common.events.EventState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.events.EventStates} returns this
 */
proto.common.events.EventStates.prototype.clearStatesList = function() {
  return this.setStatesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.events.EventState.prototype.toObject = function(opt_includeInstance) {
  return proto.common.events.EventState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.events.EventState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.events.EventState.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: (f = msg.getState()) && common_state_pb.RequestState.toObject(includeInstance, f),
    eventId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.events.EventState}
 */
proto.common.events.EventState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.events.EventState;
  return proto.common.events.EventState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.events.EventState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.events.EventState}
 */
proto.common.events.EventState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_state_pb.RequestState;
      reader.readMessage(value,common_state_pb.RequestState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.events.EventState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.events.EventState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.events.EventState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.events.EventState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_state_pb.RequestState.serializeBinaryToWriter
    );
  }
  f = message.getEventId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional common.state.RequestState state = 1;
 * @return {?proto.common.state.RequestState}
 */
proto.common.events.EventState.prototype.getState = function() {
  return /** @type{?proto.common.state.RequestState} */ (
    jspb.Message.getWrapperField(this, common_state_pb.RequestState, 1));
};


/**
 * @param {?proto.common.state.RequestState|undefined} value
 * @return {!proto.common.events.EventState} returns this
*/
proto.common.events.EventState.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.events.EventState} returns this
 */
proto.common.events.EventState.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.events.EventState.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string event_id = 2;
 * @return {string}
 */
proto.common.events.EventState.prototype.getEventId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.events.EventState} returns this
 */
proto.common.events.EventState.prototype.setEventId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.common.events.EventState.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.events.EventState} returns this
 */
proto.common.events.EventState.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.common.events.EventType = {
  LEDGER_STATE: 0,
  ASSET_LOCK: 1,
  ASSET_CLAIM: 2
};

/**
 * @enum {number}
 */
proto.common.events.EventSubOperation = {
  SUBSCRIBE: 0,
  UNSUBSCRIBE: 1,
  UPDATE: 2
};

goog.object.extend(exports, proto.common.events);
