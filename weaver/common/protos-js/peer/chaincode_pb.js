// source: peer/chaincode.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var common_policies_pb = require('../common/policies_pb.js');
goog.object.extend(proto, common_policies_pb);
goog.exportSymbol('proto.protos.CDSData', null, global);
goog.exportSymbol('proto.protos.ChaincodeData', null, global);
goog.exportSymbol('proto.protos.ChaincodeDeploymentSpec', null, global);
goog.exportSymbol('proto.protos.ChaincodeID', null, global);
goog.exportSymbol('proto.protos.ChaincodeInput', null, global);
goog.exportSymbol('proto.protos.ChaincodeInvocationSpec', null, global);
goog.exportSymbol('proto.protos.ChaincodeSpec', null, global);
goog.exportSymbol('proto.protos.ChaincodeSpec.Type', null, global);
goog.exportSymbol('proto.protos.LifecycleEvent', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.ChaincodeID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.ChaincodeID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.ChaincodeID.displayName = 'proto.protos.ChaincodeID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.ChaincodeInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protos.ChaincodeInput.repeatedFields_, null);
};
goog.inherits(proto.protos.ChaincodeInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.ChaincodeInput.displayName = 'proto.protos.ChaincodeInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.ChaincodeSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.ChaincodeSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.ChaincodeSpec.displayName = 'proto.protos.ChaincodeSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.ChaincodeDeploymentSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.ChaincodeDeploymentSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.ChaincodeDeploymentSpec.displayName = 'proto.protos.ChaincodeDeploymentSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.ChaincodeInvocationSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.ChaincodeInvocationSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.ChaincodeInvocationSpec.displayName = 'proto.protos.ChaincodeInvocationSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.LifecycleEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.LifecycleEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.LifecycleEvent.displayName = 'proto.protos.LifecycleEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.CDSData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.CDSData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.CDSData.displayName = 'proto.protos.CDSData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.ChaincodeData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.ChaincodeData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.ChaincodeData.displayName = 'proto.protos.ChaincodeData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.ChaincodeID.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.ChaincodeID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.ChaincodeID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.ChaincodeID.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    version: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.ChaincodeID}
 */
proto.protos.ChaincodeID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.ChaincodeID;
  return proto.protos.ChaincodeID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.ChaincodeID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.ChaincodeID}
 */
proto.protos.ChaincodeID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.ChaincodeID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.ChaincodeID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.ChaincodeID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.ChaincodeID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.protos.ChaincodeID.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.ChaincodeID} returns this
 */
proto.protos.ChaincodeID.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.protos.ChaincodeID.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.ChaincodeID} returns this
 */
proto.protos.ChaincodeID.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string version = 3;
 * @return {string}
 */
proto.protos.ChaincodeID.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.ChaincodeID} returns this
 */
proto.protos.ChaincodeID.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protos.ChaincodeInput.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.ChaincodeInput.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.ChaincodeInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.ChaincodeInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.ChaincodeInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    argsList: msg.getArgsList_asB64(),
    decorationsMap: (f = msg.getDecorationsMap()) ? f.toObject(includeInstance, undefined) : [],
    isInit: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.ChaincodeInput}
 */
proto.protos.ChaincodeInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.ChaincodeInput;
  return proto.protos.ChaincodeInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.ChaincodeInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.ChaincodeInput}
 */
proto.protos.ChaincodeInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addArgs(value);
      break;
    case 2:
      var value = msg.getDecorationsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "", "");
         });
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsInit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.ChaincodeInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.ChaincodeInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.ChaincodeInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.ChaincodeInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArgsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getDecorationsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
  f = message.getIsInit();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * repeated bytes args = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.protos.ChaincodeInput.prototype.getArgsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes args = 1;
 * This is a type-conversion wrapper around `getArgsList()`
 * @return {!Array<string>}
 */
proto.protos.ChaincodeInput.prototype.getArgsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getArgsList()));
};


/**
 * repeated bytes args = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getArgsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.protos.ChaincodeInput.prototype.getArgsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getArgsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.protos.ChaincodeInput} returns this
 */
proto.protos.ChaincodeInput.prototype.setArgsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.protos.ChaincodeInput} returns this
 */
proto.protos.ChaincodeInput.prototype.addArgs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.protos.ChaincodeInput} returns this
 */
proto.protos.ChaincodeInput.prototype.clearArgsList = function() {
  return this.setArgsList([]);
};


/**
 * map<string, bytes> decorations = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.protos.ChaincodeInput.prototype.getDecorationsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protos.ChaincodeInput} returns this
 */
proto.protos.ChaincodeInput.prototype.clearDecorationsMap = function() {
  this.getDecorationsMap().clear();
  return this;};


/**
 * optional bool is_init = 3;
 * @return {boolean}
 */
proto.protos.ChaincodeInput.prototype.getIsInit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protos.ChaincodeInput} returns this
 */
proto.protos.ChaincodeInput.prototype.setIsInit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.ChaincodeSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.ChaincodeSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.ChaincodeSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.ChaincodeSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    chaincodeId: (f = msg.getChaincodeId()) && proto.protos.ChaincodeID.toObject(includeInstance, f),
    input: (f = msg.getInput()) && proto.protos.ChaincodeInput.toObject(includeInstance, f),
    timeout: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.ChaincodeSpec}
 */
proto.protos.ChaincodeSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.ChaincodeSpec;
  return proto.protos.ChaincodeSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.ChaincodeSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.ChaincodeSpec}
 */
proto.protos.ChaincodeSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.protos.ChaincodeSpec.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.protos.ChaincodeID;
      reader.readMessage(value,proto.protos.ChaincodeID.deserializeBinaryFromReader);
      msg.setChaincodeId(value);
      break;
    case 3:
      var value = new proto.protos.ChaincodeInput;
      reader.readMessage(value,proto.protos.ChaincodeInput.deserializeBinaryFromReader);
      msg.setInput(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.ChaincodeSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.ChaincodeSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.ChaincodeSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.ChaincodeSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getChaincodeId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protos.ChaincodeID.serializeBinaryToWriter
    );
  }
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protos.ChaincodeInput.serializeBinaryToWriter
    );
  }
  f = message.getTimeout();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.protos.ChaincodeSpec.Type = {
  UNDEFINED: 0,
  GOLANG: 1,
  NODE: 2,
  CAR: 3,
  JAVA: 4
};

/**
 * optional Type type = 1;
 * @return {!proto.protos.ChaincodeSpec.Type}
 */
proto.protos.ChaincodeSpec.prototype.getType = function() {
  return /** @type {!proto.protos.ChaincodeSpec.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.protos.ChaincodeSpec.Type} value
 * @return {!proto.protos.ChaincodeSpec} returns this
 */
proto.protos.ChaincodeSpec.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ChaincodeID chaincode_id = 2;
 * @return {?proto.protos.ChaincodeID}
 */
proto.protos.ChaincodeSpec.prototype.getChaincodeId = function() {
  return /** @type{?proto.protos.ChaincodeID} */ (
    jspb.Message.getWrapperField(this, proto.protos.ChaincodeID, 2));
};


/**
 * @param {?proto.protos.ChaincodeID|undefined} value
 * @return {!proto.protos.ChaincodeSpec} returns this
*/
proto.protos.ChaincodeSpec.prototype.setChaincodeId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.ChaincodeSpec} returns this
 */
proto.protos.ChaincodeSpec.prototype.clearChaincodeId = function() {
  return this.setChaincodeId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.ChaincodeSpec.prototype.hasChaincodeId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ChaincodeInput input = 3;
 * @return {?proto.protos.ChaincodeInput}
 */
proto.protos.ChaincodeSpec.prototype.getInput = function() {
  return /** @type{?proto.protos.ChaincodeInput} */ (
    jspb.Message.getWrapperField(this, proto.protos.ChaincodeInput, 3));
};


/**
 * @param {?proto.protos.ChaincodeInput|undefined} value
 * @return {!proto.protos.ChaincodeSpec} returns this
*/
proto.protos.ChaincodeSpec.prototype.setInput = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.ChaincodeSpec} returns this
 */
proto.protos.ChaincodeSpec.prototype.clearInput = function() {
  return this.setInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.ChaincodeSpec.prototype.hasInput = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 timeout = 4;
 * @return {number}
 */
proto.protos.ChaincodeSpec.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.ChaincodeSpec} returns this
 */
proto.protos.ChaincodeSpec.prototype.setTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.ChaincodeDeploymentSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.ChaincodeDeploymentSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.ChaincodeDeploymentSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.ChaincodeDeploymentSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    chaincodeSpec: (f = msg.getChaincodeSpec()) && proto.protos.ChaincodeSpec.toObject(includeInstance, f),
    codePackage: msg.getCodePackage_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.ChaincodeDeploymentSpec}
 */
proto.protos.ChaincodeDeploymentSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.ChaincodeDeploymentSpec;
  return proto.protos.ChaincodeDeploymentSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.ChaincodeDeploymentSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.ChaincodeDeploymentSpec}
 */
proto.protos.ChaincodeDeploymentSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protos.ChaincodeSpec;
      reader.readMessage(value,proto.protos.ChaincodeSpec.deserializeBinaryFromReader);
      msg.setChaincodeSpec(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCodePackage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.ChaincodeDeploymentSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.ChaincodeDeploymentSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.ChaincodeDeploymentSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.ChaincodeDeploymentSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChaincodeSpec();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protos.ChaincodeSpec.serializeBinaryToWriter
    );
  }
  f = message.getCodePackage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional ChaincodeSpec chaincode_spec = 1;
 * @return {?proto.protos.ChaincodeSpec}
 */
proto.protos.ChaincodeDeploymentSpec.prototype.getChaincodeSpec = function() {
  return /** @type{?proto.protos.ChaincodeSpec} */ (
    jspb.Message.getWrapperField(this, proto.protos.ChaincodeSpec, 1));
};


/**
 * @param {?proto.protos.ChaincodeSpec|undefined} value
 * @return {!proto.protos.ChaincodeDeploymentSpec} returns this
*/
proto.protos.ChaincodeDeploymentSpec.prototype.setChaincodeSpec = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.ChaincodeDeploymentSpec} returns this
 */
proto.protos.ChaincodeDeploymentSpec.prototype.clearChaincodeSpec = function() {
  return this.setChaincodeSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.ChaincodeDeploymentSpec.prototype.hasChaincodeSpec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes code_package = 3;
 * @return {!(string|Uint8Array)}
 */
proto.protos.ChaincodeDeploymentSpec.prototype.getCodePackage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes code_package = 3;
 * This is a type-conversion wrapper around `getCodePackage()`
 * @return {string}
 */
proto.protos.ChaincodeDeploymentSpec.prototype.getCodePackage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCodePackage()));
};


/**
 * optional bytes code_package = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCodePackage()`
 * @return {!Uint8Array}
 */
proto.protos.ChaincodeDeploymentSpec.prototype.getCodePackage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCodePackage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.protos.ChaincodeDeploymentSpec} returns this
 */
proto.protos.ChaincodeDeploymentSpec.prototype.setCodePackage = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.ChaincodeInvocationSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.ChaincodeInvocationSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.ChaincodeInvocationSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.ChaincodeInvocationSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    chaincodeSpec: (f = msg.getChaincodeSpec()) && proto.protos.ChaincodeSpec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.ChaincodeInvocationSpec}
 */
proto.protos.ChaincodeInvocationSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.ChaincodeInvocationSpec;
  return proto.protos.ChaincodeInvocationSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.ChaincodeInvocationSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.ChaincodeInvocationSpec}
 */
proto.protos.ChaincodeInvocationSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protos.ChaincodeSpec;
      reader.readMessage(value,proto.protos.ChaincodeSpec.deserializeBinaryFromReader);
      msg.setChaincodeSpec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.ChaincodeInvocationSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.ChaincodeInvocationSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.ChaincodeInvocationSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.ChaincodeInvocationSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChaincodeSpec();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protos.ChaincodeSpec.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChaincodeSpec chaincode_spec = 1;
 * @return {?proto.protos.ChaincodeSpec}
 */
proto.protos.ChaincodeInvocationSpec.prototype.getChaincodeSpec = function() {
  return /** @type{?proto.protos.ChaincodeSpec} */ (
    jspb.Message.getWrapperField(this, proto.protos.ChaincodeSpec, 1));
};


/**
 * @param {?proto.protos.ChaincodeSpec|undefined} value
 * @return {!proto.protos.ChaincodeInvocationSpec} returns this
*/
proto.protos.ChaincodeInvocationSpec.prototype.setChaincodeSpec = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.ChaincodeInvocationSpec} returns this
 */
proto.protos.ChaincodeInvocationSpec.prototype.clearChaincodeSpec = function() {
  return this.setChaincodeSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.ChaincodeInvocationSpec.prototype.hasChaincodeSpec = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.LifecycleEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.LifecycleEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.LifecycleEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.LifecycleEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    chaincodeName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.LifecycleEvent}
 */
proto.protos.LifecycleEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.LifecycleEvent;
  return proto.protos.LifecycleEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.LifecycleEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.LifecycleEvent}
 */
proto.protos.LifecycleEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChaincodeName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.LifecycleEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.LifecycleEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.LifecycleEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.LifecycleEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChaincodeName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string chaincode_name = 1;
 * @return {string}
 */
proto.protos.LifecycleEvent.prototype.getChaincodeName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.LifecycleEvent} returns this
 */
proto.protos.LifecycleEvent.prototype.setChaincodeName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.CDSData.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.CDSData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.CDSData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.CDSData.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64(),
    metadatahash: msg.getMetadatahash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.CDSData}
 */
proto.protos.CDSData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.CDSData;
  return proto.protos.CDSData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.CDSData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.CDSData}
 */
proto.protos.CDSData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadatahash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.CDSData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.CDSData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.CDSData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.CDSData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMetadatahash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.protos.CDSData.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.protos.CDSData.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.protos.CDSData.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.protos.CDSData} returns this
 */
proto.protos.CDSData.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes metadatahash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.protos.CDSData.prototype.getMetadatahash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes metadatahash = 2;
 * This is a type-conversion wrapper around `getMetadatahash()`
 * @return {string}
 */
proto.protos.CDSData.prototype.getMetadatahash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadatahash()));
};


/**
 * optional bytes metadatahash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadatahash()`
 * @return {!Uint8Array}
 */
proto.protos.CDSData.prototype.getMetadatahash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadatahash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.protos.CDSData} returns this
 */
proto.protos.CDSData.prototype.setMetadatahash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.ChaincodeData.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.ChaincodeData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.ChaincodeData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.ChaincodeData.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, ""),
    escc: jspb.Message.getFieldWithDefault(msg, 3, ""),
    vscc: jspb.Message.getFieldWithDefault(msg, 4, ""),
    policy: (f = msg.getPolicy()) && common_policies_pb.SignaturePolicyEnvelope.toObject(includeInstance, f),
    data: msg.getData_asB64(),
    id: msg.getId_asB64(),
    instantiationPolicy: (f = msg.getInstantiationPolicy()) && common_policies_pb.SignaturePolicyEnvelope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.ChaincodeData}
 */
proto.protos.ChaincodeData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.ChaincodeData;
  return proto.protos.ChaincodeData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.ChaincodeData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.ChaincodeData}
 */
proto.protos.ChaincodeData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEscc(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVscc(value);
      break;
    case 5:
      var value = new common_policies_pb.SignaturePolicyEnvelope;
      reader.readMessage(value,common_policies_pb.SignaturePolicyEnvelope.deserializeBinaryFromReader);
      msg.setPolicy(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 8:
      var value = new common_policies_pb.SignaturePolicyEnvelope;
      reader.readMessage(value,common_policies_pb.SignaturePolicyEnvelope.deserializeBinaryFromReader);
      msg.setInstantiationPolicy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.ChaincodeData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.ChaincodeData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.ChaincodeData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.ChaincodeData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEscc();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVscc();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPolicy();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      common_policies_pb.SignaturePolicyEnvelope.serializeBinaryToWriter
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getInstantiationPolicy();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      common_policies_pb.SignaturePolicyEnvelope.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.protos.ChaincodeData.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.ChaincodeData} returns this
 */
proto.protos.ChaincodeData.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.protos.ChaincodeData.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.ChaincodeData} returns this
 */
proto.protos.ChaincodeData.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string escc = 3;
 * @return {string}
 */
proto.protos.ChaincodeData.prototype.getEscc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.ChaincodeData} returns this
 */
proto.protos.ChaincodeData.prototype.setEscc = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string vscc = 4;
 * @return {string}
 */
proto.protos.ChaincodeData.prototype.getVscc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.ChaincodeData} returns this
 */
proto.protos.ChaincodeData.prototype.setVscc = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional common.SignaturePolicyEnvelope policy = 5;
 * @return {?proto.common.SignaturePolicyEnvelope}
 */
proto.protos.ChaincodeData.prototype.getPolicy = function() {
  return /** @type{?proto.common.SignaturePolicyEnvelope} */ (
    jspb.Message.getWrapperField(this, common_policies_pb.SignaturePolicyEnvelope, 5));
};


/**
 * @param {?proto.common.SignaturePolicyEnvelope|undefined} value
 * @return {!proto.protos.ChaincodeData} returns this
*/
proto.protos.ChaincodeData.prototype.setPolicy = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.ChaincodeData} returns this
 */
proto.protos.ChaincodeData.prototype.clearPolicy = function() {
  return this.setPolicy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.ChaincodeData.prototype.hasPolicy = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.protos.ChaincodeData.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes data = 6;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.protos.ChaincodeData.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.protos.ChaincodeData.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.protos.ChaincodeData} returns this
 */
proto.protos.ChaincodeData.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes id = 7;
 * @return {!(string|Uint8Array)}
 */
proto.protos.ChaincodeData.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes id = 7;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.protos.ChaincodeData.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.protos.ChaincodeData.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.protos.ChaincodeData} returns this
 */
proto.protos.ChaincodeData.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional common.SignaturePolicyEnvelope instantiation_policy = 8;
 * @return {?proto.common.SignaturePolicyEnvelope}
 */
proto.protos.ChaincodeData.prototype.getInstantiationPolicy = function() {
  return /** @type{?proto.common.SignaturePolicyEnvelope} */ (
    jspb.Message.getWrapperField(this, common_policies_pb.SignaturePolicyEnvelope, 8));
};


/**
 * @param {?proto.common.SignaturePolicyEnvelope|undefined} value
 * @return {!proto.protos.ChaincodeData} returns this
*/
proto.protos.ChaincodeData.prototype.setInstantiationPolicy = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.ChaincodeData} returns this
 */
proto.protos.ChaincodeData.prototype.clearInstantiationPolicy = function() {
  return this.setInstantiationPolicy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.ChaincodeData.prototype.hasInstantiationPolicy = function() {
  return jspb.Message.getField(this, 8) != null;
};


goog.object.extend(exports, proto.protos);
