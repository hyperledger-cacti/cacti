// source: networks/networks.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var common_ack_pb = require('../common/ack_pb.js');
goog.object.extend(proto, common_ack_pb);
var common_state_pb = require('../common/state_pb.js');
goog.object.extend(proto, common_state_pb);
var common_events_pb = require('../common/events_pb.js');
goog.object.extend(proto, common_events_pb);
goog.exportSymbol('proto.networks.networks.DbName', null, global);
goog.exportSymbol('proto.networks.networks.GetStateMessage', null, global);
goog.exportSymbol('proto.networks.networks.NetworkAssetTransfer', null, global);
goog.exportSymbol('proto.networks.networks.NetworkEventSubscription', null, global);
goog.exportSymbol('proto.networks.networks.NetworkEventUnsubscription', null, global);
goog.exportSymbol('proto.networks.networks.NetworkQuery', null, global);
goog.exportSymbol('proto.networks.networks.RelayDatabase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.networks.networks.DbName = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.networks.networks.DbName, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.networks.networks.DbName.displayName = 'proto.networks.networks.DbName';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.networks.networks.RelayDatabase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.networks.networks.RelayDatabase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.networks.networks.RelayDatabase.displayName = 'proto.networks.networks.RelayDatabase';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.networks.networks.GetStateMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.networks.networks.GetStateMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.networks.networks.GetStateMessage.displayName = 'proto.networks.networks.GetStateMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.networks.networks.NetworkQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.networks.networks.NetworkQuery.repeatedFields_, null);
};
goog.inherits(proto.networks.networks.NetworkQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.networks.networks.NetworkQuery.displayName = 'proto.networks.networks.NetworkQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.networks.networks.NetworkEventSubscription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.networks.networks.NetworkEventSubscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.networks.networks.NetworkEventSubscription.displayName = 'proto.networks.networks.NetworkEventSubscription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.networks.networks.NetworkEventUnsubscription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.networks.networks.NetworkEventUnsubscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.networks.networks.NetworkEventUnsubscription.displayName = 'proto.networks.networks.NetworkEventUnsubscription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.networks.networks.NetworkAssetTransfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.networks.networks.NetworkAssetTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.networks.networks.NetworkAssetTransfer.displayName = 'proto.networks.networks.NetworkAssetTransfer';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.networks.networks.DbName.prototype.toObject = function(opt_includeInstance) {
  return proto.networks.networks.DbName.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.networks.networks.DbName} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.networks.networks.DbName.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.networks.networks.DbName}
 */
proto.networks.networks.DbName.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.networks.networks.DbName;
  return proto.networks.networks.DbName.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.networks.networks.DbName} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.networks.networks.DbName}
 */
proto.networks.networks.DbName.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.networks.networks.DbName.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.networks.networks.DbName.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.networks.networks.DbName} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.networks.networks.DbName.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.networks.networks.DbName.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.networks.networks.DbName} returns this
 */
proto.networks.networks.DbName.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.networks.networks.RelayDatabase.prototype.toObject = function(opt_includeInstance) {
  return proto.networks.networks.RelayDatabase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.networks.networks.RelayDatabase} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.networks.networks.RelayDatabase.toObject = function(includeInstance, msg) {
  var f, obj = {
    pairsMap: (f = msg.getPairsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.networks.networks.RelayDatabase}
 */
proto.networks.networks.RelayDatabase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.networks.networks.RelayDatabase;
  return proto.networks.networks.RelayDatabase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.networks.networks.RelayDatabase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.networks.networks.RelayDatabase}
 */
proto.networks.networks.RelayDatabase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getPairsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.networks.networks.RelayDatabase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.networks.networks.RelayDatabase.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.networks.networks.RelayDatabase} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.networks.networks.RelayDatabase.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPairsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * map<string, string> pairs = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.networks.networks.RelayDatabase.prototype.getPairsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.networks.networks.RelayDatabase} returns this
 */
proto.networks.networks.RelayDatabase.prototype.clearPairsMap = function() {
  this.getPairsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.networks.networks.GetStateMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.networks.networks.GetStateMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.networks.networks.GetStateMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.networks.networks.GetStateMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.networks.networks.GetStateMessage}
 */
proto.networks.networks.GetStateMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.networks.networks.GetStateMessage;
  return proto.networks.networks.GetStateMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.networks.networks.GetStateMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.networks.networks.GetStateMessage}
 */
proto.networks.networks.GetStateMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.networks.networks.GetStateMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.networks.networks.GetStateMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.networks.networks.GetStateMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.networks.networks.GetStateMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.networks.networks.GetStateMessage.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.networks.networks.GetStateMessage} returns this
 */
proto.networks.networks.GetStateMessage.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.networks.networks.NetworkQuery.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.networks.networks.NetworkQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.networks.networks.NetworkQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.networks.networks.NetworkQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.networks.networks.NetworkQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    policyList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    requestingRelay: jspb.Message.getFieldWithDefault(msg, 3, ""),
    requestingNetwork: jspb.Message.getFieldWithDefault(msg, 4, ""),
    certificate: jspb.Message.getFieldWithDefault(msg, 5, ""),
    requestorSignature: jspb.Message.getFieldWithDefault(msg, 6, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 7, ""),
    requestingOrg: jspb.Message.getFieldWithDefault(msg, 8, ""),
    confidential: jspb.Message.getBooleanFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.networks.networks.NetworkQuery}
 */
proto.networks.networks.NetworkQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.networks.networks.NetworkQuery;
  return proto.networks.networks.NetworkQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.networks.networks.NetworkQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.networks.networks.NetworkQuery}
 */
proto.networks.networks.NetworkQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addPolicy(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestingRelay(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestingNetwork(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCertificate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestorSignature(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setNonce(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestingOrg(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConfidential(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.networks.networks.NetworkQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.networks.networks.NetworkQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.networks.networks.NetworkQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.networks.networks.NetworkQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPolicyList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRequestingRelay();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRequestingNetwork();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCertificate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRequestorSignature();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getNonce();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getRequestingOrg();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getConfidential();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * repeated string policy = 1;
 * @return {!Array<string>}
 */
proto.networks.networks.NetworkQuery.prototype.getPolicyList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.networks.networks.NetworkQuery} returns this
 */
proto.networks.networks.NetworkQuery.prototype.setPolicyList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.networks.networks.NetworkQuery} returns this
 */
proto.networks.networks.NetworkQuery.prototype.addPolicy = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.networks.networks.NetworkQuery} returns this
 */
proto.networks.networks.NetworkQuery.prototype.clearPolicyList = function() {
  return this.setPolicyList([]);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.networks.networks.NetworkQuery.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.networks.networks.NetworkQuery} returns this
 */
proto.networks.networks.NetworkQuery.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string requesting_relay = 3;
 * @return {string}
 */
proto.networks.networks.NetworkQuery.prototype.getRequestingRelay = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.networks.networks.NetworkQuery} returns this
 */
proto.networks.networks.NetworkQuery.prototype.setRequestingRelay = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string requesting_network = 4;
 * @return {string}
 */
proto.networks.networks.NetworkQuery.prototype.getRequestingNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.networks.networks.NetworkQuery} returns this
 */
proto.networks.networks.NetworkQuery.prototype.setRequestingNetwork = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string certificate = 5;
 * @return {string}
 */
proto.networks.networks.NetworkQuery.prototype.getCertificate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.networks.networks.NetworkQuery} returns this
 */
proto.networks.networks.NetworkQuery.prototype.setCertificate = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string requestor_signature = 6;
 * @return {string}
 */
proto.networks.networks.NetworkQuery.prototype.getRequestorSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.networks.networks.NetworkQuery} returns this
 */
proto.networks.networks.NetworkQuery.prototype.setRequestorSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string nonce = 7;
 * @return {string}
 */
proto.networks.networks.NetworkQuery.prototype.getNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.networks.networks.NetworkQuery} returns this
 */
proto.networks.networks.NetworkQuery.prototype.setNonce = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string requesting_org = 8;
 * @return {string}
 */
proto.networks.networks.NetworkQuery.prototype.getRequestingOrg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.networks.networks.NetworkQuery} returns this
 */
proto.networks.networks.NetworkQuery.prototype.setRequestingOrg = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional bool confidential = 9;
 * @return {boolean}
 */
proto.networks.networks.NetworkQuery.prototype.getConfidential = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.networks.networks.NetworkQuery} returns this
 */
proto.networks.networks.NetworkQuery.prototype.setConfidential = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.networks.networks.NetworkEventSubscription.prototype.toObject = function(opt_includeInstance) {
  return proto.networks.networks.NetworkEventSubscription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.networks.networks.NetworkEventSubscription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.networks.networks.NetworkEventSubscription.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventMatcher: (f = msg.getEventMatcher()) && common_events_pb.EventMatcher.toObject(includeInstance, f),
    query: (f = msg.getQuery()) && proto.networks.networks.NetworkQuery.toObject(includeInstance, f),
    eventPublicationSpec: (f = msg.getEventPublicationSpec()) && common_events_pb.EventPublication.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.networks.networks.NetworkEventSubscription}
 */
proto.networks.networks.NetworkEventSubscription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.networks.networks.NetworkEventSubscription;
  return proto.networks.networks.NetworkEventSubscription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.networks.networks.NetworkEventSubscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.networks.networks.NetworkEventSubscription}
 */
proto.networks.networks.NetworkEventSubscription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_events_pb.EventMatcher;
      reader.readMessage(value,common_events_pb.EventMatcher.deserializeBinaryFromReader);
      msg.setEventMatcher(value);
      break;
    case 2:
      var value = new proto.networks.networks.NetworkQuery;
      reader.readMessage(value,proto.networks.networks.NetworkQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 3:
      var value = new common_events_pb.EventPublication;
      reader.readMessage(value,common_events_pb.EventPublication.deserializeBinaryFromReader);
      msg.setEventPublicationSpec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.networks.networks.NetworkEventSubscription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.networks.networks.NetworkEventSubscription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.networks.networks.NetworkEventSubscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.networks.networks.NetworkEventSubscription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventMatcher();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_events_pb.EventMatcher.serializeBinaryToWriter
    );
  }
  f = message.getQuery();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.networks.networks.NetworkQuery.serializeBinaryToWriter
    );
  }
  f = message.getEventPublicationSpec();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_events_pb.EventPublication.serializeBinaryToWriter
    );
  }
};


/**
 * optional common.events.EventMatcher event_matcher = 1;
 * @return {?proto.common.events.EventMatcher}
 */
proto.networks.networks.NetworkEventSubscription.prototype.getEventMatcher = function() {
  return /** @type{?proto.common.events.EventMatcher} */ (
    jspb.Message.getWrapperField(this, common_events_pb.EventMatcher, 1));
};


/**
 * @param {?proto.common.events.EventMatcher|undefined} value
 * @return {!proto.networks.networks.NetworkEventSubscription} returns this
*/
proto.networks.networks.NetworkEventSubscription.prototype.setEventMatcher = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.networks.networks.NetworkEventSubscription} returns this
 */
proto.networks.networks.NetworkEventSubscription.prototype.clearEventMatcher = function() {
  return this.setEventMatcher(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.networks.networks.NetworkEventSubscription.prototype.hasEventMatcher = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional NetworkQuery query = 2;
 * @return {?proto.networks.networks.NetworkQuery}
 */
proto.networks.networks.NetworkEventSubscription.prototype.getQuery = function() {
  return /** @type{?proto.networks.networks.NetworkQuery} */ (
    jspb.Message.getWrapperField(this, proto.networks.networks.NetworkQuery, 2));
};


/**
 * @param {?proto.networks.networks.NetworkQuery|undefined} value
 * @return {!proto.networks.networks.NetworkEventSubscription} returns this
*/
proto.networks.networks.NetworkEventSubscription.prototype.setQuery = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.networks.networks.NetworkEventSubscription} returns this
 */
proto.networks.networks.NetworkEventSubscription.prototype.clearQuery = function() {
  return this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.networks.networks.NetworkEventSubscription.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional common.events.EventPublication event_publication_spec = 3;
 * @return {?proto.common.events.EventPublication}
 */
proto.networks.networks.NetworkEventSubscription.prototype.getEventPublicationSpec = function() {
  return /** @type{?proto.common.events.EventPublication} */ (
    jspb.Message.getWrapperField(this, common_events_pb.EventPublication, 3));
};


/**
 * @param {?proto.common.events.EventPublication|undefined} value
 * @return {!proto.networks.networks.NetworkEventSubscription} returns this
*/
proto.networks.networks.NetworkEventSubscription.prototype.setEventPublicationSpec = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.networks.networks.NetworkEventSubscription} returns this
 */
proto.networks.networks.NetworkEventSubscription.prototype.clearEventPublicationSpec = function() {
  return this.setEventPublicationSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.networks.networks.NetworkEventSubscription.prototype.hasEventPublicationSpec = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.networks.networks.NetworkEventUnsubscription.prototype.toObject = function(opt_includeInstance) {
  return proto.networks.networks.NetworkEventUnsubscription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.networks.networks.NetworkEventUnsubscription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.networks.networks.NetworkEventUnsubscription.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.networks.networks.NetworkEventSubscription.toObject(includeInstance, f),
    requestId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.networks.networks.NetworkEventUnsubscription}
 */
proto.networks.networks.NetworkEventUnsubscription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.networks.networks.NetworkEventUnsubscription;
  return proto.networks.networks.NetworkEventUnsubscription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.networks.networks.NetworkEventUnsubscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.networks.networks.NetworkEventUnsubscription}
 */
proto.networks.networks.NetworkEventUnsubscription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.networks.networks.NetworkEventSubscription;
      reader.readMessage(value,proto.networks.networks.NetworkEventSubscription.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.networks.networks.NetworkEventUnsubscription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.networks.networks.NetworkEventUnsubscription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.networks.networks.NetworkEventUnsubscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.networks.networks.NetworkEventUnsubscription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.networks.networks.NetworkEventSubscription.serializeBinaryToWriter
    );
  }
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional NetworkEventSubscription request = 1;
 * @return {?proto.networks.networks.NetworkEventSubscription}
 */
proto.networks.networks.NetworkEventUnsubscription.prototype.getRequest = function() {
  return /** @type{?proto.networks.networks.NetworkEventSubscription} */ (
    jspb.Message.getWrapperField(this, proto.networks.networks.NetworkEventSubscription, 1));
};


/**
 * @param {?proto.networks.networks.NetworkEventSubscription|undefined} value
 * @return {!proto.networks.networks.NetworkEventUnsubscription} returns this
*/
proto.networks.networks.NetworkEventUnsubscription.prototype.setRequest = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.networks.networks.NetworkEventUnsubscription} returns this
 */
proto.networks.networks.NetworkEventUnsubscription.prototype.clearRequest = function() {
  return this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.networks.networks.NetworkEventUnsubscription.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string request_id = 2;
 * @return {string}
 */
proto.networks.networks.NetworkEventUnsubscription.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.networks.networks.NetworkEventUnsubscription} returns this
 */
proto.networks.networks.NetworkEventUnsubscription.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.networks.networks.NetworkAssetTransfer.prototype.toObject = function(opt_includeInstance) {
  return proto.networks.networks.NetworkAssetTransfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.networks.networks.NetworkAssetTransfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.networks.networks.NetworkAssetTransfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    assetId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sender: jspb.Message.getFieldWithDefault(msg, 3, ""),
    sourceContractId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    sourceRelay: jspb.Message.getFieldWithDefault(msg, 5, ""),
    sourceNetwork: jspb.Message.getFieldWithDefault(msg, 6, ""),
    destinationRelay: jspb.Message.getFieldWithDefault(msg, 7, ""),
    destinationNetwork: jspb.Message.getFieldWithDefault(msg, 8, ""),
    recipient: jspb.Message.getFieldWithDefault(msg, 9, ""),
    destinationContractId: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.networks.networks.NetworkAssetTransfer}
 */
proto.networks.networks.NetworkAssetTransfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.networks.networks.NetworkAssetTransfer;
  return proto.networks.networks.NetworkAssetTransfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.networks.networks.NetworkAssetTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.networks.networks.NetworkAssetTransfer}
 */
proto.networks.networks.NetworkAssetTransfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceContractId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceRelay(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceNetwork(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationRelay(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationNetwork(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipient(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationContractId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.networks.networks.NetworkAssetTransfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.networks.networks.NetworkAssetTransfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.networks.networks.NetworkAssetTransfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.networks.networks.NetworkAssetTransfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAssetId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSourceContractId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSourceRelay();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSourceNetwork();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDestinationRelay();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getDestinationNetwork();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getRecipient();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getDestinationContractId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string asset_type = 1;
 * @return {string}
 */
proto.networks.networks.NetworkAssetTransfer.prototype.getAssetType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.networks.networks.NetworkAssetTransfer} returns this
 */
proto.networks.networks.NetworkAssetTransfer.prototype.setAssetType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string asset_id = 2;
 * @return {string}
 */
proto.networks.networks.NetworkAssetTransfer.prototype.getAssetId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.networks.networks.NetworkAssetTransfer} returns this
 */
proto.networks.networks.NetworkAssetTransfer.prototype.setAssetId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string sender = 3;
 * @return {string}
 */
proto.networks.networks.NetworkAssetTransfer.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.networks.networks.NetworkAssetTransfer} returns this
 */
proto.networks.networks.NetworkAssetTransfer.prototype.setSender = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string source_contract_id = 4;
 * @return {string}
 */
proto.networks.networks.NetworkAssetTransfer.prototype.getSourceContractId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.networks.networks.NetworkAssetTransfer} returns this
 */
proto.networks.networks.NetworkAssetTransfer.prototype.setSourceContractId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string source_relay = 5;
 * @return {string}
 */
proto.networks.networks.NetworkAssetTransfer.prototype.getSourceRelay = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.networks.networks.NetworkAssetTransfer} returns this
 */
proto.networks.networks.NetworkAssetTransfer.prototype.setSourceRelay = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string source_network = 6;
 * @return {string}
 */
proto.networks.networks.NetworkAssetTransfer.prototype.getSourceNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.networks.networks.NetworkAssetTransfer} returns this
 */
proto.networks.networks.NetworkAssetTransfer.prototype.setSourceNetwork = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string destination_relay = 7;
 * @return {string}
 */
proto.networks.networks.NetworkAssetTransfer.prototype.getDestinationRelay = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.networks.networks.NetworkAssetTransfer} returns this
 */
proto.networks.networks.NetworkAssetTransfer.prototype.setDestinationRelay = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string destination_network = 8;
 * @return {string}
 */
proto.networks.networks.NetworkAssetTransfer.prototype.getDestinationNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.networks.networks.NetworkAssetTransfer} returns this
 */
proto.networks.networks.NetworkAssetTransfer.prototype.setDestinationNetwork = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string recipient = 9;
 * @return {string}
 */
proto.networks.networks.NetworkAssetTransfer.prototype.getRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.networks.networks.NetworkAssetTransfer} returns this
 */
proto.networks.networks.NetworkAssetTransfer.prototype.setRecipient = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string destination_contract_id = 10;
 * @return {string}
 */
proto.networks.networks.NetworkAssetTransfer.prototype.getDestinationContractId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.networks.networks.NetworkAssetTransfer} returns this
 */
proto.networks.networks.NetworkAssetTransfer.prototype.setDestinationContractId = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


goog.object.extend(exports, proto.networks.networks);
