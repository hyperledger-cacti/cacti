buildscript {
    Properties constants = new Properties()
    file("$projectDir/./constants.properties").withInputStream { constants.load(it) }
    
    ext {
        kotlin_version = constants.getProperty("kotlinVersion")
        coroutines_version = constants.getProperty("coroutinesVersion")
        protobuf_version = constants.getProperty("protobufVersion")
        bcprov_version = constants.getProperty("bcprovVersion")
        grpc_version = constants.getProperty("grpcVersion") // CURRENT_GRPC_VERSION
        grpc_kotlin_version = constants.getProperty("grpcKotlinVersion") // CURRENT_GRPC_KOTLIN_VERSION
        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_core_release_group = constants.getProperty("cordaReleaseGroup")
        corda_version = constants.getProperty("cordaVersion")
        corda_core_version = constants.getProperty("cordaVersion")
        arrow_version = constants.getProperty("arrowVersion")
        corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
        log4j_version = constants.getProperty("log4jVersion")
        slf4j_version = constants.getProperty("slf4jVersion")
        cacti_version = constants.getProperty("cactiVersion")
    }
    
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "java-library"
    id 'org.jetbrains.dokka' version '0.10.1'
    id "maven-publish"
}

apply plugin: "kotlin"

sourceSets {
    main {
        java.srcDirs += 'src/main/kotlin/'
        kotlin.srcDirs += 'src/main/kotlin/'
    }
}

Properties constants = new Properties()

repositories {
    maven { url 'https://repo1.maven.org/maven2' }
    maven { url 'https://download.corda.net/maven/corda-releases' }
    maven { url 'https://download.corda.net/maven/corda-dependencies' }
    if (file("$projectDir/./github.properties").exists()) {
        file("$projectDir/github.properties").withInputStream { constants.load(it) }
        maven {
            url	constants.url
            credentials {
                username constants.username
                password constants.password
            }
        }
    }
    else {
        flatDir {
            dirs '../../core/network/corda-interop-app/interop-contracts/build/libs'
            dirs '../../core/network/corda-interop-app/interop-workflows/build/libs'
            dirs '../../common/protos-java-kt/build/libs'
        }
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile 'com.google.code.gson:gson:2.8.6'

    // Corda dependencies.
    compile "$corda_release_group:corda-rpc:$corda_version"

    implementation(group: 'org.hyperledger.cacti.weaver.imodule.corda', name: 'interop-contracts', version: "$cacti_version")
    implementation(group: 'org.hyperledger.cacti.weaver.imodule.corda', name: 'interop-workflows', version: "$cacti_version")
    implementation(group: 'org.hyperledger.cacti.weaver.protos', name: 'protos-java-kt', version: "$cacti_version")

    // gRPC and protobuf dependencies
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "io.grpc:grpc-kotlin-stub:$grpc_kotlin_version"
    implementation "io.grpc:grpc-netty-shaded:$grpc_version"
    implementation "io.grpc:grpc-stub:$grpc_version"
    implementation "io.grpc:grpc-okhttp:$grpc_version"
    implementation "org.bouncycastle:bcprov-jdk15on:$bcprov_version"
    implementation group: 'org.json', name: 'json', version: '20190722'
    
    // Logger dependencies
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    implementation "org.apache.logging.log4j:log4j-web:${log4j_version}"
    implementation "org.slf4j:jul-to-slf4j:$slf4j_version"
    implementation "org.slf4j:slf4j-simple:$slf4j_version"

}


tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
        languageVersion = "1.3"
        apiVersion = "1.3"
        jvmTarget = "1.8"
        javaParameters = true
    }
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/dokka"
}

jar {
    // This makes the JAR's SHA-256 hash repeatable.
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

publishing {
    // Handling if github.properties is not specified
    if (!file("$projectDir/./github.properties").exists()) {
        def styler = 'black red green yellow blue magenta cyan white'
                .split().toList().withIndex(30)
                .collectEntries { key, val -> [(key) : { "\033[${val}m${it}\033[0m" }] }
        println "${styler['red']('Warning')}: Publish won't work. Please use github.properties.template to create github.properties"
    }
    publications {
        sdk(MavenPublication) {
            groupId = project.properties['group']
            artifactId = project.properties['name']
            version = project.properties['version']
            from components.java
        }
    }
    repositories {
        maven {
            url constants.url
            credentials {
                username constants.username
                password constants.password
            }
        }
    }
}

tasks.test {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
    }
}
