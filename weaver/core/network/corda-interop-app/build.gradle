import static org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_17
import static org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9

buildscript {
    Properties constants = new Properties()
    file("$projectDir/./constants.properties").withInputStream { constants.load(it) }

    ext {
        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_core_release_group =  constants.getProperty("cordaCoreReleaseGroup")
        corda_release_version = constants.getProperty("cordaVersion")
        corda_core_release_version = constants.getProperty("cordaCoreVersion")
        corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
        kotlin_version = constants.getProperty("kotlinVersion")
        junit_version = constants.getProperty("junitVersion")
        log4j_version = constants.getProperty("log4jVersion")
        slf4j_version = constants.getProperty("slf4jVersion")
        corda_platform_version = constants.getProperty("platformVersion").toInteger()
        arrow_version = constants.getProperty("arrowVersion")
        jaxb_version = constants.getProperty("jaxbVersion")
        protobuf_version = constants.getProperty("protobufVersion")
        cacti_version = constants.getProperty("cactiVersion")
        github_username = ""
        github_password = ""
        github_url = ""

        testJvmArgs = ['--add-opens', 'java.base/java.time=ALL-UNNAMED', '--add-opens', 'java.base/java.io=ALL-UNNAMED',
               '--add-opens', 'java.base/java.util=ALL-UNNAMED', '--add-opens', 'java.base/java.net=ALL-UNNAMED',
               '--add-opens', 'java.base/java.nio=ALL-UNNAMED', '--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED',
               '--add-opens', 'java.base/java.security.cert=ALL-UNNAMED', '--add-opens', 'java.base/java.security=ALL-UNNAMED',
               '--add-opens', 'java.base/javax.net.ssl=ALL-UNNAMED', '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
               '--add-opens', 'java.base/java.util.concurrent=ALL-UNNAMED', '--add-opens', 'java.sql/java.sql=ALL-UNNAMED',]
    }
    if (file("$projectDir/./github.properties").exists()) {
        Properties githubConsts = new Properties()
        file("$projectDir/./github.properties").withInputStream { githubConsts.load(it) }
        ext {
            github_username = githubConsts.getProperty("username")
            github_password = githubConsts.getProperty("password")
            github_url = githubConsts.getProperty("url")
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://repo1.maven.org/maven2' }
        maven { url 'https://download.corda.net/maven/corda-dependencies' }
        maven { url 'https://download.corda.net/maven/corda-releases' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.dokka' version '0.10.1'
    id "com.jfrog.artifactory" version "5.2.3"
    id "maven-publish"
}


allprojects {
    apply from: "${rootProject.projectDir}/repositories.gradle"
    apply plugin: 'kotlin'

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://repo1.maven.org/maven2' }
        maven { url 'https://download.corda.net/maven/corda' }
        maven { url 'https://jitpack.io' }
        if (github_url != "") {
            println("Fetching Weaver packages from: $github_url")
            maven {
                url github_url
                credentials {
                    username github_username
                    password github_password
                }
            }
        }
        else {
            println("Fetching Locally built Weaver packages.")
            flatDir {
                dirs '../../../common/protos-java-kt/build/libs'
            }
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        compilerOptions {
            languageVersion = KOTLIN_1_9
            apiVersion = KOTLIN_1_9
            jvmTarget = JVM_17
            javaParameters = true   // Useful for reflection.
        }
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    compileJava {
        options.compilerArgs << '-parameters'
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }

    tasks.named('jar') {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // Corda dependencies.
    cordaProvided "$corda_core_release_group:corda-core:$corda_core_release_version"
    cordaRuntimeOnly "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntimeOnly "$corda_release_group:corda:$corda_release_version"
    
    // CorDapp dependencies.
    cordapp project(":interop-workflows")
    cordapp project(":interop-contracts")

    // Logging dependencies.
    cordaProvided "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaProvided "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaProvided "org.slf4j:jul-to-slf4j:$slf4j_version"
}

cordapp {
    targetPlatformVersion corda_platform_version
    minimumPlatformVersion corda_platform_version
}

task installQuasar(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/dokka"
    subProjects = ["interop-workflows", "interop-contracts"]
}
