import static org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_17
import static org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9

buildscript {
    Properties constants = new Properties()
    file("$projectDir/./constants.properties").withInputStream { constants.load(it) }

    ext {
        kotlin_version = constants.getProperty("kotlinVersion")
        coroutines_version = constants.getProperty("coroutinesVersion")
        bcprov_version = constants.getProperty("bcprovVersion")
        bcprov_name = constants.getProperty("bcprovName")
        grpc_version = constants.getProperty("grpcVersion") // CURRENT_GRPC_VERSION
        grpc_kotlin_version = constants.getProperty("grpcKotlinVersion") // CURRENT_GRPC_KOTLIN_VERSION
        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_core_release_group = constants.getProperty("cordaReleaseGroup")
        corda_version = constants.getProperty("cordaVersion")
        corda_core_version = constants.getProperty("cordaVersion")
        arrow_version = constants.getProperty("arrowVersion")
        cacti_version = constants.getProperty("cactiVersion")
    }

    repositories {
        mavenCentral()
        maven { url 'https://download.corda.net/maven/corda-dependencies' }
    }
    dependencies {
       classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "idea"
    id "application"
    id 'org.jetbrains.dokka' version '0.10.1'
    id 'maven-publish'
}

// Can be used to generate a pom.xml file which in turn can be used to run a 
// trivy security audit of the dependencies to check for vulnerable versions.
// Check the package README.md file for an example to do it via bash commands.
publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}

Properties constants = new Properties()

repositories {
    google()
    mavenCentral()
    mavenLocal()
    maven { url 'https://repo1.maven.org/maven2' }
    maven { url 'https://download.corda.net/maven/corda-dependencies' }
    maven { url 'https://download.corda.net/maven/corda-releases' }
    maven { url 'https://download.corda.net/maven/corda-lib' }
    if (file("$projectDir/./github.properties").exists()) {
        def styler = 'black red green yellow blue magenta cyan white'
                .split().toList().withIndex(30)
                .collectEntries { key, val -> [(key) : { "\033[${val}m${it}\033[0m" }] }
        println "${styler['blue']('Info')}: Building using github packages..."
        file("$projectDir/github.properties").withInputStream { constants.load(it) }
        maven {
            url constants.url
            credentials {
                username constants.username
                password constants.password
            }
        }
    }
    else {
        def styler = 'black red green yellow blue magenta cyan white'
                .split().toList().withIndex(30)
                .collectEntries { key, val -> [(key) : { "\033[${val}m${it}\033[0m" }] }
        println "${styler['blue']('Info')}: Building locally..."
        flatDir {
            dirs '../../network/corda-interop-app/interop-contracts/build/libs'
            dirs '../../network/corda-interop-app/interop-workflows/build/libs'
            dirs '../../../sdks/corda/build/libs'
            dirs '../../../common/protos-java-kt/build/libs'
        }
    
    }
}

apply plugin: "kotlin"

dependencies {
    // This repo
    implementation "io.grpc:grpc-kotlin-stub:$grpc_kotlin_version"
    implementation "io.grpc:grpc-okhttp:$grpc_version"
    implementation "org.bouncycastle:$bcprov_name:$bcprov_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "io.arrow-kt:arrow-core:$arrow_version"

    // Java: To test at runtime as following was compileOnly
    implementation "javax.annotation:javax.annotation-api:1.2"

    // Google
    implementation "com.google.guava:guava:28.2-jre"
    implementation 'com.google.code.gson:gson:2.8.6'

    // Corda dependencies.
    implementation "net.corda:corda-core:$corda_core_version"
    implementation "net.corda:corda-node-api:$corda_version"
    implementation "net.corda:corda:$corda_version"
    implementation "net.corda:corda-rpc:$corda_version"

    implementation(group: 'org.hyperledger.cacti.weaver.imodule.corda', name: 'interop-contracts', version: "$cacti_version")
    implementation(group: 'org.hyperledger.cacti.weaver.imodule.corda', name: 'interop-workflows', version: "$cacti_version")
    implementation(group: 'org.hyperledger.cacti.weaver.sdk.corda', name: 'weaver-sdk-corda', version: "$cacti_version")
    implementation(group: 'org.hyperledger.cacti.weaver.protos', name: 'protos-java-kt', version: "$cacti_version")
    
    // gRPC dependencies
    implementation "io.grpc:grpc-kotlin-stub:$grpc_kotlin_version"
    implementation "io.grpc:grpc-netty-shaded:$grpc_version"
    implementation "io.grpc:grpc-stub:$grpc_version"
    implementation "io.grpc:grpc-protobuf:$grpc_version"

    testImplementation("org.junit.jupiter:junit-jupiter:5.6.2")
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    compilerOptions {
        languageVersion = KOTLIN_1_9
        apiVersion = KOTLIN_1_9
        jvmTarget = JVM_17
        javaParameters = true   // Useful for reflection.
    }
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/dokka"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

compileJava {
    options.compilerArgs << '-parameters'
}


mainClassName = "org.hyperledger.cacti.weaver.driver.corda.CordaDriverKt"

tasks.test {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
    }
}
