/* tslint:disable */
/* eslint-disable */
/**
 * Hyperledger Cactus Plugin - Open ID Connect (OIDC) Web Service
 * A web service plugin that provides authentication and authorization capabilities for a Cactus deployment through the Open ID Connect industry standard.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Initiates authentication through Open ID Connect
         * @param {string} clientId 
         * @param {string} responseType 
         * @param {string} scope 
         * @param {string} [nonce] 
         * @param {string} [prompt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PluginsHyperledgerCactusPluginWebServiceOidcAuthGet: async (clientId: string, responseType: string, scope: string, nonce?: string, prompt?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new RequiredError('clientId','Required parameter clientId was null or undefined when calling apiV1PluginsHyperledgerCactusPluginWebServiceOidcAuthGet.');
            }
            // verify required parameter 'responseType' is not null or undefined
            if (responseType === null || responseType === undefined) {
                throw new RequiredError('responseType','Required parameter responseType was null or undefined when calling apiV1PluginsHyperledgerCactusPluginWebServiceOidcAuthGet.');
            }
            // verify required parameter 'scope' is not null or undefined
            if (scope === null || scope === undefined) {
                throw new RequiredError('scope','Required parameter scope was null or undefined when calling apiV1PluginsHyperledgerCactusPluginWebServiceOidcAuthGet.');
            }
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-web-service-oidc/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientId !== undefined) {
                localVarQueryParameter['client_id'] = clientId;
            }

            if (responseType !== undefined) {
                localVarQueryParameter['response_type'] = responseType;
            }

            if (scope !== undefined) {
                localVarQueryParameter['scope'] = scope;
            }

            if (nonce !== undefined) {
                localVarQueryParameter['nonce'] = nonce;
            }

            if (prompt !== undefined) {
                localVarQueryParameter['prompt'] = prompt;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides the standard behavior as one would expect according to the OIDC specifications
         * @summary Retrieves the Open ID Connect configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PluginsHyperledgerCactusPluginWebServiceOidcWellKnownOpenidConfigurationGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-web-service-oidc/.well-known/openid-configuration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Initiates authentication through Open ID Connect
         * @param {string} clientId 
         * @param {string} responseType 
         * @param {string} scope 
         * @param {string} [nonce] 
         * @param {string} [prompt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PluginsHyperledgerCactusPluginWebServiceOidcAuthGet(clientId: string, responseType: string, scope: string, nonce?: string, prompt?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiV1PluginsHyperledgerCactusPluginWebServiceOidcAuthGet(clientId, responseType, scope, nonce, prompt, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provides the standard behavior as one would expect according to the OIDC specifications
         * @summary Retrieves the Open ID Connect configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PluginsHyperledgerCactusPluginWebServiceOidcWellKnownOpenidConfigurationGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiV1PluginsHyperledgerCactusPluginWebServiceOidcWellKnownOpenidConfigurationGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Initiates authentication through Open ID Connect
         * @param {string} clientId 
         * @param {string} responseType 
         * @param {string} scope 
         * @param {string} [nonce] 
         * @param {string} [prompt] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PluginsHyperledgerCactusPluginWebServiceOidcAuthGet(clientId: string, responseType: string, scope: string, nonce?: string, prompt?: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).apiV1PluginsHyperledgerCactusPluginWebServiceOidcAuthGet(clientId, responseType, scope, nonce, prompt, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides the standard behavior as one would expect according to the OIDC specifications
         * @summary Retrieves the Open ID Connect configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PluginsHyperledgerCactusPluginWebServiceOidcWellKnownOpenidConfigurationGet(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).apiV1PluginsHyperledgerCactusPluginWebServiceOidcWellKnownOpenidConfigurationGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Initiates authentication through Open ID Connect
     * @param {string} clientId 
     * @param {string} responseType 
     * @param {string} scope 
     * @param {string} [nonce] 
     * @param {string} [prompt] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PluginsHyperledgerCactusPluginWebServiceOidcAuthGet(clientId: string, responseType: string, scope: string, nonce?: string, prompt?: string, options?: any) {
        return DefaultApiFp(this.configuration).apiV1PluginsHyperledgerCactusPluginWebServiceOidcAuthGet(clientId, responseType, scope, nonce, prompt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides the standard behavior as one would expect according to the OIDC specifications
     * @summary Retrieves the Open ID Connect configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PluginsHyperledgerCactusPluginWebServiceOidcWellKnownOpenidConfigurationGet(options?: any) {
        return DefaultApiFp(this.configuration).apiV1PluginsHyperledgerCactusPluginWebServiceOidcWellKnownOpenidConfigurationGet(options).then((request) => request(this.axios, this.basePath));
    }
}


