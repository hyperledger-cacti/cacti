/* tslint:disable */
/* eslint-disable */
/**
 * Hyperledger Cacti Plugin - Connector Ethereum
 * Can perform basic tasks on a Ethereum ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ContractJSON
 */
export interface ContractJSON {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ContractJSON
     */
    'contractName': string;
    /**
     * See https://ethereum.stackexchange.com/a/47556 regarding the maximum length of the bytecode
     * @type {string}
     * @memberof ContractJSON
     */
    'bytecode': string;
    /**
     * The application binary interface of the solidity contract, optional parameter
     * @type {Array<any>}
     * @memberof ContractJSON
     */
    'abi': Array<any>;
    /**
     * 
     * @type {string}
     * @memberof ContractJSON
     */
    'metadata'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContractJSON
     */
    'deployedBytecode'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContractJSON
     */
    'sourceMap'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContractJSON
     */
    'deployedSourceMap'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContractJSON
     */
    'sourcePath'?: string;
    /**
     * 
     * @type {object}
     * @memberof ContractJSON
     */
    'compiler'?: object;
    /**
     * 
     * @type {object}
     * @memberof ContractJSON
     */
    'networks'?: object;
    /**
     * 
     * @type {object}
     * @memberof ContractJSON
     */
    'ast'?: object;
    /**
     * 
     * @type {object}
     * @memberof ContractJSON
     */
    'functionHashes'?: object;
    /**
     * 
     * @type {object}
     * @memberof ContractJSON
     */
    'gasEstimates'?: object;
}
/**
 * 
 * @export
 * @interface ContractJsonDefinition
 */
export interface ContractJsonDefinition {
    /**
     * 
     * @type {ContractJSON}
     * @memberof ContractJsonDefinition
     */
    'contractJSON': ContractJSON;
}
/**
 * 
 * @export
 * @interface ContractKeychainDefinition
 */
export interface ContractKeychainDefinition {
    /**
     * The contract name for retrieve the contracts json on the keychain.
     * @type {string}
     * @memberof ContractKeychainDefinition
     */
    'contractName': string;
    /**
     * The keychainId for retrieve the contracts json.
     * @type {string}
     * @memberof ContractKeychainDefinition
     */
    'keychainId': string;
}
/**
 * 
 * @export
 * @interface DeployContractV1Request
 */
export interface DeployContractV1Request {
    /**
     * 
     * @type {Web3SigningCredential}
     * @memberof DeployContractV1Request
     */
    'web3SigningCredential': Web3SigningCredential;
    /**
     * 
     * @type {DeployContractV1RequestContract}
     * @memberof DeployContractV1Request
     */
    'contract': DeployContractV1RequestContract;
    /**
     * The list of arguments to pass in to the constructor of the contract being deployed.
     * @type {Array<any>}
     * @memberof DeployContractV1Request
     */
    'constructorArgs'?: Array<any>;
    /**
     * 
     * @type {GasTransactionConfig}
     * @memberof DeployContractV1Request
     */
    'gasConfig'?: GasTransactionConfig;
    /**
     * Ether balance to send on deployment.
     * @type {string}
     * @memberof DeployContractV1Request
     */
    'value'?: string;
}
/**
 * @type DeployContractV1RequestContract
 * @export
 */
export type DeployContractV1RequestContract = ContractJsonDefinition | ContractKeychainDefinition;

/**
 * 
 * @export
 * @interface DeployedContractJsonDefinition
 */
export interface DeployedContractJsonDefinition {
    /**
     * 
     * @type {ContractJSON}
     * @memberof DeployedContractJsonDefinition
     */
    'contractJSON': ContractJSON;
    /**
     * 
     * @type {string}
     * @memberof DeployedContractJsonDefinition
     */
    'contractAddress': string;
}
/**
 * Error response from the connector.
 * @export
 * @interface ErrorExceptionResponseV1
 */
export interface ErrorExceptionResponseV1 {
    /**
     * Short error description message.
     * @type {string}
     * @memberof ErrorExceptionResponseV1
     */
    'message': string;
    /**
     * Detailed error information.
     * @type {string}
     * @memberof ErrorExceptionResponseV1
     */
    'error': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const EthContractInvocationType = {
    Send: 'SEND',
    Call: 'CALL'
} as const;

export type EthContractInvocationType = typeof EthContractInvocationType[keyof typeof EthContractInvocationType];


/**
 * 
 * @export
 * @enum {string}
 */

export const EthContractInvocationWeb3Method = {
    Send: 'send',
    Call: 'call',
    EncodeAbi: 'encodeABI',
    EstimateGas: 'estimateGas'
} as const;

export type EthContractInvocationWeb3Method = typeof EthContractInvocationWeb3Method[keyof typeof EthContractInvocationWeb3Method];


/**
 * 
 * @export
 * @interface EthereumTransactionConfig
 */
export interface EthereumTransactionConfig {
    /**
     * 
     * @type {string}
     * @memberof EthereumTransactionConfig
     */
    'rawTransaction'?: string;
    /**
     * 
     * @type {string}
     * @memberof EthereumTransactionConfig
     */
    'from'?: string;
    /**
     * 
     * @type {string}
     * @memberof EthereumTransactionConfig
     */
    'to'?: string;
    /**
     * 
     * @type {string}
     * @memberof EthereumTransactionConfig
     */
    'value'?: string;
    /**
     * 
     * @type {string}
     * @memberof EthereumTransactionConfig
     */
    'nonce'?: string;
    /**
     * 
     * @type {string}
     * @memberof EthereumTransactionConfig
     */
    'data'?: string;
    /**
     * 
     * @type {GasTransactionConfig}
     * @memberof EthereumTransactionConfig
     */
    'gasConfig'?: GasTransactionConfig;
}
/**
 * @type GasTransactionConfig
 * Transaction gas settings.
 * @export
 */
export type GasTransactionConfig = GasTransactionConfigEIP1559 | GasTransactionConfigLegacy;

/**
 * Transaction gas settings in networks after EIP-1559 (London fork).
 * @export
 * @interface GasTransactionConfigEIP1559
 */
export interface GasTransactionConfigEIP1559 {
    /**
     * A maximum amount of gas a user is willing to provide for the execution of the transaction.
     * @type {string}
     * @memberof GasTransactionConfigEIP1559
     */
    'gasLimit'?: string;
    /**
     * A maximum fee (including the base fee and the tip) a user is willing to pay per unit of gas.
     * @type {string}
     * @memberof GasTransactionConfigEIP1559
     */
    'maxFeePerGas'?: string;
    /**
     * A maximum tip amount a user is willing to pay per unit of gas.
     * @type {string}
     * @memberof GasTransactionConfigEIP1559
     */
    'maxPriorityFeePerGas'?: string;
}
/**
 * Transaction gas settings in networks before EIP-1559 (London fork).
 * @export
 * @interface GasTransactionConfigLegacy
 */
export interface GasTransactionConfigLegacy {
    /**
     * A maximum amount of gas a user is willing to provide for the execution of the transaction. (gasLimit)
     * @type {string}
     * @memberof GasTransactionConfigLegacy
     */
    'gas'?: string;
    /**
     * A price (in Wei) a user is willing to pay for each unit of gas used during the execution of the transaction. In EIP-1559 (London fork) networks, it will be set as both maxFeePerGas and maxPriorityFeePerGas.
     * @type {string}
     * @memberof GasTransactionConfigLegacy
     */
    'gasPrice'?: string;
}
/**
 * 
 * @export
 * @interface InvokeContractV1Request
 */
export interface InvokeContractV1Request {
    /**
     * 
     * @type {InvokeContractV1RequestContract}
     * @memberof InvokeContractV1Request
     */
    'contract': InvokeContractV1RequestContract;
    /**
     * The name of the contract method to invoke.
     * @type {string}
     * @memberof InvokeContractV1Request
     */
    'methodName': string;
    /**
     * The list of arguments to pass in to the contract method being invoked.
     * @type {Array<any>}
     * @memberof InvokeContractV1Request
     */
    'params': Array<any>;
    /**
     * 
     * @type {EthContractInvocationType}
     * @memberof InvokeContractV1Request
     */
    'invocationType': EthContractInvocationType;
    /**
     * 
     * @type {Web3SigningCredential}
     * @memberof InvokeContractV1Request
     */
    'web3SigningCredential'?: Web3SigningCredential;
    /**
     * 
     * @type {GasTransactionConfig}
     * @memberof InvokeContractV1Request
     */
    'gasConfig'?: GasTransactionConfig;
    /**
     * 
     * @type {string}
     * @memberof InvokeContractV1Request
     */
    'value'?: string;
    /**
     * The amount of milliseconds to wait for a transaction receipt before returning an error. Only has any effect if the invocation type is SEND
     * @type {number}
     * @memberof InvokeContractV1Request
     */
    'timeoutMs'?: number;
}


/**
 * @type InvokeContractV1RequestContract
 * @export
 */
export type InvokeContractV1RequestContract = ContractKeychainDefinition | DeployedContractJsonDefinition;

/**
 * 
 * @export
 * @interface InvokeContractV1Response
 */
export interface InvokeContractV1Response {
    /**
     * 
     * @type {Web3TransactionReceipt}
     * @memberof InvokeContractV1Response
     */
    'transactionReceipt'?: Web3TransactionReceipt;
    /**
     * 
     * @type {any}
     * @memberof InvokeContractV1Response
     */
    'callOutput'?: any;
    /**
     * 
     * @type {boolean}
     * @memberof InvokeContractV1Response
     */
    'success': boolean;
}
/**
 * 
 * @export
 * @interface InvokeRawWeb3EthContractV1Request
 */
export interface InvokeRawWeb3EthContractV1Request {
    /**
     * The application binary interface of the solidity contract
     * @type {any}
     * @memberof InvokeRawWeb3EthContractV1Request
     */
    'abi': any;
    /**
     * Deployed solidity contract address
     * @type {string}
     * @memberof InvokeRawWeb3EthContractV1Request
     */
    'address': string;
    /**
     * 
     * @type {EthContractInvocationWeb3Method}
     * @memberof InvokeRawWeb3EthContractV1Request
     */
    'invocationType': EthContractInvocationWeb3Method;
    /**
     * The list of arguments for contract invocation method (send, call, etc...)
     * @type {object}
     * @memberof InvokeRawWeb3EthContractV1Request
     */
    'invocationParams'?: object;
    /**
     * Method of deployed solidity contract to execute
     * @type {string}
     * @memberof InvokeRawWeb3EthContractV1Request
     */
    'contractMethod': string;
    /**
     * The list of arguments for deployed solidity contract method
     * @type {Array<any>}
     * @memberof InvokeRawWeb3EthContractV1Request
     */
    'contractMethodArgs'?: Array<any>;
}


/**
 * 
 * @export
 * @interface InvokeRawWeb3EthContractV1Response
 */
export interface InvokeRawWeb3EthContractV1Response {
    /**
     * Status code of the operation
     * @type {number}
     * @memberof InvokeRawWeb3EthContractV1Response
     */
    'status': number;
    /**
     * Output of contract invocation method
     * @type {any}
     * @memberof InvokeRawWeb3EthContractV1Response
     */
    'data'?: any;
    /**
     * Error details
     * @type {string}
     * @memberof InvokeRawWeb3EthContractV1Response
     */
    'errorDetail'?: string;
}
/**
 * 
 * @export
 * @interface InvokeRawWeb3EthMethodV1Request
 */
export interface InvokeRawWeb3EthMethodV1Request {
    /**
     * The name of the web3.eth method to invoke
     * @type {string}
     * @memberof InvokeRawWeb3EthMethodV1Request
     */
    'methodName': string;
    /**
     * The list of arguments to pass to web3.eth method specified in methodName
     * @type {Array<any>}
     * @memberof InvokeRawWeb3EthMethodV1Request
     */
    'params'?: Array<any>;
}
/**
 * 
 * @export
 * @interface InvokeRawWeb3EthMethodV1Response
 */
export interface InvokeRawWeb3EthMethodV1Response {
    /**
     * Status code of the operation
     * @type {number}
     * @memberof InvokeRawWeb3EthMethodV1Response
     */
    'status': number;
    /**
     * Output of requested web3.eth method
     * @type {any}
     * @memberof InvokeRawWeb3EthMethodV1Response
     */
    'data'?: any;
    /**
     * Error details
     * @type {string}
     * @memberof InvokeRawWeb3EthMethodV1Response
     */
    'errorDetail'?: string;
}
/**
 * 
 * @export
 * @interface RunTransactionRequest
 */
export interface RunTransactionRequest {
    /**
     * 
     * @type {Web3SigningCredential}
     * @memberof RunTransactionRequest
     */
    'web3SigningCredential': Web3SigningCredential;
    /**
     * 
     * @type {EthereumTransactionConfig}
     * @memberof RunTransactionRequest
     */
    'transactionConfig': EthereumTransactionConfig;
    /**
     * The amount of milliseconds to wait for a transaction receipt with thehash of the transaction(which indicates successful execution) beforegiving up and crashing.
     * @type {number}
     * @memberof RunTransactionRequest
     */
    'timeoutMs'?: number;
}
/**
 * 
 * @export
 * @interface RunTransactionResponse
 */
export interface RunTransactionResponse {
    /**
     * 
     * @type {Web3TransactionReceipt}
     * @memberof RunTransactionResponse
     */
    'transactionReceipt': Web3TransactionReceipt;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const WatchBlocksV1 = {
    Subscribe: 'org.hyperledger.cacti.api.async.ethereum.WatchBlocksV1.Subscribe',
    Next: 'org.hyperledger.cacti.api.async.ethereum.WatchBlocksV1.Next',
    Unsubscribe: 'org.hyperledger.cacti.api.async.ethereum.WatchBlocksV1.Unsubscribe',
    Error: 'org.hyperledger.cacti.api.async.ethereum.WatchBlocksV1.Error',
    Complete: 'org.hyperledger.cacti.api.async.ethereum.WatchBlocksV1.Complete'
} as const;

export type WatchBlocksV1 = typeof WatchBlocksV1[keyof typeof WatchBlocksV1];


/**
 * 
 * @export
 * @interface WatchBlocksV1BlockData
 */
export interface WatchBlocksV1BlockData {
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    'number': string;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    'parentHash': string;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    'nonce': string;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    'sha3Uncles': string;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    'logsBloom'?: string;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    'transactionsRoot'?: string;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    'stateRoot': string;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    'receiptsRoot'?: string;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    'difficulty'?: string;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    'mixHash'?: string;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    'miner': string;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    'extraData': string;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    'gasLimit': string;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    'gasUsed': string;
    /**
     * 
     * @type {WatchBlocksV1BlockDataTimestamp}
     * @memberof WatchBlocksV1BlockData
     */
    'timestamp': WatchBlocksV1BlockDataTimestamp;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    'size': string;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    'totalDifficulty': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof WatchBlocksV1BlockData
     */
    'uncles': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    'baseFeePerGas'?: string;
    /**
     * 
     * @type {Array<Web3Transaction>}
     * @memberof WatchBlocksV1BlockData
     */
    'transactions': Array<Web3Transaction>;
}
/**
 * @type WatchBlocksV1BlockDataTimestamp
 * @export
 */
export type WatchBlocksV1BlockDataTimestamp = number | string;

/**
 * 
 * @export
 * @interface WatchBlocksV1Options
 */
export interface WatchBlocksV1Options {
    /**
     * 
     * @type {boolean}
     * @memberof WatchBlocksV1Options
     */
    'getBlockData'?: boolean;
}
/**
 * 
 * @export
 * @interface WatchBlocksV1Progress
 */
export interface WatchBlocksV1Progress {
    /**
     * 
     * @type {Web3BlockHeader}
     * @memberof WatchBlocksV1Progress
     */
    'blockHeader'?: Web3BlockHeader;
    /**
     * 
     * @type {WatchBlocksV1BlockData}
     * @memberof WatchBlocksV1Progress
     */
    'blockData'?: WatchBlocksV1BlockData;
}
/**
 * 
 * @export
 * @interface Web3BlockHeader
 */
export interface Web3BlockHeader {
    /**
     * 
     * @type {string}
     * @memberof Web3BlockHeader
     */
    'number'?: string;
    /**
     * 
     * @type {string}
     * @memberof Web3BlockHeader
     */
    'parentHash'?: string;
    /**
     * 
     * @type {string}
     * @memberof Web3BlockHeader
     */
    'sha3Uncles': string;
    /**
     * 
     * @type {string}
     * @memberof Web3BlockHeader
     */
    'transactionsRoot'?: string;
    /**
     * 
     * @type {string}
     * @memberof Web3BlockHeader
     */
    'receiptsRoot'?: string;
    /**
     * 
     * @type {string}
     * @memberof Web3BlockHeader
     */
    'difficulty'?: string;
    /**
     * 
     * @type {string}
     * @memberof Web3BlockHeader
     */
    'mixHash'?: string;
    /**
     * 
     * @type {string}
     * @memberof Web3BlockHeader
     */
    'miner'?: string;
    /**
     * 
     * @type {string}
     * @memberof Web3BlockHeader
     */
    'gasLimit': string;
    /**
     * 
     * @type {string}
     * @memberof Web3BlockHeader
     */
    'gasUsed': string;
    /**
     * 
     * @type {string}
     * @memberof Web3BlockHeader
     */
    'stateRoot'?: string;
    /**
     * 
     * @type {string}
     * @memberof Web3BlockHeader
     */
    'logsBloom'?: string;
    /**
     * 
     * @type {string}
     * @memberof Web3BlockHeader
     */
    'extraData'?: string;
    /**
     * 
     * @type {string}
     * @memberof Web3BlockHeader
     */
    'nonce'?: string;
    /**
     * 
     * @type {string}
     * @memberof Web3BlockHeader
     */
    'timestamp'?: string;
}
/**
 * @type Web3SigningCredential
 * @export
 */
export type Web3SigningCredential = Web3SigningCredentialCactiKeychainRef | Web3SigningCredentialGethKeychainPassword | Web3SigningCredentialNone | Web3SigningCredentialPrivateKeyHex;

/**
 * 
 * @export
 * @interface Web3SigningCredentialCactiKeychainRef
 */
export interface Web3SigningCredentialCactiKeychainRef {
    /**
     * 
     * @type {Web3SigningCredentialType}
     * @memberof Web3SigningCredentialCactiKeychainRef
     */
    'type': Web3SigningCredentialType;
    /**
     * The ethereum account (public key) that the credential  belongs to. Basically the username in the traditional  terminology of authentication.
     * @type {string}
     * @memberof Web3SigningCredentialCactiKeychainRef
     */
    'ethAccount': string;
    /**
     * The key to use when looking up the the keychain entry holding the secret pointed to by the  keychainEntryKey parameter.
     * @type {string}
     * @memberof Web3SigningCredentialCactiKeychainRef
     */
    'keychainEntryKey': string;
    /**
     * The keychain ID to use when looking up the the keychain plugin instance that will be used to retrieve the secret pointed to by the keychainEntryKey parameter.
     * @type {string}
     * @memberof Web3SigningCredentialCactiKeychainRef
     */
    'keychainId'?: string;
}


/**
 * 
 * @export
 * @interface Web3SigningCredentialGethKeychainPassword
 */
export interface Web3SigningCredentialGethKeychainPassword {
    /**
     * 
     * @type {Web3SigningCredentialType}
     * @memberof Web3SigningCredentialGethKeychainPassword
     */
    'type': Web3SigningCredentialType;
    /**
     * The ethereum account (public key) that the credential  belongs to. Basically the username in the traditional terminology of authentication.
     * @type {string}
     * @memberof Web3SigningCredentialGethKeychainPassword
     */
    'ethAccount': string;
    /**
     * A geth keychain unlock password.
     * @type {string}
     * @memberof Web3SigningCredentialGethKeychainPassword
     */
    'secret': string;
}


/**
 * Using this denotes that there is no signing required because the transaction is pre-signed.
 * @export
 * @interface Web3SigningCredentialNone
 */
export interface Web3SigningCredentialNone {
    /**
     * 
     * @type {Web3SigningCredentialType}
     * @memberof Web3SigningCredentialNone
     */
    'type': Web3SigningCredentialType;
}


/**
 * 
 * @export
 * @interface Web3SigningCredentialPrivateKeyHex
 */
export interface Web3SigningCredentialPrivateKeyHex {
    /**
     * 
     * @type {Web3SigningCredentialType}
     * @memberof Web3SigningCredentialPrivateKeyHex
     */
    'type': Web3SigningCredentialType;
    /**
     * The ethereum account (public key) that the credential belongs to. Basically the username in the traditional terminology of authentication.
     * @type {string}
     * @memberof Web3SigningCredentialPrivateKeyHex
     */
    'ethAccount': string;
    /**
     * The HEX encoded private key of an eth account.
     * @type {string}
     * @memberof Web3SigningCredentialPrivateKeyHex
     */
    'secret': string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const Web3SigningCredentialType = {
    CactiKeychainRef: 'CACTI_KEYCHAIN_REF',
    GethKeychainPassword: 'GETH_KEYCHAIN_PASSWORD',
    PrivateKeyHex: 'PRIVATE_KEY_HEX',
    None: 'NONE'
} as const;

export type Web3SigningCredentialType = typeof Web3SigningCredentialType[keyof typeof Web3SigningCredentialType];


/**
 * 
 * @export
 * @interface Web3Transaction
 */
export interface Web3Transaction {
    /**
     * 
     * @type {string}
     * @memberof Web3Transaction
     */
    'hash': string;
    /**
     * 
     * @type {string}
     * @memberof Web3Transaction
     */
    'nonce': string;
    /**
     * 
     * @type {string}
     * @memberof Web3Transaction
     */
    'blockHash': string;
    /**
     * 
     * @type {string}
     * @memberof Web3Transaction
     */
    'blockNumber': string;
    /**
     * 
     * @type {string}
     * @memberof Web3Transaction
     */
    'transactionIndex': string;
    /**
     * 
     * @type {string}
     * @memberof Web3Transaction
     */
    'from': string;
    /**
     * 
     * @type {string}
     * @memberof Web3Transaction
     */
    'to': string;
    /**
     * 
     * @type {string}
     * @memberof Web3Transaction
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof Web3Transaction
     */
    'gasPrice': string;
    /**
     * 
     * @type {string}
     * @memberof Web3Transaction
     */
    'gas': string;
    /**
     * 
     * @type {string}
     * @memberof Web3Transaction
     */
    'input': string;
    /**
     * 
     * @type {string}
     * @memberof Web3Transaction
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof Web3Transaction
     */
    'chainId': string;
    /**
     * 
     * @type {string}
     * @memberof Web3Transaction
     */
    'v'?: string;
    /**
     * 
     * @type {string}
     * @memberof Web3Transaction
     */
    'r'?: string;
    /**
     * 
     * @type {string}
     * @memberof Web3Transaction
     */
    's'?: string;
}
/**
 * 
 * @export
 * @interface Web3TransactionReceipt
 */
export interface Web3TransactionReceipt {
    [key: string]: any;

    /**
     * 
     * @type {boolean}
     * @memberof Web3TransactionReceipt
     */
    'status': boolean;
    /**
     * 
     * @type {string}
     * @memberof Web3TransactionReceipt
     */
    'transactionHash': string;
    /**
     * 
     * @type {string}
     * @memberof Web3TransactionReceipt
     */
    'transactionIndex': string;
    /**
     * 
     * @type {string}
     * @memberof Web3TransactionReceipt
     */
    'blockHash': string;
    /**
     * 
     * @type {string}
     * @memberof Web3TransactionReceipt
     */
    'blockNumber': string;
    /**
     * 
     * @type {string}
     * @memberof Web3TransactionReceipt
     */
    'gasUsed': string;
    /**
     * 
     * @type {string}
     * @memberof Web3TransactionReceipt
     */
    'effectiveGasPrice'?: string;
    /**
     * 
     * @type {string}
     * @memberof Web3TransactionReceipt
     */
    'contractAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Web3TransactionReceipt
     */
    'from': string;
    /**
     * 
     * @type {string}
     * @memberof Web3TransactionReceipt
     */
    'to': string;
    /**
     * 
     * @type {Array<any>}
     * @memberof Web3TransactionReceipt
     */
    'logs'?: Array<any>;
    /**
     * 
     * @type {string}
     * @memberof Web3TransactionReceipt
     */
    'logsBloom'?: string;
    /**
     * 
     * @type {string}
     * @memberof Web3TransactionReceipt
     */
    'revertReason'?: string;
    /**
     * 
     * @type {string}
     * @memberof Web3TransactionReceipt
     */
    'output'?: string;
    /**
     * 
     * @type {string}
     * @memberof Web3TransactionReceipt
     */
    'commitmentHash'?: string;
    /**
     * 
     * @type {string}
     * @memberof Web3TransactionReceipt
     */
    'cumulativeGasUsed'?: string;
    /**
     * 
     * @type {string}
     * @memberof Web3TransactionReceipt
     */
    'type'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deploys the contract to ethereum ledger.
         * @param {DeployContractV1Request} [deployContractV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployContract: async (deployContractV1Request?: DeployContractV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-ethereum/deploy-contract`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deployContractV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the Prometheus Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrometheusMetricsV1: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-ethereum/get-prometheus-exporter-metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Invokes a contract on an ethereum ledger
         * @param {InvokeContractV1Request} [invokeContractV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeContractV1: async (invokeContractV1Request?: InvokeContractV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-ethereum/invoke-contract`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(invokeContractV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Low-level endpoint to invoke a method on deployed contract.
         * @param {InvokeRawWeb3EthContractV1Request} [invokeRawWeb3EthContractV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeRawWeb3EthContractV1: async (invokeRawWeb3EthContractV1Request?: InvokeRawWeb3EthContractV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-ethereum/invoke-raw-web3eth-contract`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(invokeRawWeb3EthContractV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Invoke any method from web3.eth (low-level)
         * @param {InvokeRawWeb3EthMethodV1Request} [invokeRawWeb3EthMethodV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeWeb3EthMethodV1: async (invokeRawWeb3EthMethodV1Request?: InvokeRawWeb3EthMethodV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-ethereum/invoke-raw-web3eth-method`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(invokeRawWeb3EthMethodV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Executes a transaction on a ethereum ledger
         * @param {RunTransactionRequest} [runTransactionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runTransactionV1: async (runTransactionRequest?: RunTransactionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-ethereum/run-transaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(runTransactionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deploys the contract to ethereum ledger.
         * @param {DeployContractV1Request} [deployContractV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deployContract(deployContractV1Request?: DeployContractV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunTransactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deployContract(deployContractV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the Prometheus Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrometheusMetricsV1(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrometheusMetricsV1(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Invokes a contract on an ethereum ledger
         * @param {InvokeContractV1Request} [invokeContractV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invokeContractV1(invokeContractV1Request?: InvokeContractV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvokeContractV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invokeContractV1(invokeContractV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Low-level endpoint to invoke a method on deployed contract.
         * @param {InvokeRawWeb3EthContractV1Request} [invokeRawWeb3EthContractV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invokeRawWeb3EthContractV1(invokeRawWeb3EthContractV1Request?: InvokeRawWeb3EthContractV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvokeRawWeb3EthContractV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invokeRawWeb3EthContractV1(invokeRawWeb3EthContractV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Invoke any method from web3.eth (low-level)
         * @param {InvokeRawWeb3EthMethodV1Request} [invokeRawWeb3EthMethodV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invokeWeb3EthMethodV1(invokeRawWeb3EthMethodV1Request?: InvokeRawWeb3EthMethodV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvokeRawWeb3EthMethodV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invokeWeb3EthMethodV1(invokeRawWeb3EthMethodV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Executes a transaction on a ethereum ledger
         * @param {RunTransactionRequest} [runTransactionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runTransactionV1(runTransactionRequest?: RunTransactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunTransactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runTransactionV1(runTransactionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Deploys the contract to ethereum ledger.
         * @param {DeployContractV1Request} [deployContractV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployContract(deployContractV1Request?: DeployContractV1Request, options?: any): AxiosPromise<RunTransactionResponse> {
            return localVarFp.deployContract(deployContractV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the Prometheus Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrometheusMetricsV1(options?: any): AxiosPromise<string> {
            return localVarFp.getPrometheusMetricsV1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Invokes a contract on an ethereum ledger
         * @param {InvokeContractV1Request} [invokeContractV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeContractV1(invokeContractV1Request?: InvokeContractV1Request, options?: any): AxiosPromise<InvokeContractV1Response> {
            return localVarFp.invokeContractV1(invokeContractV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Low-level endpoint to invoke a method on deployed contract.
         * @param {InvokeRawWeb3EthContractV1Request} [invokeRawWeb3EthContractV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeRawWeb3EthContractV1(invokeRawWeb3EthContractV1Request?: InvokeRawWeb3EthContractV1Request, options?: any): AxiosPromise<InvokeRawWeb3EthContractV1Response> {
            return localVarFp.invokeRawWeb3EthContractV1(invokeRawWeb3EthContractV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Invoke any method from web3.eth (low-level)
         * @param {InvokeRawWeb3EthMethodV1Request} [invokeRawWeb3EthMethodV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeWeb3EthMethodV1(invokeRawWeb3EthMethodV1Request?: InvokeRawWeb3EthMethodV1Request, options?: any): AxiosPromise<InvokeRawWeb3EthMethodV1Response> {
            return localVarFp.invokeWeb3EthMethodV1(invokeRawWeb3EthMethodV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Executes a transaction on a ethereum ledger
         * @param {RunTransactionRequest} [runTransactionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runTransactionV1(runTransactionRequest?: RunTransactionRequest, options?: any): AxiosPromise<RunTransactionResponse> {
            return localVarFp.runTransactionV1(runTransactionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Deploys the contract to ethereum ledger.
     * @param {DeployContractV1Request} [deployContractV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deployContract(deployContractV1Request?: DeployContractV1Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deployContract(deployContractV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the Prometheus Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPrometheusMetricsV1(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPrometheusMetricsV1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Invokes a contract on an ethereum ledger
     * @param {InvokeContractV1Request} [invokeContractV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public invokeContractV1(invokeContractV1Request?: InvokeContractV1Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).invokeContractV1(invokeContractV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Low-level endpoint to invoke a method on deployed contract.
     * @param {InvokeRawWeb3EthContractV1Request} [invokeRawWeb3EthContractV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public invokeRawWeb3EthContractV1(invokeRawWeb3EthContractV1Request?: InvokeRawWeb3EthContractV1Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).invokeRawWeb3EthContractV1(invokeRawWeb3EthContractV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Invoke any method from web3.eth (low-level)
     * @param {InvokeRawWeb3EthMethodV1Request} [invokeRawWeb3EthMethodV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public invokeWeb3EthMethodV1(invokeRawWeb3EthMethodV1Request?: InvokeRawWeb3EthMethodV1Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).invokeWeb3EthMethodV1(invokeRawWeb3EthMethodV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Executes a transaction on a ethereum ledger
     * @param {RunTransactionRequest} [runTransactionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public runTransactionV1(runTransactionRequest?: RunTransactionRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).runTransactionV1(runTransactionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


