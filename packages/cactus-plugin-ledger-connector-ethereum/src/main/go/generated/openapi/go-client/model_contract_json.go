/*
Hyperledger Cacti Plugin - Connector Ethereum

Can perform basic tasks on a Ethereum ledger

API version: 2.0.0-rc.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-ethereum

import (
	"encoding/json"
)

// checks if the ContractJSON type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractJSON{}

// ContractJSON struct for ContractJSON
type ContractJSON struct {
	ContractName string `json:"contractName"`
	// See https://ethereum.stackexchange.com/a/47556 regarding the maximum length of the bytecode
	Bytecode string `json:"bytecode"`
	// The application binary interface of the solidity contract, optional parameter
	Abi []interface{} `json:"abi"`
	Metadata *string `json:"metadata,omitempty"`
	DeployedBytecode *string `json:"deployedBytecode,omitempty"`
	SourceMap *string `json:"sourceMap,omitempty"`
	DeployedSourceMap *string `json:"deployedSourceMap,omitempty"`
	SourcePath *string `json:"sourcePath,omitempty"`
	Compiler map[string]interface{} `json:"compiler,omitempty"`
	Networks map[string]interface{} `json:"networks,omitempty"`
	Ast map[string]interface{} `json:"ast,omitempty"`
	FunctionHashes map[string]interface{} `json:"functionHashes,omitempty"`
	GasEstimates map[string]interface{} `json:"gasEstimates,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ContractJSON ContractJSON

// NewContractJSON instantiates a new ContractJSON object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractJSON(contractName string, bytecode string, abi []interface{}) *ContractJSON {
	this := ContractJSON{}
	this.ContractName = contractName
	this.Bytecode = bytecode
	this.Abi = abi
	return &this
}

// NewContractJSONWithDefaults instantiates a new ContractJSON object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractJSONWithDefaults() *ContractJSON {
	this := ContractJSON{}
	return &this
}

// GetContractName returns the ContractName field value
func (o *ContractJSON) GetContractName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContractName
}

// GetContractNameOk returns a tuple with the ContractName field value
// and a boolean to check if the value has been set.
func (o *ContractJSON) GetContractNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractName, true
}

// SetContractName sets field value
func (o *ContractJSON) SetContractName(v string) {
	o.ContractName = v
}

// GetBytecode returns the Bytecode field value
func (o *ContractJSON) GetBytecode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Bytecode
}

// GetBytecodeOk returns a tuple with the Bytecode field value
// and a boolean to check if the value has been set.
func (o *ContractJSON) GetBytecodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bytecode, true
}

// SetBytecode sets field value
func (o *ContractJSON) SetBytecode(v string) {
	o.Bytecode = v
}

// GetAbi returns the Abi field value
func (o *ContractJSON) GetAbi() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.Abi
}

// GetAbiOk returns a tuple with the Abi field value
// and a boolean to check if the value has been set.
func (o *ContractJSON) GetAbiOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Abi, true
}

// SetAbi sets field value
func (o *ContractJSON) SetAbi(v []interface{}) {
	o.Abi = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ContractJSON) GetMetadata() string {
	if o == nil || IsNil(o.Metadata) {
		var ret string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractJSON) GetMetadataOk() (*string, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ContractJSON) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given string and assigns it to the Metadata field.
func (o *ContractJSON) SetMetadata(v string) {
	o.Metadata = &v
}

// GetDeployedBytecode returns the DeployedBytecode field value if set, zero value otherwise.
func (o *ContractJSON) GetDeployedBytecode() string {
	if o == nil || IsNil(o.DeployedBytecode) {
		var ret string
		return ret
	}
	return *o.DeployedBytecode
}

// GetDeployedBytecodeOk returns a tuple with the DeployedBytecode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractJSON) GetDeployedBytecodeOk() (*string, bool) {
	if o == nil || IsNil(o.DeployedBytecode) {
		return nil, false
	}
	return o.DeployedBytecode, true
}

// HasDeployedBytecode returns a boolean if a field has been set.
func (o *ContractJSON) HasDeployedBytecode() bool {
	if o != nil && !IsNil(o.DeployedBytecode) {
		return true
	}

	return false
}

// SetDeployedBytecode gets a reference to the given string and assigns it to the DeployedBytecode field.
func (o *ContractJSON) SetDeployedBytecode(v string) {
	o.DeployedBytecode = &v
}

// GetSourceMap returns the SourceMap field value if set, zero value otherwise.
func (o *ContractJSON) GetSourceMap() string {
	if o == nil || IsNil(o.SourceMap) {
		var ret string
		return ret
	}
	return *o.SourceMap
}

// GetSourceMapOk returns a tuple with the SourceMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractJSON) GetSourceMapOk() (*string, bool) {
	if o == nil || IsNil(o.SourceMap) {
		return nil, false
	}
	return o.SourceMap, true
}

// HasSourceMap returns a boolean if a field has been set.
func (o *ContractJSON) HasSourceMap() bool {
	if o != nil && !IsNil(o.SourceMap) {
		return true
	}

	return false
}

// SetSourceMap gets a reference to the given string and assigns it to the SourceMap field.
func (o *ContractJSON) SetSourceMap(v string) {
	o.SourceMap = &v
}

// GetDeployedSourceMap returns the DeployedSourceMap field value if set, zero value otherwise.
func (o *ContractJSON) GetDeployedSourceMap() string {
	if o == nil || IsNil(o.DeployedSourceMap) {
		var ret string
		return ret
	}
	return *o.DeployedSourceMap
}

// GetDeployedSourceMapOk returns a tuple with the DeployedSourceMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractJSON) GetDeployedSourceMapOk() (*string, bool) {
	if o == nil || IsNil(o.DeployedSourceMap) {
		return nil, false
	}
	return o.DeployedSourceMap, true
}

// HasDeployedSourceMap returns a boolean if a field has been set.
func (o *ContractJSON) HasDeployedSourceMap() bool {
	if o != nil && !IsNil(o.DeployedSourceMap) {
		return true
	}

	return false
}

// SetDeployedSourceMap gets a reference to the given string and assigns it to the DeployedSourceMap field.
func (o *ContractJSON) SetDeployedSourceMap(v string) {
	o.DeployedSourceMap = &v
}

// GetSourcePath returns the SourcePath field value if set, zero value otherwise.
func (o *ContractJSON) GetSourcePath() string {
	if o == nil || IsNil(o.SourcePath) {
		var ret string
		return ret
	}
	return *o.SourcePath
}

// GetSourcePathOk returns a tuple with the SourcePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractJSON) GetSourcePathOk() (*string, bool) {
	if o == nil || IsNil(o.SourcePath) {
		return nil, false
	}
	return o.SourcePath, true
}

// HasSourcePath returns a boolean if a field has been set.
func (o *ContractJSON) HasSourcePath() bool {
	if o != nil && !IsNil(o.SourcePath) {
		return true
	}

	return false
}

// SetSourcePath gets a reference to the given string and assigns it to the SourcePath field.
func (o *ContractJSON) SetSourcePath(v string) {
	o.SourcePath = &v
}

// GetCompiler returns the Compiler field value if set, zero value otherwise.
func (o *ContractJSON) GetCompiler() map[string]interface{} {
	if o == nil || IsNil(o.Compiler) {
		var ret map[string]interface{}
		return ret
	}
	return o.Compiler
}

// GetCompilerOk returns a tuple with the Compiler field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractJSON) GetCompilerOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Compiler) {
		return map[string]interface{}{}, false
	}
	return o.Compiler, true
}

// HasCompiler returns a boolean if a field has been set.
func (o *ContractJSON) HasCompiler() bool {
	if o != nil && !IsNil(o.Compiler) {
		return true
	}

	return false
}

// SetCompiler gets a reference to the given map[string]interface{} and assigns it to the Compiler field.
func (o *ContractJSON) SetCompiler(v map[string]interface{}) {
	o.Compiler = v
}

// GetNetworks returns the Networks field value if set, zero value otherwise.
func (o *ContractJSON) GetNetworks() map[string]interface{} {
	if o == nil || IsNil(o.Networks) {
		var ret map[string]interface{}
		return ret
	}
	return o.Networks
}

// GetNetworksOk returns a tuple with the Networks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractJSON) GetNetworksOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Networks) {
		return map[string]interface{}{}, false
	}
	return o.Networks, true
}

// HasNetworks returns a boolean if a field has been set.
func (o *ContractJSON) HasNetworks() bool {
	if o != nil && !IsNil(o.Networks) {
		return true
	}

	return false
}

// SetNetworks gets a reference to the given map[string]interface{} and assigns it to the Networks field.
func (o *ContractJSON) SetNetworks(v map[string]interface{}) {
	o.Networks = v
}

// GetAst returns the Ast field value if set, zero value otherwise.
func (o *ContractJSON) GetAst() map[string]interface{} {
	if o == nil || IsNil(o.Ast) {
		var ret map[string]interface{}
		return ret
	}
	return o.Ast
}

// GetAstOk returns a tuple with the Ast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractJSON) GetAstOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Ast) {
		return map[string]interface{}{}, false
	}
	return o.Ast, true
}

// HasAst returns a boolean if a field has been set.
func (o *ContractJSON) HasAst() bool {
	if o != nil && !IsNil(o.Ast) {
		return true
	}

	return false
}

// SetAst gets a reference to the given map[string]interface{} and assigns it to the Ast field.
func (o *ContractJSON) SetAst(v map[string]interface{}) {
	o.Ast = v
}

// GetFunctionHashes returns the FunctionHashes field value if set, zero value otherwise.
func (o *ContractJSON) GetFunctionHashes() map[string]interface{} {
	if o == nil || IsNil(o.FunctionHashes) {
		var ret map[string]interface{}
		return ret
	}
	return o.FunctionHashes
}

// GetFunctionHashesOk returns a tuple with the FunctionHashes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractJSON) GetFunctionHashesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.FunctionHashes) {
		return map[string]interface{}{}, false
	}
	return o.FunctionHashes, true
}

// HasFunctionHashes returns a boolean if a field has been set.
func (o *ContractJSON) HasFunctionHashes() bool {
	if o != nil && !IsNil(o.FunctionHashes) {
		return true
	}

	return false
}

// SetFunctionHashes gets a reference to the given map[string]interface{} and assigns it to the FunctionHashes field.
func (o *ContractJSON) SetFunctionHashes(v map[string]interface{}) {
	o.FunctionHashes = v
}

// GetGasEstimates returns the GasEstimates field value if set, zero value otherwise.
func (o *ContractJSON) GetGasEstimates() map[string]interface{} {
	if o == nil || IsNil(o.GasEstimates) {
		var ret map[string]interface{}
		return ret
	}
	return o.GasEstimates
}

// GetGasEstimatesOk returns a tuple with the GasEstimates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractJSON) GetGasEstimatesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.GasEstimates) {
		return map[string]interface{}{}, false
	}
	return o.GasEstimates, true
}

// HasGasEstimates returns a boolean if a field has been set.
func (o *ContractJSON) HasGasEstimates() bool {
	if o != nil && !IsNil(o.GasEstimates) {
		return true
	}

	return false
}

// SetGasEstimates gets a reference to the given map[string]interface{} and assigns it to the GasEstimates field.
func (o *ContractJSON) SetGasEstimates(v map[string]interface{}) {
	o.GasEstimates = v
}

func (o ContractJSON) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractJSON) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contractName"] = o.ContractName
	toSerialize["bytecode"] = o.Bytecode
	toSerialize["abi"] = o.Abi
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.DeployedBytecode) {
		toSerialize["deployedBytecode"] = o.DeployedBytecode
	}
	if !IsNil(o.SourceMap) {
		toSerialize["sourceMap"] = o.SourceMap
	}
	if !IsNil(o.DeployedSourceMap) {
		toSerialize["deployedSourceMap"] = o.DeployedSourceMap
	}
	if !IsNil(o.SourcePath) {
		toSerialize["sourcePath"] = o.SourcePath
	}
	if !IsNil(o.Compiler) {
		toSerialize["compiler"] = o.Compiler
	}
	if !IsNil(o.Networks) {
		toSerialize["networks"] = o.Networks
	}
	if !IsNil(o.Ast) {
		toSerialize["ast"] = o.Ast
	}
	if !IsNil(o.FunctionHashes) {
		toSerialize["functionHashes"] = o.FunctionHashes
	}
	if !IsNil(o.GasEstimates) {
		toSerialize["gasEstimates"] = o.GasEstimates
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ContractJSON) UnmarshalJSON(bytes []byte) (err error) {
	varContractJSON := _ContractJSON{}

	if err = json.Unmarshal(bytes, &varContractJSON); err == nil {
		*o = ContractJSON(varContractJSON)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "contractName")
		delete(additionalProperties, "bytecode")
		delete(additionalProperties, "abi")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "deployedBytecode")
		delete(additionalProperties, "sourceMap")
		delete(additionalProperties, "deployedSourceMap")
		delete(additionalProperties, "sourcePath")
		delete(additionalProperties, "compiler")
		delete(additionalProperties, "networks")
		delete(additionalProperties, "ast")
		delete(additionalProperties, "functionHashes")
		delete(additionalProperties, "gasEstimates")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableContractJSON struct {
	value *ContractJSON
	isSet bool
}

func (v NullableContractJSON) Get() *ContractJSON {
	return v.value
}

func (v *NullableContractJSON) Set(val *ContractJSON) {
	v.value = val
	v.isSet = true
}

func (v NullableContractJSON) IsSet() bool {
	return v.isSet
}

func (v *NullableContractJSON) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractJSON(val *ContractJSON) *NullableContractJSON {
	return &NullableContractJSON{value: val, isSet: true}
}

func (v NullableContractJSON) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractJSON) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


