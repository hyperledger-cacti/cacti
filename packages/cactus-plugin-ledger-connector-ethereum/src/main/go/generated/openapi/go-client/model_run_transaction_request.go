/*
Hyperledger Cacti Plugin - Connector Ethereum

Can perform basic tasks on a Ethereum ledger

API version: 2.0.0-rc.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-ethereum

import (
	"encoding/json"
)

// checks if the RunTransactionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunTransactionRequest{}

// RunTransactionRequest struct for RunTransactionRequest
type RunTransactionRequest struct {
	Web3SigningCredential Web3SigningCredential `json:"web3SigningCredential"`
	TransactionConfig EthereumTransactionConfig `json:"transactionConfig"`
	// The amount of milliseconds to wait for a transaction receipt with thehash of the transaction(which indicates successful execution) beforegiving up and crashing.
	TimeoutMs *float32 `json:"timeoutMs,omitempty"`
}

// NewRunTransactionRequest instantiates a new RunTransactionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunTransactionRequest(web3SigningCredential Web3SigningCredential, transactionConfig EthereumTransactionConfig) *RunTransactionRequest {
	this := RunTransactionRequest{}
	this.Web3SigningCredential = web3SigningCredential
	this.TransactionConfig = transactionConfig
	var timeoutMs float32 = 60000
	this.TimeoutMs = &timeoutMs
	return &this
}

// NewRunTransactionRequestWithDefaults instantiates a new RunTransactionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunTransactionRequestWithDefaults() *RunTransactionRequest {
	this := RunTransactionRequest{}
	var timeoutMs float32 = 60000
	this.TimeoutMs = &timeoutMs
	return &this
}

// GetWeb3SigningCredential returns the Web3SigningCredential field value
func (o *RunTransactionRequest) GetWeb3SigningCredential() Web3SigningCredential {
	if o == nil {
		var ret Web3SigningCredential
		return ret
	}

	return o.Web3SigningCredential
}

// GetWeb3SigningCredentialOk returns a tuple with the Web3SigningCredential field value
// and a boolean to check if the value has been set.
func (o *RunTransactionRequest) GetWeb3SigningCredentialOk() (*Web3SigningCredential, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Web3SigningCredential, true
}

// SetWeb3SigningCredential sets field value
func (o *RunTransactionRequest) SetWeb3SigningCredential(v Web3SigningCredential) {
	o.Web3SigningCredential = v
}

// GetTransactionConfig returns the TransactionConfig field value
func (o *RunTransactionRequest) GetTransactionConfig() EthereumTransactionConfig {
	if o == nil {
		var ret EthereumTransactionConfig
		return ret
	}

	return o.TransactionConfig
}

// GetTransactionConfigOk returns a tuple with the TransactionConfig field value
// and a boolean to check if the value has been set.
func (o *RunTransactionRequest) GetTransactionConfigOk() (*EthereumTransactionConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionConfig, true
}

// SetTransactionConfig sets field value
func (o *RunTransactionRequest) SetTransactionConfig(v EthereumTransactionConfig) {
	o.TransactionConfig = v
}

// GetTimeoutMs returns the TimeoutMs field value if set, zero value otherwise.
func (o *RunTransactionRequest) GetTimeoutMs() float32 {
	if o == nil || IsNil(o.TimeoutMs) {
		var ret float32
		return ret
	}
	return *o.TimeoutMs
}

// GetTimeoutMsOk returns a tuple with the TimeoutMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunTransactionRequest) GetTimeoutMsOk() (*float32, bool) {
	if o == nil || IsNil(o.TimeoutMs) {
		return nil, false
	}
	return o.TimeoutMs, true
}

// HasTimeoutMs returns a boolean if a field has been set.
func (o *RunTransactionRequest) HasTimeoutMs() bool {
	if o != nil && !IsNil(o.TimeoutMs) {
		return true
	}

	return false
}

// SetTimeoutMs gets a reference to the given float32 and assigns it to the TimeoutMs field.
func (o *RunTransactionRequest) SetTimeoutMs(v float32) {
	o.TimeoutMs = &v
}

func (o RunTransactionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunTransactionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["web3SigningCredential"] = o.Web3SigningCredential
	toSerialize["transactionConfig"] = o.TransactionConfig
	if !IsNil(o.TimeoutMs) {
		toSerialize["timeoutMs"] = o.TimeoutMs
	}
	return toSerialize, nil
}

type NullableRunTransactionRequest struct {
	value *RunTransactionRequest
	isSet bool
}

func (v NullableRunTransactionRequest) Get() *RunTransactionRequest {
	return v.value
}

func (v *NullableRunTransactionRequest) Set(val *RunTransactionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRunTransactionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRunTransactionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunTransactionRequest(val *RunTransactionRequest) *NullableRunTransactionRequest {
	return &NullableRunTransactionRequest{value: val, isSet: true}
}

func (v NullableRunTransactionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunTransactionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


