/*
Hyperledger Cacti Plugin - Connector Ethereum

Can perform basic tasks on a Ethereum ledger

API version: 2.0.0-rc.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-ethereum

import (
	"encoding/json"
)

// checks if the GasTransactionConfigLegacy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GasTransactionConfigLegacy{}

// GasTransactionConfigLegacy Transaction gas settings in networks before EIP-1559 (London fork).
type GasTransactionConfigLegacy struct {
	// A maximum amount of gas a user is willing to provide for the execution of the transaction. (gasLimit)
	Gas *string `json:"gas,omitempty"`
	// A price (in Wei) a user is willing to pay for each unit of gas used during the execution of the transaction. In EIP-1559 (London fork) networks, it will be set as both maxFeePerGas and maxPriorityFeePerGas.
	GasPrice *string `json:"gasPrice,omitempty"`
}

// NewGasTransactionConfigLegacy instantiates a new GasTransactionConfigLegacy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGasTransactionConfigLegacy() *GasTransactionConfigLegacy {
	this := GasTransactionConfigLegacy{}
	return &this
}

// NewGasTransactionConfigLegacyWithDefaults instantiates a new GasTransactionConfigLegacy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGasTransactionConfigLegacyWithDefaults() *GasTransactionConfigLegacy {
	this := GasTransactionConfigLegacy{}
	return &this
}

// GetGas returns the Gas field value if set, zero value otherwise.
func (o *GasTransactionConfigLegacy) GetGas() string {
	if o == nil || IsNil(o.Gas) {
		var ret string
		return ret
	}
	return *o.Gas
}

// GetGasOk returns a tuple with the Gas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GasTransactionConfigLegacy) GetGasOk() (*string, bool) {
	if o == nil || IsNil(o.Gas) {
		return nil, false
	}
	return o.Gas, true
}

// HasGas returns a boolean if a field has been set.
func (o *GasTransactionConfigLegacy) HasGas() bool {
	if o != nil && !IsNil(o.Gas) {
		return true
	}

	return false
}

// SetGas gets a reference to the given string and assigns it to the Gas field.
func (o *GasTransactionConfigLegacy) SetGas(v string) {
	o.Gas = &v
}

// GetGasPrice returns the GasPrice field value if set, zero value otherwise.
func (o *GasTransactionConfigLegacy) GetGasPrice() string {
	if o == nil || IsNil(o.GasPrice) {
		var ret string
		return ret
	}
	return *o.GasPrice
}

// GetGasPriceOk returns a tuple with the GasPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GasTransactionConfigLegacy) GetGasPriceOk() (*string, bool) {
	if o == nil || IsNil(o.GasPrice) {
		return nil, false
	}
	return o.GasPrice, true
}

// HasGasPrice returns a boolean if a field has been set.
func (o *GasTransactionConfigLegacy) HasGasPrice() bool {
	if o != nil && !IsNil(o.GasPrice) {
		return true
	}

	return false
}

// SetGasPrice gets a reference to the given string and assigns it to the GasPrice field.
func (o *GasTransactionConfigLegacy) SetGasPrice(v string) {
	o.GasPrice = &v
}

func (o GasTransactionConfigLegacy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GasTransactionConfigLegacy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Gas) {
		toSerialize["gas"] = o.Gas
	}
	if !IsNil(o.GasPrice) {
		toSerialize["gasPrice"] = o.GasPrice
	}
	return toSerialize, nil
}

type NullableGasTransactionConfigLegacy struct {
	value *GasTransactionConfigLegacy
	isSet bool
}

func (v NullableGasTransactionConfigLegacy) Get() *GasTransactionConfigLegacy {
	return v.value
}

func (v *NullableGasTransactionConfigLegacy) Set(val *GasTransactionConfigLegacy) {
	v.value = val
	v.isSet = true
}

func (v NullableGasTransactionConfigLegacy) IsSet() bool {
	return v.isSet
}

func (v *NullableGasTransactionConfigLegacy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGasTransactionConfigLegacy(val *GasTransactionConfigLegacy) *NullableGasTransactionConfigLegacy {
	return &NullableGasTransactionConfigLegacy{value: val, isSet: true}
}

func (v NullableGasTransactionConfigLegacy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGasTransactionConfigLegacy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


