/*
Hyperledger Cacti Plugin - Connector Ethereum

Can perform basic tasks on a Ethereum ledger

API version: 2.0.0-rc.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-ethereum

import (
	"encoding/json"
)

// checks if the InvokeContractV1Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvokeContractV1Request{}

// InvokeContractV1Request struct for InvokeContractV1Request
type InvokeContractV1Request struct {
	Contract InvokeContractV1RequestContract `json:"contract"`
	// The name of the contract method to invoke.
	MethodName string `json:"methodName"`
	// The list of arguments to pass in to the contract method being invoked.
	Params []interface{} `json:"params"`
	InvocationType EthContractInvocationType `json:"invocationType"`
	Web3SigningCredential *Web3SigningCredential `json:"web3SigningCredential,omitempty"`
	GasConfig *GasTransactionConfig `json:"gasConfig,omitempty"`
	Value *string `json:"value,omitempty"`
	// The amount of milliseconds to wait for a transaction receipt before returning an error. Only has any effect if the invocation type is SEND
	TimeoutMs *float32 `json:"timeoutMs,omitempty"`
}

// NewInvokeContractV1Request instantiates a new InvokeContractV1Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvokeContractV1Request(contract InvokeContractV1RequestContract, methodName string, params []interface{}, invocationType EthContractInvocationType) *InvokeContractV1Request {
	this := InvokeContractV1Request{}
	this.Contract = contract
	this.MethodName = methodName
	this.Params = params
	this.InvocationType = invocationType
	var timeoutMs float32 = 60000
	this.TimeoutMs = &timeoutMs
	return &this
}

// NewInvokeContractV1RequestWithDefaults instantiates a new InvokeContractV1Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvokeContractV1RequestWithDefaults() *InvokeContractV1Request {
	this := InvokeContractV1Request{}
	var timeoutMs float32 = 60000
	this.TimeoutMs = &timeoutMs
	return &this
}

// GetContract returns the Contract field value
func (o *InvokeContractV1Request) GetContract() InvokeContractV1RequestContract {
	if o == nil {
		var ret InvokeContractV1RequestContract
		return ret
	}

	return o.Contract
}

// GetContractOk returns a tuple with the Contract field value
// and a boolean to check if the value has been set.
func (o *InvokeContractV1Request) GetContractOk() (*InvokeContractV1RequestContract, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Contract, true
}

// SetContract sets field value
func (o *InvokeContractV1Request) SetContract(v InvokeContractV1RequestContract) {
	o.Contract = v
}

// GetMethodName returns the MethodName field value
func (o *InvokeContractV1Request) GetMethodName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MethodName
}

// GetMethodNameOk returns a tuple with the MethodName field value
// and a boolean to check if the value has been set.
func (o *InvokeContractV1Request) GetMethodNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MethodName, true
}

// SetMethodName sets field value
func (o *InvokeContractV1Request) SetMethodName(v string) {
	o.MethodName = v
}

// GetParams returns the Params field value
func (o *InvokeContractV1Request) GetParams() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.Params
}

// GetParamsOk returns a tuple with the Params field value
// and a boolean to check if the value has been set.
func (o *InvokeContractV1Request) GetParamsOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Params, true
}

// SetParams sets field value
func (o *InvokeContractV1Request) SetParams(v []interface{}) {
	o.Params = v
}

// GetInvocationType returns the InvocationType field value
func (o *InvokeContractV1Request) GetInvocationType() EthContractInvocationType {
	if o == nil {
		var ret EthContractInvocationType
		return ret
	}

	return o.InvocationType
}

// GetInvocationTypeOk returns a tuple with the InvocationType field value
// and a boolean to check if the value has been set.
func (o *InvokeContractV1Request) GetInvocationTypeOk() (*EthContractInvocationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InvocationType, true
}

// SetInvocationType sets field value
func (o *InvokeContractV1Request) SetInvocationType(v EthContractInvocationType) {
	o.InvocationType = v
}

// GetWeb3SigningCredential returns the Web3SigningCredential field value if set, zero value otherwise.
func (o *InvokeContractV1Request) GetWeb3SigningCredential() Web3SigningCredential {
	if o == nil || IsNil(o.Web3SigningCredential) {
		var ret Web3SigningCredential
		return ret
	}
	return *o.Web3SigningCredential
}

// GetWeb3SigningCredentialOk returns a tuple with the Web3SigningCredential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvokeContractV1Request) GetWeb3SigningCredentialOk() (*Web3SigningCredential, bool) {
	if o == nil || IsNil(o.Web3SigningCredential) {
		return nil, false
	}
	return o.Web3SigningCredential, true
}

// HasWeb3SigningCredential returns a boolean if a field has been set.
func (o *InvokeContractV1Request) HasWeb3SigningCredential() bool {
	if o != nil && !IsNil(o.Web3SigningCredential) {
		return true
	}

	return false
}

// SetWeb3SigningCredential gets a reference to the given Web3SigningCredential and assigns it to the Web3SigningCredential field.
func (o *InvokeContractV1Request) SetWeb3SigningCredential(v Web3SigningCredential) {
	o.Web3SigningCredential = &v
}

// GetGasConfig returns the GasConfig field value if set, zero value otherwise.
func (o *InvokeContractV1Request) GetGasConfig() GasTransactionConfig {
	if o == nil || IsNil(o.GasConfig) {
		var ret GasTransactionConfig
		return ret
	}
	return *o.GasConfig
}

// GetGasConfigOk returns a tuple with the GasConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvokeContractV1Request) GetGasConfigOk() (*GasTransactionConfig, bool) {
	if o == nil || IsNil(o.GasConfig) {
		return nil, false
	}
	return o.GasConfig, true
}

// HasGasConfig returns a boolean if a field has been set.
func (o *InvokeContractV1Request) HasGasConfig() bool {
	if o != nil && !IsNil(o.GasConfig) {
		return true
	}

	return false
}

// SetGasConfig gets a reference to the given GasTransactionConfig and assigns it to the GasConfig field.
func (o *InvokeContractV1Request) SetGasConfig(v GasTransactionConfig) {
	o.GasConfig = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *InvokeContractV1Request) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvokeContractV1Request) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *InvokeContractV1Request) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *InvokeContractV1Request) SetValue(v string) {
	o.Value = &v
}

// GetTimeoutMs returns the TimeoutMs field value if set, zero value otherwise.
func (o *InvokeContractV1Request) GetTimeoutMs() float32 {
	if o == nil || IsNil(o.TimeoutMs) {
		var ret float32
		return ret
	}
	return *o.TimeoutMs
}

// GetTimeoutMsOk returns a tuple with the TimeoutMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvokeContractV1Request) GetTimeoutMsOk() (*float32, bool) {
	if o == nil || IsNil(o.TimeoutMs) {
		return nil, false
	}
	return o.TimeoutMs, true
}

// HasTimeoutMs returns a boolean if a field has been set.
func (o *InvokeContractV1Request) HasTimeoutMs() bool {
	if o != nil && !IsNil(o.TimeoutMs) {
		return true
	}

	return false
}

// SetTimeoutMs gets a reference to the given float32 and assigns it to the TimeoutMs field.
func (o *InvokeContractV1Request) SetTimeoutMs(v float32) {
	o.TimeoutMs = &v
}

func (o InvokeContractV1Request) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvokeContractV1Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contract"] = o.Contract
	toSerialize["methodName"] = o.MethodName
	toSerialize["params"] = o.Params
	toSerialize["invocationType"] = o.InvocationType
	if !IsNil(o.Web3SigningCredential) {
		toSerialize["web3SigningCredential"] = o.Web3SigningCredential
	}
	if !IsNil(o.GasConfig) {
		toSerialize["gasConfig"] = o.GasConfig
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.TimeoutMs) {
		toSerialize["timeoutMs"] = o.TimeoutMs
	}
	return toSerialize, nil
}

type NullableInvokeContractV1Request struct {
	value *InvokeContractV1Request
	isSet bool
}

func (v NullableInvokeContractV1Request) Get() *InvokeContractV1Request {
	return v.value
}

func (v *NullableInvokeContractV1Request) Set(val *InvokeContractV1Request) {
	v.value = val
	v.isSet = true
}

func (v NullableInvokeContractV1Request) IsSet() bool {
	return v.isSet
}

func (v *NullableInvokeContractV1Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvokeContractV1Request(val *InvokeContractV1Request) *NullableInvokeContractV1Request {
	return &NullableInvokeContractV1Request{value: val, isSet: true}
}

func (v NullableInvokeContractV1Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvokeContractV1Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


