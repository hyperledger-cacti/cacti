/*
Hyperledger Cacti Plugin - Connector Ethereum

Can perform basic tasks on a Ethereum ledger

API version: 2.0.0-rc.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-ethereum

import (
	"encoding/json"
)

// checks if the DeployedContractJsonDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeployedContractJsonDefinition{}

// DeployedContractJsonDefinition struct for DeployedContractJsonDefinition
type DeployedContractJsonDefinition struct {
	ContractJSON ContractJSON `json:"contractJSON"`
	ContractAddress string `json:"contractAddress"`
}

// NewDeployedContractJsonDefinition instantiates a new DeployedContractJsonDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeployedContractJsonDefinition(contractJSON ContractJSON, contractAddress string) *DeployedContractJsonDefinition {
	this := DeployedContractJsonDefinition{}
	this.ContractJSON = contractJSON
	this.ContractAddress = contractAddress
	return &this
}

// NewDeployedContractJsonDefinitionWithDefaults instantiates a new DeployedContractJsonDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeployedContractJsonDefinitionWithDefaults() *DeployedContractJsonDefinition {
	this := DeployedContractJsonDefinition{}
	return &this
}

// GetContractJSON returns the ContractJSON field value
func (o *DeployedContractJsonDefinition) GetContractJSON() ContractJSON {
	if o == nil {
		var ret ContractJSON
		return ret
	}

	return o.ContractJSON
}

// GetContractJSONOk returns a tuple with the ContractJSON field value
// and a boolean to check if the value has been set.
func (o *DeployedContractJsonDefinition) GetContractJSONOk() (*ContractJSON, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractJSON, true
}

// SetContractJSON sets field value
func (o *DeployedContractJsonDefinition) SetContractJSON(v ContractJSON) {
	o.ContractJSON = v
}

// GetContractAddress returns the ContractAddress field value
func (o *DeployedContractJsonDefinition) GetContractAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContractAddress
}

// GetContractAddressOk returns a tuple with the ContractAddress field value
// and a boolean to check if the value has been set.
func (o *DeployedContractJsonDefinition) GetContractAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractAddress, true
}

// SetContractAddress sets field value
func (o *DeployedContractJsonDefinition) SetContractAddress(v string) {
	o.ContractAddress = v
}

func (o DeployedContractJsonDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeployedContractJsonDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contractJSON"] = o.ContractJSON
	toSerialize["contractAddress"] = o.ContractAddress
	return toSerialize, nil
}

type NullableDeployedContractJsonDefinition struct {
	value *DeployedContractJsonDefinition
	isSet bool
}

func (v NullableDeployedContractJsonDefinition) Get() *DeployedContractJsonDefinition {
	return v.value
}

func (v *NullableDeployedContractJsonDefinition) Set(val *DeployedContractJsonDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableDeployedContractJsonDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableDeployedContractJsonDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeployedContractJsonDefinition(val *DeployedContractJsonDefinition) *NullableDeployedContractJsonDefinition {
	return &NullableDeployedContractJsonDefinition{value: val, isSet: true}
}

func (v NullableDeployedContractJsonDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeployedContractJsonDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


