/*
 * Hyperledger Cacti Plugin - Connector Ethereum
 * Can perform basic tasks on a Ethereum ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DeployContractV1Request;
import org.openapitools.client.model.ErrorExceptionResponseV1;
import org.openapitools.client.model.InvokeContractV1Request;
import org.openapitools.client.model.InvokeContractV1Response;
import org.openapitools.client.model.InvokeRawWeb3EthContractV1Request;
import org.openapitools.client.model.InvokeRawWeb3EthContractV1Response;
import org.openapitools.client.model.InvokeRawWeb3EthMethodV1Request;
import org.openapitools.client.model.InvokeRawWeb3EthMethodV1Response;
import org.openapitools.client.model.RunTransactionRequest;
import org.openapitools.client.model.RunTransactionResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Deploys the contract to ethereum ledger.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deployContractTest() throws ApiException {
        DeployContractV1Request deployContractV1Request = null;
        RunTransactionResponse response = api.deployContract(deployContractV1Request);
        // TODO: test validations
    }

    /**
     * Get the Prometheus Metrics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPrometheusMetricsV1Test() throws ApiException {
        String response = api.getPrometheusMetricsV1();
        // TODO: test validations
    }

    /**
     * Invokes a contract on an ethereum ledger
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void invokeContractV1Test() throws ApiException {
        InvokeContractV1Request invokeContractV1Request = null;
        InvokeContractV1Response response = api.invokeContractV1(invokeContractV1Request);
        // TODO: test validations
    }

    /**
     * Low-level endpoint to invoke a method on deployed contract.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void invokeRawWeb3EthContractV1Test() throws ApiException {
        InvokeRawWeb3EthContractV1Request invokeRawWeb3EthContractV1Request = null;
        InvokeRawWeb3EthContractV1Response response = api.invokeRawWeb3EthContractV1(invokeRawWeb3EthContractV1Request);
        // TODO: test validations
    }

    /**
     * Invoke any method from web3.eth (low-level)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void invokeWeb3EthMethodV1Test() throws ApiException {
        InvokeRawWeb3EthMethodV1Request invokeRawWeb3EthMethodV1Request = null;
        InvokeRawWeb3EthMethodV1Response response = api.invokeWeb3EthMethodV1(invokeRawWeb3EthMethodV1Request);
        // TODO: test validations
    }

    /**
     * Executes a transaction on a ethereum ledger
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runTransactionV1Test() throws ApiException {
        RunTransactionRequest runTransactionRequest = null;
        RunTransactionResponse response = api.runTransactionV1(runTransactionRequest);
        // TODO: test validations
    }

}
