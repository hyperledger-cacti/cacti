/*
 * Hyperledger Cacti Plugin - Connector Ethereum
 * Can perform basic tasks on a Ethereum ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.GasTransactionConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EthereumTransactionConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EthereumTransactionConfig {
  public static final String SERIALIZED_NAME_RAW_TRANSACTION = "rawTransaction";
  @SerializedName(SERIALIZED_NAME_RAW_TRANSACTION)
  private String rawTransaction;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private String nonce;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private String data;

  public static final String SERIALIZED_NAME_GAS_CONFIG = "gasConfig";
  @SerializedName(SERIALIZED_NAME_GAS_CONFIG)
  private GasTransactionConfig gasConfig;

  public EthereumTransactionConfig() {
  }

  public EthereumTransactionConfig rawTransaction(String rawTransaction) {
    
    this.rawTransaction = rawTransaction;
    return this;
  }

   /**
   * Get rawTransaction
   * @return rawTransaction
  **/
  @javax.annotation.Nullable

  public String getRawTransaction() {
    return rawTransaction;
  }


  public void setRawTransaction(String rawTransaction) {
    this.rawTransaction = rawTransaction;
  }


  public EthereumTransactionConfig from(String from) {
    
    this.from = from;
    return this;
  }

   /**
   * Get from
   * @return from
  **/
  @javax.annotation.Nullable

  public String getFrom() {
    return from;
  }


  public void setFrom(String from) {
    this.from = from;
  }


  public EthereumTransactionConfig to(String to) {
    
    this.to = to;
    return this;
  }

   /**
   * Get to
   * @return to
  **/
  @javax.annotation.Nullable

  public String getTo() {
    return to;
  }


  public void setTo(String to) {
    this.to = to;
  }


  public EthereumTransactionConfig value(String value) {
    
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nullable

  public String getValue() {
    return value;
  }


  public void setValue(String value) {
    this.value = value;
  }


  public EthereumTransactionConfig nonce(String nonce) {
    
    this.nonce = nonce;
    return this;
  }

   /**
   * Get nonce
   * @return nonce
  **/
  @javax.annotation.Nullable

  public String getNonce() {
    return nonce;
  }


  public void setNonce(String nonce) {
    this.nonce = nonce;
  }


  public EthereumTransactionConfig data(String data) {
    
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nullable

  public String getData() {
    return data;
  }


  public void setData(String data) {
    this.data = data;
  }


  public EthereumTransactionConfig gasConfig(GasTransactionConfig gasConfig) {
    
    this.gasConfig = gasConfig;
    return this;
  }

   /**
   * Get gasConfig
   * @return gasConfig
  **/
  @javax.annotation.Nullable

  public GasTransactionConfig getGasConfig() {
    return gasConfig;
  }


  public void setGasConfig(GasTransactionConfig gasConfig) {
    this.gasConfig = gasConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EthereumTransactionConfig ethereumTransactionConfig = (EthereumTransactionConfig) o;
    return Objects.equals(this.rawTransaction, ethereumTransactionConfig.rawTransaction) &&
        Objects.equals(this.from, ethereumTransactionConfig.from) &&
        Objects.equals(this.to, ethereumTransactionConfig.to) &&
        Objects.equals(this.value, ethereumTransactionConfig.value) &&
        Objects.equals(this.nonce, ethereumTransactionConfig.nonce) &&
        Objects.equals(this.data, ethereumTransactionConfig.data) &&
        Objects.equals(this.gasConfig, ethereumTransactionConfig.gasConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rawTransaction, from, to, value, nonce, data, gasConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EthereumTransactionConfig {\n");
    sb.append("    rawTransaction: ").append(toIndentedString(rawTransaction)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    gasConfig: ").append(toIndentedString(gasConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("rawTransaction");
    openapiFields.add("from");
    openapiFields.add("to");
    openapiFields.add("value");
    openapiFields.add("nonce");
    openapiFields.add("data");
    openapiFields.add("gasConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EthereumTransactionConfig
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EthereumTransactionConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EthereumTransactionConfig is not found in the empty JSON string", EthereumTransactionConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EthereumTransactionConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EthereumTransactionConfig` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("rawTransaction") != null && !jsonObj.get("rawTransaction").isJsonNull()) && !jsonObj.get("rawTransaction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawTransaction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawTransaction").toString()));
      }
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if ((jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) && !jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
      if ((jsonObj.get("nonce") != null && !jsonObj.get("nonce").isJsonNull()) && !jsonObj.get("nonce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nonce").toString()));
      }
      if ((jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull()) && !jsonObj.get("data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      // validate the optional field `gasConfig`
      if (jsonObj.get("gasConfig") != null && !jsonObj.get("gasConfig").isJsonNull()) {
        GasTransactionConfig.validateJsonObject(jsonObj.getAsJsonObject("gasConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EthereumTransactionConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EthereumTransactionConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EthereumTransactionConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EthereumTransactionConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<EthereumTransactionConfig>() {
           @Override
           public void write(JsonWriter out, EthereumTransactionConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EthereumTransactionConfig read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EthereumTransactionConfig given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EthereumTransactionConfig
  * @throws IOException if the JSON string is invalid with respect to EthereumTransactionConfig
  */
  public static EthereumTransactionConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EthereumTransactionConfig.class);
  }

 /**
  * Convert an instance of EthereumTransactionConfig to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

