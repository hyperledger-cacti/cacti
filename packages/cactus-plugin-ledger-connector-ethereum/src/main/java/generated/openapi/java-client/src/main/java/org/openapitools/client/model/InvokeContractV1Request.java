/*
 * Hyperledger Cacti Plugin - Connector Ethereum
 * Can perform basic tasks on a Ethereum ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.EthContractInvocationType;
import org.openapitools.client.model.GasTransactionConfig;
import org.openapitools.client.model.InvokeContractV1RequestContract;
import org.openapitools.client.model.Web3SigningCredential;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InvokeContractV1Request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InvokeContractV1Request {
  public static final String SERIALIZED_NAME_CONTRACT = "contract";
  @SerializedName(SERIALIZED_NAME_CONTRACT)
  private InvokeContractV1RequestContract contract;

  public static final String SERIALIZED_NAME_METHOD_NAME = "methodName";
  @SerializedName(SERIALIZED_NAME_METHOD_NAME)
  private String methodName;

  public static final String SERIALIZED_NAME_PARAMS = "params";
  @SerializedName(SERIALIZED_NAME_PARAMS)
  private List<Object> params = null;

  public static final String SERIALIZED_NAME_INVOCATION_TYPE = "invocationType";
  @SerializedName(SERIALIZED_NAME_INVOCATION_TYPE)
  private EthContractInvocationType invocationType;

  public static final String SERIALIZED_NAME_WEB3_SIGNING_CREDENTIAL = "web3SigningCredential";
  @SerializedName(SERIALIZED_NAME_WEB3_SIGNING_CREDENTIAL)
  private Web3SigningCredential web3SigningCredential;

  public static final String SERIALIZED_NAME_GAS_CONFIG = "gasConfig";
  @SerializedName(SERIALIZED_NAME_GAS_CONFIG)
  private GasTransactionConfig gasConfig;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_TIMEOUT_MS = "timeoutMs";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_MS)
  private BigDecimal timeoutMs = new BigDecimal("60000");

  public InvokeContractV1Request() {
  }

  public InvokeContractV1Request contract(InvokeContractV1RequestContract contract) {
    
    this.contract = contract;
    return this;
  }

   /**
   * Get contract
   * @return contract
  **/
  @javax.annotation.Nonnull

  public InvokeContractV1RequestContract getContract() {
    return contract;
  }


  public void setContract(InvokeContractV1RequestContract contract) {
    this.contract = contract;
  }


  public InvokeContractV1Request methodName(String methodName) {
    
    this.methodName = methodName;
    return this;
  }

   /**
   * The name of the contract method to invoke.
   * @return methodName
  **/
  @javax.annotation.Nonnull

  public String getMethodName() {
    return methodName;
  }


  public void setMethodName(String methodName) {
    this.methodName = methodName;
  }


  public InvokeContractV1Request params(List<Object> params) {
    
    this.params = params;
    return this;
  }

  public InvokeContractV1Request addParamsItem(Object paramsItem) {
    this.params.add(paramsItem);
    return this;
  }

   /**
   * The list of arguments to pass in to the contract method being invoked.
   * @return params
  **/
  @javax.annotation.Nonnull

  public List<Object> getParams() {
    return params;
  }


  public void setParams(List<Object> params) {
    this.params = params;
  }


  public InvokeContractV1Request invocationType(EthContractInvocationType invocationType) {
    
    this.invocationType = invocationType;
    return this;
  }

   /**
   * Get invocationType
   * @return invocationType
  **/
  @javax.annotation.Nonnull

  public EthContractInvocationType getInvocationType() {
    return invocationType;
  }


  public void setInvocationType(EthContractInvocationType invocationType) {
    this.invocationType = invocationType;
  }


  public InvokeContractV1Request web3SigningCredential(Web3SigningCredential web3SigningCredential) {
    
    this.web3SigningCredential = web3SigningCredential;
    return this;
  }

   /**
   * Get web3SigningCredential
   * @return web3SigningCredential
  **/
  @javax.annotation.Nullable

  public Web3SigningCredential getWeb3SigningCredential() {
    return web3SigningCredential;
  }


  public void setWeb3SigningCredential(Web3SigningCredential web3SigningCredential) {
    this.web3SigningCredential = web3SigningCredential;
  }


  public InvokeContractV1Request gasConfig(GasTransactionConfig gasConfig) {
    
    this.gasConfig = gasConfig;
    return this;
  }

   /**
   * Get gasConfig
   * @return gasConfig
  **/
  @javax.annotation.Nullable

  public GasTransactionConfig getGasConfig() {
    return gasConfig;
  }


  public void setGasConfig(GasTransactionConfig gasConfig) {
    this.gasConfig = gasConfig;
  }


  public InvokeContractV1Request value(String value) {
    
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nullable

  public String getValue() {
    return value;
  }


  public void setValue(String value) {
    this.value = value;
  }


  public InvokeContractV1Request timeoutMs(BigDecimal timeoutMs) {
    
    this.timeoutMs = timeoutMs;
    return this;
  }

   /**
   * The amount of milliseconds to wait for a transaction receipt before returning an error. Only has any effect if the invocation type is SEND
   * minimum: 0
   * @return timeoutMs
  **/
  @javax.annotation.Nullable

  public BigDecimal getTimeoutMs() {
    return timeoutMs;
  }


  public void setTimeoutMs(BigDecimal timeoutMs) {
    this.timeoutMs = timeoutMs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvokeContractV1Request invokeContractV1Request = (InvokeContractV1Request) o;
    return Objects.equals(this.contract, invokeContractV1Request.contract) &&
        Objects.equals(this.methodName, invokeContractV1Request.methodName) &&
        Objects.equals(this.params, invokeContractV1Request.params) &&
        Objects.equals(this.invocationType, invokeContractV1Request.invocationType) &&
        Objects.equals(this.web3SigningCredential, invokeContractV1Request.web3SigningCredential) &&
        Objects.equals(this.gasConfig, invokeContractV1Request.gasConfig) &&
        Objects.equals(this.value, invokeContractV1Request.value) &&
        Objects.equals(this.timeoutMs, invokeContractV1Request.timeoutMs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contract, methodName, params, invocationType, web3SigningCredential, gasConfig, value, timeoutMs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvokeContractV1Request {\n");
    sb.append("    contract: ").append(toIndentedString(contract)).append("\n");
    sb.append("    methodName: ").append(toIndentedString(methodName)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    invocationType: ").append(toIndentedString(invocationType)).append("\n");
    sb.append("    web3SigningCredential: ").append(toIndentedString(web3SigningCredential)).append("\n");
    sb.append("    gasConfig: ").append(toIndentedString(gasConfig)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    timeoutMs: ").append(toIndentedString(timeoutMs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contract");
    openapiFields.add("methodName");
    openapiFields.add("params");
    openapiFields.add("invocationType");
    openapiFields.add("web3SigningCredential");
    openapiFields.add("gasConfig");
    openapiFields.add("value");
    openapiFields.add("timeoutMs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contract");
    openapiRequiredFields.add("methodName");
    openapiRequiredFields.add("params");
    openapiRequiredFields.add("invocationType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InvokeContractV1Request
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!InvokeContractV1Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvokeContractV1Request is not found in the empty JSON string", InvokeContractV1Request.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!InvokeContractV1Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvokeContractV1Request` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InvokeContractV1Request.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `contract`
      InvokeContractV1RequestContract.validateJsonObject(jsonObj.getAsJsonObject("contract"));
      if (!jsonObj.get("methodName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `methodName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("methodName").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("params") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("params").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `params` to be an array in the JSON string but got `%s`", jsonObj.get("params").toString()));
      }
      // validate the optional field `web3SigningCredential`
      if (jsonObj.get("web3SigningCredential") != null && !jsonObj.get("web3SigningCredential").isJsonNull()) {
        Web3SigningCredential.validateJsonObject(jsonObj.getAsJsonObject("web3SigningCredential"));
      }
      // validate the optional field `gasConfig`
      if (jsonObj.get("gasConfig") != null && !jsonObj.get("gasConfig").isJsonNull()) {
        GasTransactionConfig.validateJsonObject(jsonObj.getAsJsonObject("gasConfig"));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvokeContractV1Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvokeContractV1Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvokeContractV1Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvokeContractV1Request.class));

       return (TypeAdapter<T>) new TypeAdapter<InvokeContractV1Request>() {
           @Override
           public void write(JsonWriter out, InvokeContractV1Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvokeContractV1Request read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InvokeContractV1Request given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InvokeContractV1Request
  * @throws IOException if the JSON string is invalid with respect to InvokeContractV1Request
  */
  public static InvokeContractV1Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvokeContractV1Request.class);
  }

 /**
  * Convert an instance of InvokeContractV1Request to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

