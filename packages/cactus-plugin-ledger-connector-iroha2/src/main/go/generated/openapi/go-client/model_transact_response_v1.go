/*
Hyperledger Cactus Plugin - Connector Iroha V2

Can perform basic tasks on a Iroha V2 ledger

API version: 2.0.0-rc.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-iroha2

import (
	"encoding/json"
)

// checks if the TransactResponseV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactResponseV1{}

// TransactResponseV1 Response from transaction endpoint with operation status.
type TransactResponseV1 struct {
	// Hexadecimal hash of the transaction sent to the ledger.
	Hash string `json:"hash"`
	Status TransactionStatusV1 `json:"status"`
	// When waitForCommit was suplied and the transaction was rejected, contains the reason of the rejection.
	RejectReason *string `json:"rejectReason,omitempty"`
}

// NewTransactResponseV1 instantiates a new TransactResponseV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactResponseV1(hash string, status TransactionStatusV1) *TransactResponseV1 {
	this := TransactResponseV1{}
	this.Hash = hash
	this.Status = status
	return &this
}

// NewTransactResponseV1WithDefaults instantiates a new TransactResponseV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactResponseV1WithDefaults() *TransactResponseV1 {
	this := TransactResponseV1{}
	return &this
}

// GetHash returns the Hash field value
func (o *TransactResponseV1) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *TransactResponseV1) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *TransactResponseV1) SetHash(v string) {
	o.Hash = v
}

// GetStatus returns the Status field value
func (o *TransactResponseV1) GetStatus() TransactionStatusV1 {
	if o == nil {
		var ret TransactionStatusV1
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TransactResponseV1) GetStatusOk() (*TransactionStatusV1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TransactResponseV1) SetStatus(v TransactionStatusV1) {
	o.Status = v
}

// GetRejectReason returns the RejectReason field value if set, zero value otherwise.
func (o *TransactResponseV1) GetRejectReason() string {
	if o == nil || IsNil(o.RejectReason) {
		var ret string
		return ret
	}
	return *o.RejectReason
}

// GetRejectReasonOk returns a tuple with the RejectReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactResponseV1) GetRejectReasonOk() (*string, bool) {
	if o == nil || IsNil(o.RejectReason) {
		return nil, false
	}
	return o.RejectReason, true
}

// HasRejectReason returns a boolean if a field has been set.
func (o *TransactResponseV1) HasRejectReason() bool {
	if o != nil && !IsNil(o.RejectReason) {
		return true
	}

	return false
}

// SetRejectReason gets a reference to the given string and assigns it to the RejectReason field.
func (o *TransactResponseV1) SetRejectReason(v string) {
	o.RejectReason = &v
}

func (o TransactResponseV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactResponseV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hash"] = o.Hash
	toSerialize["status"] = o.Status
	if !IsNil(o.RejectReason) {
		toSerialize["rejectReason"] = o.RejectReason
	}
	return toSerialize, nil
}

type NullableTransactResponseV1 struct {
	value *TransactResponseV1
	isSet bool
}

func (v NullableTransactResponseV1) Get() *TransactResponseV1 {
	return v.value
}

func (v *NullableTransactResponseV1) Set(val *TransactResponseV1) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactResponseV1) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactResponseV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactResponseV1(val *TransactResponseV1) *NullableTransactResponseV1 {
	return &NullableTransactResponseV1{value: val, isSet: true}
}

func (v NullableTransactResponseV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactResponseV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


