/*
Hyperledger Cactus Plugin - Connector Iroha V2

Can perform basic tasks on a Iroha V2 ledger

API version: 2.0.0-rc.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-iroha2

import (
	"encoding/json"
	"fmt"
)

// IrohaInstruction Command names that correspond to Iroha Special Instructions (https://hyperledger.github.io/iroha-2-docs/guide/advanced/isi.html)
type IrohaInstruction string

// List of IrohaInstruction
const (
	RegisterDomain IrohaInstruction = "registerDomain"
	RegisterAssetDefinition IrohaInstruction = "registerAssetDefinition"
	RegisterAsset IrohaInstruction = "registerAsset"
	MintAsset IrohaInstruction = "mintAsset"
	BurnAsset IrohaInstruction = "burnAsset"
	TransferAsset IrohaInstruction = "transferAsset"
	RegisterAccount IrohaInstruction = "registerAccount"
)

// All allowed values of IrohaInstruction enum
var AllowedIrohaInstructionEnumValues = []IrohaInstruction{
	"registerDomain",
	"registerAssetDefinition",
	"registerAsset",
	"mintAsset",
	"burnAsset",
	"transferAsset",
	"registerAccount",
}

func (v *IrohaInstruction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IrohaInstruction(value)
	for _, existing := range AllowedIrohaInstructionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IrohaInstruction", value)
}

// NewIrohaInstructionFromValue returns a pointer to a valid IrohaInstruction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIrohaInstructionFromValue(v string) (*IrohaInstruction, error) {
	ev := IrohaInstruction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IrohaInstruction: valid values are %v", v, AllowedIrohaInstructionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IrohaInstruction) IsValid() bool {
	for _, existing := range AllowedIrohaInstructionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IrohaInstruction value
func (v IrohaInstruction) Ptr() *IrohaInstruction {
	return &v
}

type NullableIrohaInstruction struct {
	value *IrohaInstruction
	isSet bool
}

func (v NullableIrohaInstruction) Get() *IrohaInstruction {
	return v.value
}

func (v *NullableIrohaInstruction) Set(val *IrohaInstruction) {
	v.value = val
	v.isSet = true
}

func (v NullableIrohaInstruction) IsSet() bool {
	return v.isSet
}

func (v *NullableIrohaInstruction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIrohaInstruction(val *IrohaInstruction) *NullableIrohaInstruction {
	return &NullableIrohaInstruction{value: val, isSet: true}
}

func (v NullableIrohaInstruction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIrohaInstruction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

