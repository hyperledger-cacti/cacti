/*
Hyperledger Cactus Plugin - Connector Iroha V2

Can perform basic tasks on a Iroha V2 ledger

API version: 2.0.0-rc.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-iroha2

import (
	"encoding/json"
)

// checks if the QueryRequestV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryRequestV1{}

// QueryRequestV1 Request to query endpoint.
type QueryRequestV1 struct {
	Query *IrohaQueryDefinitionV1 `json:"query,omitempty"`
	SignedQuery *IrohaSignedQueryDefinitionV1 `json:"signedQuery,omitempty"`
	BaseConfig *Iroha2BaseConfig `json:"baseConfig,omitempty"`
}

// NewQueryRequestV1 instantiates a new QueryRequestV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryRequestV1() *QueryRequestV1 {
	this := QueryRequestV1{}
	return &this
}

// NewQueryRequestV1WithDefaults instantiates a new QueryRequestV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryRequestV1WithDefaults() *QueryRequestV1 {
	this := QueryRequestV1{}
	return &this
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *QueryRequestV1) GetQuery() IrohaQueryDefinitionV1 {
	if o == nil || IsNil(o.Query) {
		var ret IrohaQueryDefinitionV1
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryRequestV1) GetQueryOk() (*IrohaQueryDefinitionV1, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *QueryRequestV1) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given IrohaQueryDefinitionV1 and assigns it to the Query field.
func (o *QueryRequestV1) SetQuery(v IrohaQueryDefinitionV1) {
	o.Query = &v
}

// GetSignedQuery returns the SignedQuery field value if set, zero value otherwise.
func (o *QueryRequestV1) GetSignedQuery() IrohaSignedQueryDefinitionV1 {
	if o == nil || IsNil(o.SignedQuery) {
		var ret IrohaSignedQueryDefinitionV1
		return ret
	}
	return *o.SignedQuery
}

// GetSignedQueryOk returns a tuple with the SignedQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryRequestV1) GetSignedQueryOk() (*IrohaSignedQueryDefinitionV1, bool) {
	if o == nil || IsNil(o.SignedQuery) {
		return nil, false
	}
	return o.SignedQuery, true
}

// HasSignedQuery returns a boolean if a field has been set.
func (o *QueryRequestV1) HasSignedQuery() bool {
	if o != nil && !IsNil(o.SignedQuery) {
		return true
	}

	return false
}

// SetSignedQuery gets a reference to the given IrohaSignedQueryDefinitionV1 and assigns it to the SignedQuery field.
func (o *QueryRequestV1) SetSignedQuery(v IrohaSignedQueryDefinitionV1) {
	o.SignedQuery = &v
}

// GetBaseConfig returns the BaseConfig field value if set, zero value otherwise.
func (o *QueryRequestV1) GetBaseConfig() Iroha2BaseConfig {
	if o == nil || IsNil(o.BaseConfig) {
		var ret Iroha2BaseConfig
		return ret
	}
	return *o.BaseConfig
}

// GetBaseConfigOk returns a tuple with the BaseConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryRequestV1) GetBaseConfigOk() (*Iroha2BaseConfig, bool) {
	if o == nil || IsNil(o.BaseConfig) {
		return nil, false
	}
	return o.BaseConfig, true
}

// HasBaseConfig returns a boolean if a field has been set.
func (o *QueryRequestV1) HasBaseConfig() bool {
	if o != nil && !IsNil(o.BaseConfig) {
		return true
	}

	return false
}

// SetBaseConfig gets a reference to the given Iroha2BaseConfig and assigns it to the BaseConfig field.
func (o *QueryRequestV1) SetBaseConfig(v Iroha2BaseConfig) {
	o.BaseConfig = &v
}

func (o QueryRequestV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryRequestV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.SignedQuery) {
		toSerialize["signedQuery"] = o.SignedQuery
	}
	if !IsNil(o.BaseConfig) {
		toSerialize["baseConfig"] = o.BaseConfig
	}
	return toSerialize, nil
}

type NullableQueryRequestV1 struct {
	value *QueryRequestV1
	isSet bool
}

func (v NullableQueryRequestV1) Get() *QueryRequestV1 {
	return v.value
}

func (v *NullableQueryRequestV1) Set(val *QueryRequestV1) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryRequestV1) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryRequestV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryRequestV1(val *QueryRequestV1) *NullableQueryRequestV1 {
	return &NullableQueryRequestV1{value: val, isSet: true}
}

func (v NullableQueryRequestV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryRequestV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


