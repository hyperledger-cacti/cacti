/*
Hyperledger Cactus Plugin - Connector Iroha V2

Can perform basic tasks on a Iroha V2 ledger

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-iroha2

import (
	"encoding/json"
)

// checks if the TransactRequestV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactRequestV1{}

// TransactRequestV1 Request to transact endpoint.
type TransactRequestV1 struct {
	// Signed transaction binary data received from generate-transaction endpoint.
	SignedTransaction *string `json:"signedTransaction,omitempty"`
	Transaction *IrohaTransactionDefinitionV1 `json:"transaction,omitempty"`
	// Wait unitl transaction is sent and return the final status (committed / rejected)
	WaitForCommit *bool `json:"waitForCommit,omitempty"`
	BaseConfig *Iroha2BaseConfig `json:"baseConfig,omitempty"`
}

// NewTransactRequestV1 instantiates a new TransactRequestV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactRequestV1() *TransactRequestV1 {
	this := TransactRequestV1{}
	var waitForCommit bool = false
	this.WaitForCommit = &waitForCommit
	return &this
}

// NewTransactRequestV1WithDefaults instantiates a new TransactRequestV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactRequestV1WithDefaults() *TransactRequestV1 {
	this := TransactRequestV1{}
	var waitForCommit bool = false
	this.WaitForCommit = &waitForCommit
	return &this
}

// GetSignedTransaction returns the SignedTransaction field value if set, zero value otherwise.
func (o *TransactRequestV1) GetSignedTransaction() string {
	if o == nil || IsNil(o.SignedTransaction) {
		var ret string
		return ret
	}
	return *o.SignedTransaction
}

// GetSignedTransactionOk returns a tuple with the SignedTransaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactRequestV1) GetSignedTransactionOk() (*string, bool) {
	if o == nil || IsNil(o.SignedTransaction) {
		return nil, false
	}
	return o.SignedTransaction, true
}

// HasSignedTransaction returns a boolean if a field has been set.
func (o *TransactRequestV1) HasSignedTransaction() bool {
	if o != nil && !IsNil(o.SignedTransaction) {
		return true
	}

	return false
}

// SetSignedTransaction gets a reference to the given string and assigns it to the SignedTransaction field.
func (o *TransactRequestV1) SetSignedTransaction(v string) {
	o.SignedTransaction = &v
}

// GetTransaction returns the Transaction field value if set, zero value otherwise.
func (o *TransactRequestV1) GetTransaction() IrohaTransactionDefinitionV1 {
	if o == nil || IsNil(o.Transaction) {
		var ret IrohaTransactionDefinitionV1
		return ret
	}
	return *o.Transaction
}

// GetTransactionOk returns a tuple with the Transaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactRequestV1) GetTransactionOk() (*IrohaTransactionDefinitionV1, bool) {
	if o == nil || IsNil(o.Transaction) {
		return nil, false
	}
	return o.Transaction, true
}

// HasTransaction returns a boolean if a field has been set.
func (o *TransactRequestV1) HasTransaction() bool {
	if o != nil && !IsNil(o.Transaction) {
		return true
	}

	return false
}

// SetTransaction gets a reference to the given IrohaTransactionDefinitionV1 and assigns it to the Transaction field.
func (o *TransactRequestV1) SetTransaction(v IrohaTransactionDefinitionV1) {
	o.Transaction = &v
}

// GetWaitForCommit returns the WaitForCommit field value if set, zero value otherwise.
func (o *TransactRequestV1) GetWaitForCommit() bool {
	if o == nil || IsNil(o.WaitForCommit) {
		var ret bool
		return ret
	}
	return *o.WaitForCommit
}

// GetWaitForCommitOk returns a tuple with the WaitForCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactRequestV1) GetWaitForCommitOk() (*bool, bool) {
	if o == nil || IsNil(o.WaitForCommit) {
		return nil, false
	}
	return o.WaitForCommit, true
}

// HasWaitForCommit returns a boolean if a field has been set.
func (o *TransactRequestV1) HasWaitForCommit() bool {
	if o != nil && !IsNil(o.WaitForCommit) {
		return true
	}

	return false
}

// SetWaitForCommit gets a reference to the given bool and assigns it to the WaitForCommit field.
func (o *TransactRequestV1) SetWaitForCommit(v bool) {
	o.WaitForCommit = &v
}

// GetBaseConfig returns the BaseConfig field value if set, zero value otherwise.
func (o *TransactRequestV1) GetBaseConfig() Iroha2BaseConfig {
	if o == nil || IsNil(o.BaseConfig) {
		var ret Iroha2BaseConfig
		return ret
	}
	return *o.BaseConfig
}

// GetBaseConfigOk returns a tuple with the BaseConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactRequestV1) GetBaseConfigOk() (*Iroha2BaseConfig, bool) {
	if o == nil || IsNil(o.BaseConfig) {
		return nil, false
	}
	return o.BaseConfig, true
}

// HasBaseConfig returns a boolean if a field has been set.
func (o *TransactRequestV1) HasBaseConfig() bool {
	if o != nil && !IsNil(o.BaseConfig) {
		return true
	}

	return false
}

// SetBaseConfig gets a reference to the given Iroha2BaseConfig and assigns it to the BaseConfig field.
func (o *TransactRequestV1) SetBaseConfig(v Iroha2BaseConfig) {
	o.BaseConfig = &v
}

func (o TransactRequestV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactRequestV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SignedTransaction) {
		toSerialize["signedTransaction"] = o.SignedTransaction
	}
	if !IsNil(o.Transaction) {
		toSerialize["transaction"] = o.Transaction
	}
	if !IsNil(o.WaitForCommit) {
		toSerialize["waitForCommit"] = o.WaitForCommit
	}
	if !IsNil(o.BaseConfig) {
		toSerialize["baseConfig"] = o.BaseConfig
	}
	return toSerialize, nil
}

type NullableTransactRequestV1 struct {
	value *TransactRequestV1
	isSet bool
}

func (v NullableTransactRequestV1) Get() *TransactRequestV1 {
	return v.value
}

func (v *NullableTransactRequestV1) Set(val *TransactRequestV1) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactRequestV1) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactRequestV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactRequestV1(val *TransactRequestV1) *NullableTransactRequestV1 {
	return &NullableTransactRequestV1{value: val, isSet: true}
}

func (v NullableTransactRequestV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactRequestV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


