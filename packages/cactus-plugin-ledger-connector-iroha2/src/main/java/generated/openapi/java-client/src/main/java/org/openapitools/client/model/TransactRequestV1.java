/*
 * Hyperledger Cactus Plugin - Connector Iroha V2
 * Can perform basic tasks on a Iroha V2 ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.Iroha2BaseConfig;
import org.openapitools.client.model.IrohaTransactionDefinitionV1;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request to transact endpoint.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TransactRequestV1 {
  public static final String SERIALIZED_NAME_SIGNED_TRANSACTION = "signedTransaction";
  @SerializedName(SERIALIZED_NAME_SIGNED_TRANSACTION)
  private String signedTransaction;

  public static final String SERIALIZED_NAME_TRANSACTION = "transaction";
  @SerializedName(SERIALIZED_NAME_TRANSACTION)
  private IrohaTransactionDefinitionV1 transaction;

  public static final String SERIALIZED_NAME_WAIT_FOR_COMMIT = "waitForCommit";
  @SerializedName(SERIALIZED_NAME_WAIT_FOR_COMMIT)
  private Boolean waitForCommit = false;

  public static final String SERIALIZED_NAME_BASE_CONFIG = "baseConfig";
  @SerializedName(SERIALIZED_NAME_BASE_CONFIG)
  private Iroha2BaseConfig baseConfig;

  public TransactRequestV1() {
  }

  public TransactRequestV1 signedTransaction(String signedTransaction) {
    
    this.signedTransaction = signedTransaction;
    return this;
  }

   /**
   * Signed transaction binary data received from generate-transaction endpoint.
   * @return signedTransaction
  **/
  @javax.annotation.Nullable
  public String getSignedTransaction() {
    return signedTransaction;
  }


  public void setSignedTransaction(String signedTransaction) {
    this.signedTransaction = signedTransaction;
  }


  public TransactRequestV1 transaction(IrohaTransactionDefinitionV1 transaction) {
    
    this.transaction = transaction;
    return this;
  }

   /**
   * Get transaction
   * @return transaction
  **/
  @javax.annotation.Nullable
  public IrohaTransactionDefinitionV1 getTransaction() {
    return transaction;
  }


  public void setTransaction(IrohaTransactionDefinitionV1 transaction) {
    this.transaction = transaction;
  }


  public TransactRequestV1 waitForCommit(Boolean waitForCommit) {
    
    this.waitForCommit = waitForCommit;
    return this;
  }

   /**
   * Wait unitl transaction is sent and return the final status (committed / rejected)
   * @return waitForCommit
  **/
  @javax.annotation.Nullable
  public Boolean getWaitForCommit() {
    return waitForCommit;
  }


  public void setWaitForCommit(Boolean waitForCommit) {
    this.waitForCommit = waitForCommit;
  }


  public TransactRequestV1 baseConfig(Iroha2BaseConfig baseConfig) {
    
    this.baseConfig = baseConfig;
    return this;
  }

   /**
   * Get baseConfig
   * @return baseConfig
  **/
  @javax.annotation.Nullable
  public Iroha2BaseConfig getBaseConfig() {
    return baseConfig;
  }


  public void setBaseConfig(Iroha2BaseConfig baseConfig) {
    this.baseConfig = baseConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactRequestV1 transactRequestV1 = (TransactRequestV1) o;
    return Objects.equals(this.signedTransaction, transactRequestV1.signedTransaction) &&
        Objects.equals(this.transaction, transactRequestV1.transaction) &&
        Objects.equals(this.waitForCommit, transactRequestV1.waitForCommit) &&
        Objects.equals(this.baseConfig, transactRequestV1.baseConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(signedTransaction, transaction, waitForCommit, baseConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactRequestV1 {\n");
    sb.append("    signedTransaction: ").append(toIndentedString(signedTransaction)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("    waitForCommit: ").append(toIndentedString(waitForCommit)).append("\n");
    sb.append("    baseConfig: ").append(toIndentedString(baseConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("signedTransaction");
    openapiFields.add("transaction");
    openapiFields.add("waitForCommit");
    openapiFields.add("baseConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TransactRequestV1
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TransactRequestV1.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactRequestV1 is not found in the empty JSON string", TransactRequestV1.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!TransactRequestV1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactRequestV1` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("signedTransaction") != null && !jsonObj.get("signedTransaction").isJsonNull()) && !jsonObj.get("signedTransaction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signedTransaction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signedTransaction").toString()));
      }
      // validate the optional field `transaction`
      if (jsonObj.get("transaction") != null && !jsonObj.get("transaction").isJsonNull()) {
        IrohaTransactionDefinitionV1.validateJsonObject(jsonObj.getAsJsonObject("transaction"));
      }
      // validate the optional field `baseConfig`
      if (jsonObj.get("baseConfig") != null && !jsonObj.get("baseConfig").isJsonNull()) {
        Iroha2BaseConfig.validateJsonObject(jsonObj.getAsJsonObject("baseConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactRequestV1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactRequestV1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactRequestV1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactRequestV1.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactRequestV1>() {
           @Override
           public void write(JsonWriter out, TransactRequestV1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactRequestV1 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactRequestV1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactRequestV1
  * @throws IOException if the JSON string is invalid with respect to TransactRequestV1
  */
  public static TransactRequestV1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactRequestV1.class);
  }

 /**
  * Convert an instance of TransactRequestV1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

