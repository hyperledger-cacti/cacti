/*
 * Hyperledger Cactus Plugin - Connector Iroha V2
 * Can perform basic tasks on a Iroha V2 ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Command names that correspond to Iroha queries (https://hyperledger.github.io/iroha-2-docs/guide/advanced/queries.html)
 */
@JsonAdapter(IrohaQuery.Adapter.class)
public enum IrohaQuery {
  
  /**
   * Get list of all registered domains
   */
  FindAllDomains("findAllDomains"),
  
  /**
   * Get domain with specified ID
   */
  FindDomainById("findDomainById"),
  
  /**
   * Get asset definition with specified ID
   */
  FindAssetDefinitionById("findAssetDefinitionById"),
  
  /**
   * Get list of all registered asset definition
   */
  FindAllAssetsDefinitions("findAllAssetsDefinitions"),
  
  /**
   * Get asset with specified ID
   */
  FindAssetById("findAssetById"),
  
  /**
   * Get list of all registered assets
   */
  FindAllAssets("findAllAssets"),
  
  /**
   * Get list of all ledger peers
   */
  FindAllPeers("findAllPeers"),
  
  /**
   * Get list of all ledger blocks
   */
  FindAllBlocks("findAllBlocks"),
  
  /**
   * Get account with specified ID
   */
  FindAccountById("findAccountById"),
  
  /**
   * Get list of all registered accounts
   */
  FindAllAccounts("findAllAccounts"),
  
  /**
   * Get list of all transactions
   */
  FindAllTransactions("findAllTransactions"),
  
  /**
   * Get transaction with specified hash
   */
  FindTransactionByHash("findTransactionByHash");

  private String value;

  IrohaQuery(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static IrohaQuery fromValue(String value) {
    for (IrohaQuery b : IrohaQuery.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<IrohaQuery> {
    @Override
    public void write(final JsonWriter jsonWriter, final IrohaQuery enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public IrohaQuery read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return IrohaQuery.fromValue(value);
    }
  }
}

