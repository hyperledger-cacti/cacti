/*
 * Hyperledger Cactus Plugin - Connector Iroha V2
 * Can perform basic tasks on a Iroha V2 ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.IrohaInstruction;
import org.openapitools.client.model.IrohaInstructionRequestV1;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class IrohaTransactionDefinitionV1Instruction extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(IrohaTransactionDefinitionV1Instruction.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!IrohaTransactionDefinitionV1Instruction.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'IrohaTransactionDefinitionV1Instruction' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<IrohaInstructionRequestV1> adapterIrohaInstructionRequestV1 = gson.getDelegateAdapter(this, TypeToken.get(IrohaInstructionRequestV1.class));
            final TypeAdapter<List&lt;IrohaInstructionRequestV1&gt;> adapterList&lt;IrohaInstructionRequestV1&gt; = gson.getDelegateAdapter(this, TypeToken.get(List&lt;IrohaInstructionRequestV1&gt;.class));

            return (TypeAdapter<T>) new TypeAdapter<IrohaTransactionDefinitionV1Instruction>() {
                @Override
                public void write(JsonWriter out, IrohaTransactionDefinitionV1Instruction value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `IrohaInstructionRequestV1`
                    if (value.getActualInstance() instanceof IrohaInstructionRequestV1) {
                        JsonObject obj = adapterIrohaInstructionRequestV1.toJsonTree((IrohaInstructionRequestV1)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `List&lt;IrohaInstructionRequestV1&gt;`
                    if (value.getActualInstance() instanceof List&lt;IrohaInstructionRequestV1&gt;) {
                        JsonObject obj = adapterList&lt;IrohaInstructionRequestV1&gt;.toJsonTree((List&lt;IrohaInstructionRequestV1&gt;)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: IrohaInstructionRequestV1, List<IrohaInstructionRequestV1>");
                }

                @Override
                public IrohaTransactionDefinitionV1Instruction read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize IrohaInstructionRequestV1
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IrohaInstructionRequestV1.validateJsonObject(jsonObject);
                        actualAdapter = adapterIrohaInstructionRequestV1;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IrohaInstructionRequestV1'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IrohaInstructionRequestV1 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IrohaInstructionRequestV1'", e);
                    }

                    // deserialize List<IrohaInstructionRequestV1>
                    try {
                        // validate the JSON object to see if any exception is thrown
                        List&lt;IrohaInstructionRequestV1&gt;.validateJsonObject(jsonObject);
                        actualAdapter = adapterList&lt;IrohaInstructionRequestV1&gt;;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'List<IrohaInstructionRequestV1>'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for List<IrohaInstructionRequestV1> failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'List<IrohaInstructionRequestV1>'", e);
                    }

                    if (match == 1) {
                        IrohaTransactionDefinitionV1Instruction ret = new IrohaTransactionDefinitionV1Instruction();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonObject));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for IrohaTransactionDefinitionV1Instruction: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public IrohaTransactionDefinitionV1Instruction() {
        super("oneOf", Boolean.FALSE);
    }

    public IrohaTransactionDefinitionV1Instruction(IrohaInstructionRequestV1 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public IrohaTransactionDefinitionV1Instruction(List<IrohaInstructionRequestV1> o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("IrohaInstructionRequestV1", new GenericType<IrohaInstructionRequestV1>() {
        });
        schemas.put("List<IrohaInstructionRequestV1>", new GenericType<List<IrohaInstructionRequestV1>>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return IrohaTransactionDefinitionV1Instruction.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * IrohaInstructionRequestV1, List<IrohaInstructionRequestV1>
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof IrohaInstructionRequestV1) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof List<IrohaInstructionRequestV1>) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be IrohaInstructionRequestV1, List<IrohaInstructionRequestV1>");
    }

    /**
     * Get the actual instance, which can be the following:
     * IrohaInstructionRequestV1, List<IrohaInstructionRequestV1>
     *
     * @return The actual instance (IrohaInstructionRequestV1, List<IrohaInstructionRequestV1>)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `IrohaInstructionRequestV1`. If the actual instance is not `IrohaInstructionRequestV1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IrohaInstructionRequestV1`
     * @throws ClassCastException if the instance is not `IrohaInstructionRequestV1`
     */
    public IrohaInstructionRequestV1 getIrohaInstructionRequestV1() throws ClassCastException {
        return (IrohaInstructionRequestV1)super.getActualInstance();
    }

    /**
     * Get the actual instance of `List<IrohaInstructionRequestV1>`. If the actual instance is not `List<IrohaInstructionRequestV1>`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `List<IrohaInstructionRequestV1>`
     * @throws ClassCastException if the instance is not `List<IrohaInstructionRequestV1>`
     */
    public List<IrohaInstructionRequestV1> getList<IrohaInstructionRequestV1>() throws ClassCastException {
        return (List<IrohaInstructionRequestV1>)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IrohaTransactionDefinitionV1Instruction
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with IrohaInstructionRequestV1
    try {
      IrohaInstructionRequestV1.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for IrohaInstructionRequestV1 failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with List<IrohaInstructionRequestV1>
    try {
      List<IrohaInstructionRequestV1>.validateJsonObject(jsonObj);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for List<IrohaInstructionRequestV1> failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for IrohaTransactionDefinitionV1Instruction with oneOf schemas: IrohaInstructionRequestV1, List<IrohaInstructionRequestV1>. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonObj.toString()));
    }
  }

 /**
  * Create an instance of IrohaTransactionDefinitionV1Instruction given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IrohaTransactionDefinitionV1Instruction
  * @throws IOException if the JSON string is invalid with respect to IrohaTransactionDefinitionV1Instruction
  */
  public static IrohaTransactionDefinitionV1Instruction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IrohaTransactionDefinitionV1Instruction.class);
  }

 /**
  * Convert an instance of IrohaTransactionDefinitionV1Instruction to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

