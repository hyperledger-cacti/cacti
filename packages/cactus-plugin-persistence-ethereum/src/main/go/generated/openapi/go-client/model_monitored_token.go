/*
Hyperledger Cactus Plugin - Persistence Ethereum

Synchronizes state of an ethereum ledger into a DB that can later be viewed in GUI

API version: 2.0.0-rc.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-persistence-ethereum

import (
	"encoding/json"
)

// checks if the MonitoredToken type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonitoredToken{}

// MonitoredToken Ethereum tokens that are being monitored by the persistence plugin.
type MonitoredToken struct {
	Type TokenTypeV1 `json:"type"`
	// Token name
	Name string `json:"name"`
	// Token symbol
	Symbol string `json:"symbol"`
}

// NewMonitoredToken instantiates a new MonitoredToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoredToken(type_ TokenTypeV1, name string, symbol string) *MonitoredToken {
	this := MonitoredToken{}
	this.Type = type_
	this.Name = name
	this.Symbol = symbol
	return &this
}

// NewMonitoredTokenWithDefaults instantiates a new MonitoredToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoredTokenWithDefaults() *MonitoredToken {
	this := MonitoredToken{}
	return &this
}

// GetType returns the Type field value
func (o *MonitoredToken) GetType() TokenTypeV1 {
	if o == nil {
		var ret TokenTypeV1
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MonitoredToken) GetTypeOk() (*TokenTypeV1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MonitoredToken) SetType(v TokenTypeV1) {
	o.Type = v
}

// GetName returns the Name field value
func (o *MonitoredToken) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MonitoredToken) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MonitoredToken) SetName(v string) {
	o.Name = v
}

// GetSymbol returns the Symbol field value
func (o *MonitoredToken) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *MonitoredToken) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *MonitoredToken) SetSymbol(v string) {
	o.Symbol = v
}

func (o MonitoredToken) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonitoredToken) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["name"] = o.Name
	toSerialize["symbol"] = o.Symbol
	return toSerialize, nil
}

type NullableMonitoredToken struct {
	value *MonitoredToken
	isSet bool
}

func (v NullableMonitoredToken) Get() *MonitoredToken {
	return v.value
}

func (v *NullableMonitoredToken) Set(val *MonitoredToken) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoredToken) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoredToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoredToken(val *MonitoredToken) *NullableMonitoredToken {
	return &NullableMonitoredToken{value: val, isSet: true}
}

func (v NullableMonitoredToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoredToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


