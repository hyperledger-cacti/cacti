/*
 * Hyperledger Cactus Plugin - Persistence Ethereum
 * Synchronizes state of an ethereum ledger into a DB that can later be viewed in GUI
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.TrackedOperationV1;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response with plugin status report.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class StatusResponseV1 {
  public static final String SERIALIZED_NAME_INSTANCE_ID = "instanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_CONNECTED = "connected";
  @SerializedName(SERIALIZED_NAME_CONNECTED)
  private Boolean connected;

  public static final String SERIALIZED_NAME_WEB_SERVICES_REGISTERED = "webServicesRegistered";
  @SerializedName(SERIALIZED_NAME_WEB_SERVICES_REGISTERED)
  private Boolean webServicesRegistered;

  public static final String SERIALIZED_NAME_MONITORED_TOKENS_COUNT = "monitoredTokensCount";
  @SerializedName(SERIALIZED_NAME_MONITORED_TOKENS_COUNT)
  private BigDecimal monitoredTokensCount;

  public static final String SERIALIZED_NAME_OPERATIONS_RUNNING = "operationsRunning";
  @SerializedName(SERIALIZED_NAME_OPERATIONS_RUNNING)
  private List<TrackedOperationV1> operationsRunning = new ArrayList<>();

  public static final String SERIALIZED_NAME_MONITOR_RUNNING = "monitorRunning";
  @SerializedName(SERIALIZED_NAME_MONITOR_RUNNING)
  private Boolean monitorRunning;

  public static final String SERIALIZED_NAME_LAST_SEEN_BLOCK = "lastSeenBlock";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN_BLOCK)
  private BigDecimal lastSeenBlock;

  public StatusResponseV1() {
  }

  public StatusResponseV1 instanceId(String instanceId) {
    
    this.instanceId = instanceId;
    return this;
  }

   /**
   * Plugin instance id.
   * @return instanceId
  **/
  @javax.annotation.Nonnull
  public String getInstanceId() {
    return instanceId;
  }


  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public StatusResponseV1 connected(Boolean connected) {
    
    this.connected = connected;
    return this;
  }

   /**
   * True if successfully connected to the database, false otherwise.
   * @return connected
  **/
  @javax.annotation.Nonnull
  public Boolean getConnected() {
    return connected;
  }


  public void setConnected(Boolean connected) {
    this.connected = connected;
  }


  public StatusResponseV1 webServicesRegistered(Boolean webServicesRegistered) {
    
    this.webServicesRegistered = webServicesRegistered;
    return this;
  }

   /**
   * True if web services were correctly exported.
   * @return webServicesRegistered
  **/
  @javax.annotation.Nonnull
  public Boolean getWebServicesRegistered() {
    return webServicesRegistered;
  }


  public void setWebServicesRegistered(Boolean webServicesRegistered) {
    this.webServicesRegistered = webServicesRegistered;
  }


  public StatusResponseV1 monitoredTokensCount(BigDecimal monitoredTokensCount) {
    
    this.monitoredTokensCount = monitoredTokensCount;
    return this;
  }

   /**
   * Total number of tokens being monitored by the plugin.
   * @return monitoredTokensCount
  **/
  @javax.annotation.Nonnull
  public BigDecimal getMonitoredTokensCount() {
    return monitoredTokensCount;
  }


  public void setMonitoredTokensCount(BigDecimal monitoredTokensCount) {
    this.monitoredTokensCount = monitoredTokensCount;
  }


  public StatusResponseV1 operationsRunning(List<TrackedOperationV1> operationsRunning) {
    
    this.operationsRunning = operationsRunning;
    return this;
  }

  public StatusResponseV1 addOperationsRunningItem(TrackedOperationV1 operationsRunningItem) {
    if (this.operationsRunning == null) {
      this.operationsRunning = new ArrayList<>();
    }
    this.operationsRunning.add(operationsRunningItem);
    return this;
  }

   /**
   * Get operationsRunning
   * @return operationsRunning
  **/
  @javax.annotation.Nonnull
  public List<TrackedOperationV1> getOperationsRunning() {
    return operationsRunning;
  }


  public void setOperationsRunning(List<TrackedOperationV1> operationsRunning) {
    this.operationsRunning = operationsRunning;
  }


  public StatusResponseV1 monitorRunning(Boolean monitorRunning) {
    
    this.monitorRunning = monitorRunning;
    return this;
  }

   /**
   * True if block monitoring is running, false otherwise.
   * @return monitorRunning
  **/
  @javax.annotation.Nonnull
  public Boolean getMonitorRunning() {
    return monitorRunning;
  }


  public void setMonitorRunning(Boolean monitorRunning) {
    this.monitorRunning = monitorRunning;
  }


  public StatusResponseV1 lastSeenBlock(BigDecimal lastSeenBlock) {
    
    this.lastSeenBlock = lastSeenBlock;
    return this;
  }

   /**
   * Number of the last block seen by the block monitor.
   * @return lastSeenBlock
  **/
  @javax.annotation.Nonnull
  public BigDecimal getLastSeenBlock() {
    return lastSeenBlock;
  }


  public void setLastSeenBlock(BigDecimal lastSeenBlock) {
    this.lastSeenBlock = lastSeenBlock;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatusResponseV1 statusResponseV1 = (StatusResponseV1) o;
    return Objects.equals(this.instanceId, statusResponseV1.instanceId) &&
        Objects.equals(this.connected, statusResponseV1.connected) &&
        Objects.equals(this.webServicesRegistered, statusResponseV1.webServicesRegistered) &&
        Objects.equals(this.monitoredTokensCount, statusResponseV1.monitoredTokensCount) &&
        Objects.equals(this.operationsRunning, statusResponseV1.operationsRunning) &&
        Objects.equals(this.monitorRunning, statusResponseV1.monitorRunning) &&
        Objects.equals(this.lastSeenBlock, statusResponseV1.lastSeenBlock);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instanceId, connected, webServicesRegistered, monitoredTokensCount, operationsRunning, monitorRunning, lastSeenBlock);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatusResponseV1 {\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    connected: ").append(toIndentedString(connected)).append("\n");
    sb.append("    webServicesRegistered: ").append(toIndentedString(webServicesRegistered)).append("\n");
    sb.append("    monitoredTokensCount: ").append(toIndentedString(monitoredTokensCount)).append("\n");
    sb.append("    operationsRunning: ").append(toIndentedString(operationsRunning)).append("\n");
    sb.append("    monitorRunning: ").append(toIndentedString(monitorRunning)).append("\n");
    sb.append("    lastSeenBlock: ").append(toIndentedString(lastSeenBlock)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instanceId");
    openapiFields.add("connected");
    openapiFields.add("webServicesRegistered");
    openapiFields.add("monitoredTokensCount");
    openapiFields.add("operationsRunning");
    openapiFields.add("monitorRunning");
    openapiFields.add("lastSeenBlock");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("instanceId");
    openapiRequiredFields.add("connected");
    openapiRequiredFields.add("webServicesRegistered");
    openapiRequiredFields.add("monitoredTokensCount");
    openapiRequiredFields.add("operationsRunning");
    openapiRequiredFields.add("monitorRunning");
    openapiRequiredFields.add("lastSeenBlock");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to StatusResponseV1
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!StatusResponseV1.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StatusResponseV1 is not found in the empty JSON string", StatusResponseV1.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!StatusResponseV1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StatusResponseV1` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StatusResponseV1.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("instanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("operationsRunning").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationsRunning` to be an array in the JSON string but got `%s`", jsonObj.get("operationsRunning").toString()));
      }

      JsonArray jsonArrayoperationsRunning = jsonObj.getAsJsonArray("operationsRunning");
      // validate the required field `operationsRunning` (array)
      for (int i = 0; i < jsonArrayoperationsRunning.size(); i++) {
        TrackedOperationV1.validateJsonObject(jsonArrayoperationsRunning.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StatusResponseV1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StatusResponseV1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StatusResponseV1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StatusResponseV1.class));

       return (TypeAdapter<T>) new TypeAdapter<StatusResponseV1>() {
           @Override
           public void write(JsonWriter out, StatusResponseV1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StatusResponseV1 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StatusResponseV1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StatusResponseV1
  * @throws IOException if the JSON string is invalid with respect to StatusResponseV1
  */
  public static StatusResponseV1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StatusResponseV1.class);
  }

 /**
  * Convert an instance of StatusResponseV1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

