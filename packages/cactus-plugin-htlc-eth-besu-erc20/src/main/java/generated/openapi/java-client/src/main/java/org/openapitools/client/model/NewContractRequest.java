/*
 * Hyperledger Cactus Plugin - HTLC ETH BESU ERC20
 * Allows Cactus nodes to interact with HTLC contracts with ERC-20 Tokens
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import org.openapitools.client.model.NewContractRequestGas;
import org.openapitools.client.model.Web3SigningCredential;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NewContractRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NewContractRequest {
  public static final String SERIALIZED_NAME_CONTRACT_ADDRESS = "contractAddress";
  @SerializedName(SERIALIZED_NAME_CONTRACT_ADDRESS)
  private String contractAddress;

  public static final String SERIALIZED_NAME_INPUT_AMOUNT = "inputAmount";
  @SerializedName(SERIALIZED_NAME_INPUT_AMOUNT)
  private BigDecimal inputAmount;

  public static final String SERIALIZED_NAME_OUTPUT_AMOUNT = "outputAmount";
  @SerializedName(SERIALIZED_NAME_OUTPUT_AMOUNT)
  private BigDecimal outputAmount;

  public static final String SERIALIZED_NAME_EXPIRATION = "expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  private BigDecimal expiration;

  public static final String SERIALIZED_NAME_HASH_LOCK = "hashLock";
  @SerializedName(SERIALIZED_NAME_HASH_LOCK)
  private String hashLock;

  public static final String SERIALIZED_NAME_TOKEN_ADDRESS = "tokenAddress";
  @SerializedName(SERIALIZED_NAME_TOKEN_ADDRESS)
  private String tokenAddress;

  public static final String SERIALIZED_NAME_RECEIVER = "receiver";
  @SerializedName(SERIALIZED_NAME_RECEIVER)
  private String receiver;

  public static final String SERIALIZED_NAME_OUTPUT_NETWORK = "outputNetwork";
  @SerializedName(SERIALIZED_NAME_OUTPUT_NETWORK)
  private String outputNetwork;

  public static final String SERIALIZED_NAME_OUTPUT_ADDRESS = "outputAddress";
  @SerializedName(SERIALIZED_NAME_OUTPUT_ADDRESS)
  private String outputAddress;

  public static final String SERIALIZED_NAME_WEB3_SIGNING_CREDENTIAL = "web3SigningCredential";
  @SerializedName(SERIALIZED_NAME_WEB3_SIGNING_CREDENTIAL)
  private Web3SigningCredential web3SigningCredential;

  public static final String SERIALIZED_NAME_CONNECTOR_ID = "connectorId";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_ID)
  private String connectorId;

  public static final String SERIALIZED_NAME_KEYCHAIN_ID = "keychainId";
  @SerializedName(SERIALIZED_NAME_KEYCHAIN_ID)
  private String keychainId;

  public static final String SERIALIZED_NAME_GAS = "gas";
  @SerializedName(SERIALIZED_NAME_GAS)
  private NewContractRequestGas gas;

  public NewContractRequest() {
  }

  public NewContractRequest contractAddress(String contractAddress) {
    
    this.contractAddress = contractAddress;
    return this;
  }

   /**
   * Contract address
   * @return contractAddress
  **/
  @javax.annotation.Nonnull
  public String getContractAddress() {
    return contractAddress;
  }


  public void setContractAddress(String contractAddress) {
    this.contractAddress = contractAddress;
  }


  public NewContractRequest inputAmount(BigDecimal inputAmount) {
    
    this.inputAmount = inputAmount;
    return this;
  }

   /**
   * Input amount to lock
   * @return inputAmount
  **/
  @javax.annotation.Nonnull
  public BigDecimal getInputAmount() {
    return inputAmount;
  }


  public void setInputAmount(BigDecimal inputAmount) {
    this.inputAmount = inputAmount;
  }


  public NewContractRequest outputAmount(BigDecimal outputAmount) {
    
    this.outputAmount = outputAmount;
    return this;
  }

   /**
   * Output amount to lock
   * @return outputAmount
  **/
  @javax.annotation.Nonnull
  public BigDecimal getOutputAmount() {
    return outputAmount;
  }


  public void setOutputAmount(BigDecimal outputAmount) {
    this.outputAmount = outputAmount;
  }


  public NewContractRequest expiration(BigDecimal expiration) {
    
    this.expiration = expiration;
    return this;
  }

   /**
   * Timestamp to expire the contract
   * @return expiration
  **/
  @javax.annotation.Nonnull
  public BigDecimal getExpiration() {
    return expiration;
  }


  public void setExpiration(BigDecimal expiration) {
    this.expiration = expiration;
  }


  public NewContractRequest hashLock(String hashLock) {
    
    this.hashLock = hashLock;
    return this;
  }

   /**
   * Hashlock needed to refund the amount
   * @return hashLock
  **/
  @javax.annotation.Nonnull
  public String getHashLock() {
    return hashLock;
  }


  public void setHashLock(String hashLock) {
    this.hashLock = hashLock;
  }


  public NewContractRequest tokenAddress(String tokenAddress) {
    
    this.tokenAddress = tokenAddress;
    return this;
  }

   /**
   * The token address
   * @return tokenAddress
  **/
  @javax.annotation.Nonnull
  public String getTokenAddress() {
    return tokenAddress;
  }


  public void setTokenAddress(String tokenAddress) {
    this.tokenAddress = tokenAddress;
  }


  public NewContractRequest receiver(String receiver) {
    
    this.receiver = receiver;
    return this;
  }

   /**
   * The receiver address
   * @return receiver
  **/
  @javax.annotation.Nonnull
  public String getReceiver() {
    return receiver;
  }


  public void setReceiver(String receiver) {
    this.receiver = receiver;
  }


  public NewContractRequest outputNetwork(String outputNetwork) {
    
    this.outputNetwork = outputNetwork;
    return this;
  }

   /**
   * The output network id
   * @return outputNetwork
  **/
  @javax.annotation.Nonnull
  public String getOutputNetwork() {
    return outputNetwork;
  }


  public void setOutputNetwork(String outputNetwork) {
    this.outputNetwork = outputNetwork;
  }


  public NewContractRequest outputAddress(String outputAddress) {
    
    this.outputAddress = outputAddress;
    return this;
  }

   /**
   * The output address to receive the tokens
   * @return outputAddress
  **/
  @javax.annotation.Nonnull
  public String getOutputAddress() {
    return outputAddress;
  }


  public void setOutputAddress(String outputAddress) {
    this.outputAddress = outputAddress;
  }


  public NewContractRequest web3SigningCredential(Web3SigningCredential web3SigningCredential) {
    
    this.web3SigningCredential = web3SigningCredential;
    return this;
  }

   /**
   * Get web3SigningCredential
   * @return web3SigningCredential
  **/
  @javax.annotation.Nonnull
  public Web3SigningCredential getWeb3SigningCredential() {
    return web3SigningCredential;
  }


  public void setWeb3SigningCredential(Web3SigningCredential web3SigningCredential) {
    this.web3SigningCredential = web3SigningCredential;
  }


  public NewContractRequest connectorId(String connectorId) {
    
    this.connectorId = connectorId;
    return this;
  }

   /**
   * connectorId for the connector besu plugin
   * @return connectorId
  **/
  @javax.annotation.Nonnull
  public String getConnectorId() {
    return connectorId;
  }


  public void setConnectorId(String connectorId) {
    this.connectorId = connectorId;
  }


  public NewContractRequest keychainId(String keychainId) {
    
    this.keychainId = keychainId;
    return this;
  }

   /**
   * keychainId for the keychian plugin
   * @return keychainId
  **/
  @javax.annotation.Nonnull
  public String getKeychainId() {
    return keychainId;
  }


  public void setKeychainId(String keychainId) {
    this.keychainId = keychainId;
  }


  public NewContractRequest gas(NewContractRequestGas gas) {
    
    this.gas = gas;
    return this;
  }

   /**
   * Get gas
   * @return gas
  **/
  @javax.annotation.Nullable
  public NewContractRequestGas getGas() {
    return gas;
  }


  public void setGas(NewContractRequestGas gas) {
    this.gas = gas;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewContractRequest newContractRequest = (NewContractRequest) o;
    return Objects.equals(this.contractAddress, newContractRequest.contractAddress) &&
        Objects.equals(this.inputAmount, newContractRequest.inputAmount) &&
        Objects.equals(this.outputAmount, newContractRequest.outputAmount) &&
        Objects.equals(this.expiration, newContractRequest.expiration) &&
        Objects.equals(this.hashLock, newContractRequest.hashLock) &&
        Objects.equals(this.tokenAddress, newContractRequest.tokenAddress) &&
        Objects.equals(this.receiver, newContractRequest.receiver) &&
        Objects.equals(this.outputNetwork, newContractRequest.outputNetwork) &&
        Objects.equals(this.outputAddress, newContractRequest.outputAddress) &&
        Objects.equals(this.web3SigningCredential, newContractRequest.web3SigningCredential) &&
        Objects.equals(this.connectorId, newContractRequest.connectorId) &&
        Objects.equals(this.keychainId, newContractRequest.keychainId) &&
        Objects.equals(this.gas, newContractRequest.gas);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contractAddress, inputAmount, outputAmount, expiration, hashLock, tokenAddress, receiver, outputNetwork, outputAddress, web3SigningCredential, connectorId, keychainId, gas);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewContractRequest {\n");
    sb.append("    contractAddress: ").append(toIndentedString(contractAddress)).append("\n");
    sb.append("    inputAmount: ").append(toIndentedString(inputAmount)).append("\n");
    sb.append("    outputAmount: ").append(toIndentedString(outputAmount)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    hashLock: ").append(toIndentedString(hashLock)).append("\n");
    sb.append("    tokenAddress: ").append(toIndentedString(tokenAddress)).append("\n");
    sb.append("    receiver: ").append(toIndentedString(receiver)).append("\n");
    sb.append("    outputNetwork: ").append(toIndentedString(outputNetwork)).append("\n");
    sb.append("    outputAddress: ").append(toIndentedString(outputAddress)).append("\n");
    sb.append("    web3SigningCredential: ").append(toIndentedString(web3SigningCredential)).append("\n");
    sb.append("    connectorId: ").append(toIndentedString(connectorId)).append("\n");
    sb.append("    keychainId: ").append(toIndentedString(keychainId)).append("\n");
    sb.append("    gas: ").append(toIndentedString(gas)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contractAddress");
    openapiFields.add("inputAmount");
    openapiFields.add("outputAmount");
    openapiFields.add("expiration");
    openapiFields.add("hashLock");
    openapiFields.add("tokenAddress");
    openapiFields.add("receiver");
    openapiFields.add("outputNetwork");
    openapiFields.add("outputAddress");
    openapiFields.add("web3SigningCredential");
    openapiFields.add("connectorId");
    openapiFields.add("keychainId");
    openapiFields.add("gas");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contractAddress");
    openapiRequiredFields.add("inputAmount");
    openapiRequiredFields.add("outputAmount");
    openapiRequiredFields.add("expiration");
    openapiRequiredFields.add("hashLock");
    openapiRequiredFields.add("tokenAddress");
    openapiRequiredFields.add("receiver");
    openapiRequiredFields.add("outputNetwork");
    openapiRequiredFields.add("outputAddress");
    openapiRequiredFields.add("web3SigningCredential");
    openapiRequiredFields.add("connectorId");
    openapiRequiredFields.add("keychainId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NewContractRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NewContractRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewContractRequest is not found in the empty JSON string", NewContractRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!NewContractRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NewContractRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NewContractRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("contractAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractAddress").toString()));
      }
      if (!jsonObj.get("hashLock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashLock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hashLock").toString()));
      }
      if (!jsonObj.get("tokenAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenAddress").toString()));
      }
      if (!jsonObj.get("receiver").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiver` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiver").toString()));
      }
      if (!jsonObj.get("outputNetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputNetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputNetwork").toString()));
      }
      if (!jsonObj.get("outputAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputAddress").toString()));
      }
      // validate the required field `web3SigningCredential`
      Web3SigningCredential.validateJsonObject(jsonObj.getAsJsonObject("web3SigningCredential"));
      if (!jsonObj.get("connectorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorId").toString()));
      }
      if (!jsonObj.get("keychainId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keychainId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keychainId").toString()));
      }
      // validate the optional field `gas`
      if (jsonObj.get("gas") != null && !jsonObj.get("gas").isJsonNull()) {
        NewContractRequestGas.validateJsonObject(jsonObj.getAsJsonObject("gas"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewContractRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewContractRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewContractRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewContractRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<NewContractRequest>() {
           @Override
           public void write(JsonWriter out, NewContractRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NewContractRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NewContractRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NewContractRequest
  * @throws IOException if the JSON string is invalid with respect to NewContractRequest
  */
  public static NewContractRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewContractRequest.class);
  }

 /**
  * Convert an instance of NewContractRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

