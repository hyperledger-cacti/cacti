/*
 * Hyperledger Cactus Plugin - HTLC ETH BESU ERC20
 * Allows Cactus nodes to interact with HTLC contracts with ERC-20 Tokens
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetSingleStatusRequest;
import org.openapitools.client.model.GetStatusRequest;
import org.openapitools.client.model.InitializeRequest;
import org.openapitools.client.model.InvokeContractV1Response;
import org.openapitools.client.model.NewContractRequest;
import org.openapitools.client.model.RefundRequest;
import org.openapitools.client.model.RunTransactionResponse;
import org.openapitools.client.model.WithdrawRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSingleStatusV1Test() throws ApiException {
        GetSingleStatusRequest getSingleStatusRequest = null;
        Integer response = api.getSingleStatusV1(getSingleStatusRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStatusV1Test() throws ApiException {
        GetStatusRequest getStatusRequest = null;
        List<Integer> response = api.getStatusV1(getStatusRequest);
        // TODO: test validations
    }

    /**
     * Initialize contract
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void initializeV1Test() throws ApiException {
        InitializeRequest initializeRequest = null;
        RunTransactionResponse response = api.initializeV1(initializeRequest);
        // TODO: test validations
    }

    /**
     * Create a new hashtimelock contract
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void newContractV1Test() throws ApiException {
        NewContractRequest newContractRequest = null;
        InvokeContractV1Response response = api.newContractV1(newContractRequest);
        // TODO: test validations
    }

    /**
     * Refund a hashtimelock contract
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refundV1Test() throws ApiException {
        RefundRequest refundRequest = null;
        InvokeContractV1Response response = api.refundV1(refundRequest);
        // TODO: test validations
    }

    /**
     * Withdraw a hashtimelock contract
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void withdrawV1Test() throws ApiException {
        WithdrawRequest withdrawRequest = null;
        InvokeContractV1Response response = api.withdrawV1(withdrawRequest);
        // TODO: test validations
    }

}
