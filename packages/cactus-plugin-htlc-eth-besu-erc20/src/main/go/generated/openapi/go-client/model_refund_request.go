/*
Hyperledger Cactus Plugin - HTLC ETH BESU ERC20

Allows Cactus nodes to interact with HTLC contracts with ERC-20 Tokens

API version: 2.0.0-rc.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-htlc-eth-besu-erc20

import (
	"encoding/json"
)

// checks if the RefundRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RefundRequest{}

// RefundRequest struct for RefundRequest
type RefundRequest struct {
	// Contract htlc id for refund
	Id string `json:"id"`
	Web3SigningCredential Web3SigningCredential `json:"web3SigningCredential"`
	// connectorId for the connector besu plugin
	ConnectorId string `json:"connectorId"`
	// keychainId for the keychain plugin
	KeychainId string `json:"keychainId"`
	Gas *NewContractRequestGas `json:"gas,omitempty"`
}

// NewRefundRequest instantiates a new RefundRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefundRequest(id string, web3SigningCredential Web3SigningCredential, connectorId string, keychainId string) *RefundRequest {
	this := RefundRequest{}
	this.Id = id
	this.Web3SigningCredential = web3SigningCredential
	this.ConnectorId = connectorId
	this.KeychainId = keychainId
	return &this
}

// NewRefundRequestWithDefaults instantiates a new RefundRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefundRequestWithDefaults() *RefundRequest {
	this := RefundRequest{}
	return &this
}

// GetId returns the Id field value
func (o *RefundRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RefundRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RefundRequest) SetId(v string) {
	o.Id = v
}

// GetWeb3SigningCredential returns the Web3SigningCredential field value
func (o *RefundRequest) GetWeb3SigningCredential() Web3SigningCredential {
	if o == nil {
		var ret Web3SigningCredential
		return ret
	}

	return o.Web3SigningCredential
}

// GetWeb3SigningCredentialOk returns a tuple with the Web3SigningCredential field value
// and a boolean to check if the value has been set.
func (o *RefundRequest) GetWeb3SigningCredentialOk() (*Web3SigningCredential, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Web3SigningCredential, true
}

// SetWeb3SigningCredential sets field value
func (o *RefundRequest) SetWeb3SigningCredential(v Web3SigningCredential) {
	o.Web3SigningCredential = v
}

// GetConnectorId returns the ConnectorId field value
func (o *RefundRequest) GetConnectorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectorId
}

// GetConnectorIdOk returns a tuple with the ConnectorId field value
// and a boolean to check if the value has been set.
func (o *RefundRequest) GetConnectorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectorId, true
}

// SetConnectorId sets field value
func (o *RefundRequest) SetConnectorId(v string) {
	o.ConnectorId = v
}

// GetKeychainId returns the KeychainId field value
func (o *RefundRequest) GetKeychainId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeychainId
}

// GetKeychainIdOk returns a tuple with the KeychainId field value
// and a boolean to check if the value has been set.
func (o *RefundRequest) GetKeychainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeychainId, true
}

// SetKeychainId sets field value
func (o *RefundRequest) SetKeychainId(v string) {
	o.KeychainId = v
}

// GetGas returns the Gas field value if set, zero value otherwise.
func (o *RefundRequest) GetGas() NewContractRequestGas {
	if o == nil || IsNil(o.Gas) {
		var ret NewContractRequestGas
		return ret
	}
	return *o.Gas
}

// GetGasOk returns a tuple with the Gas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundRequest) GetGasOk() (*NewContractRequestGas, bool) {
	if o == nil || IsNil(o.Gas) {
		return nil, false
	}
	return o.Gas, true
}

// HasGas returns a boolean if a field has been set.
func (o *RefundRequest) HasGas() bool {
	if o != nil && !IsNil(o.Gas) {
		return true
	}

	return false
}

// SetGas gets a reference to the given NewContractRequestGas and assigns it to the Gas field.
func (o *RefundRequest) SetGas(v NewContractRequestGas) {
	o.Gas = &v
}

func (o RefundRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RefundRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["web3SigningCredential"] = o.Web3SigningCredential
	toSerialize["connectorId"] = o.ConnectorId
	toSerialize["keychainId"] = o.KeychainId
	if !IsNil(o.Gas) {
		toSerialize["gas"] = o.Gas
	}
	return toSerialize, nil
}

type NullableRefundRequest struct {
	value *RefundRequest
	isSet bool
}

func (v NullableRefundRequest) Get() *RefundRequest {
	return v.value
}

func (v *NullableRefundRequest) Set(val *RefundRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRefundRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRefundRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefundRequest(val *RefundRequest) *NullableRefundRequest {
	return &NullableRefundRequest{value: val, isSet: true}
}

func (v NullableRefundRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefundRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


