{
  "openapi": "3.0.3",
  "info": {
    "title": "Hyperledger Cactus Plugin - HTLC ETH BESU ERC20",
    "description": "Allows Cactus nodes to interact with HTLC contracts with ERC-20 Tokens",
    "version": "2.0.0-rc.2",
    "license": {
      "name": "Apache-2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "components": {
    "schemas": {
      "NewContractRequest": {
        "type": "object",
        "required": [
          "contractAddress",
          "inputAmount",
          "outputAmount",
          "expiration",
          "hashLock",
          "tokenAddress",
          "receiver",
          "outputNetwork",
          "outputAddress",
          "web3SigningCredential",
          "connectorId",
          "keychainId"
        ],
        "additionalProperties": false,
        "properties": {
          "contractAddress": {
            "description": "Contract address",
            "type": "string",
            "nullable": false
          },
          "inputAmount": {
            "description": "Input amount to lock",
            "type": "number",
            "nullable": false
          },
          "outputAmount": {
            "description": "Output amount to lock",
            "type": "number",
            "nullable": false
          },
          "expiration": {
            "description": "Timestamp to expire the contract",
            "type": "number",
            "nullable": false
          },
          "hashLock": {
            "description": "Hashlock needed to refund the amount",
            "type": "string",
            "nullable": false
          },
          "tokenAddress": {
            "description": "The token address",
            "type": "string",
            "nullable": false
          },
          "receiver": {
            "description": "The receiver address",
            "type": "string",
            "nullable": false
          },
          "outputNetwork": {
            "description": "The output network id",
            "type": "string",
            "nullable": false
          },
          "outputAddress": {
            "description": "The output address to receive the tokens",
            "type": "string",
            "nullable": false
          },
          "web3SigningCredential": {
            "description": "Web3SigningCredentialType",
            "$ref": "#/components/schemas/Web3SigningCredential",
            "nullable": false
          },
          "connectorId": {
            "description": "connectorId for the connector besu plugin",
            "type": "string",
            "nullable": false
          },
          "keychainId": {
            "description": "keychainId for the keychian plugin",
            "type": "string",
            "nullable": false
          },
          "gas": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          }
        }
      },
      "RefundRequest": {
        "type": "object",
        "required": [
          "id",
          "web3SigningCredential",
          "connectorId",
          "keychainId"
        ],
        "additionalProperties": false,
        "properties": {
          "id": {
            "description": "Contract htlc id for refund",
            "type": "string",
            "nullable": false
          },
          "web3SigningCredential": {
            "description": "Web3SigningCredentialType",
            "$ref": "#/components/schemas/Web3SigningCredential",
            "nullable": false
          },
          "connectorId": {
            "description": "connectorId for the connector besu plugin",
            "type": "string",
            "nullable": false
          },
          "keychainId": {
            "description": "keychainId for the keychain plugin",
            "type": "string",
            "nullable": false
          },
          "gas": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          }
        }
      },
      "WithdrawRequest": {
        "type": "object",
        "required": [
          "id",
          "secret",
          "web3SigningCredential",
          "connectorId",
          "keychainId"
        ],
        "additionalProperties": false,
        "properties": {
          "id": {
            "description": "Contract locked id",
            "type": "string",
            "nullable": false
          },
          "secret": {
            "description": "Secret need to unlock the contract",
            "type": "string",
            "nullable": false
          },
          "web3SigningCredential": {
            "description": "Web3SigningCredentialType",
            "$ref": "#/components/schemas/Web3SigningCredential",
            "nullable": false
          },
          "connectorId": {
            "description": "connectorId for the connector besu plugin",
            "type": "string",
            "nullable": false
          },
          "keychainId": {
            "description": "keychainId for the keychain plugin",
            "type": "string",
            "nullable": false
          },
          "gas": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          }
        }
      },
      "GetStatusRequest": {
        "description": "Defines the parameters for retrieving the status of the HTLC swap.",
        "required": [
          "ids",
          "web3SigningCredential",
          "connectorId",
          "keychainId"
        ],
        "additionalProperties": false,
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "web3SigningCredential": {
            "$ref": "#/components/schemas/Web3SigningCredential"
          },
          "connectorId": {
            "type": "string"
          },
          "keychainId": {
            "type": "string"
          }
        }
      },
      "GetSingleStatusRequest": {
        "description": "Defines the parameters for retrieving the single status of the HTLC swap.",
        "required": [
          "id",
          "web3SigningCredential",
          "connectorId",
          "keychainId"
        ],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "web3SigningCredential": {
            "$ref": "#/components/schemas/Web3SigningCredential"
          },
          "connectorId": {
            "type": "string"
          },
          "keychainId": {
            "type": "string"
          }
        }
      },
      "InitializeRequest": {
        "type": "object",
        "required": [
          "connectorId",
          "keychainId",
          "constructorArgs",
          "web3SigningCredential"
        ],
        "additionalProperties": false,
        "properties": {
          "connectorId": {
            "description": "connectorId for the connector besu plugin",
            "type": "string",
            "nullable": false
          },
          "keychainId": {
            "description": "keychainId for the keychain plugin",
            "type": "string",
            "nullable": false
          },
          "constructorArgs": {
            "type": "array",
            "items": {},
            "default": []
          },
          "web3SigningCredential": {
            "description": "Web3SigningCredential",
            "$ref": "#/components/schemas/Web3SigningCredential",
            "nullable": false
          },
          "gas": {
            "type": "number"
          }
        }
      },
      "Web3SigningCredentialType": {
        "type": "string",
        "enum": [
          "CACTUS_KEYCHAIN_REF",
          "GETH_KEYCHAIN_PASSWORD",
          "PRIVATE_KEY_HEX",
          "NONE"
        ]
      },
      "Web3SigningCredentialCactusKeychainRef": {
        "type": "object",
        "required": ["type", "ethAccount", "keychainId", "keychainEntryKey"],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/Web3SigningCredentialType"
          },
          "ethAccount": {
            "type": "string",
            "description": "The ethereum account (public key) that the credential  belongs to. Basically the username in the traditional  terminology of authentication.",
            "minLength": 64,
            "maxLength": 64,
            "nullable": false
          },
          "keychainEntryKey": {
            "type": "string",
            "description": "The key to use when looking up the the keychain entry holding the secret pointed to by the  keychainEntryKey parameter.",
            "minLength": 0,
            "maxLength": 1024
          },
          "keychainId": {
            "type": "string",
            "description": "The keychain ID to use when looking up the the keychain plugin instance that will be used to retrieve the secret pointed to by the keychainEntryKey parameter.",
            "minLength": 0,
            "maxLength": 1024
          }
        }
      },
      "Web3SigningCredentialPrivateKeyHex": {
        "type": "object",
        "required": ["type", "ethAccount", "secret"],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/Web3SigningCredentialType"
          },
          "ethAccount": {
            "type": "string",
            "description": "The ethereum account (public key) that the credential belongs to. Basically the username in the traditional terminology of authentication.",
            "minLength": 64,
            "maxLength": 64,
            "nullable": false
          },
          "secret": {
            "type": "string",
            "description": "The HEX encoded private key of an eth account.",
            "minLength": 0,
            "maxLength": 65535
          }
        }
      },
      "Web3SigningCredentialNone": {
        "type": "object",
        "required": ["type"],
        "description": "Using this denotes that there is no signing required because the transaction is pre-signed.",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/Web3SigningCredentialType"
          }
        }
      },
      "Web3SigningCredential": {
        "type": "object",
        "required": ["type"],
        "discriminator": {
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/Web3SigningCredentialCactusKeychainRef"
          },
          {
            "$ref": "#/components/schemas/Web3SigningCredentialPrivateKeyHex"
          },
          {
            "$ref": "#/components/schemas/Web3SigningCredentialNone"
          }
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/Web3SigningCredentialType"
          }
        }
      },
      "Web3TransactionReceipt": {
        "type": "object",
        "required": [
          "blockHash",
          "blockNumber",
          "transactionHash",
          "transactionIndex",
          "status",
          "from",
          "to",
          "gasUsed"
        ],
        "additionalProperties": true,
        "properties": {
          "status": {
            "type": "boolean",
            "nullable": false
          },
          "transactionHash": {
            "type": "string",
            "minLength": 66,
            "maxLength": 66,
            "pattern": "^0x([A-Fa-f0-9]{64})$"
          },
          "transactionIndex": {
            "type": "number",
            "nullable": false
          },
          "blockHash": {
            "type": "string",
            "minLength": 66,
            "maxLength": 66,
            "pattern": "^0x([A-Fa-f0-9]{64})$"
          },
          "blockNumber": {
            "type": "number",
            "nullable": false
          },
          "gasUsed": {
            "type": "number",
            "nullable": false
          },
          "contractAddress": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": false
          },
          "to": {
            "type": "string",
            "nullable": false
          }
        }
      },
      "RunTransactionResponse": {
        "type": "object",
        "required": ["transactionReceipt"],
        "properties": {
          "transactionReceipt": {
            "$ref": "#/components/schemas/Web3TransactionReceipt"
          }
        }
      },
      "InvokeContractV1Response": {
        "type": "object",
        "required": ["success"],
        "properties": {
          "transactionReceipt": {
            "$ref": "#/components/schemas/Web3TransactionReceipt"
          },
          "callOutput": {},
          "success": {
            "type": "boolean",
            "nullable": false
          }
        }
      }
    },
    "responses": {
      "GetStatusResponse": {
        "description": "Array of status",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint256"
              }
            }
          }
        }
      },
      "GetSingleStatusResponse": {
        "description": "Status",
        "content": {
          "application/json": {
            "schema": {
              "type": "integer",
              "format": "uint256"
            }
          }
        }
      }
    }
  },
  "paths": {
    "/api/v1/plugins/@hyperledger/cactus-plugin-htlc-eth-besu-erc20/initialize": {
      "post": {
        "x-hyperledger-cacti": {
          "http": {
            "verbLowerCase": "post",
            "path": "/api/v1/plugins/@hyperledger/cactus-plugin-htlc-eth-besu-erc20/initialize"
          }
        },
        "operationId": "initializeV1",
        "summary": "Initialize contract",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitializeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunTransactionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/plugins/@hyperledger/cactus-plugin-htlc-eth-besu-erc20/withdraw": {
      "post": {
        "x-hyperledger-cacti": {
          "http": {
            "verbLowerCase": "post",
            "path": "/api/v1/plugins/@hyperledger/cactus-plugin-htlc-eth-besu-erc20/withdraw"
          }
        },
        "operationId": "withdrawV1",
        "summary": "Withdraw a hashtimelock contract",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WithdrawRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvokeContractV1Response"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/plugins/@hyperledger/cactus-plugin-htlc-eth-besu-erc20/get-status": {
      "post": {
        "x-hyperledger-cacti": {
          "http": {
            "verbLowerCase": "post",
            "path": "/api/v1/plugins/@hyperledger/cactus-plugin-htlc-eth-besu-erc20/get-status"
          }
        },
        "operationId": "getStatusV1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "$ref": "#/components/responses/GetStatusResponse"
          }
        }
      }
    },
    "/api/v1/plugins/@hyperledger/cactus-plugin-htlc-eth-besu-erc20/get-single-status": {
      "post": {
        "x-hyperledger-cacti": {
          "http": {
            "verbLowerCase": "post",
            "path": "/api/v1/plugins/@hyperledger/cactus-plugin-htlc-eth-besu-erc20/get-single-status"
          }
        },
        "operationId": "getSingleStatusV1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetSingleStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "$ref": "#/components/responses/GetSingleStatusResponse"
          }
        }
      }
    },
    "/api/v1/plugins/@hyperledger/cactus-plugin-htlc-eth-besu-erc20/refund": {
      "post": {
        "x-hyperledger-cacti": {
          "http": {
            "verbLowerCase": "post",
            "path": "/api/v1/plugins/@hyperledger/cactus-plugin-htlc-eth-besu-erc20/refund"
          }
        },
        "operationId": "refundV1",
        "summary": "Refund a hashtimelock contract",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvokeContractV1Response"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/plugins/@hyperledger/cactus-plugin-htlc-eth-besu-erc20/new-contract": {
      "post": {
        "x-hyperledger-cacti": {
          "http": {
            "verbLowerCase": "post",
            "path": "/api/v1/plugins/@hyperledger/cactus-plugin-htlc-eth-besu-erc20/new-contract"
          }
        },
        "operationId": "newContractV1",
        "summary": "Create a new hashtimelock contract",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewContractRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvokeContractV1Response"
                }
              }
            }
          }
        }
      }
    }
  }
}
