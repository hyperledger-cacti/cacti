/*
Hyperledger Cacti Plugin - Besu Connector

Can perform basic tasks on a Besu ledger such as executing transactions, streaming blocks or solidity smart contract events.

API version: 2.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-besu

import (
	"encoding/json"
)

// checks if the WatchEventsV1Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WatchEventsV1Request{}

// WatchEventsV1Request struct for WatchEventsV1Request
type WatchEventsV1Request struct {
	// A unique identifier for this request.
	RequestId string `json:"requestId"`
	Abi []map[string]interface{} `json:"abi"`
	// Timeout for socket acknowledgment in milliseconds.
	SocketAckTimeoutMs *int32 `json:"socketAckTimeoutMs,omitempty"`
	// Address of the contract to watch for events.
	Address *string `json:"address,omitempty"`
	EventName *string `json:"eventName,omitempty"`
	// The number of the block from which to start watching the events.
	FromBlock *string `json:"fromBlock,omitempty"`
}

// NewWatchEventsV1Request instantiates a new WatchEventsV1Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWatchEventsV1Request(requestId string, abi []map[string]interface{}) *WatchEventsV1Request {
	this := WatchEventsV1Request{}
	this.RequestId = requestId
	this.Abi = abi
	var socketAckTimeoutMs int32 = 30000
	this.SocketAckTimeoutMs = &socketAckTimeoutMs
	return &this
}

// NewWatchEventsV1RequestWithDefaults instantiates a new WatchEventsV1Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWatchEventsV1RequestWithDefaults() *WatchEventsV1Request {
	this := WatchEventsV1Request{}
	var socketAckTimeoutMs int32 = 30000
	this.SocketAckTimeoutMs = &socketAckTimeoutMs
	return &this
}

// GetRequestId returns the RequestId field value
func (o *WatchEventsV1Request) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *WatchEventsV1Request) GetRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *WatchEventsV1Request) SetRequestId(v string) {
	o.RequestId = v
}

// GetAbi returns the Abi field value
func (o *WatchEventsV1Request) GetAbi() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Abi
}

// GetAbiOk returns a tuple with the Abi field value
// and a boolean to check if the value has been set.
func (o *WatchEventsV1Request) GetAbiOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Abi, true
}

// SetAbi sets field value
func (o *WatchEventsV1Request) SetAbi(v []map[string]interface{}) {
	o.Abi = v
}

// GetSocketAckTimeoutMs returns the SocketAckTimeoutMs field value if set, zero value otherwise.
func (o *WatchEventsV1Request) GetSocketAckTimeoutMs() int32 {
	if o == nil || IsNil(o.SocketAckTimeoutMs) {
		var ret int32
		return ret
	}
	return *o.SocketAckTimeoutMs
}

// GetSocketAckTimeoutMsOk returns a tuple with the SocketAckTimeoutMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchEventsV1Request) GetSocketAckTimeoutMsOk() (*int32, bool) {
	if o == nil || IsNil(o.SocketAckTimeoutMs) {
		return nil, false
	}
	return o.SocketAckTimeoutMs, true
}

// HasSocketAckTimeoutMs returns a boolean if a field has been set.
func (o *WatchEventsV1Request) HasSocketAckTimeoutMs() bool {
	if o != nil && !IsNil(o.SocketAckTimeoutMs) {
		return true
	}

	return false
}

// SetSocketAckTimeoutMs gets a reference to the given int32 and assigns it to the SocketAckTimeoutMs field.
func (o *WatchEventsV1Request) SetSocketAckTimeoutMs(v int32) {
	o.SocketAckTimeoutMs = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *WatchEventsV1Request) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchEventsV1Request) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *WatchEventsV1Request) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *WatchEventsV1Request) SetAddress(v string) {
	o.Address = &v
}

// GetEventName returns the EventName field value if set, zero value otherwise.
func (o *WatchEventsV1Request) GetEventName() string {
	if o == nil || IsNil(o.EventName) {
		var ret string
		return ret
	}
	return *o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchEventsV1Request) GetEventNameOk() (*string, bool) {
	if o == nil || IsNil(o.EventName) {
		return nil, false
	}
	return o.EventName, true
}

// HasEventName returns a boolean if a field has been set.
func (o *WatchEventsV1Request) HasEventName() bool {
	if o != nil && !IsNil(o.EventName) {
		return true
	}

	return false
}

// SetEventName gets a reference to the given string and assigns it to the EventName field.
func (o *WatchEventsV1Request) SetEventName(v string) {
	o.EventName = &v
}

// GetFromBlock returns the FromBlock field value if set, zero value otherwise.
func (o *WatchEventsV1Request) GetFromBlock() string {
	if o == nil || IsNil(o.FromBlock) {
		var ret string
		return ret
	}
	return *o.FromBlock
}

// GetFromBlockOk returns a tuple with the FromBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WatchEventsV1Request) GetFromBlockOk() (*string, bool) {
	if o == nil || IsNil(o.FromBlock) {
		return nil, false
	}
	return o.FromBlock, true
}

// HasFromBlock returns a boolean if a field has been set.
func (o *WatchEventsV1Request) HasFromBlock() bool {
	if o != nil && !IsNil(o.FromBlock) {
		return true
	}

	return false
}

// SetFromBlock gets a reference to the given string and assigns it to the FromBlock field.
func (o *WatchEventsV1Request) SetFromBlock(v string) {
	o.FromBlock = &v
}

func (o WatchEventsV1Request) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WatchEventsV1Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["requestId"] = o.RequestId
	toSerialize["abi"] = o.Abi
	if !IsNil(o.SocketAckTimeoutMs) {
		toSerialize["socketAckTimeoutMs"] = o.SocketAckTimeoutMs
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.EventName) {
		toSerialize["eventName"] = o.EventName
	}
	if !IsNil(o.FromBlock) {
		toSerialize["fromBlock"] = o.FromBlock
	}
	return toSerialize, nil
}

type NullableWatchEventsV1Request struct {
	value *WatchEventsV1Request
	isSet bool
}

func (v NullableWatchEventsV1Request) Get() *WatchEventsV1Request {
	return v.value
}

func (v *NullableWatchEventsV1Request) Set(val *WatchEventsV1Request) {
	v.value = val
	v.isSet = true
}

func (v NullableWatchEventsV1Request) IsSet() bool {
	return v.isSet
}

func (v *NullableWatchEventsV1Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWatchEventsV1Request(val *WatchEventsV1Request) *NullableWatchEventsV1Request {
	return &NullableWatchEventsV1Request{value: val, isSet: true}
}

func (v NullableWatchEventsV1Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWatchEventsV1Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


