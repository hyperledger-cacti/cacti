/*
Hyperledger Cacti Plugin - Besu Connector

Can perform basic tasks on a Besu ledger such as executing transactions, streaming blocks or solidity smart contract events.

API version: 2.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-besu

import (
	"encoding/json"
)

// checks if the EventAbi type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventAbi{}

// EventAbi struct for EventAbi
type EventAbi struct {
	// Must be `\"event\"` to indicate this is an event ABI item.
	Type string `json:"type"`
	// Name of the Solidity event.
	Name string `json:"name"`
	// Array of event parameters.
	Inputs []EventAbiParameter `json:"inputs"`
	// Indicates whether the event is anonymous (does not have an indexed event signature).
	Anonymous bool `json:"anonymous"`
}

// NewEventAbi instantiates a new EventAbi object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventAbi(type_ string, name string, inputs []EventAbiParameter, anonymous bool) *EventAbi {
	this := EventAbi{}
	this.Type = type_
	this.Name = name
	this.Inputs = inputs
	this.Anonymous = anonymous
	return &this
}

// NewEventAbiWithDefaults instantiates a new EventAbi object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventAbiWithDefaults() *EventAbi {
	this := EventAbi{}
	return &this
}

// GetType returns the Type field value
func (o *EventAbi) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EventAbi) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EventAbi) SetType(v string) {
	o.Type = v
}

// GetName returns the Name field value
func (o *EventAbi) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EventAbi) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EventAbi) SetName(v string) {
	o.Name = v
}

// GetInputs returns the Inputs field value
func (o *EventAbi) GetInputs() []EventAbiParameter {
	if o == nil {
		var ret []EventAbiParameter
		return ret
	}

	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value
// and a boolean to check if the value has been set.
func (o *EventAbi) GetInputsOk() ([]EventAbiParameter, bool) {
	if o == nil {
		return nil, false
	}
	return o.Inputs, true
}

// SetInputs sets field value
func (o *EventAbi) SetInputs(v []EventAbiParameter) {
	o.Inputs = v
}

// GetAnonymous returns the Anonymous field value
func (o *EventAbi) GetAnonymous() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Anonymous
}

// GetAnonymousOk returns a tuple with the Anonymous field value
// and a boolean to check if the value has been set.
func (o *EventAbi) GetAnonymousOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Anonymous, true
}

// SetAnonymous sets field value
func (o *EventAbi) SetAnonymous(v bool) {
	o.Anonymous = v
}

func (o EventAbi) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventAbi) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["name"] = o.Name
	toSerialize["inputs"] = o.Inputs
	toSerialize["anonymous"] = o.Anonymous
	return toSerialize, nil
}

type NullableEventAbi struct {
	value *EventAbi
	isSet bool
}

func (v NullableEventAbi) Get() *EventAbi {
	return v.value
}

func (v *NullableEventAbi) Set(val *EventAbi) {
	v.value = val
	v.isSet = true
}

func (v NullableEventAbi) IsSet() bool {
	return v.isSet
}

func (v *NullableEventAbi) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventAbi(val *EventAbi) *NullableEventAbi {
	return &NullableEventAbi{value: val, isSet: true}
}

func (v NullableEventAbi) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventAbi) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


