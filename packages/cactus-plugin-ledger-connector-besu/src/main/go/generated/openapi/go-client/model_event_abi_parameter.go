/*
Hyperledger Cacti Plugin - Besu Connector

Can perform basic tasks on a Besu ledger such as executing transactions, streaming blocks or solidity smart contract events.

API version: 2.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-besu

import (
	"encoding/json"
)

// checks if the EventAbiParameter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventAbiParameter{}

// EventAbiParameter struct for EventAbiParameter
type EventAbiParameter struct {
	// Name of the event parameter.
	Name string `json:"name"`
	// Solidity type of the parameter (e.g., `\"uint256\"`, `\"address\"`, `\"bool\"`, `\"bytes32\"`, etc.).
	Type string `json:"type"`
	// Indicates whether the parameter is indexed.
	Indexed bool `json:"indexed"`
}

// NewEventAbiParameter instantiates a new EventAbiParameter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventAbiParameter(name string, type_ string, indexed bool) *EventAbiParameter {
	this := EventAbiParameter{}
	this.Name = name
	this.Type = type_
	this.Indexed = indexed
	return &this
}

// NewEventAbiParameterWithDefaults instantiates a new EventAbiParameter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventAbiParameterWithDefaults() *EventAbiParameter {
	this := EventAbiParameter{}
	return &this
}

// GetName returns the Name field value
func (o *EventAbiParameter) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EventAbiParameter) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EventAbiParameter) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *EventAbiParameter) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EventAbiParameter) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EventAbiParameter) SetType(v string) {
	o.Type = v
}

// GetIndexed returns the Indexed field value
func (o *EventAbiParameter) GetIndexed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Indexed
}

// GetIndexedOk returns a tuple with the Indexed field value
// and a boolean to check if the value has been set.
func (o *EventAbiParameter) GetIndexedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Indexed, true
}

// SetIndexed sets field value
func (o *EventAbiParameter) SetIndexed(v bool) {
	o.Indexed = v
}

func (o EventAbiParameter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventAbiParameter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["indexed"] = o.Indexed
	return toSerialize, nil
}

type NullableEventAbiParameter struct {
	value *EventAbiParameter
	isSet bool
}

func (v NullableEventAbiParameter) Get() *EventAbiParameter {
	return v.value
}

func (v *NullableEventAbiParameter) Set(val *EventAbiParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableEventAbiParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableEventAbiParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventAbiParameter(val *EventAbiParameter) *NullableEventAbiParameter {
	return &NullableEventAbiParameter{value: val, isSet: true}
}

func (v NullableEventAbiParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventAbiParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


