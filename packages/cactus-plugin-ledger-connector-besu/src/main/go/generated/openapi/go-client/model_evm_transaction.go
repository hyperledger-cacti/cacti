/*
Hyperledger Cactus Plugin - Connector Besu

Can perform basic tasks on a Besu ledger

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-besu

import (
	"encoding/json"
)

// checks if the EvmTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EvmTransaction{}

// EvmTransaction struct for EvmTransaction
type EvmTransaction struct {
	Hash *string `json:"hash,omitempty"`
	Nonce *float32 `json:"nonce,omitempty"`
	BlockHash interface{} `json:"blockHash,omitempty"`
	BlockNumber interface{} `json:"blockNumber,omitempty"`
	TransactionIndex interface{} `json:"transactionIndex,omitempty"`
	From *string `json:"from,omitempty"`
	To interface{} `json:"to,omitempty"`
	Value *string `json:"value,omitempty"`
	GasPrice *string `json:"gasPrice,omitempty"`
	Gas *float32 `json:"gas,omitempty"`
	Input *string `json:"input,omitempty"`
}

// NewEvmTransaction instantiates a new EvmTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvmTransaction() *EvmTransaction {
	this := EvmTransaction{}
	return &this
}

// NewEvmTransactionWithDefaults instantiates a new EvmTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEvmTransactionWithDefaults() *EvmTransaction {
	this := EvmTransaction{}
	return &this
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *EvmTransaction) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvmTransaction) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *EvmTransaction) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *EvmTransaction) SetHash(v string) {
	o.Hash = &v
}

// GetNonce returns the Nonce field value if set, zero value otherwise.
func (o *EvmTransaction) GetNonce() float32 {
	if o == nil || IsNil(o.Nonce) {
		var ret float32
		return ret
	}
	return *o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvmTransaction) GetNonceOk() (*float32, bool) {
	if o == nil || IsNil(o.Nonce) {
		return nil, false
	}
	return o.Nonce, true
}

// HasNonce returns a boolean if a field has been set.
func (o *EvmTransaction) HasNonce() bool {
	if o != nil && !IsNil(o.Nonce) {
		return true
	}

	return false
}

// SetNonce gets a reference to the given float32 and assigns it to the Nonce field.
func (o *EvmTransaction) SetNonce(v float32) {
	o.Nonce = &v
}

// GetBlockHash returns the BlockHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EvmTransaction) GetBlockHash() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.BlockHash
}

// GetBlockHashOk returns a tuple with the BlockHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EvmTransaction) GetBlockHashOk() (*interface{}, bool) {
	if o == nil || IsNil(o.BlockHash) {
		return nil, false
	}
	return &o.BlockHash, true
}

// HasBlockHash returns a boolean if a field has been set.
func (o *EvmTransaction) HasBlockHash() bool {
	if o != nil && IsNil(o.BlockHash) {
		return true
	}

	return false
}

// SetBlockHash gets a reference to the given interface{} and assigns it to the BlockHash field.
func (o *EvmTransaction) SetBlockHash(v interface{}) {
	o.BlockHash = v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EvmTransaction) GetBlockNumber() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EvmTransaction) GetBlockNumberOk() (*interface{}, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return &o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *EvmTransaction) HasBlockNumber() bool {
	if o != nil && IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given interface{} and assigns it to the BlockNumber field.
func (o *EvmTransaction) SetBlockNumber(v interface{}) {
	o.BlockNumber = v
}

// GetTransactionIndex returns the TransactionIndex field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EvmTransaction) GetTransactionIndex() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.TransactionIndex
}

// GetTransactionIndexOk returns a tuple with the TransactionIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EvmTransaction) GetTransactionIndexOk() (*interface{}, bool) {
	if o == nil || IsNil(o.TransactionIndex) {
		return nil, false
	}
	return &o.TransactionIndex, true
}

// HasTransactionIndex returns a boolean if a field has been set.
func (o *EvmTransaction) HasTransactionIndex() bool {
	if o != nil && IsNil(o.TransactionIndex) {
		return true
	}

	return false
}

// SetTransactionIndex gets a reference to the given interface{} and assigns it to the TransactionIndex field.
func (o *EvmTransaction) SetTransactionIndex(v interface{}) {
	o.TransactionIndex = v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *EvmTransaction) GetFrom() string {
	if o == nil || IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvmTransaction) GetFromOk() (*string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *EvmTransaction) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
func (o *EvmTransaction) SetFrom(v string) {
	o.From = &v
}

// GetTo returns the To field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EvmTransaction) GetTo() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EvmTransaction) GetToOk() (*interface{}, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return &o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *EvmTransaction) HasTo() bool {
	if o != nil && IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given interface{} and assigns it to the To field.
func (o *EvmTransaction) SetTo(v interface{}) {
	o.To = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *EvmTransaction) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvmTransaction) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *EvmTransaction) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *EvmTransaction) SetValue(v string) {
	o.Value = &v
}

// GetGasPrice returns the GasPrice field value if set, zero value otherwise.
func (o *EvmTransaction) GetGasPrice() string {
	if o == nil || IsNil(o.GasPrice) {
		var ret string
		return ret
	}
	return *o.GasPrice
}

// GetGasPriceOk returns a tuple with the GasPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvmTransaction) GetGasPriceOk() (*string, bool) {
	if o == nil || IsNil(o.GasPrice) {
		return nil, false
	}
	return o.GasPrice, true
}

// HasGasPrice returns a boolean if a field has been set.
func (o *EvmTransaction) HasGasPrice() bool {
	if o != nil && !IsNil(o.GasPrice) {
		return true
	}

	return false
}

// SetGasPrice gets a reference to the given string and assigns it to the GasPrice field.
func (o *EvmTransaction) SetGasPrice(v string) {
	o.GasPrice = &v
}

// GetGas returns the Gas field value if set, zero value otherwise.
func (o *EvmTransaction) GetGas() float32 {
	if o == nil || IsNil(o.Gas) {
		var ret float32
		return ret
	}
	return *o.Gas
}

// GetGasOk returns a tuple with the Gas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvmTransaction) GetGasOk() (*float32, bool) {
	if o == nil || IsNil(o.Gas) {
		return nil, false
	}
	return o.Gas, true
}

// HasGas returns a boolean if a field has been set.
func (o *EvmTransaction) HasGas() bool {
	if o != nil && !IsNil(o.Gas) {
		return true
	}

	return false
}

// SetGas gets a reference to the given float32 and assigns it to the Gas field.
func (o *EvmTransaction) SetGas(v float32) {
	o.Gas = &v
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *EvmTransaction) GetInput() string {
	if o == nil || IsNil(o.Input) {
		var ret string
		return ret
	}
	return *o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvmTransaction) GetInputOk() (*string, bool) {
	if o == nil || IsNil(o.Input) {
		return nil, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *EvmTransaction) HasInput() bool {
	if o != nil && !IsNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given string and assigns it to the Input field.
func (o *EvmTransaction) SetInput(v string) {
	o.Input = &v
}

func (o EvmTransaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EvmTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	if !IsNil(o.Nonce) {
		toSerialize["nonce"] = o.Nonce
	}
	if o.BlockHash != nil {
		toSerialize["blockHash"] = o.BlockHash
	}
	if o.BlockNumber != nil {
		toSerialize["blockNumber"] = o.BlockNumber
	}
	if o.TransactionIndex != nil {
		toSerialize["transactionIndex"] = o.TransactionIndex
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if o.To != nil {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.GasPrice) {
		toSerialize["gasPrice"] = o.GasPrice
	}
	if !IsNil(o.Gas) {
		toSerialize["gas"] = o.Gas
	}
	if !IsNil(o.Input) {
		toSerialize["input"] = o.Input
	}
	return toSerialize, nil
}

type NullableEvmTransaction struct {
	value *EvmTransaction
	isSet bool
}

func (v NullableEvmTransaction) Get() *EvmTransaction {
	return v.value
}

func (v *NullableEvmTransaction) Set(val *EvmTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableEvmTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableEvmTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvmTransaction(val *EvmTransaction) *NullableEvmTransaction {
	return &NullableEvmTransaction{value: val, isSet: true}
}

func (v NullableEvmTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvmTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


