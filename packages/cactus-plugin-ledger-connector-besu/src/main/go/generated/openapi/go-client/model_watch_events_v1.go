/*
Hyperledger Cacti Plugin - Besu Connector

Can perform basic tasks on a Besu ledger such as executing transactions, streaming blocks or solidity smart contract events.

API version: 2.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-besu

import (
	"encoding/json"
	"fmt"
)

// WatchEventsV1 the model 'WatchEventsV1'
type WatchEventsV1 string

// List of WatchEventsV1
const (
	Subscribe WatchEventsV1 = "org.lfdecentralizedtrust.cacti.api.async.besu.WatchEventsV1.Subscribe"
	Next WatchEventsV1 = "org.lfdecentralizedtrust.cacti.api.async.besu.WatchEventsV1.Next"
	Unsubscribe WatchEventsV1 = "org.lfdecentralizedtrust.cacti.api.async.besu.WatchEventsV1.Unsubscribe"
	Error WatchEventsV1 = "org.lfdecentralizedtrust.cacti.api.async.besu.WatchEventsV1.Error"
	Complete WatchEventsV1 = "org.lfdecentralizedtrust.cacti.api.async.besu.WatchEventsV1.Complete"
)

// All allowed values of WatchEventsV1 enum
var AllowedWatchEventsV1EnumValues = []WatchEventsV1{
	"org.lfdecentralizedtrust.cacti.api.async.besu.WatchEventsV1.Subscribe",
	"org.lfdecentralizedtrust.cacti.api.async.besu.WatchEventsV1.Next",
	"org.lfdecentralizedtrust.cacti.api.async.besu.WatchEventsV1.Unsubscribe",
	"org.lfdecentralizedtrust.cacti.api.async.besu.WatchEventsV1.Error",
	"org.lfdecentralizedtrust.cacti.api.async.besu.WatchEventsV1.Complete",
}

func (v *WatchEventsV1) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WatchEventsV1(value)
	for _, existing := range AllowedWatchEventsV1EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WatchEventsV1", value)
}

// NewWatchEventsV1FromValue returns a pointer to a valid WatchEventsV1
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWatchEventsV1FromValue(v string) (*WatchEventsV1, error) {
	ev := WatchEventsV1(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WatchEventsV1: valid values are %v", v, AllowedWatchEventsV1EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WatchEventsV1) IsValid() bool {
	for _, existing := range AllowedWatchEventsV1EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WatchEventsV1 value
func (v WatchEventsV1) Ptr() *WatchEventsV1 {
	return &v
}

type NullableWatchEventsV1 struct {
	value *WatchEventsV1
	isSet bool
}

func (v NullableWatchEventsV1) Get() *WatchEventsV1 {
	return v.value
}

func (v *NullableWatchEventsV1) Set(val *WatchEventsV1) {
	v.value = val
	v.isSet = true
}

func (v NullableWatchEventsV1) IsSet() bool {
	return v.isSet
}

func (v *NullableWatchEventsV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWatchEventsV1(val *WatchEventsV1) *NullableWatchEventsV1 {
	return &NullableWatchEventsV1{value: val, isSet: true}
}

func (v NullableWatchEventsV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWatchEventsV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

