/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: models/web3_block_header_pb.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/any";
import * as dependency_2 from "./web3_block_header_timestamp_pb";
import * as pb_1 from "google-protobuf";
export namespace org.hyperledger.cacti.plugin.ledger.connector.besu {
    export class Web3BlockHeaderPB extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            number?: number;
            hash?: string;
            parentHash?: string;
            nonce?: string;
            sha3Uncles?: string;
            logsBloom?: string;
            transactionRoot?: string;
            stateRoot?: string;
            receiptRoot?: string;
            miner?: string;
            extraData?: string;
            gasLimit?: number;
            gasUsed?: number;
            timestamp?: dependency_2.org.hyperledger.cacti.plugin.ledger.connector.besu.Web3BlockHeaderTimestampPB;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("number" in data && data.number != undefined) {
                    this.number = data.number;
                }
                if ("hash" in data && data.hash != undefined) {
                    this.hash = data.hash;
                }
                if ("parentHash" in data && data.parentHash != undefined) {
                    this.parentHash = data.parentHash;
                }
                if ("nonce" in data && data.nonce != undefined) {
                    this.nonce = data.nonce;
                }
                if ("sha3Uncles" in data && data.sha3Uncles != undefined) {
                    this.sha3Uncles = data.sha3Uncles;
                }
                if ("logsBloom" in data && data.logsBloom != undefined) {
                    this.logsBloom = data.logsBloom;
                }
                if ("transactionRoot" in data && data.transactionRoot != undefined) {
                    this.transactionRoot = data.transactionRoot;
                }
                if ("stateRoot" in data && data.stateRoot != undefined) {
                    this.stateRoot = data.stateRoot;
                }
                if ("receiptRoot" in data && data.receiptRoot != undefined) {
                    this.receiptRoot = data.receiptRoot;
                }
                if ("miner" in data && data.miner != undefined) {
                    this.miner = data.miner;
                }
                if ("extraData" in data && data.extraData != undefined) {
                    this.extraData = data.extraData;
                }
                if ("gasLimit" in data && data.gasLimit != undefined) {
                    this.gasLimit = data.gasLimit;
                }
                if ("gasUsed" in data && data.gasUsed != undefined) {
                    this.gasUsed = data.gasUsed;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get number() {
            return pb_1.Message.getFieldWithDefault(this, 497493176, 0) as number;
        }
        set number(value: number) {
            pb_1.Message.setField(this, 497493176, value);
        }
        get hash() {
            return pb_1.Message.getFieldWithDefault(this, 3195150, "") as string;
        }
        set hash(value: string) {
            pb_1.Message.setField(this, 3195150, value);
        }
        get parentHash() {
            return pb_1.Message.getFieldWithDefault(this, 245049128, "") as string;
        }
        set parentHash(value: string) {
            pb_1.Message.setField(this, 245049128, value);
        }
        get nonce() {
            return pb_1.Message.getFieldWithDefault(this, 105002991, "") as string;
        }
        set nonce(value: string) {
            pb_1.Message.setField(this, 105002991, value);
        }
        get sha3Uncles() {
            return pb_1.Message.getFieldWithDefault(this, 373514458, "") as string;
        }
        set sha3Uncles(value: string) {
            pb_1.Message.setField(this, 373514458, value);
        }
        get logsBloom() {
            return pb_1.Message.getFieldWithDefault(this, 399161966, "") as string;
        }
        set logsBloom(value: string) {
            pb_1.Message.setField(this, 399161966, value);
        }
        get transactionRoot() {
            return pb_1.Message.getFieldWithDefault(this, 189212898, "") as string;
        }
        set transactionRoot(value: string) {
            pb_1.Message.setField(this, 189212898, value);
        }
        get stateRoot() {
            return pb_1.Message.getFieldWithDefault(this, 475330288, "") as string;
        }
        set stateRoot(value: string) {
            pb_1.Message.setField(this, 475330288, value);
        }
        get receiptRoot() {
            return pb_1.Message.getFieldWithDefault(this, 422939453, "") as string;
        }
        set receiptRoot(value: string) {
            pb_1.Message.setField(this, 422939453, value);
        }
        get miner() {
            return pb_1.Message.getFieldWithDefault(this, 103900799, "") as string;
        }
        set miner(value: string) {
            pb_1.Message.setField(this, 103900799, value);
        }
        get extraData() {
            return pb_1.Message.getFieldWithDefault(this, 253792294, "") as string;
        }
        set extraData(value: string) {
            pb_1.Message.setField(this, 253792294, value);
        }
        get gasLimit() {
            return pb_1.Message.getFieldWithDefault(this, 9229217, 0) as number;
        }
        set gasLimit(value: number) {
            pb_1.Message.setField(this, 9229217, value);
        }
        get gasUsed() {
            return pb_1.Message.getFieldWithDefault(this, 190522826, 0) as number;
        }
        set gasUsed(value: number) {
            pb_1.Message.setField(this, 190522826, value);
        }
        get timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_2.org.hyperledger.cacti.plugin.ledger.connector.besu.Web3BlockHeaderTimestampPB, 55126294) as dependency_2.org.hyperledger.cacti.plugin.ledger.connector.besu.Web3BlockHeaderTimestampPB;
        }
        set timestamp(value: dependency_2.org.hyperledger.cacti.plugin.ledger.connector.besu.Web3BlockHeaderTimestampPB) {
            pb_1.Message.setWrapperField(this, 55126294, value);
        }
        get has_timestamp() {
            return pb_1.Message.getField(this, 55126294) != null;
        }
        static fromObject(data: {
            number?: number;
            hash?: string;
            parentHash?: string;
            nonce?: string;
            sha3Uncles?: string;
            logsBloom?: string;
            transactionRoot?: string;
            stateRoot?: string;
            receiptRoot?: string;
            miner?: string;
            extraData?: string;
            gasLimit?: number;
            gasUsed?: number;
            timestamp?: ReturnType<typeof dependency_2.org.hyperledger.cacti.plugin.ledger.connector.besu.Web3BlockHeaderTimestampPB.prototype.toObject>;
        }): Web3BlockHeaderPB {
            const message = new Web3BlockHeaderPB({});
            if (data.number != null) {
                message.number = data.number;
            }
            if (data.hash != null) {
                message.hash = data.hash;
            }
            if (data.parentHash != null) {
                message.parentHash = data.parentHash;
            }
            if (data.nonce != null) {
                message.nonce = data.nonce;
            }
            if (data.sha3Uncles != null) {
                message.sha3Uncles = data.sha3Uncles;
            }
            if (data.logsBloom != null) {
                message.logsBloom = data.logsBloom;
            }
            if (data.transactionRoot != null) {
                message.transactionRoot = data.transactionRoot;
            }
            if (data.stateRoot != null) {
                message.stateRoot = data.stateRoot;
            }
            if (data.receiptRoot != null) {
                message.receiptRoot = data.receiptRoot;
            }
            if (data.miner != null) {
                message.miner = data.miner;
            }
            if (data.extraData != null) {
                message.extraData = data.extraData;
            }
            if (data.gasLimit != null) {
                message.gasLimit = data.gasLimit;
            }
            if (data.gasUsed != null) {
                message.gasUsed = data.gasUsed;
            }
            if (data.timestamp != null) {
                message.timestamp = dependency_2.org.hyperledger.cacti.plugin.ledger.connector.besu.Web3BlockHeaderTimestampPB.fromObject(data.timestamp);
            }
            return message;
        }
        toObject() {
            const data: {
                number?: number;
                hash?: string;
                parentHash?: string;
                nonce?: string;
                sha3Uncles?: string;
                logsBloom?: string;
                transactionRoot?: string;
                stateRoot?: string;
                receiptRoot?: string;
                miner?: string;
                extraData?: string;
                gasLimit?: number;
                gasUsed?: number;
                timestamp?: ReturnType<typeof dependency_2.org.hyperledger.cacti.plugin.ledger.connector.besu.Web3BlockHeaderTimestampPB.prototype.toObject>;
            } = {};
            if (this.number != null) {
                data.number = this.number;
            }
            if (this.hash != null) {
                data.hash = this.hash;
            }
            if (this.parentHash != null) {
                data.parentHash = this.parentHash;
            }
            if (this.nonce != null) {
                data.nonce = this.nonce;
            }
            if (this.sha3Uncles != null) {
                data.sha3Uncles = this.sha3Uncles;
            }
            if (this.logsBloom != null) {
                data.logsBloom = this.logsBloom;
            }
            if (this.transactionRoot != null) {
                data.transactionRoot = this.transactionRoot;
            }
            if (this.stateRoot != null) {
                data.stateRoot = this.stateRoot;
            }
            if (this.receiptRoot != null) {
                data.receiptRoot = this.receiptRoot;
            }
            if (this.miner != null) {
                data.miner = this.miner;
            }
            if (this.extraData != null) {
                data.extraData = this.extraData;
            }
            if (this.gasLimit != null) {
                data.gasLimit = this.gasLimit;
            }
            if (this.gasUsed != null) {
                data.gasUsed = this.gasUsed;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.number != 0)
                writer.writeFloat(497493176, this.number);
            if (this.hash.length)
                writer.writeString(3195150, this.hash);
            if (this.parentHash.length)
                writer.writeString(245049128, this.parentHash);
            if (this.nonce.length)
                writer.writeString(105002991, this.nonce);
            if (this.sha3Uncles.length)
                writer.writeString(373514458, this.sha3Uncles);
            if (this.logsBloom.length)
                writer.writeString(399161966, this.logsBloom);
            if (this.transactionRoot.length)
                writer.writeString(189212898, this.transactionRoot);
            if (this.stateRoot.length)
                writer.writeString(475330288, this.stateRoot);
            if (this.receiptRoot.length)
                writer.writeString(422939453, this.receiptRoot);
            if (this.miner.length)
                writer.writeString(103900799, this.miner);
            if (this.extraData.length)
                writer.writeString(253792294, this.extraData);
            if (this.gasLimit != 0)
                writer.writeInt32(9229217, this.gasLimit);
            if (this.gasUsed != 0)
                writer.writeInt32(190522826, this.gasUsed);
            if (this.has_timestamp)
                writer.writeMessage(55126294, this.timestamp, () => this.timestamp.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Web3BlockHeaderPB {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Web3BlockHeaderPB();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 497493176:
                        message.number = reader.readFloat();
                        break;
                    case 3195150:
                        message.hash = reader.readString();
                        break;
                    case 245049128:
                        message.parentHash = reader.readString();
                        break;
                    case 105002991:
                        message.nonce = reader.readString();
                        break;
                    case 373514458:
                        message.sha3Uncles = reader.readString();
                        break;
                    case 399161966:
                        message.logsBloom = reader.readString();
                        break;
                    case 189212898:
                        message.transactionRoot = reader.readString();
                        break;
                    case 475330288:
                        message.stateRoot = reader.readString();
                        break;
                    case 422939453:
                        message.receiptRoot = reader.readString();
                        break;
                    case 103900799:
                        message.miner = reader.readString();
                        break;
                    case 253792294:
                        message.extraData = reader.readString();
                        break;
                    case 9229217:
                        message.gasLimit = reader.readInt32();
                        break;
                    case 190522826:
                        message.gasUsed = reader.readInt32();
                        break;
                    case 55126294:
                        reader.readMessage(message.timestamp, () => message.timestamp = dependency_2.org.hyperledger.cacti.plugin.ledger.connector.besu.Web3BlockHeaderTimestampPB.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Web3BlockHeaderPB {
            return Web3BlockHeaderPB.deserialize(bytes);
        }
    }
}
