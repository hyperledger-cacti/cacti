/*
 * Hyperledger Cactus Plugin - Connector Besu
 * Can perform basic tasks on a Besu ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.BesuPrivateTransactionConfig;
import org.openapitools.client.model.BesuTransactionConfig;
import org.openapitools.client.model.ConsistencyStrategy;
import org.openapitools.client.model.Web3SigningCredential;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RunTransactionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RunTransactionRequest {
  public static final String SERIALIZED_NAME_WEB3_SIGNING_CREDENTIAL = "web3SigningCredential";
  @SerializedName(SERIALIZED_NAME_WEB3_SIGNING_CREDENTIAL)
  private Web3SigningCredential web3SigningCredential;

  public static final String SERIALIZED_NAME_TRANSACTION_CONFIG = "transactionConfig";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_CONFIG)
  private BesuTransactionConfig transactionConfig;

  public static final String SERIALIZED_NAME_CONSISTENCY_STRATEGY = "consistencyStrategy";
  @SerializedName(SERIALIZED_NAME_CONSISTENCY_STRATEGY)
  private ConsistencyStrategy consistencyStrategy;

  public static final String SERIALIZED_NAME_PRIVATE_TRANSACTION_CONFIG = "privateTransactionConfig";
  @SerializedName(SERIALIZED_NAME_PRIVATE_TRANSACTION_CONFIG)
  private BesuPrivateTransactionConfig privateTransactionConfig;

  public RunTransactionRequest() {
  }

  public RunTransactionRequest web3SigningCredential(Web3SigningCredential web3SigningCredential) {
    
    this.web3SigningCredential = web3SigningCredential;
    return this;
  }

   /**
   * Get web3SigningCredential
   * @return web3SigningCredential
  **/
  @javax.annotation.Nonnull
  public Web3SigningCredential getWeb3SigningCredential() {
    return web3SigningCredential;
  }


  public void setWeb3SigningCredential(Web3SigningCredential web3SigningCredential) {
    this.web3SigningCredential = web3SigningCredential;
  }


  public RunTransactionRequest transactionConfig(BesuTransactionConfig transactionConfig) {
    
    this.transactionConfig = transactionConfig;
    return this;
  }

   /**
   * Get transactionConfig
   * @return transactionConfig
  **/
  @javax.annotation.Nonnull
  public BesuTransactionConfig getTransactionConfig() {
    return transactionConfig;
  }


  public void setTransactionConfig(BesuTransactionConfig transactionConfig) {
    this.transactionConfig = transactionConfig;
  }


  public RunTransactionRequest consistencyStrategy(ConsistencyStrategy consistencyStrategy) {
    
    this.consistencyStrategy = consistencyStrategy;
    return this;
  }

   /**
   * Get consistencyStrategy
   * @return consistencyStrategy
  **/
  @javax.annotation.Nonnull
  public ConsistencyStrategy getConsistencyStrategy() {
    return consistencyStrategy;
  }


  public void setConsistencyStrategy(ConsistencyStrategy consistencyStrategy) {
    this.consistencyStrategy = consistencyStrategy;
  }


  public RunTransactionRequest privateTransactionConfig(BesuPrivateTransactionConfig privateTransactionConfig) {
    
    this.privateTransactionConfig = privateTransactionConfig;
    return this;
  }

   /**
   * Get privateTransactionConfig
   * @return privateTransactionConfig
  **/
  @javax.annotation.Nullable
  public BesuPrivateTransactionConfig getPrivateTransactionConfig() {
    return privateTransactionConfig;
  }


  public void setPrivateTransactionConfig(BesuPrivateTransactionConfig privateTransactionConfig) {
    this.privateTransactionConfig = privateTransactionConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunTransactionRequest runTransactionRequest = (RunTransactionRequest) o;
    return Objects.equals(this.web3SigningCredential, runTransactionRequest.web3SigningCredential) &&
        Objects.equals(this.transactionConfig, runTransactionRequest.transactionConfig) &&
        Objects.equals(this.consistencyStrategy, runTransactionRequest.consistencyStrategy) &&
        Objects.equals(this.privateTransactionConfig, runTransactionRequest.privateTransactionConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(web3SigningCredential, transactionConfig, consistencyStrategy, privateTransactionConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunTransactionRequest {\n");
    sb.append("    web3SigningCredential: ").append(toIndentedString(web3SigningCredential)).append("\n");
    sb.append("    transactionConfig: ").append(toIndentedString(transactionConfig)).append("\n");
    sb.append("    consistencyStrategy: ").append(toIndentedString(consistencyStrategy)).append("\n");
    sb.append("    privateTransactionConfig: ").append(toIndentedString(privateTransactionConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("web3SigningCredential");
    openapiFields.add("transactionConfig");
    openapiFields.add("consistencyStrategy");
    openapiFields.add("privateTransactionConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("web3SigningCredential");
    openapiRequiredFields.add("transactionConfig");
    openapiRequiredFields.add("consistencyStrategy");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RunTransactionRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RunTransactionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunTransactionRequest is not found in the empty JSON string", RunTransactionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RunTransactionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RunTransactionRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RunTransactionRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `web3SigningCredential`
      Web3SigningCredential.validateJsonObject(jsonObj.getAsJsonObject("web3SigningCredential"));
      // validate the required field `consistencyStrategy`
      ConsistencyStrategy.validateJsonObject(jsonObj.getAsJsonObject("consistencyStrategy"));
      // validate the optional field `privateTransactionConfig`
      if (jsonObj.get("privateTransactionConfig") != null && !jsonObj.get("privateTransactionConfig").isJsonNull()) {
        BesuPrivateTransactionConfig.validateJsonObject(jsonObj.getAsJsonObject("privateTransactionConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunTransactionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunTransactionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunTransactionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunTransactionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RunTransactionRequest>() {
           @Override
           public void write(JsonWriter out, RunTransactionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RunTransactionRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RunTransactionRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RunTransactionRequest
  * @throws IOException if the JSON string is invalid with respect to RunTransactionRequest
  */
  public static RunTransactionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunTransactionRequest.class);
  }

 /**
  * Convert an instance of RunTransactionRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

