/*
 * Hyperledger Cactus Plugin - Connector Besu
 * Can perform basic tasks on a Besu ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DeployContractSolidityBytecodeV1Request;
import org.openapitools.client.model.DeployContractSolidityBytecodeV1Response;
import org.openapitools.client.model.GetBalanceV1Request;
import org.openapitools.client.model.GetBalanceV1Response;
import org.openapitools.client.model.GetBesuRecordV1Request;
import org.openapitools.client.model.GetBesuRecordV1Response;
import org.openapitools.client.model.GetBlockV1Request;
import org.openapitools.client.model.GetBlockV1Response;
import org.openapitools.client.model.GetPastLogsV1Request;
import org.openapitools.client.model.GetPastLogsV1Response;
import org.openapitools.client.model.GetTransactionV1Request;
import org.openapitools.client.model.GetTransactionV1Response;
import org.openapitools.client.model.InvokeContractV1Request;
import org.openapitools.client.model.InvokeContractV1Response;
import org.openapitools.client.model.RunTransactionRequest;
import org.openapitools.client.model.RunTransactionResponse;
import org.openapitools.client.model.SignTransactionRequest;
import org.openapitools.client.model.SignTransactionResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Deploys the bytecode of a Solidity contract.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deployContractSolBytecodeV1Test() throws ApiException {
        DeployContractSolidityBytecodeV1Request deployContractSolidityBytecodeV1Request = null;
        DeployContractSolidityBytecodeV1Response response = api.deployContractSolBytecodeV1(deployContractSolidityBytecodeV1Request);
        // TODO: test validations
    }

    /**
     * Return balance of an address of a given block
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBalanceV1Test() throws ApiException {
        GetBalanceV1Request getBalanceV1Request = null;
        GetBalanceV1Response response = api.getBalanceV1(getBalanceV1Request);
        // TODO: test validations
    }

    /**
     * Retrieves an arbitrary record (any piece of information) from the ledger. Ledger records can be call outputs, transaction input, etc.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBesuRecordV1Test() throws ApiException {
        GetBesuRecordV1Request getBesuRecordV1Request = null;
        GetBesuRecordV1Response response = api.getBesuRecordV1(getBesuRecordV1Request);
        // TODO: test validations
    }

    /**
     * Returns a block matching the block
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBlockV1Test() throws ApiException {
        GetBlockV1Request getBlockV1Request = null;
        GetBlockV1Response response = api.getBlockV1(getBlockV1Request);
        // TODO: test validations
    }

    /**
     * Retrieves the .json file that contains the OpenAPI specification for the plugin.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOpenApiSpecV1Test() throws ApiException {
        String response = api.getOpenApiSpecV1();
        // TODO: test validations
    }

    /**
     * Gets past logs, matching the given options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPastLogsV1Test() throws ApiException {
        GetPastLogsV1Request getPastLogsV1Request = null;
        GetPastLogsV1Response response = api.getPastLogsV1(getPastLogsV1Request);
        // TODO: test validations
    }

    /**
     * Get the Prometheus Metrics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPrometheusMetricsV1Test() throws ApiException {
        String response = api.getPrometheusMetricsV1();
        // TODO: test validations
    }

    /**
     * Executes a transaction on a besu ledger
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransactionV1Test() throws ApiException {
        GetTransactionV1Request getTransactionV1Request = null;
        GetTransactionV1Response response = api.getTransactionV1(getTransactionV1Request);
        // TODO: test validations
    }

    /**
     * Invokes a contract on a besu ledger
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void invokeContractV1Test() throws ApiException {
        InvokeContractV1Request invokeContractV1Request = null;
        InvokeContractV1Response response = api.invokeContractV1(invokeContractV1Request);
        // TODO: test validations
    }

    /**
     * Executes a transaction on a besu ledger
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runTransactionV1Test() throws ApiException {
        RunTransactionRequest runTransactionRequest = null;
        RunTransactionResponse response = api.runTransactionV1(runTransactionRequest);
        // TODO: test validations
    }

    /**
     * Obtain signatures of ledger from the corresponding transaction hash.
     *
     * Obtain signatures of ledger from the corresponding transaction hash.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signTransactionV1Test() throws ApiException {
        SignTransactionRequest signTransactionRequest = null;
        SignTransactionResponse response = api.signTransactionV1(signTransactionRequest);
        // TODO: test validations
    }

}
