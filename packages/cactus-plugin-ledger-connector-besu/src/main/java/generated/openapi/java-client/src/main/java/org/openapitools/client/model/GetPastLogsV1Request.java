/*
 * Hyperledger Cactus Plugin - Connector Besu
 * Can perform basic tasks on a Besu ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetPastLogsV1Request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GetPastLogsV1Request {
  public static final String SERIALIZED_NAME_TO_BLOCK = "toBlock";
  @SerializedName(SERIALIZED_NAME_TO_BLOCK)
  private Object toBlock = null;

  public static final String SERIALIZED_NAME_FROM_BLOCK = "fromBlock";
  @SerializedName(SERIALIZED_NAME_FROM_BLOCK)
  private Object fromBlock = null;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Object address = null;

  public static final String SERIALIZED_NAME_TOPICS = "topics";
  @SerializedName(SERIALIZED_NAME_TOPICS)
  private List<Object> topics;

  public GetPastLogsV1Request() {
  }

  public GetPastLogsV1Request toBlock(Object toBlock) {
    
    this.toBlock = toBlock;
    return this;
  }

   /**
   * Get toBlock
   * @return toBlock
  **/
  @javax.annotation.Nullable
  public Object getToBlock() {
    return toBlock;
  }


  public void setToBlock(Object toBlock) {
    this.toBlock = toBlock;
  }


  public GetPastLogsV1Request fromBlock(Object fromBlock) {
    
    this.fromBlock = fromBlock;
    return this;
  }

   /**
   * Get fromBlock
   * @return fromBlock
  **/
  @javax.annotation.Nullable
  public Object getFromBlock() {
    return fromBlock;
  }


  public void setFromBlock(Object fromBlock) {
    this.fromBlock = fromBlock;
  }


  public GetPastLogsV1Request address(Object address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  public Object getAddress() {
    return address;
  }


  public void setAddress(Object address) {
    this.address = address;
  }


  public GetPastLogsV1Request topics(List<Object> topics) {
    
    this.topics = topics;
    return this;
  }

  public GetPastLogsV1Request addTopicsItem(Object topicsItem) {
    if (this.topics == null) {
      this.topics = new ArrayList<>();
    }
    this.topics.add(topicsItem);
    return this;
  }

   /**
   * Get topics
   * @return topics
  **/
  @javax.annotation.Nullable
  public List<Object> getTopics() {
    return topics;
  }


  public void setTopics(List<Object> topics) {
    this.topics = topics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetPastLogsV1Request getPastLogsV1Request = (GetPastLogsV1Request) o;
    return Objects.equals(this.toBlock, getPastLogsV1Request.toBlock) &&
        Objects.equals(this.fromBlock, getPastLogsV1Request.fromBlock) &&
        Objects.equals(this.address, getPastLogsV1Request.address) &&
        Objects.equals(this.topics, getPastLogsV1Request.topics);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(toBlock, fromBlock, address, topics);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetPastLogsV1Request {\n");
    sb.append("    toBlock: ").append(toIndentedString(toBlock)).append("\n");
    sb.append("    fromBlock: ").append(toIndentedString(fromBlock)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    topics: ").append(toIndentedString(topics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("toBlock");
    openapiFields.add("fromBlock");
    openapiFields.add("address");
    openapiFields.add("topics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetPastLogsV1Request
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GetPastLogsV1Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetPastLogsV1Request is not found in the empty JSON string", GetPastLogsV1Request.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GetPastLogsV1Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetPastLogsV1Request` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("topics") != null && !jsonObj.get("topics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `topics` to be an array in the JSON string but got `%s`", jsonObj.get("topics").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetPastLogsV1Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetPastLogsV1Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetPastLogsV1Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetPastLogsV1Request.class));

       return (TypeAdapter<T>) new TypeAdapter<GetPastLogsV1Request>() {
           @Override
           public void write(JsonWriter out, GetPastLogsV1Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetPastLogsV1Request read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetPastLogsV1Request given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetPastLogsV1Request
  * @throws IOException if the JSON string is invalid with respect to GetPastLogsV1Request
  */
  public static GetPastLogsV1Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetPastLogsV1Request.class);
  }

 /**
  * Convert an instance of GetPastLogsV1Request to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

