/*
 * Hyperledger Cactus Plugin - Connector Besu
 * Can perform basic tasks on a Besu ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeployContractSolidityBytecodeV1Request;
import org.openapitools.client.model.DeployContractSolidityBytecodeV1Response;
import org.openapitools.client.model.GetBalanceV1Request;
import org.openapitools.client.model.GetBalanceV1Response;
import org.openapitools.client.model.GetBesuRecordV1Request;
import org.openapitools.client.model.GetBesuRecordV1Response;
import org.openapitools.client.model.GetBlockV1Request;
import org.openapitools.client.model.GetBlockV1Response;
import org.openapitools.client.model.GetPastLogsV1Request;
import org.openapitools.client.model.GetPastLogsV1Response;
import org.openapitools.client.model.GetTransactionV1Request;
import org.openapitools.client.model.GetTransactionV1Response;
import org.openapitools.client.model.InvokeContractV1Request;
import org.openapitools.client.model.InvokeContractV1Response;
import org.openapitools.client.model.RunTransactionRequest;
import org.openapitools.client.model.RunTransactionResponse;
import org.openapitools.client.model.SignTransactionRequest;
import org.openapitools.client.model.SignTransactionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deployContractSolBytecodeV1
     * @param deployContractSolidityBytecodeV1Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployContractSolBytecodeV1Call(DeployContractSolidityBytecodeV1Request deployContractSolidityBytecodeV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deployContractSolidityBytecodeV1Request;

        // create path and map variables
        String localVarPath = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/deploy-contract-solidity-bytecode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployContractSolBytecodeV1ValidateBeforeCall(DeployContractSolidityBytecodeV1Request deployContractSolidityBytecodeV1Request, final ApiCallback _callback) throws ApiException {
        return deployContractSolBytecodeV1Call(deployContractSolidityBytecodeV1Request, _callback);

    }

    /**
     * Deploys the bytecode of a Solidity contract.
     * 
     * @param deployContractSolidityBytecodeV1Request  (optional)
     * @return DeployContractSolidityBytecodeV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DeployContractSolidityBytecodeV1Response deployContractSolBytecodeV1(DeployContractSolidityBytecodeV1Request deployContractSolidityBytecodeV1Request) throws ApiException {
        ApiResponse<DeployContractSolidityBytecodeV1Response> localVarResp = deployContractSolBytecodeV1WithHttpInfo(deployContractSolidityBytecodeV1Request);
        return localVarResp.getData();
    }

    /**
     * Deploys the bytecode of a Solidity contract.
     * 
     * @param deployContractSolidityBytecodeV1Request  (optional)
     * @return ApiResponse&lt;DeployContractSolidityBytecodeV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeployContractSolidityBytecodeV1Response> deployContractSolBytecodeV1WithHttpInfo(DeployContractSolidityBytecodeV1Request deployContractSolidityBytecodeV1Request) throws ApiException {
        okhttp3.Call localVarCall = deployContractSolBytecodeV1ValidateBeforeCall(deployContractSolidityBytecodeV1Request, null);
        Type localVarReturnType = new TypeToken<DeployContractSolidityBytecodeV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deploys the bytecode of a Solidity contract. (asynchronously)
     * 
     * @param deployContractSolidityBytecodeV1Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployContractSolBytecodeV1Async(DeployContractSolidityBytecodeV1Request deployContractSolidityBytecodeV1Request, final ApiCallback<DeployContractSolidityBytecodeV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployContractSolBytecodeV1ValidateBeforeCall(deployContractSolidityBytecodeV1Request, _callback);
        Type localVarReturnType = new TypeToken<DeployContractSolidityBytecodeV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBalanceV1
     * @param getBalanceV1Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBalanceV1Call(GetBalanceV1Request getBalanceV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getBalanceV1Request;

        // create path and map variables
        String localVarPath = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/get-balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBalanceV1ValidateBeforeCall(GetBalanceV1Request getBalanceV1Request, final ApiCallback _callback) throws ApiException {
        return getBalanceV1Call(getBalanceV1Request, _callback);

    }

    /**
     * Return balance of an address of a given block
     * 
     * @param getBalanceV1Request  (optional)
     * @return GetBalanceV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetBalanceV1Response getBalanceV1(GetBalanceV1Request getBalanceV1Request) throws ApiException {
        ApiResponse<GetBalanceV1Response> localVarResp = getBalanceV1WithHttpInfo(getBalanceV1Request);
        return localVarResp.getData();
    }

    /**
     * Return balance of an address of a given block
     * 
     * @param getBalanceV1Request  (optional)
     * @return ApiResponse&lt;GetBalanceV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetBalanceV1Response> getBalanceV1WithHttpInfo(GetBalanceV1Request getBalanceV1Request) throws ApiException {
        okhttp3.Call localVarCall = getBalanceV1ValidateBeforeCall(getBalanceV1Request, null);
        Type localVarReturnType = new TypeToken<GetBalanceV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return balance of an address of a given block (asynchronously)
     * 
     * @param getBalanceV1Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBalanceV1Async(GetBalanceV1Request getBalanceV1Request, final ApiCallback<GetBalanceV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBalanceV1ValidateBeforeCall(getBalanceV1Request, _callback);
        Type localVarReturnType = new TypeToken<GetBalanceV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBesuRecordV1
     * @param getBesuRecordV1Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBesuRecordV1Call(GetBesuRecordV1Request getBesuRecordV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getBesuRecordV1Request;

        // create path and map variables
        String localVarPath = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/get-besu-record";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBesuRecordV1ValidateBeforeCall(GetBesuRecordV1Request getBesuRecordV1Request, final ApiCallback _callback) throws ApiException {
        return getBesuRecordV1Call(getBesuRecordV1Request, _callback);

    }

    /**
     * Retrieves an arbitrary record (any piece of information) from the ledger. Ledger records can be call outputs, transaction input, etc.
     * 
     * @param getBesuRecordV1Request  (optional)
     * @return GetBesuRecordV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetBesuRecordV1Response getBesuRecordV1(GetBesuRecordV1Request getBesuRecordV1Request) throws ApiException {
        ApiResponse<GetBesuRecordV1Response> localVarResp = getBesuRecordV1WithHttpInfo(getBesuRecordV1Request);
        return localVarResp.getData();
    }

    /**
     * Retrieves an arbitrary record (any piece of information) from the ledger. Ledger records can be call outputs, transaction input, etc.
     * 
     * @param getBesuRecordV1Request  (optional)
     * @return ApiResponse&lt;GetBesuRecordV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetBesuRecordV1Response> getBesuRecordV1WithHttpInfo(GetBesuRecordV1Request getBesuRecordV1Request) throws ApiException {
        okhttp3.Call localVarCall = getBesuRecordV1ValidateBeforeCall(getBesuRecordV1Request, null);
        Type localVarReturnType = new TypeToken<GetBesuRecordV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves an arbitrary record (any piece of information) from the ledger. Ledger records can be call outputs, transaction input, etc. (asynchronously)
     * 
     * @param getBesuRecordV1Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBesuRecordV1Async(GetBesuRecordV1Request getBesuRecordV1Request, final ApiCallback<GetBesuRecordV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBesuRecordV1ValidateBeforeCall(getBesuRecordV1Request, _callback);
        Type localVarReturnType = new TypeToken<GetBesuRecordV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBlockV1
     * @param getBlockV1Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBlockV1Call(GetBlockV1Request getBlockV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getBlockV1Request;

        // create path and map variables
        String localVarPath = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/get-block";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBlockV1ValidateBeforeCall(GetBlockV1Request getBlockV1Request, final ApiCallback _callback) throws ApiException {
        return getBlockV1Call(getBlockV1Request, _callback);

    }

    /**
     * Returns a block matching the block
     * 
     * @param getBlockV1Request  (optional)
     * @return GetBlockV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetBlockV1Response getBlockV1(GetBlockV1Request getBlockV1Request) throws ApiException {
        ApiResponse<GetBlockV1Response> localVarResp = getBlockV1WithHttpInfo(getBlockV1Request);
        return localVarResp.getData();
    }

    /**
     * Returns a block matching the block
     * 
     * @param getBlockV1Request  (optional)
     * @return ApiResponse&lt;GetBlockV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetBlockV1Response> getBlockV1WithHttpInfo(GetBlockV1Request getBlockV1Request) throws ApiException {
        okhttp3.Call localVarCall = getBlockV1ValidateBeforeCall(getBlockV1Request, null);
        Type localVarReturnType = new TypeToken<GetBlockV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a block matching the block (asynchronously)
     * 
     * @param getBlockV1Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBlockV1Async(GetBlockV1Request getBlockV1Request, final ApiCallback<GetBlockV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBlockV1ValidateBeforeCall(getBlockV1Request, _callback);
        Type localVarReturnType = new TypeToken<GetBlockV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOpenApiSpecV1
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOpenApiSpecV1Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/get-open-api-spec";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOpenApiSpecV1ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getOpenApiSpecV1Call(_callback);

    }

    /**
     * Retrieves the .json file that contains the OpenAPI specification for the plugin.
     * 
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String getOpenApiSpecV1() throws ApiException {
        ApiResponse<String> localVarResp = getOpenApiSpecV1WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieves the .json file that contains the OpenAPI specification for the plugin.
     * 
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getOpenApiSpecV1WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getOpenApiSpecV1ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the .json file that contains the OpenAPI specification for the plugin. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOpenApiSpecV1Async(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOpenApiSpecV1ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPastLogsV1
     * @param getPastLogsV1Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPastLogsV1Call(GetPastLogsV1Request getPastLogsV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getPastLogsV1Request;

        // create path and map variables
        String localVarPath = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/get-past-logs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPastLogsV1ValidateBeforeCall(GetPastLogsV1Request getPastLogsV1Request, final ApiCallback _callback) throws ApiException {
        return getPastLogsV1Call(getPastLogsV1Request, _callback);

    }

    /**
     * Gets past logs, matching the given options.
     * 
     * @param getPastLogsV1Request  (optional)
     * @return GetPastLogsV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetPastLogsV1Response getPastLogsV1(GetPastLogsV1Request getPastLogsV1Request) throws ApiException {
        ApiResponse<GetPastLogsV1Response> localVarResp = getPastLogsV1WithHttpInfo(getPastLogsV1Request);
        return localVarResp.getData();
    }

    /**
     * Gets past logs, matching the given options.
     * 
     * @param getPastLogsV1Request  (optional)
     * @return ApiResponse&lt;GetPastLogsV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPastLogsV1Response> getPastLogsV1WithHttpInfo(GetPastLogsV1Request getPastLogsV1Request) throws ApiException {
        okhttp3.Call localVarCall = getPastLogsV1ValidateBeforeCall(getPastLogsV1Request, null);
        Type localVarReturnType = new TypeToken<GetPastLogsV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets past logs, matching the given options. (asynchronously)
     * 
     * @param getPastLogsV1Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPastLogsV1Async(GetPastLogsV1Request getPastLogsV1Request, final ApiCallback<GetPastLogsV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPastLogsV1ValidateBeforeCall(getPastLogsV1Request, _callback);
        Type localVarReturnType = new TypeToken<GetPastLogsV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPrometheusMetricsV1
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPrometheusMetricsV1Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/get-prometheus-exporter-metrics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPrometheusMetricsV1ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getPrometheusMetricsV1Call(_callback);

    }

    /**
     * Get the Prometheus Metrics
     * 
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String getPrometheusMetricsV1() throws ApiException {
        ApiResponse<String> localVarResp = getPrometheusMetricsV1WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the Prometheus Metrics
     * 
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getPrometheusMetricsV1WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPrometheusMetricsV1ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Prometheus Metrics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPrometheusMetricsV1Async(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPrometheusMetricsV1ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransactionV1
     * @param getTransactionV1Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionV1Call(GetTransactionV1Request getTransactionV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getTransactionV1Request;

        // create path and map variables
        String localVarPath = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/get-transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionV1ValidateBeforeCall(GetTransactionV1Request getTransactionV1Request, final ApiCallback _callback) throws ApiException {
        return getTransactionV1Call(getTransactionV1Request, _callback);

    }

    /**
     * Executes a transaction on a besu ledger
     * 
     * @param getTransactionV1Request  (optional)
     * @return GetTransactionV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetTransactionV1Response getTransactionV1(GetTransactionV1Request getTransactionV1Request) throws ApiException {
        ApiResponse<GetTransactionV1Response> localVarResp = getTransactionV1WithHttpInfo(getTransactionV1Request);
        return localVarResp.getData();
    }

    /**
     * Executes a transaction on a besu ledger
     * 
     * @param getTransactionV1Request  (optional)
     * @return ApiResponse&lt;GetTransactionV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTransactionV1Response> getTransactionV1WithHttpInfo(GetTransactionV1Request getTransactionV1Request) throws ApiException {
        okhttp3.Call localVarCall = getTransactionV1ValidateBeforeCall(getTransactionV1Request, null);
        Type localVarReturnType = new TypeToken<GetTransactionV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Executes a transaction on a besu ledger (asynchronously)
     * 
     * @param getTransactionV1Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionV1Async(GetTransactionV1Request getTransactionV1Request, final ApiCallback<GetTransactionV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionV1ValidateBeforeCall(getTransactionV1Request, _callback);
        Type localVarReturnType = new TypeToken<GetTransactionV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invokeContractV1
     * @param invokeContractV1Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invokeContractV1Call(InvokeContractV1Request invokeContractV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invokeContractV1Request;

        // create path and map variables
        String localVarPath = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/invoke-contract";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invokeContractV1ValidateBeforeCall(InvokeContractV1Request invokeContractV1Request, final ApiCallback _callback) throws ApiException {
        return invokeContractV1Call(invokeContractV1Request, _callback);

    }

    /**
     * Invokes a contract on a besu ledger
     * 
     * @param invokeContractV1Request  (optional)
     * @return InvokeContractV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InvokeContractV1Response invokeContractV1(InvokeContractV1Request invokeContractV1Request) throws ApiException {
        ApiResponse<InvokeContractV1Response> localVarResp = invokeContractV1WithHttpInfo(invokeContractV1Request);
        return localVarResp.getData();
    }

    /**
     * Invokes a contract on a besu ledger
     * 
     * @param invokeContractV1Request  (optional)
     * @return ApiResponse&lt;InvokeContractV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvokeContractV1Response> invokeContractV1WithHttpInfo(InvokeContractV1Request invokeContractV1Request) throws ApiException {
        okhttp3.Call localVarCall = invokeContractV1ValidateBeforeCall(invokeContractV1Request, null);
        Type localVarReturnType = new TypeToken<InvokeContractV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Invokes a contract on a besu ledger (asynchronously)
     * 
     * @param invokeContractV1Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invokeContractV1Async(InvokeContractV1Request invokeContractV1Request, final ApiCallback<InvokeContractV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = invokeContractV1ValidateBeforeCall(invokeContractV1Request, _callback);
        Type localVarReturnType = new TypeToken<InvokeContractV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for runTransactionV1
     * @param runTransactionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runTransactionV1Call(RunTransactionRequest runTransactionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = runTransactionRequest;

        // create path and map variables
        String localVarPath = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/run-transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call runTransactionV1ValidateBeforeCall(RunTransactionRequest runTransactionRequest, final ApiCallback _callback) throws ApiException {
        return runTransactionV1Call(runTransactionRequest, _callback);

    }

    /**
     * Executes a transaction on a besu ledger
     * 
     * @param runTransactionRequest  (optional)
     * @return RunTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RunTransactionResponse runTransactionV1(RunTransactionRequest runTransactionRequest) throws ApiException {
        ApiResponse<RunTransactionResponse> localVarResp = runTransactionV1WithHttpInfo(runTransactionRequest);
        return localVarResp.getData();
    }

    /**
     * Executes a transaction on a besu ledger
     * 
     * @param runTransactionRequest  (optional)
     * @return ApiResponse&lt;RunTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RunTransactionResponse> runTransactionV1WithHttpInfo(RunTransactionRequest runTransactionRequest) throws ApiException {
        okhttp3.Call localVarCall = runTransactionV1ValidateBeforeCall(runTransactionRequest, null);
        Type localVarReturnType = new TypeToken<RunTransactionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Executes a transaction on a besu ledger (asynchronously)
     * 
     * @param runTransactionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call runTransactionV1Async(RunTransactionRequest runTransactionRequest, final ApiCallback<RunTransactionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = runTransactionV1ValidateBeforeCall(runTransactionRequest, _callback);
        Type localVarReturnType = new TypeToken<RunTransactionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signTransactionV1
     * @param signTransactionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not able to find the corresponding tranaction from the transaction hash </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signTransactionV1Call(SignTransactionRequest signTransactionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = signTransactionRequest;

        // create path and map variables
        String localVarPath = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/sign-transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signTransactionV1ValidateBeforeCall(SignTransactionRequest signTransactionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'signTransactionRequest' is set
        if (signTransactionRequest == null) {
            throw new ApiException("Missing the required parameter 'signTransactionRequest' when calling signTransactionV1(Async)");
        }

        return signTransactionV1Call(signTransactionRequest, _callback);

    }

    /**
     * Obtain signatures of ledger from the corresponding transaction hash.
     * Obtain signatures of ledger from the corresponding transaction hash.
     * @param signTransactionRequest  (required)
     * @return SignTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not able to find the corresponding tranaction from the transaction hash </td><td>  -  </td></tr>
     </table>
     */
    public SignTransactionResponse signTransactionV1(SignTransactionRequest signTransactionRequest) throws ApiException {
        ApiResponse<SignTransactionResponse> localVarResp = signTransactionV1WithHttpInfo(signTransactionRequest);
        return localVarResp.getData();
    }

    /**
     * Obtain signatures of ledger from the corresponding transaction hash.
     * Obtain signatures of ledger from the corresponding transaction hash.
     * @param signTransactionRequest  (required)
     * @return ApiResponse&lt;SignTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not able to find the corresponding tranaction from the transaction hash </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignTransactionResponse> signTransactionV1WithHttpInfo(SignTransactionRequest signTransactionRequest) throws ApiException {
        okhttp3.Call localVarCall = signTransactionV1ValidateBeforeCall(signTransactionRequest, null);
        Type localVarReturnType = new TypeToken<SignTransactionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtain signatures of ledger from the corresponding transaction hash. (asynchronously)
     * Obtain signatures of ledger from the corresponding transaction hash.
     * @param signTransactionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not able to find the corresponding tranaction from the transaction hash </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signTransactionV1Async(SignTransactionRequest signTransactionRequest, final ApiCallback<SignTransactionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = signTransactionV1ValidateBeforeCall(signTransactionRequest, _callback);
        Type localVarReturnType = new TypeToken<SignTransactionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
