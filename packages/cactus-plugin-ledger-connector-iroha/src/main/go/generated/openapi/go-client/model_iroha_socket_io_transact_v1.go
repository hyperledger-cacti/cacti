/*
Hyperledger Cactus Plugin - Connector Iroha

Can perform basic tasks on a Iroha ledger

API version: v2.0.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-iroha

import (
	"encoding/json"
	"fmt"
)

// IrohaSocketIOTransactV1 the model 'IrohaSocketIOTransactV1'
type IrohaSocketIOTransactV1 string

// List of IrohaSocketIOTransactV1
const (
	SendAsyncRequest IrohaSocketIOTransactV1 = "org.hyperledger.cactus.api.async.iroha.IrohaSocketIOTransactV1.SendAsyncRequest"
	SendSyncRequest IrohaSocketIOTransactV1 = "org.hyperledger.cactus.api.async.iroha.IrohaSocketIOTransactV1.SendSyncRequest"
)

// All allowed values of IrohaSocketIOTransactV1 enum
var AllowedIrohaSocketIOTransactV1EnumValues = []IrohaSocketIOTransactV1{
	"org.hyperledger.cactus.api.async.iroha.IrohaSocketIOTransactV1.SendAsyncRequest",
	"org.hyperledger.cactus.api.async.iroha.IrohaSocketIOTransactV1.SendSyncRequest",
}

func (v *IrohaSocketIOTransactV1) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IrohaSocketIOTransactV1(value)
	for _, existing := range AllowedIrohaSocketIOTransactV1EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IrohaSocketIOTransactV1", value)
}

// NewIrohaSocketIOTransactV1FromValue returns a pointer to a valid IrohaSocketIOTransactV1
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIrohaSocketIOTransactV1FromValue(v string) (*IrohaSocketIOTransactV1, error) {
	ev := IrohaSocketIOTransactV1(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IrohaSocketIOTransactV1: valid values are %v", v, AllowedIrohaSocketIOTransactV1EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IrohaSocketIOTransactV1) IsValid() bool {
	for _, existing := range AllowedIrohaSocketIOTransactV1EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IrohaSocketIOTransactV1 value
func (v IrohaSocketIOTransactV1) Ptr() *IrohaSocketIOTransactV1 {
	return &v
}

type NullableIrohaSocketIOTransactV1 struct {
	value *IrohaSocketIOTransactV1
	isSet bool
}

func (v NullableIrohaSocketIOTransactV1) Get() *IrohaSocketIOTransactV1 {
	return v.value
}

func (v *NullableIrohaSocketIOTransactV1) Set(val *IrohaSocketIOTransactV1) {
	v.value = val
	v.isSet = true
}

func (v NullableIrohaSocketIOTransactV1) IsSet() bool {
	return v.isSet
}

func (v *NullableIrohaSocketIOTransactV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIrohaSocketIOTransactV1(val *IrohaSocketIOTransactV1) *NullableIrohaSocketIOTransactV1 {
	return &NullableIrohaSocketIOTransactV1{value: val, isSet: true}
}

func (v NullableIrohaSocketIOTransactV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIrohaSocketIOTransactV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

