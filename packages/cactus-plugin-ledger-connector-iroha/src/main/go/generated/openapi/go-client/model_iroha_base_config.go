/*
Hyperledger Cactus Plugin - Connector Iroha

Can perform basic tasks on a Iroha ledger

API version: v2.0.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-iroha

import (
	"encoding/json"
)

// checks if the IrohaBaseConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IrohaBaseConfig{}

// IrohaBaseConfig struct for IrohaBaseConfig
type IrohaBaseConfig struct {
	IrohaHost *string `json:"irohaHost,omitempty"`
	IrohaPort *float32 `json:"irohaPort,omitempty"`
	CreatorAccountId *string `json:"creatorAccountId,omitempty"`
	PrivKey []interface{} `json:"privKey,omitempty"`
	Quorum *float32 `json:"quorum,omitempty"`
	TimeoutLimit *float32 `json:"timeoutLimit,omitempty"`
	// Can only be set to false for an insecure grpc connection.
	Tls *bool `json:"tls,omitempty"`
	// Flag used for monitoring. It changes default beahviour of transaction wrapper so it return error to caller instead of throwing RuntimeError straight away.
	MonitorMode NullableBool `json:"monitorMode,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IrohaBaseConfig IrohaBaseConfig

// NewIrohaBaseConfig instantiates a new IrohaBaseConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIrohaBaseConfig() *IrohaBaseConfig {
	this := IrohaBaseConfig{}
	return &this
}

// NewIrohaBaseConfigWithDefaults instantiates a new IrohaBaseConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIrohaBaseConfigWithDefaults() *IrohaBaseConfig {
	this := IrohaBaseConfig{}
	return &this
}

// GetIrohaHost returns the IrohaHost field value if set, zero value otherwise.
func (o *IrohaBaseConfig) GetIrohaHost() string {
	if o == nil || IsNil(o.IrohaHost) {
		var ret string
		return ret
	}
	return *o.IrohaHost
}

// GetIrohaHostOk returns a tuple with the IrohaHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IrohaBaseConfig) GetIrohaHostOk() (*string, bool) {
	if o == nil || IsNil(o.IrohaHost) {
		return nil, false
	}
	return o.IrohaHost, true
}

// HasIrohaHost returns a boolean if a field has been set.
func (o *IrohaBaseConfig) HasIrohaHost() bool {
	if o != nil && !IsNil(o.IrohaHost) {
		return true
	}

	return false
}

// SetIrohaHost gets a reference to the given string and assigns it to the IrohaHost field.
func (o *IrohaBaseConfig) SetIrohaHost(v string) {
	o.IrohaHost = &v
}

// GetIrohaPort returns the IrohaPort field value if set, zero value otherwise.
func (o *IrohaBaseConfig) GetIrohaPort() float32 {
	if o == nil || IsNil(o.IrohaPort) {
		var ret float32
		return ret
	}
	return *o.IrohaPort
}

// GetIrohaPortOk returns a tuple with the IrohaPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IrohaBaseConfig) GetIrohaPortOk() (*float32, bool) {
	if o == nil || IsNil(o.IrohaPort) {
		return nil, false
	}
	return o.IrohaPort, true
}

// HasIrohaPort returns a boolean if a field has been set.
func (o *IrohaBaseConfig) HasIrohaPort() bool {
	if o != nil && !IsNil(o.IrohaPort) {
		return true
	}

	return false
}

// SetIrohaPort gets a reference to the given float32 and assigns it to the IrohaPort field.
func (o *IrohaBaseConfig) SetIrohaPort(v float32) {
	o.IrohaPort = &v
}

// GetCreatorAccountId returns the CreatorAccountId field value if set, zero value otherwise.
func (o *IrohaBaseConfig) GetCreatorAccountId() string {
	if o == nil || IsNil(o.CreatorAccountId) {
		var ret string
		return ret
	}
	return *o.CreatorAccountId
}

// GetCreatorAccountIdOk returns a tuple with the CreatorAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IrohaBaseConfig) GetCreatorAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorAccountId) {
		return nil, false
	}
	return o.CreatorAccountId, true
}

// HasCreatorAccountId returns a boolean if a field has been set.
func (o *IrohaBaseConfig) HasCreatorAccountId() bool {
	if o != nil && !IsNil(o.CreatorAccountId) {
		return true
	}

	return false
}

// SetCreatorAccountId gets a reference to the given string and assigns it to the CreatorAccountId field.
func (o *IrohaBaseConfig) SetCreatorAccountId(v string) {
	o.CreatorAccountId = &v
}

// GetPrivKey returns the PrivKey field value if set, zero value otherwise.
func (o *IrohaBaseConfig) GetPrivKey() []interface{} {
	if o == nil || IsNil(o.PrivKey) {
		var ret []interface{}
		return ret
	}
	return o.PrivKey
}

// GetPrivKeyOk returns a tuple with the PrivKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IrohaBaseConfig) GetPrivKeyOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.PrivKey) {
		return nil, false
	}
	return o.PrivKey, true
}

// HasPrivKey returns a boolean if a field has been set.
func (o *IrohaBaseConfig) HasPrivKey() bool {
	if o != nil && !IsNil(o.PrivKey) {
		return true
	}

	return false
}

// SetPrivKey gets a reference to the given []interface{} and assigns it to the PrivKey field.
func (o *IrohaBaseConfig) SetPrivKey(v []interface{}) {
	o.PrivKey = v
}

// GetQuorum returns the Quorum field value if set, zero value otherwise.
func (o *IrohaBaseConfig) GetQuorum() float32 {
	if o == nil || IsNil(o.Quorum) {
		var ret float32
		return ret
	}
	return *o.Quorum
}

// GetQuorumOk returns a tuple with the Quorum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IrohaBaseConfig) GetQuorumOk() (*float32, bool) {
	if o == nil || IsNil(o.Quorum) {
		return nil, false
	}
	return o.Quorum, true
}

// HasQuorum returns a boolean if a field has been set.
func (o *IrohaBaseConfig) HasQuorum() bool {
	if o != nil && !IsNil(o.Quorum) {
		return true
	}

	return false
}

// SetQuorum gets a reference to the given float32 and assigns it to the Quorum field.
func (o *IrohaBaseConfig) SetQuorum(v float32) {
	o.Quorum = &v
}

// GetTimeoutLimit returns the TimeoutLimit field value if set, zero value otherwise.
func (o *IrohaBaseConfig) GetTimeoutLimit() float32 {
	if o == nil || IsNil(o.TimeoutLimit) {
		var ret float32
		return ret
	}
	return *o.TimeoutLimit
}

// GetTimeoutLimitOk returns a tuple with the TimeoutLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IrohaBaseConfig) GetTimeoutLimitOk() (*float32, bool) {
	if o == nil || IsNil(o.TimeoutLimit) {
		return nil, false
	}
	return o.TimeoutLimit, true
}

// HasTimeoutLimit returns a boolean if a field has been set.
func (o *IrohaBaseConfig) HasTimeoutLimit() bool {
	if o != nil && !IsNil(o.TimeoutLimit) {
		return true
	}

	return false
}

// SetTimeoutLimit gets a reference to the given float32 and assigns it to the TimeoutLimit field.
func (o *IrohaBaseConfig) SetTimeoutLimit(v float32) {
	o.TimeoutLimit = &v
}

// GetTls returns the Tls field value if set, zero value otherwise.
func (o *IrohaBaseConfig) GetTls() bool {
	if o == nil || IsNil(o.Tls) {
		var ret bool
		return ret
	}
	return *o.Tls
}

// GetTlsOk returns a tuple with the Tls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IrohaBaseConfig) GetTlsOk() (*bool, bool) {
	if o == nil || IsNil(o.Tls) {
		return nil, false
	}
	return o.Tls, true
}

// HasTls returns a boolean if a field has been set.
func (o *IrohaBaseConfig) HasTls() bool {
	if o != nil && !IsNil(o.Tls) {
		return true
	}

	return false
}

// SetTls gets a reference to the given bool and assigns it to the Tls field.
func (o *IrohaBaseConfig) SetTls(v bool) {
	o.Tls = &v
}

// GetMonitorMode returns the MonitorMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IrohaBaseConfig) GetMonitorMode() bool {
	if o == nil || IsNil(o.MonitorMode.Get()) {
		var ret bool
		return ret
	}
	return *o.MonitorMode.Get()
}

// GetMonitorModeOk returns a tuple with the MonitorMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IrohaBaseConfig) GetMonitorModeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MonitorMode.Get(), o.MonitorMode.IsSet()
}

// HasMonitorMode returns a boolean if a field has been set.
func (o *IrohaBaseConfig) HasMonitorMode() bool {
	if o != nil && o.MonitorMode.IsSet() {
		return true
	}

	return false
}

// SetMonitorMode gets a reference to the given NullableBool and assigns it to the MonitorMode field.
func (o *IrohaBaseConfig) SetMonitorMode(v bool) {
	o.MonitorMode.Set(&v)
}
// SetMonitorModeNil sets the value for MonitorMode to be an explicit nil
func (o *IrohaBaseConfig) SetMonitorModeNil() {
	o.MonitorMode.Set(nil)
}

// UnsetMonitorMode ensures that no value is present for MonitorMode, not even an explicit nil
func (o *IrohaBaseConfig) UnsetMonitorMode() {
	o.MonitorMode.Unset()
}

func (o IrohaBaseConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IrohaBaseConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IrohaHost) {
		toSerialize["irohaHost"] = o.IrohaHost
	}
	if !IsNil(o.IrohaPort) {
		toSerialize["irohaPort"] = o.IrohaPort
	}
	if !IsNil(o.CreatorAccountId) {
		toSerialize["creatorAccountId"] = o.CreatorAccountId
	}
	if !IsNil(o.PrivKey) {
		toSerialize["privKey"] = o.PrivKey
	}
	if !IsNil(o.Quorum) {
		toSerialize["quorum"] = o.Quorum
	}
	if !IsNil(o.TimeoutLimit) {
		toSerialize["timeoutLimit"] = o.TimeoutLimit
	}
	if !IsNil(o.Tls) {
		toSerialize["tls"] = o.Tls
	}
	if o.MonitorMode.IsSet() {
		toSerialize["monitorMode"] = o.MonitorMode.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IrohaBaseConfig) UnmarshalJSON(bytes []byte) (err error) {
	varIrohaBaseConfig := _IrohaBaseConfig{}

	if err = json.Unmarshal(bytes, &varIrohaBaseConfig); err == nil {
		*o = IrohaBaseConfig(varIrohaBaseConfig)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "irohaHost")
		delete(additionalProperties, "irohaPort")
		delete(additionalProperties, "creatorAccountId")
		delete(additionalProperties, "privKey")
		delete(additionalProperties, "quorum")
		delete(additionalProperties, "timeoutLimit")
		delete(additionalProperties, "tls")
		delete(additionalProperties, "monitorMode")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIrohaBaseConfig struct {
	value *IrohaBaseConfig
	isSet bool
}

func (v NullableIrohaBaseConfig) Get() *IrohaBaseConfig {
	return v.value
}

func (v *NullableIrohaBaseConfig) Set(val *IrohaBaseConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableIrohaBaseConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableIrohaBaseConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIrohaBaseConfig(val *IrohaBaseConfig) *NullableIrohaBaseConfig {
	return &NullableIrohaBaseConfig{value: val, isSet: true}
}

func (v NullableIrohaBaseConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIrohaBaseConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


