/*
Hyperledger Cactus Plugin - Connector Iroha

Can perform basic tasks on a Iroha ledger

API version: v2.0.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-iroha

import (
	"encoding/json"
)

// checks if the RunTransactionRequestV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunTransactionRequestV1{}

// RunTransactionRequestV1 struct for RunTransactionRequestV1
type RunTransactionRequestV1 struct {
	CommandName string `json:"commandName"`
	BaseConfig IrohaBaseConfig `json:"baseConfig"`
	Params RunTransactionRequestV1Params `json:"params"`
}

// NewRunTransactionRequestV1 instantiates a new RunTransactionRequestV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunTransactionRequestV1(commandName string, baseConfig IrohaBaseConfig, params RunTransactionRequestV1Params) *RunTransactionRequestV1 {
	this := RunTransactionRequestV1{}
	this.CommandName = commandName
	this.BaseConfig = baseConfig
	this.Params = params
	return &this
}

// NewRunTransactionRequestV1WithDefaults instantiates a new RunTransactionRequestV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunTransactionRequestV1WithDefaults() *RunTransactionRequestV1 {
	this := RunTransactionRequestV1{}
	return &this
}

// GetCommandName returns the CommandName field value
func (o *RunTransactionRequestV1) GetCommandName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommandName
}

// GetCommandNameOk returns a tuple with the CommandName field value
// and a boolean to check if the value has been set.
func (o *RunTransactionRequestV1) GetCommandNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommandName, true
}

// SetCommandName sets field value
func (o *RunTransactionRequestV1) SetCommandName(v string) {
	o.CommandName = v
}

// GetBaseConfig returns the BaseConfig field value
func (o *RunTransactionRequestV1) GetBaseConfig() IrohaBaseConfig {
	if o == nil {
		var ret IrohaBaseConfig
		return ret
	}

	return o.BaseConfig
}

// GetBaseConfigOk returns a tuple with the BaseConfig field value
// and a boolean to check if the value has been set.
func (o *RunTransactionRequestV1) GetBaseConfigOk() (*IrohaBaseConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseConfig, true
}

// SetBaseConfig sets field value
func (o *RunTransactionRequestV1) SetBaseConfig(v IrohaBaseConfig) {
	o.BaseConfig = v
}

// GetParams returns the Params field value
func (o *RunTransactionRequestV1) GetParams() RunTransactionRequestV1Params {
	if o == nil {
		var ret RunTransactionRequestV1Params
		return ret
	}

	return o.Params
}

// GetParamsOk returns a tuple with the Params field value
// and a boolean to check if the value has been set.
func (o *RunTransactionRequestV1) GetParamsOk() (*RunTransactionRequestV1Params, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Params, true
}

// SetParams sets field value
func (o *RunTransactionRequestV1) SetParams(v RunTransactionRequestV1Params) {
	o.Params = v
}

func (o RunTransactionRequestV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunTransactionRequestV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["commandName"] = o.CommandName
	toSerialize["baseConfig"] = o.BaseConfig
	toSerialize["params"] = o.Params
	return toSerialize, nil
}

type NullableRunTransactionRequestV1 struct {
	value *RunTransactionRequestV1
	isSet bool
}

func (v NullableRunTransactionRequestV1) Get() *RunTransactionRequestV1 {
	return v.value
}

func (v *NullableRunTransactionRequestV1) Set(val *RunTransactionRequestV1) {
	v.value = val
	v.isSet = true
}

func (v NullableRunTransactionRequestV1) IsSet() bool {
	return v.isSet
}

func (v *NullableRunTransactionRequestV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunTransactionRequestV1(val *RunTransactionRequestV1) *NullableRunTransactionRequestV1 {
	return &NullableRunTransactionRequestV1{value: val, isSet: true}
}

func (v NullableRunTransactionRequestV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunTransactionRequestV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


