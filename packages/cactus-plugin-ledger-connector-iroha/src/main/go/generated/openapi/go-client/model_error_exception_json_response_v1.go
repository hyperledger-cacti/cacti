/*
Hyperledger Cactus Plugin - Connector Iroha

Can perform basic tasks on a Iroha ledger

API version: v2.0.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-iroha

import (
	"encoding/json"
)

// checks if the ErrorExceptionJsonResponseV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorExceptionJsonResponseV1{}

// ErrorExceptionJsonResponseV1 struct for ErrorExceptionJsonResponseV1
type ErrorExceptionJsonResponseV1 struct {
	Message string `json:"message"`
	Name *string `json:"name,omitempty"`
	Error *string `json:"error,omitempty"`
	Stack *string `json:"stack,omitempty"`
	Cause *string `json:"cause,omitempty"`
}

// NewErrorExceptionJsonResponseV1 instantiates a new ErrorExceptionJsonResponseV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorExceptionJsonResponseV1(message string) *ErrorExceptionJsonResponseV1 {
	this := ErrorExceptionJsonResponseV1{}
	this.Message = message
	return &this
}

// NewErrorExceptionJsonResponseV1WithDefaults instantiates a new ErrorExceptionJsonResponseV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorExceptionJsonResponseV1WithDefaults() *ErrorExceptionJsonResponseV1 {
	this := ErrorExceptionJsonResponseV1{}
	return &this
}

// GetMessage returns the Message field value
func (o *ErrorExceptionJsonResponseV1) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ErrorExceptionJsonResponseV1) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ErrorExceptionJsonResponseV1) SetMessage(v string) {
	o.Message = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ErrorExceptionJsonResponseV1) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorExceptionJsonResponseV1) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ErrorExceptionJsonResponseV1) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ErrorExceptionJsonResponseV1) SetName(v string) {
	o.Name = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ErrorExceptionJsonResponseV1) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorExceptionJsonResponseV1) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ErrorExceptionJsonResponseV1) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *ErrorExceptionJsonResponseV1) SetError(v string) {
	o.Error = &v
}

// GetStack returns the Stack field value if set, zero value otherwise.
func (o *ErrorExceptionJsonResponseV1) GetStack() string {
	if o == nil || IsNil(o.Stack) {
		var ret string
		return ret
	}
	return *o.Stack
}

// GetStackOk returns a tuple with the Stack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorExceptionJsonResponseV1) GetStackOk() (*string, bool) {
	if o == nil || IsNil(o.Stack) {
		return nil, false
	}
	return o.Stack, true
}

// HasStack returns a boolean if a field has been set.
func (o *ErrorExceptionJsonResponseV1) HasStack() bool {
	if o != nil && !IsNil(o.Stack) {
		return true
	}

	return false
}

// SetStack gets a reference to the given string and assigns it to the Stack field.
func (o *ErrorExceptionJsonResponseV1) SetStack(v string) {
	o.Stack = &v
}

// GetCause returns the Cause field value if set, zero value otherwise.
func (o *ErrorExceptionJsonResponseV1) GetCause() string {
	if o == nil || IsNil(o.Cause) {
		var ret string
		return ret
	}
	return *o.Cause
}

// GetCauseOk returns a tuple with the Cause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorExceptionJsonResponseV1) GetCauseOk() (*string, bool) {
	if o == nil || IsNil(o.Cause) {
		return nil, false
	}
	return o.Cause, true
}

// HasCause returns a boolean if a field has been set.
func (o *ErrorExceptionJsonResponseV1) HasCause() bool {
	if o != nil && !IsNil(o.Cause) {
		return true
	}

	return false
}

// SetCause gets a reference to the given string and assigns it to the Cause field.
func (o *ErrorExceptionJsonResponseV1) SetCause(v string) {
	o.Cause = &v
}

func (o ErrorExceptionJsonResponseV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorExceptionJsonResponseV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Stack) {
		toSerialize["stack"] = o.Stack
	}
	if !IsNil(o.Cause) {
		toSerialize["cause"] = o.Cause
	}
	return toSerialize, nil
}

type NullableErrorExceptionJsonResponseV1 struct {
	value *ErrorExceptionJsonResponseV1
	isSet bool
}

func (v NullableErrorExceptionJsonResponseV1) Get() *ErrorExceptionJsonResponseV1 {
	return v.value
}

func (v *NullableErrorExceptionJsonResponseV1) Set(val *ErrorExceptionJsonResponseV1) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorExceptionJsonResponseV1) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorExceptionJsonResponseV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorExceptionJsonResponseV1(val *ErrorExceptionJsonResponseV1) *NullableErrorExceptionJsonResponseV1 {
	return &NullableErrorExceptionJsonResponseV1{value: val, isSet: true}
}

func (v NullableErrorExceptionJsonResponseV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorExceptionJsonResponseV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


