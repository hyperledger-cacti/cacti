/*
Hyperledger Cactus Plugin - Connector Iroha

Can perform basic tasks on a Iroha ledger

API version: v2.0.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-iroha

import (
	"encoding/json"
)

// checks if the CreateDomainRequestParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateDomainRequestParameters{}

// CreateDomainRequestParameters The list of arguments to pass in to the transaction request to Create Domain.
type CreateDomainRequestParameters struct {
	DomainId string `json:"domainId"`
	DefaultRole string `json:"defaultRole"`
}

// NewCreateDomainRequestParameters instantiates a new CreateDomainRequestParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDomainRequestParameters(domainId string, defaultRole string) *CreateDomainRequestParameters {
	this := CreateDomainRequestParameters{}
	this.DomainId = domainId
	this.DefaultRole = defaultRole
	return &this
}

// NewCreateDomainRequestParametersWithDefaults instantiates a new CreateDomainRequestParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDomainRequestParametersWithDefaults() *CreateDomainRequestParameters {
	this := CreateDomainRequestParameters{}
	return &this
}

// GetDomainId returns the DomainId field value
func (o *CreateDomainRequestParameters) GetDomainId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DomainId
}

// GetDomainIdOk returns a tuple with the DomainId field value
// and a boolean to check if the value has been set.
func (o *CreateDomainRequestParameters) GetDomainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DomainId, true
}

// SetDomainId sets field value
func (o *CreateDomainRequestParameters) SetDomainId(v string) {
	o.DomainId = v
}

// GetDefaultRole returns the DefaultRole field value
func (o *CreateDomainRequestParameters) GetDefaultRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultRole
}

// GetDefaultRoleOk returns a tuple with the DefaultRole field value
// and a boolean to check if the value has been set.
func (o *CreateDomainRequestParameters) GetDefaultRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultRole, true
}

// SetDefaultRole sets field value
func (o *CreateDomainRequestParameters) SetDefaultRole(v string) {
	o.DefaultRole = v
}

func (o CreateDomainRequestParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateDomainRequestParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["domainId"] = o.DomainId
	toSerialize["defaultRole"] = o.DefaultRole
	return toSerialize, nil
}

type NullableCreateDomainRequestParameters struct {
	value *CreateDomainRequestParameters
	isSet bool
}

func (v NullableCreateDomainRequestParameters) Get() *CreateDomainRequestParameters {
	return v.value
}

func (v *NullableCreateDomainRequestParameters) Set(val *CreateDomainRequestParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDomainRequestParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDomainRequestParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDomainRequestParameters(val *CreateDomainRequestParameters) *NullableCreateDomainRequestParameters {
	return &NullableCreateDomainRequestParameters{value: val, isSet: true}
}

func (v NullableCreateDomainRequestParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDomainRequestParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


