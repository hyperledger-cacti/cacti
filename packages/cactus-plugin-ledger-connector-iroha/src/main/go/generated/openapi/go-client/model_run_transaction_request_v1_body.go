/*
Hyperledger Cactus Plugin - Connector Iroha

Can perform basic tasks on a Iroha ledger

API version: v2.0.0-alpha.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-iroha

import (
	"encoding/json"
	"fmt"
)

// RunTransactionRequestV1Body - struct for RunTransactionRequestV1Body
type RunTransactionRequestV1Body struct {
	RunTransactionRequestV1 *RunTransactionRequestV1
	RunTransactionSignedRequestV1 *RunTransactionSignedRequestV1
}

// RunTransactionRequestV1AsRunTransactionRequestV1Body is a convenience function that returns RunTransactionRequestV1 wrapped in RunTransactionRequestV1Body
func RunTransactionRequestV1AsRunTransactionRequestV1Body(v *RunTransactionRequestV1) RunTransactionRequestV1Body {
	return RunTransactionRequestV1Body{
		RunTransactionRequestV1: v,
	}
}

// RunTransactionSignedRequestV1AsRunTransactionRequestV1Body is a convenience function that returns RunTransactionSignedRequestV1 wrapped in RunTransactionRequestV1Body
func RunTransactionSignedRequestV1AsRunTransactionRequestV1Body(v *RunTransactionSignedRequestV1) RunTransactionRequestV1Body {
	return RunTransactionRequestV1Body{
		RunTransactionSignedRequestV1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RunTransactionRequestV1Body) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into RunTransactionRequestV1
	err = newStrictDecoder(data).Decode(&dst.RunTransactionRequestV1)
	if err == nil {
		jsonRunTransactionRequestV1, _ := json.Marshal(dst.RunTransactionRequestV1)
		if string(jsonRunTransactionRequestV1) == "{}" { // empty struct
			dst.RunTransactionRequestV1 = nil
		} else {
			match++
		}
	} else {
		dst.RunTransactionRequestV1 = nil
	}

	// try to unmarshal data into RunTransactionSignedRequestV1
	err = newStrictDecoder(data).Decode(&dst.RunTransactionSignedRequestV1)
	if err == nil {
		jsonRunTransactionSignedRequestV1, _ := json.Marshal(dst.RunTransactionSignedRequestV1)
		if string(jsonRunTransactionSignedRequestV1) == "{}" { // empty struct
			dst.RunTransactionSignedRequestV1 = nil
		} else {
			match++
		}
	} else {
		dst.RunTransactionSignedRequestV1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RunTransactionRequestV1 = nil
		dst.RunTransactionSignedRequestV1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RunTransactionRequestV1Body)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RunTransactionRequestV1Body)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RunTransactionRequestV1Body) MarshalJSON() ([]byte, error) {
	if src.RunTransactionRequestV1 != nil {
		return json.Marshal(&src.RunTransactionRequestV1)
	}

	if src.RunTransactionSignedRequestV1 != nil {
		return json.Marshal(&src.RunTransactionSignedRequestV1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RunTransactionRequestV1Body) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.RunTransactionRequestV1 != nil {
		return obj.RunTransactionRequestV1
	}

	if obj.RunTransactionSignedRequestV1 != nil {
		return obj.RunTransactionSignedRequestV1
	}

	// all schemas are nil
	return nil
}

type NullableRunTransactionRequestV1Body struct {
	value *RunTransactionRequestV1Body
	isSet bool
}

func (v NullableRunTransactionRequestV1Body) Get() *RunTransactionRequestV1Body {
	return v.value
}

func (v *NullableRunTransactionRequestV1Body) Set(val *RunTransactionRequestV1Body) {
	v.value = val
	v.isSet = true
}

func (v NullableRunTransactionRequestV1Body) IsSet() bool {
	return v.isSet
}

func (v *NullableRunTransactionRequestV1Body) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunTransactionRequestV1Body(val *RunTransactionRequestV1Body) *NullableRunTransactionRequestV1Body {
	return &NullableRunTransactionRequestV1Body{value: val, isSet: true}
}

func (v NullableRunTransactionRequestV1Body) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunTransactionRequestV1Body) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


