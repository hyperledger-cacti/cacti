/*
 * Hyperledger Cactus Plugin - Connector Iroha
 * Can perform basic tasks on a Iroha ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets IrohaCommand
 */
@JsonAdapter(IrohaCommand.Adapter.class)
public enum IrohaCommand {
  
  /**
   * Make entity in the system, capable of sending transactions or queries, storing signatories, personal data and identifiers.
   */
  CreateAccount("createAccount"),
  
  /**
   * Set key-value information for a given account.
   */
  SetAccountDetail("setAccountDetail"),
  
  /**
   * Set the number of signatories required to confirm the identity of a user, who creates the transaction.
   */
  SetAccountQuorum("setAccountQuorum"),
  
  /**
   * Set key-value information for a given account if the old value matches the value passed.
   */
  CompareAndSetAccountDetail("compareAndSetAccountDetail"),
  
  /**
   * Create a new type of asset, unique in a domain. An asset is a countable representation of a commodity.
   */
  CreateAsset("createAsset"),
  
  /**
   * Increase the quantity of an asset on account of transaction creator.
   */
  AddAssetQuantity("addAssetQuantity"),
  
  /**
   * Decrease the number of assets on account of transaction creator.
   */
  SubtractAssetQuantity("subtractAssetQuantity"),
  
  /**
   * Share assets within the account in peer network: in the way that source account transfers assets to the target account.
   */
  TransferAsset("transferAsset"),
  
  /**
   * Make new domain in Iroha network, which is a group of accounts.
   */
  CreateDomain("createDomain"),
  
  /**
   * Create a new role in the system from the set of permissions.
   */
  CreateRole("createRole"),
  
  /**
   * Detach a role from the set of roles of an account.
   */
  DetachRole("detachRole"),
  
  /**
   * Promote an account to some created role in the system, where a role is a set of permissions account has to perform an action (command or query).
   */
  AppendRole("appendRole"),
  
  /**
   * Add an identifier to the account. Such identifier is a public key of another device or a public key of another user.
   */
  AddSignatory("addSignatory"),
  
  /**
   * Remove a public key, associated with an identity, from an account
   */
  RemoveSignatory("removeSignatory"),
  
  /**
   * Give another account rights to perform actions on the account of transaction sender (give someone right to do something with my account).
   */
  GrantPermission("grantPermission"),
  
  /**
   * Revoke or dismiss given granted permission from another account in the network.
   */
  RevokePermission("revokePermission"),
  
  /**
   * Write into ledger the fact of peer addition into the peer network.
   */
  AddPeer("addPeer"),
  
  /**
   * Write into ledger the fact of peer removal from the network.
   */
  RemovePeer("removePeer"),
  
  /**
   * This command is not available for use, it was added for backward compatibility with Iroha.
   */
  SetSettingValue("setSettingValue"),
  
  /**
   * This command is not availalbe for use because it is related to smart contract.
   */
  CallEngine("callEngine");

  private String value;

  IrohaCommand(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static IrohaCommand fromValue(String value) {
    for (IrohaCommand b : IrohaCommand.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<IrohaCommand> {
    @Override
    public void write(final JsonWriter jsonWriter, final IrohaCommand enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public IrohaCommand read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return IrohaCommand.fromValue(value);
    }
  }
}

