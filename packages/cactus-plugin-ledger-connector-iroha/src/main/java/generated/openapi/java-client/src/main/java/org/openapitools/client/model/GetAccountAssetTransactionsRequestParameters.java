/*
 * Hyperledger Cactus Plugin - Connector Iroha
 * Can perform basic tasks on a Iroha ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The list of arguments to pass in to the transaction request to Get Account Asset Transactions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GetAccountAssetTransactionsRequestParameters {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_ASSET_ID = "assetId";
  @SerializedName(SERIALIZED_NAME_ASSET_ID)
  private String assetId;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_FIRST_TX_HASH = "firstTxHash";
  @SerializedName(SERIALIZED_NAME_FIRST_TX_HASH)
  private String firstTxHash;

  public GetAccountAssetTransactionsRequestParameters() {
  }

  public GetAccountAssetTransactionsRequestParameters accountId(String accountId) {
    
    this.accountId = accountId;
    return this;
  }

   /**
   * Get accountId
   * @return accountId
  **/
  @javax.annotation.Nonnull
  public String getAccountId() {
    return accountId;
  }


  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public GetAccountAssetTransactionsRequestParameters assetId(String assetId) {
    
    this.assetId = assetId;
    return this;
  }

   /**
   * Get assetId
   * @return assetId
  **/
  @javax.annotation.Nonnull
  public String getAssetId() {
    return assetId;
  }


  public void setAssetId(String assetId) {
    this.assetId = assetId;
  }


  public GetAccountAssetTransactionsRequestParameters pageSize(Integer pageSize) {
    
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * @return pageSize
  **/
  @javax.annotation.Nonnull
  public Integer getPageSize() {
    return pageSize;
  }


  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public GetAccountAssetTransactionsRequestParameters firstTxHash(String firstTxHash) {
    
    this.firstTxHash = firstTxHash;
    return this;
  }

   /**
   * Get firstTxHash
   * @return firstTxHash
  **/
  @javax.annotation.Nonnull
  public String getFirstTxHash() {
    return firstTxHash;
  }


  public void setFirstTxHash(String firstTxHash) {
    this.firstTxHash = firstTxHash;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAccountAssetTransactionsRequestParameters getAccountAssetTransactionsRequestParameters = (GetAccountAssetTransactionsRequestParameters) o;
    return Objects.equals(this.accountId, getAccountAssetTransactionsRequestParameters.accountId) &&
        Objects.equals(this.assetId, getAccountAssetTransactionsRequestParameters.assetId) &&
        Objects.equals(this.pageSize, getAccountAssetTransactionsRequestParameters.pageSize) &&
        Objects.equals(this.firstTxHash, getAccountAssetTransactionsRequestParameters.firstTxHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, assetId, pageSize, firstTxHash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAccountAssetTransactionsRequestParameters {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    assetId: ").append(toIndentedString(assetId)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    firstTxHash: ").append(toIndentedString(firstTxHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("assetId");
    openapiFields.add("pageSize");
    openapiFields.add("firstTxHash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountId");
    openapiRequiredFields.add("assetId");
    openapiRequiredFields.add("pageSize");
    openapiRequiredFields.add("firstTxHash");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetAccountAssetTransactionsRequestParameters
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GetAccountAssetTransactionsRequestParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetAccountAssetTransactionsRequestParameters is not found in the empty JSON string", GetAccountAssetTransactionsRequestParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GetAccountAssetTransactionsRequestParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetAccountAssetTransactionsRequestParameters` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetAccountAssetTransactionsRequestParameters.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if (!jsonObj.get("assetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetId").toString()));
      }
      if (!jsonObj.get("firstTxHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstTxHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstTxHash").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetAccountAssetTransactionsRequestParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetAccountAssetTransactionsRequestParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetAccountAssetTransactionsRequestParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetAccountAssetTransactionsRequestParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<GetAccountAssetTransactionsRequestParameters>() {
           @Override
           public void write(JsonWriter out, GetAccountAssetTransactionsRequestParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetAccountAssetTransactionsRequestParameters read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetAccountAssetTransactionsRequestParameters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetAccountAssetTransactionsRequestParameters
  * @throws IOException if the JSON string is invalid with respect to GetAccountAssetTransactionsRequestParameters
  */
  public static GetAccountAssetTransactionsRequestParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetAccountAssetTransactionsRequestParameters.class);
  }

 /**
  * Convert an instance of GetAccountAssetTransactionsRequestParameters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

