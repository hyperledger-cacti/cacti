/*
 * Hyperledger Cactus Plugin - Connector Iroha
 * Can perform basic tasks on a Iroha ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IrohaBlockResponsePayload
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class IrohaBlockResponsePayload {
  public static final String SERIALIZED_NAME_TRANSACTIONS_LIST = "transactionsList";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS_LIST)
  private List<Object> transactionsList = new ArrayList<>();

  public static final String SERIALIZED_NAME_TX_NUMBER = "txNumber";
  @SerializedName(SERIALIZED_NAME_TX_NUMBER)
  private BigDecimal txNumber;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private BigDecimal height;

  public static final String SERIALIZED_NAME_PREV_BLOCK_HASH = "prevBlockHash";
  @SerializedName(SERIALIZED_NAME_PREV_BLOCK_HASH)
  private String prevBlockHash;

  public static final String SERIALIZED_NAME_CREATED_TIME = "createdTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private BigDecimal createdTime;

  public static final String SERIALIZED_NAME_REJECTED_TRANSACTIONS_HASHES_LIST = "rejectedTransactionsHashesList";
  @SerializedName(SERIALIZED_NAME_REJECTED_TRANSACTIONS_HASHES_LIST)
  private List<Object> rejectedTransactionsHashesList = new ArrayList<>();

  public IrohaBlockResponsePayload() {
  }

  public IrohaBlockResponsePayload transactionsList(List<Object> transactionsList) {
    
    this.transactionsList = transactionsList;
    return this;
  }

  public IrohaBlockResponsePayload addTransactionsListItem(Object transactionsListItem) {
    if (this.transactionsList == null) {
      this.transactionsList = new ArrayList<>();
    }
    this.transactionsList.add(transactionsListItem);
    return this;
  }

   /**
   * Get transactionsList
   * @return transactionsList
  **/
  @javax.annotation.Nonnull
  public List<Object> getTransactionsList() {
    return transactionsList;
  }


  public void setTransactionsList(List<Object> transactionsList) {
    this.transactionsList = transactionsList;
  }


  public IrohaBlockResponsePayload txNumber(BigDecimal txNumber) {
    
    this.txNumber = txNumber;
    return this;
  }

   /**
   * Get txNumber
   * @return txNumber
  **/
  @javax.annotation.Nonnull
  public BigDecimal getTxNumber() {
    return txNumber;
  }


  public void setTxNumber(BigDecimal txNumber) {
    this.txNumber = txNumber;
  }


  public IrohaBlockResponsePayload height(BigDecimal height) {
    
    this.height = height;
    return this;
  }

   /**
   * Get height
   * @return height
  **/
  @javax.annotation.Nonnull
  public BigDecimal getHeight() {
    return height;
  }


  public void setHeight(BigDecimal height) {
    this.height = height;
  }


  public IrohaBlockResponsePayload prevBlockHash(String prevBlockHash) {
    
    this.prevBlockHash = prevBlockHash;
    return this;
  }

   /**
   * Get prevBlockHash
   * @return prevBlockHash
  **/
  @javax.annotation.Nonnull
  public String getPrevBlockHash() {
    return prevBlockHash;
  }


  public void setPrevBlockHash(String prevBlockHash) {
    this.prevBlockHash = prevBlockHash;
  }


  public IrohaBlockResponsePayload createdTime(BigDecimal createdTime) {
    
    this.createdTime = createdTime;
    return this;
  }

   /**
   * Get createdTime
   * @return createdTime
  **/
  @javax.annotation.Nonnull
  public BigDecimal getCreatedTime() {
    return createdTime;
  }


  public void setCreatedTime(BigDecimal createdTime) {
    this.createdTime = createdTime;
  }


  public IrohaBlockResponsePayload rejectedTransactionsHashesList(List<Object> rejectedTransactionsHashesList) {
    
    this.rejectedTransactionsHashesList = rejectedTransactionsHashesList;
    return this;
  }

  public IrohaBlockResponsePayload addRejectedTransactionsHashesListItem(Object rejectedTransactionsHashesListItem) {
    if (this.rejectedTransactionsHashesList == null) {
      this.rejectedTransactionsHashesList = new ArrayList<>();
    }
    this.rejectedTransactionsHashesList.add(rejectedTransactionsHashesListItem);
    return this;
  }

   /**
   * Get rejectedTransactionsHashesList
   * @return rejectedTransactionsHashesList
  **/
  @javax.annotation.Nonnull
  public List<Object> getRejectedTransactionsHashesList() {
    return rejectedTransactionsHashesList;
  }


  public void setRejectedTransactionsHashesList(List<Object> rejectedTransactionsHashesList) {
    this.rejectedTransactionsHashesList = rejectedTransactionsHashesList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IrohaBlockResponsePayload irohaBlockResponsePayload = (IrohaBlockResponsePayload) o;
    return Objects.equals(this.transactionsList, irohaBlockResponsePayload.transactionsList) &&
        Objects.equals(this.txNumber, irohaBlockResponsePayload.txNumber) &&
        Objects.equals(this.height, irohaBlockResponsePayload.height) &&
        Objects.equals(this.prevBlockHash, irohaBlockResponsePayload.prevBlockHash) &&
        Objects.equals(this.createdTime, irohaBlockResponsePayload.createdTime) &&
        Objects.equals(this.rejectedTransactionsHashesList, irohaBlockResponsePayload.rejectedTransactionsHashesList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionsList, txNumber, height, prevBlockHash, createdTime, rejectedTransactionsHashesList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IrohaBlockResponsePayload {\n");
    sb.append("    transactionsList: ").append(toIndentedString(transactionsList)).append("\n");
    sb.append("    txNumber: ").append(toIndentedString(txNumber)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    prevBlockHash: ").append(toIndentedString(prevBlockHash)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    rejectedTransactionsHashesList: ").append(toIndentedString(rejectedTransactionsHashesList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transactionsList");
    openapiFields.add("txNumber");
    openapiFields.add("height");
    openapiFields.add("prevBlockHash");
    openapiFields.add("createdTime");
    openapiFields.add("rejectedTransactionsHashesList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("transactionsList");
    openapiRequiredFields.add("txNumber");
    openapiRequiredFields.add("height");
    openapiRequiredFields.add("prevBlockHash");
    openapiRequiredFields.add("createdTime");
    openapiRequiredFields.add("rejectedTransactionsHashesList");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IrohaBlockResponsePayload
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!IrohaBlockResponsePayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IrohaBlockResponsePayload is not found in the empty JSON string", IrohaBlockResponsePayload.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!IrohaBlockResponsePayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IrohaBlockResponsePayload` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IrohaBlockResponsePayload.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("transactionsList") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("transactionsList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionsList` to be an array in the JSON string but got `%s`", jsonObj.get("transactionsList").toString()));
      }
      if (!jsonObj.get("prevBlockHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prevBlockHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prevBlockHash").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("rejectedTransactionsHashesList") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("rejectedTransactionsHashesList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rejectedTransactionsHashesList` to be an array in the JSON string but got `%s`", jsonObj.get("rejectedTransactionsHashesList").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IrohaBlockResponsePayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IrohaBlockResponsePayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IrohaBlockResponsePayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IrohaBlockResponsePayload.class));

       return (TypeAdapter<T>) new TypeAdapter<IrohaBlockResponsePayload>() {
           @Override
           public void write(JsonWriter out, IrohaBlockResponsePayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IrohaBlockResponsePayload read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IrohaBlockResponsePayload given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IrohaBlockResponsePayload
  * @throws IOException if the JSON string is invalid with respect to IrohaBlockResponsePayload
  */
  public static IrohaBlockResponsePayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IrohaBlockResponsePayload.class);
  }

 /**
  * Convert an instance of IrohaBlockResponsePayload to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

