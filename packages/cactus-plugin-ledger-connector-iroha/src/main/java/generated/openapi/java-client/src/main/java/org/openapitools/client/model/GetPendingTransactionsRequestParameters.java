/*
 * Hyperledger Cactus Plugin - Connector Iroha
 * Can perform basic tasks on a Iroha ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The list of arguments to pass in to the transaction request to Get Pending Transactions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GetPendingTransactionsRequestParameters {
  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_FIRST_TX_HASH = "firstTxHash";
  @SerializedName(SERIALIZED_NAME_FIRST_TX_HASH)
  private String firstTxHash;

  public static final String SERIALIZED_NAME_FIRST_TX_TIME = "firstTxTime";
  @SerializedName(SERIALIZED_NAME_FIRST_TX_TIME)
  private Object firstTxTime;

  public static final String SERIALIZED_NAME_LAST_TX_TIME = "lastTxTime";
  @SerializedName(SERIALIZED_NAME_LAST_TX_TIME)
  private Object lastTxTime;

  public GetPendingTransactionsRequestParameters() {
  }

  public GetPendingTransactionsRequestParameters pageSize(Integer pageSize) {
    
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * @return pageSize
  **/
  @javax.annotation.Nonnull
  public Integer getPageSize() {
    return pageSize;
  }


  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public GetPendingTransactionsRequestParameters firstTxHash(String firstTxHash) {
    
    this.firstTxHash = firstTxHash;
    return this;
  }

   /**
   * Get firstTxHash
   * @return firstTxHash
  **/
  @javax.annotation.Nullable
  public String getFirstTxHash() {
    return firstTxHash;
  }


  public void setFirstTxHash(String firstTxHash) {
    this.firstTxHash = firstTxHash;
  }


  public GetPendingTransactionsRequestParameters firstTxTime(Object firstTxTime) {
    
    this.firstTxTime = firstTxTime;
    return this;
  }

   /**
   * Get firstTxTime
   * @return firstTxTime
  **/
  @javax.annotation.Nullable
  public Object getFirstTxTime() {
    return firstTxTime;
  }


  public void setFirstTxTime(Object firstTxTime) {
    this.firstTxTime = firstTxTime;
  }


  public GetPendingTransactionsRequestParameters lastTxTime(Object lastTxTime) {
    
    this.lastTxTime = lastTxTime;
    return this;
  }

   /**
   * Get lastTxTime
   * @return lastTxTime
  **/
  @javax.annotation.Nullable
  public Object getLastTxTime() {
    return lastTxTime;
  }


  public void setLastTxTime(Object lastTxTime) {
    this.lastTxTime = lastTxTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetPendingTransactionsRequestParameters getPendingTransactionsRequestParameters = (GetPendingTransactionsRequestParameters) o;
    return Objects.equals(this.pageSize, getPendingTransactionsRequestParameters.pageSize) &&
        Objects.equals(this.firstTxHash, getPendingTransactionsRequestParameters.firstTxHash) &&
        Objects.equals(this.firstTxTime, getPendingTransactionsRequestParameters.firstTxTime) &&
        Objects.equals(this.lastTxTime, getPendingTransactionsRequestParameters.lastTxTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pageSize, firstTxHash, firstTxTime, lastTxTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetPendingTransactionsRequestParameters {\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    firstTxHash: ").append(toIndentedString(firstTxHash)).append("\n");
    sb.append("    firstTxTime: ").append(toIndentedString(firstTxTime)).append("\n");
    sb.append("    lastTxTime: ").append(toIndentedString(lastTxTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pageSize");
    openapiFields.add("firstTxHash");
    openapiFields.add("firstTxTime");
    openapiFields.add("lastTxTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pageSize");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetPendingTransactionsRequestParameters
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GetPendingTransactionsRequestParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetPendingTransactionsRequestParameters is not found in the empty JSON string", GetPendingTransactionsRequestParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GetPendingTransactionsRequestParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetPendingTransactionsRequestParameters` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetPendingTransactionsRequestParameters.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("firstTxHash") != null && !jsonObj.get("firstTxHash").isJsonNull()) && !jsonObj.get("firstTxHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstTxHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstTxHash").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetPendingTransactionsRequestParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetPendingTransactionsRequestParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetPendingTransactionsRequestParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetPendingTransactionsRequestParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<GetPendingTransactionsRequestParameters>() {
           @Override
           public void write(JsonWriter out, GetPendingTransactionsRequestParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetPendingTransactionsRequestParameters read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetPendingTransactionsRequestParameters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetPendingTransactionsRequestParameters
  * @throws IOException if the JSON string is invalid with respect to GetPendingTransactionsRequestParameters
  */
  public static GetPendingTransactionsRequestParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetPendingTransactionsRequestParameters.class);
  }

 /**
  * Convert an instance of GetPendingTransactionsRequestParameters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

