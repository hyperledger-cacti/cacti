/*
 * Hyperledger Cactus Plugin - Connector Iroha
 * Can perform basic tasks on a Iroha ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The list of arguments to pass in to the transaction request to Add Peer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AddPeerRequestParameters {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_PEER_KEY = "peerKey";
  @SerializedName(SERIALIZED_NAME_PEER_KEY)
  private String peerKey;

  public static final String SERIALIZED_NAME_TLS_CERTIFICATE = "tlsCertificate";
  @SerializedName(SERIALIZED_NAME_TLS_CERTIFICATE)
  private String tlsCertificate;

  public static final String SERIALIZED_NAME_SYNCING_PEER = "syncingPeer";
  @SerializedName(SERIALIZED_NAME_SYNCING_PEER)
  private Boolean syncingPeer;

  public AddPeerRequestParameters() {
  }

  public AddPeerRequestParameters address(String address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nonnull
  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    this.address = address;
  }


  public AddPeerRequestParameters peerKey(String peerKey) {
    
    this.peerKey = peerKey;
    return this;
  }

   /**
   * Get peerKey
   * @return peerKey
  **/
  @javax.annotation.Nonnull
  public String getPeerKey() {
    return peerKey;
  }


  public void setPeerKey(String peerKey) {
    this.peerKey = peerKey;
  }


  public AddPeerRequestParameters tlsCertificate(String tlsCertificate) {
    
    this.tlsCertificate = tlsCertificate;
    return this;
  }

   /**
   * Get tlsCertificate
   * @return tlsCertificate
  **/
  @javax.annotation.Nullable
  public String getTlsCertificate() {
    return tlsCertificate;
  }


  public void setTlsCertificate(String tlsCertificate) {
    this.tlsCertificate = tlsCertificate;
  }


  public AddPeerRequestParameters syncingPeer(Boolean syncingPeer) {
    
    this.syncingPeer = syncingPeer;
    return this;
  }

   /**
   * Get syncingPeer
   * @return syncingPeer
  **/
  @javax.annotation.Nullable
  public Boolean getSyncingPeer() {
    return syncingPeer;
  }


  public void setSyncingPeer(Boolean syncingPeer) {
    this.syncingPeer = syncingPeer;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddPeerRequestParameters addPeerRequestParameters = (AddPeerRequestParameters) o;
    return Objects.equals(this.address, addPeerRequestParameters.address) &&
        Objects.equals(this.peerKey, addPeerRequestParameters.peerKey) &&
        Objects.equals(this.tlsCertificate, addPeerRequestParameters.tlsCertificate) &&
        Objects.equals(this.syncingPeer, addPeerRequestParameters.syncingPeer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, peerKey, tlsCertificate, syncingPeer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddPeerRequestParameters {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    peerKey: ").append(toIndentedString(peerKey)).append("\n");
    sb.append("    tlsCertificate: ").append(toIndentedString(tlsCertificate)).append("\n");
    sb.append("    syncingPeer: ").append(toIndentedString(syncingPeer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("peerKey");
    openapiFields.add("tlsCertificate");
    openapiFields.add("syncingPeer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("peerKey");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AddPeerRequestParameters
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AddPeerRequestParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddPeerRequestParameters is not found in the empty JSON string", AddPeerRequestParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AddPeerRequestParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddPeerRequestParameters` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddPeerRequestParameters.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if (!jsonObj.get("peerKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `peerKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("peerKey").toString()));
      }
      if ((jsonObj.get("tlsCertificate") != null && !jsonObj.get("tlsCertificate").isJsonNull()) && !jsonObj.get("tlsCertificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tlsCertificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tlsCertificate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddPeerRequestParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddPeerRequestParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddPeerRequestParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddPeerRequestParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<AddPeerRequestParameters>() {
           @Override
           public void write(JsonWriter out, AddPeerRequestParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddPeerRequestParameters read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddPeerRequestParameters given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddPeerRequestParameters
  * @throws IOException if the JSON string is invalid with respect to AddPeerRequestParameters
  */
  public static AddPeerRequestParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddPeerRequestParameters.class);
  }

 /**
  * Convert an instance of AddPeerRequestParameters to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

