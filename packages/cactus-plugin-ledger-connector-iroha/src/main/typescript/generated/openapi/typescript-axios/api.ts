/* tslint:disable */
/* eslint-disable */
/**
 * Hyperledger Cactus Plugin - Connector Iroha
 * Can perform basic tasks on a Iroha ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * The list of arguments to pass in to the transaction request to Add Asset Quantity.
 * @export
 * @interface AddAssetQuantityRequestParameters
 */
export interface AddAssetQuantityRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof AddAssetQuantityRequestParameters
     */
    'assetId': string;
    /**
     * 
     * @type {number}
     * @memberof AddAssetQuantityRequestParameters
     */
    'amount': number;
}
/**
 * The list of arguments to pass in to the transaction request to Add Peer.
 * @export
 * @interface AddPeerRequestParameters
 */
export interface AddPeerRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof AddPeerRequestParameters
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof AddPeerRequestParameters
     */
    'peerKey': string;
    /**
     * 
     * @type {string}
     * @memberof AddPeerRequestParameters
     */
    'tlsCertificate'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AddPeerRequestParameters
     */
    'syncingPeer'?: boolean;
}
/**
 * The list of arguments to pass in to the transaction request to Add Signatory.
 * @export
 * @interface AddSignatoryRequestParameters
 */
export interface AddSignatoryRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof AddSignatoryRequestParameters
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof AddSignatoryRequestParameters
     */
    'publicKey': string;
}
/**
 * The list of arguments to pass in to the transaction request to Append Role.
 * @export
 * @interface AppendRoleRequestParameters
 */
export interface AppendRoleRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof AppendRoleRequestParameters
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof AppendRoleRequestParameters
     */
    'roleName': string;
}
/**
 * The list of arguments to pass in to the transaction request to Call Engine.
 * @export
 * @interface CallEngineRequestParameters
 */
export interface CallEngineRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof CallEngineRequestParameters
     */
    'caller': string;
    /**
     * 
     * @type {string}
     * @memberof CallEngineRequestParameters
     */
    'callee': string;
    /**
     * 
     * @type {string}
     * @memberof CallEngineRequestParameters
     */
    'input': string;
}
/**
 * The list of arguments to pass in to the transaction request to Compare And Set Account Detail.
 * @export
 * @interface CompareAndSetAccountDetailRequestParameters
 */
export interface CompareAndSetAccountDetailRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof CompareAndSetAccountDetailRequestParameters
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof CompareAndSetAccountDetailRequestParameters
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof CompareAndSetAccountDetailRequestParameters
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof CompareAndSetAccountDetailRequestParameters
     */
    'oldValue'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CompareAndSetAccountDetailRequestParameters
     */
    'check_empty': boolean;
}
/**
 * The list of arguments to pass in to the transaction request to Create Account.
 * @export
 * @interface CreateAccountRequestParameters
 */
export interface CreateAccountRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof CreateAccountRequestParameters
     */
    'accountName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAccountRequestParameters
     */
    'domainId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAccountRequestParameters
     */
    'publicKey': string;
}
/**
 * The list of arguments to pass in to the transaction request to Create Asset.
 * @export
 * @interface CreateAssetRequestParameters
 */
export interface CreateAssetRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof CreateAssetRequestParameters
     */
    'assetName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAssetRequestParameters
     */
    'domainId': string;
    /**
     * 
     * @type {number}
     * @memberof CreateAssetRequestParameters
     */
    'precision': number;
}
/**
 * The list of arguments to pass in to the transaction request to Create Domain.
 * @export
 * @interface CreateDomainRequestParameters
 */
export interface CreateDomainRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof CreateDomainRequestParameters
     */
    'domainId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateDomainRequestParameters
     */
    'defaultRole': string;
}
/**
 * The list of arguments to pass in to the transaction request to Create Role.
 * @export
 * @interface CreateRoleRequestParameters
 */
export interface CreateRoleRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof CreateRoleRequestParameters
     */
    'roleName': string;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreateRoleRequestParameters
     */
    'permissionsList': Array<number>;
}
/**
 * The list of arguments to pass in to the transaction request to Detach Role.
 * @export
 * @interface DetachRoleRequestParameters
 */
export interface DetachRoleRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof DetachRoleRequestParameters
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof DetachRoleRequestParameters
     */
    'roleName': string;
}
/**
 * 
 * @export
 * @interface ErrorExceptionJsonResponseV1
 */
export interface ErrorExceptionJsonResponseV1 {
    /**
     * 
     * @type {string}
     * @memberof ErrorExceptionJsonResponseV1
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof ErrorExceptionJsonResponseV1
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorExceptionJsonResponseV1
     */
    'error'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorExceptionJsonResponseV1
     */
    'stack'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorExceptionJsonResponseV1
     */
    'cause'?: string;
}
/**
 * 
 * @export
 * @interface ErrorExceptionResponseV1
 */
export interface ErrorExceptionResponseV1 {
    /**
     * 
     * @type {string}
     * @memberof ErrorExceptionResponseV1
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof ErrorExceptionResponseV1
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface GenerateTransactionRequestV1
 */
export interface GenerateTransactionRequestV1 {
    /**
     * Iroha command name.
     * @type {IrohaCommand}
     * @memberof GenerateTransactionRequestV1
     */
    'commandName': IrohaCommand;
    /**
     * Parameters for iroha command specified in commandName
     * @type {object}
     * @memberof GenerateTransactionRequestV1
     */
    'commandParams': object;
    /**
     * Sender account id
     * @type {string}
     * @memberof GenerateTransactionRequestV1
     */
    'creatorAccountId': string;
    /**
     * Requested transaction quorum
     * @type {number}
     * @memberof GenerateTransactionRequestV1
     */
    'quorum'?: number;
}
/**
 * The list of arguments to pass in to the transaction request to Get Account Asset Transactions.
 * @export
 * @interface GetAccountAssetTransactionsRequestParameters
 */
export interface GetAccountAssetTransactionsRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof GetAccountAssetTransactionsRequestParameters
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof GetAccountAssetTransactionsRequestParameters
     */
    'assetId': string;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAssetTransactionsRequestParameters
     */
    'pageSize': number;
    /**
     * 
     * @type {string}
     * @memberof GetAccountAssetTransactionsRequestParameters
     */
    'firstTxHash': string;
}
/**
 * The list of arguments to pass in to the transaction request to Get Account Assets.
 * @export
 * @interface GetAccountAssetsRequestParameters
 */
export interface GetAccountAssetsRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof GetAccountAssetsRequestParameters
     */
    'accountId': string;
    /**
     * 
     * @type {number}
     * @memberof GetAccountAssetsRequestParameters
     */
    'pageSize': number;
    /**
     * 
     * @type {string}
     * @memberof GetAccountAssetsRequestParameters
     */
    'firstAssetId'?: string;
}
/**
 * The list of arguments to pass in to the transaction request to Get Account Detail.
 * @export
 * @interface GetAccountDetailRequestParameters
 */
export interface GetAccountDetailRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof GetAccountDetailRequestParameters
     */
    'accountId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAccountDetailRequestParameters
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetAccountDetailRequestParameters
     */
    'writer'?: string;
    /**
     * 
     * @type {number}
     * @memberof GetAccountDetailRequestParameters
     */
    'pageSize': number;
    /**
     * 
     * @type {string}
     * @memberof GetAccountDetailRequestParameters
     */
    'paginationKey': string;
    /**
     * 
     * @type {string}
     * @memberof GetAccountDetailRequestParameters
     */
    'paginationWriter': string;
}
/**
 * The list of arguments to pass in to the transaction request to Get Account.
 * @export
 * @interface GetAccountRequestParameters
 */
export interface GetAccountRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof GetAccountRequestParameters
     */
    'accountId': string;
}
/**
 * The list of arguments to pass in to the transaction request to Get Account Transactions.
 * @export
 * @interface GetAccountTransactionsRequestParameters
 */
export interface GetAccountTransactionsRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof GetAccountTransactionsRequestParameters
     */
    'accountId': string;
    /**
     * 
     * @type {number}
     * @memberof GetAccountTransactionsRequestParameters
     */
    'pageSize': number;
    /**
     * 
     * @type {string}
     * @memberof GetAccountTransactionsRequestParameters
     */
    'firstTxHash': string;
    /**
     * 
     * @type {object}
     * @memberof GetAccountTransactionsRequestParameters
     */
    'firstTxTime'?: object;
    /**
     * 
     * @type {object}
     * @memberof GetAccountTransactionsRequestParameters
     */
    'lastTxTime'?: object;
    /**
     * 
     * @type {number}
     * @memberof GetAccountTransactionsRequestParameters
     */
    'firstTxHeight'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetAccountTransactionsRequestParameters
     */
    'lastTxHeight'?: number;
}
/**
 * The list of arguments to pass in to the transaction request to Get Asset Info.
 * @export
 * @interface GetAssetInfoRequestParameters
 */
export interface GetAssetInfoRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof GetAssetInfoRequestParameters
     */
    'assetId': string;
}
/**
 * The list of arguments to pass in to the transaction request to Get Block.
 * @export
 * @interface GetBlockRequestParameters
 */
export interface GetBlockRequestParameters {
    /**
     * 
     * @type {number}
     * @memberof GetBlockRequestParameters
     */
    'height': number;
}
/**
 * The list of arguments to pass in to the transaction request to Get Engine Receipts.
 * @export
 * @interface GetEngineReceiptsRequestParameters
 */
export interface GetEngineReceiptsRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof GetEngineReceiptsRequestParameters
     */
    'txHash': string;
}
/**
 * The list of arguments to pass in to the transaction request to Get Pending Transactions.
 * @export
 * @interface GetPendingTransactionsRequestParameters
 */
export interface GetPendingTransactionsRequestParameters {
    /**
     * 
     * @type {number}
     * @memberof GetPendingTransactionsRequestParameters
     */
    'pageSize': number;
    /**
     * 
     * @type {string}
     * @memberof GetPendingTransactionsRequestParameters
     */
    'firstTxHash'?: string;
    /**
     * 
     * @type {object}
     * @memberof GetPendingTransactionsRequestParameters
     */
    'firstTxTime'?: object;
    /**
     * 
     * @type {object}
     * @memberof GetPendingTransactionsRequestParameters
     */
    'lastTxTime'?: object;
}
/**
 * The list of arguments to pass in to the transaction request to Get Role Permissions.
 * @export
 * @interface GetRolePermissionsRequestParameters
 */
export interface GetRolePermissionsRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof GetRolePermissionsRequestParameters
     */
    'roleId': string;
}
/**
 * The list of arguments to pass in to the transaction request to Get Signatories.
 * @export
 * @interface GetSignatoriesRequestParameters
 */
export interface GetSignatoriesRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof GetSignatoriesRequestParameters
     */
    'accountId': string;
}
/**
 * The list of arguments to pass in to the transaction request to Get Transactions.
 * @export
 * @interface GetTransactionsRequestParameters
 */
export interface GetTransactionsRequestParameters {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetTransactionsRequestParameters
     */
    'txHashesList': Array<string>;
}
/**
 * The list of arguments to pass in to the transaction request to Grant Permission.
 * @export
 * @interface GrantPermissionRequestParameters
 */
export interface GrantPermissionRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof GrantPermissionRequestParameters
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof GrantPermissionRequestParameters
     */
    'permission': string;
}
/**
 * 
 * @export
 * @interface IrohaBaseConfig
 */
export interface IrohaBaseConfig {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof IrohaBaseConfig
     */
    'irohaHost'?: string;
    /**
     * 
     * @type {number}
     * @memberof IrohaBaseConfig
     */
    'irohaPort'?: number;
    /**
     * 
     * @type {string}
     * @memberof IrohaBaseConfig
     */
    'creatorAccountId'?: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof IrohaBaseConfig
     */
    'privKey'?: Array<any>;
    /**
     * 
     * @type {number}
     * @memberof IrohaBaseConfig
     */
    'quorum'?: number;
    /**
     * 
     * @type {number}
     * @memberof IrohaBaseConfig
     */
    'timeoutLimit'?: number;
    /**
     * Can only be set to false for an insecure grpc connection.
     * @type {boolean}
     * @memberof IrohaBaseConfig
     */
    'tls'?: boolean;
    /**
     * Flag used for monitoring. It changes default beahviour of transaction wrapper so it return error to caller instead of throwing RuntimeError straight away.
     * @type {boolean}
     * @memberof IrohaBaseConfig
     */
    'monitorMode'?: boolean | null;
}
/**
 * 
 * @export
 * @interface IrohaBlockProgress
 */
export interface IrohaBlockProgress {
    /**
     * 
     * @type {IrohaBlockResponse}
     * @memberof IrohaBlockProgress
     */
    'transactionReceipt': IrohaBlockResponse;
}
/**
 * 
 * @export
 * @interface IrohaBlockResponse
 */
export interface IrohaBlockResponse {
    /**
     * 
     * @type {IrohaBlockResponsePayload}
     * @memberof IrohaBlockResponse
     */
    'payload': IrohaBlockResponsePayload;
    /**
     * 
     * @type {Array<any>}
     * @memberof IrohaBlockResponse
     */
    'signaturesList': Array<any>;
}
/**
 * 
 * @export
 * @interface IrohaBlockResponsePayload
 */
export interface IrohaBlockResponsePayload {
    /**
     * 
     * @type {Array<any>}
     * @memberof IrohaBlockResponsePayload
     */
    'transactionsList': Array<any>;
    /**
     * 
     * @type {number}
     * @memberof IrohaBlockResponsePayload
     */
    'txNumber': number;
    /**
     * 
     * @type {number}
     * @memberof IrohaBlockResponsePayload
     */
    'height': number;
    /**
     * 
     * @type {string}
     * @memberof IrohaBlockResponsePayload
     */
    'prevBlockHash': string;
    /**
     * 
     * @type {number}
     * @memberof IrohaBlockResponsePayload
     */
    'createdTime': number;
    /**
     * 
     * @type {Array<any>}
     * @memberof IrohaBlockResponsePayload
     */
    'rejectedTransactionsHashesList': Array<any>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const IrohaCommand = {
    /**
    * Make entity in the system, capable of sending transactions or queries, storing signatories, personal data and identifiers.
    */
    CreateAccount: 'createAccount',
    /**
    * Set key-value information for a given account.
    */
    SetAccountDetail: 'setAccountDetail',
    /**
    * Set the number of signatories required to confirm the identity of a user, who creates the transaction.
    */
    SetAccountQuorum: 'setAccountQuorum',
    /**
    * Set key-value information for a given account if the old value matches the value passed.
    */
    CompareAndSetAccountDetail: 'compareAndSetAccountDetail',
    /**
    * Create a new type of asset, unique in a domain. An asset is a countable representation of a commodity.
    */
    CreateAsset: 'createAsset',
    /**
    * Increase the quantity of an asset on account of transaction creator.
    */
    AddAssetQuantity: 'addAssetQuantity',
    /**
    * Decrease the number of assets on account of transaction creator.
    */
    SubtractAssetQuantity: 'subtractAssetQuantity',
    /**
    * Share assets within the account in peer network: in the way that source account transfers assets to the target account.
    */
    TransferAsset: 'transferAsset',
    /**
    * Make new domain in Iroha network, which is a group of accounts.
    */
    CreateDomain: 'createDomain',
    /**
    * Create a new role in the system from the set of permissions.
    */
    CreateRole: 'createRole',
    /**
    * Detach a role from the set of roles of an account.
    */
    DetachRole: 'detachRole',
    /**
    * Promote an account to some created role in the system, where a role is a set of permissions account has to perform an action (command or query).
    */
    AppendRole: 'appendRole',
    /**
    * Add an identifier to the account. Such identifier is a public key of another device or a public key of another user.
    */
    AddSignatory: 'addSignatory',
    /**
    * Remove a public key, associated with an identity, from an account
    */
    RemoveSignatory: 'removeSignatory',
    /**
    * Give another account rights to perform actions on the account of transaction sender (give someone right to do something with my account).
    */
    GrantPermission: 'grantPermission',
    /**
    * Revoke or dismiss given granted permission from another account in the network.
    */
    RevokePermission: 'revokePermission',
    /**
    * Write into ledger the fact of peer addition into the peer network.
    */
    AddPeer: 'addPeer',
    /**
    * Write into ledger the fact of peer removal from the network.
    */
    RemovePeer: 'removePeer',
    /**
    * This command is not available for use, it was added for backward compatibility with Iroha.
    */
    SetSettingValue: 'setSettingValue',
    /**
    * This command is not availalbe for use because it is related to smart contract.
    */
    CallEngine: 'callEngine'
} as const;

export type IrohaCommand = typeof IrohaCommand[keyof typeof IrohaCommand];


/**
 * 
 * @export
 * @enum {string}
 */

export const IrohaQuery = {
    /**
    * To get the state of an account
    */
    GetAccount: 'getAccount',
    /**
    * To get details of the account.
    */
    GetAccountDetail: 'getAccountDetail',
    /**
    * To get information on the given asset (as for now - its precision).
    */
    GetAssetInfo: 'getAssetInfo',
    /**
    * To get the state of all assets in an account (a balance).
    */
    GetAccountAssets: 'getAccountAssets',
    /**
    * To retrieve information about transactions, based on their hashes.
    */
    GetTransactions: 'getTransactions',
    /**
    * To retrieve a list of pending (not fully signed) multisignature transactions or batches of transactions issued by account of query creator.
    */
    GetPendingTransactions: 'getPendingTransactions',
    /**
    * To retrieve a list of transactions per account.
    */
    GetAccountTransactions: 'getAccountTransactions',
    /**
    * To retrieve all transactions associated with given account and asset.
    */
    GetAccountAssetTransactions: 'getAccountAssetTransactions',
    /**
    * To get existing roles in the system.
    */
    GetRoles: 'getRoles',
    /**
    * To get signatories, which act as an identity of the account.
    */
    GetSignatories: 'getSignatories',
    /**
    * To get available permissions per role in the system.
    */
    GetRolePermissions: 'getRolePermissions',
    /**
    * To get a specific block, using its height as an identifier.
    */
    GetBlock: 'getBlock',
    /**
    * To retrieve a receipt of a CallEngine command. Allows to access the event log created during computations inside the EVM.
    */
    GetEngineReceipts: 'getEngineReceipts',
    /**
    * To get new blocks as soon as they are committed, a user can invoke FetchCommits RPC call to Iroha network.
    */
    FetchCommits: 'fetchCommits',
    /**
    * A query that returns a list of peers in Iroha network.
    */
    GetPeers: 'getPeers'
} as const;

export type IrohaQuery = typeof IrohaQuery[keyof typeof IrohaQuery];


/**
 * 
 * @export
 * @enum {string}
 */

export const IrohaSocketIOTransactV1 = {
    SendAsyncRequest: 'org.hyperledger.cactus.api.async.iroha.IrohaSocketIOTransactV1.SendAsyncRequest',
    SendSyncRequest: 'org.hyperledger.cactus.api.async.iroha.IrohaSocketIOTransactV1.SendSyncRequest'
} as const;

export type IrohaSocketIOTransactV1 = typeof IrohaSocketIOTransactV1[keyof typeof IrohaSocketIOTransactV1];


/**
 * 
 * @export
 * @interface KeyPair
 */
export interface KeyPair {
    /**
     * SHA-3 ed25519 public keys of length 64 are recommended.
     * @type {string}
     * @memberof KeyPair
     */
    'publicKey': string;
    /**
     * SHA-3 ed25519 private keys of length 64 are recommended.
     * @type {string}
     * @memberof KeyPair
     */
    'privateKey': string;
}
/**
 * The list of arguments to pass in to the transaction request to Remove Peer.
 * @export
 * @interface RemovePeerRequestParameters
 */
export interface RemovePeerRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof RemovePeerRequestParameters
     */
    'publicKey': string;
}
/**
 * The list of arguments to pass in to the transaction request to Remove Signatory.
 * @export
 * @interface RemoveSignatoryRequestParameters
 */
export interface RemoveSignatoryRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof RemoveSignatoryRequestParameters
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof RemoveSignatoryRequestParameters
     */
    'publicKey': string;
}
/**
 * The list of arguments to pass in to the transaction request to Revoke Permission.
 * @export
 * @interface RevokePermissionRequestParameters
 */
export interface RevokePermissionRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof RevokePermissionRequestParameters
     */
    'accountId': string;
    /**
     * 
     * @type {number}
     * @memberof RevokePermissionRequestParameters
     */
    'permission': number;
}
/**
 * 
 * @export
 * @interface RunTransactionRequestV1
 */
export interface RunTransactionRequestV1 {
    /**
     * 
     * @type {string}
     * @memberof RunTransactionRequestV1
     */
    'commandName': string;
    /**
     * 
     * @type {IrohaBaseConfig}
     * @memberof RunTransactionRequestV1
     */
    'baseConfig': IrohaBaseConfig;
    /**
     * 
     * @type {RunTransactionRequestV1Params}
     * @memberof RunTransactionRequestV1
     */
    'params': RunTransactionRequestV1Params;
}
/**
 * @type RunTransactionRequestV1Body
 * @export
 */
export type RunTransactionRequestV1Body = RunTransactionRequestV1 | RunTransactionSignedRequestV1;

/**
 * @type RunTransactionRequestV1Params
 * @export
 */
export type RunTransactionRequestV1Params = AddAssetQuantityRequestParameters | AddPeerRequestParameters | AddSignatoryRequestParameters | AppendRoleRequestParameters | Array<any> | CallEngineRequestParameters | CompareAndSetAccountDetailRequestParameters | CreateAccountRequestParameters | CreateAssetRequestParameters | CreateDomainRequestParameters | CreateRoleRequestParameters | DetachRoleRequestParameters | GetAccountAssetTransactionsRequestParameters | GetAccountAssetsRequestParameters | GetAccountDetailRequestParameters | GetAccountRequestParameters | GetAccountTransactionsRequestParameters | GetAssetInfoRequestParameters | GetBlockRequestParameters | GetEngineReceiptsRequestParameters | GetPendingTransactionsRequestParameters | GetRolePermissionsRequestParameters | GetSignatoriesRequestParameters | GetTransactionsRequestParameters | GrantPermissionRequestParameters | RemovePeerRequestParameters | RemoveSignatoryRequestParameters | RevokePermissionRequestParameters | SetAccountDetailRequestParameters | SetAccountQuorumRequestParameters | SubtractAssetQuantityRequestParameters | TransferAssetRequestParameters;

/**
 * 
 * @export
 * @interface RunTransactionResponse
 */
export interface RunTransactionResponse {
    /**
     * 
     * @type {any}
     * @memberof RunTransactionResponse
     */
    'transactionReceipt': any;
}
/**
 * 
 * @export
 * @interface RunTransactionSignedRequestV1
 */
export interface RunTransactionSignedRequestV1 {
    /**
     * Signed transaction binary data received from generate-transaction endpoint.
     * @type {string}
     * @memberof RunTransactionSignedRequestV1
     */
    'signedTransaction': string;
    /**
     * 
     * @type {IrohaBaseConfig}
     * @memberof RunTransactionSignedRequestV1
     */
    'baseConfig'?: IrohaBaseConfig;
}
/**
 * The list of arguments to pass in to the transaction request to Set Account Detail.
 * @export
 * @interface SetAccountDetailRequestParameters
 */
export interface SetAccountDetailRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof SetAccountDetailRequestParameters
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof SetAccountDetailRequestParameters
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof SetAccountDetailRequestParameters
     */
    'value': string;
}
/**
 * The list of arguments to pass in to the transaction request to Set Account Quorum.
 * @export
 * @interface SetAccountQuorumRequestParameters
 */
export interface SetAccountQuorumRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof SetAccountQuorumRequestParameters
     */
    'accountId': string;
    /**
     * 
     * @type {number}
     * @memberof SetAccountQuorumRequestParameters
     */
    'quorum': number;
}
/**
 * The list of arguments to pass in to the transaction request to Subtract Asset Quantity.
 * @export
 * @interface SubtractAssetQuantityRequestParameters
 */
export interface SubtractAssetQuantityRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof SubtractAssetQuantityRequestParameters
     */
    'assetId': string;
    /**
     * 
     * @type {number}
     * @memberof SubtractAssetQuantityRequestParameters
     */
    'amount': number;
}
/**
 * The list of arguments to pass in to the transaction request to Transfer Asset.
 * @export
 * @interface TransferAssetRequestParameters
 */
export interface TransferAssetRequestParameters {
    /**
     * 
     * @type {string}
     * @memberof TransferAssetRequestParameters
     */
    'srcAccountId': string;
    /**
     * 
     * @type {string}
     * @memberof TransferAssetRequestParameters
     */
    'destAccountId': string;
    /**
     * 
     * @type {string}
     * @memberof TransferAssetRequestParameters
     */
    'assetId': string;
    /**
     * 
     * @type {string}
     * @memberof TransferAssetRequestParameters
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof TransferAssetRequestParameters
     */
    'amount': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const WatchBlocksV1 = {
    Subscribe: 'org.hyperledger.cactus.api.async.iroha.WatchBlocksV1.Subscribe',
    Next: 'org.hyperledger.cactus.api.async.iroha.WatchBlocksV1.Next',
    Unsubscribe: 'org.hyperledger.cactus.api.async.iroha.WatchBlocksV1.Unsubscribe',
    Error: 'org.hyperledger.cactus.api.async.iroha.WatchBlocksV1.Error',
    Complete: 'org.hyperledger.cactus.api.async.iroha.WatchBlocksV1.Complete'
} as const;

export type WatchBlocksV1 = typeof WatchBlocksV1[keyof typeof WatchBlocksV1];



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Generate transaction that can be signed locally.
         * @param {GenerateTransactionRequestV1} [generateTransactionRequestV1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateTransactionV1: async (generateTransactionRequestV1?: GenerateTransactionRequestV1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-iroha/generate-transaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(generateTransactionRequestV1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the Prometheus Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrometheusMetricsV1: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-iroha/get-prometheus-exporter-metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Executes a transaction on a Iroha ledger
         * @param {RunTransactionRequestV1Body} [runTransactionRequestV1Body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runTransactionV1: async (runTransactionRequestV1Body?: RunTransactionRequestV1Body, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-iroha/run-transaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(runTransactionRequestV1Body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Generate transaction that can be signed locally.
         * @param {GenerateTransactionRequestV1} [generateTransactionRequestV1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateTransactionV1(generateTransactionRequestV1?: GenerateTransactionRequestV1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateTransactionV1(generateTransactionRequestV1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the Prometheus Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrometheusMetricsV1(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrometheusMetricsV1(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Executes a transaction on a Iroha ledger
         * @param {RunTransactionRequestV1Body} [runTransactionRequestV1Body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runTransactionV1(runTransactionRequestV1Body?: RunTransactionRequestV1Body, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunTransactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runTransactionV1(runTransactionRequestV1Body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Generate transaction that can be signed locally.
         * @param {GenerateTransactionRequestV1} [generateTransactionRequestV1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateTransactionV1(generateTransactionRequestV1?: GenerateTransactionRequestV1, options?: any): AxiosPromise<string> {
            return localVarFp.generateTransactionV1(generateTransactionRequestV1, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the Prometheus Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrometheusMetricsV1(options?: any): AxiosPromise<string> {
            return localVarFp.getPrometheusMetricsV1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Executes a transaction on a Iroha ledger
         * @param {RunTransactionRequestV1Body} [runTransactionRequestV1Body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runTransactionV1(runTransactionRequestV1Body?: RunTransactionRequestV1Body, options?: any): AxiosPromise<RunTransactionResponse> {
            return localVarFp.runTransactionV1(runTransactionRequestV1Body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Generate transaction that can be signed locally.
     * @param {GenerateTransactionRequestV1} [generateTransactionRequestV1] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public generateTransactionV1(generateTransactionRequestV1?: GenerateTransactionRequestV1, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).generateTransactionV1(generateTransactionRequestV1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the Prometheus Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPrometheusMetricsV1(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPrometheusMetricsV1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Executes a transaction on a Iroha ledger
     * @param {RunTransactionRequestV1Body} [runTransactionRequestV1Body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public runTransactionV1(runTransactionRequestV1Body?: RunTransactionRequestV1Body, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).runTransactionV1(runTransactionRequestV1Body, options).then((request) => request(this.axios, this.basePath));
    }
}


