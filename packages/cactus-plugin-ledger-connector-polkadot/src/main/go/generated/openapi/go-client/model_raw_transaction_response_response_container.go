/*
Hyperledger Cactus Plugin - Connector Polkadot

Can perform basic tasks on a Polkadot parachain

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-polkadot

import (
	"encoding/json"
)

// checks if the RawTransactionResponseResponseContainer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RawTransactionResponseResponseContainer{}

// RawTransactionResponseResponseContainer struct for RawTransactionResponseResponseContainer
type RawTransactionResponseResponseContainer struct {
	ResponseData RawTransactionResponseData `json:"response_data"`
	Succeeded bool `json:"succeeded"`
	Message string `json:"message"`
	Error NullableString `json:"error"`
}

// NewRawTransactionResponseResponseContainer instantiates a new RawTransactionResponseResponseContainer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRawTransactionResponseResponseContainer(responseData RawTransactionResponseData, succeeded bool, message string, error_ NullableString) *RawTransactionResponseResponseContainer {
	this := RawTransactionResponseResponseContainer{}
	this.ResponseData = responseData
	this.Succeeded = succeeded
	this.Message = message
	this.Error = error_
	return &this
}

// NewRawTransactionResponseResponseContainerWithDefaults instantiates a new RawTransactionResponseResponseContainer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRawTransactionResponseResponseContainerWithDefaults() *RawTransactionResponseResponseContainer {
	this := RawTransactionResponseResponseContainer{}
	return &this
}

// GetResponseData returns the ResponseData field value
func (o *RawTransactionResponseResponseContainer) GetResponseData() RawTransactionResponseData {
	if o == nil {
		var ret RawTransactionResponseData
		return ret
	}

	return o.ResponseData
}

// GetResponseDataOk returns a tuple with the ResponseData field value
// and a boolean to check if the value has been set.
func (o *RawTransactionResponseResponseContainer) GetResponseDataOk() (*RawTransactionResponseData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResponseData, true
}

// SetResponseData sets field value
func (o *RawTransactionResponseResponseContainer) SetResponseData(v RawTransactionResponseData) {
	o.ResponseData = v
}

// GetSucceeded returns the Succeeded field value
func (o *RawTransactionResponseResponseContainer) GetSucceeded() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Succeeded
}

// GetSucceededOk returns a tuple with the Succeeded field value
// and a boolean to check if the value has been set.
func (o *RawTransactionResponseResponseContainer) GetSucceededOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Succeeded, true
}

// SetSucceeded sets field value
func (o *RawTransactionResponseResponseContainer) SetSucceeded(v bool) {
	o.Succeeded = v
}

// GetMessage returns the Message field value
func (o *RawTransactionResponseResponseContainer) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *RawTransactionResponseResponseContainer) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *RawTransactionResponseResponseContainer) SetMessage(v string) {
	o.Message = v
}

// GetError returns the Error field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RawTransactionResponseResponseContainer) GetError() string {
	if o == nil || o.Error.Get() == nil {
		var ret string
		return ret
	}

	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawTransactionResponseResponseContainer) GetErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// SetError sets field value
func (o *RawTransactionResponseResponseContainer) SetError(v string) {
	o.Error.Set(&v)
}

func (o RawTransactionResponseResponseContainer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RawTransactionResponseResponseContainer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["response_data"] = o.ResponseData
	toSerialize["succeeded"] = o.Succeeded
	toSerialize["message"] = o.Message
	toSerialize["error"] = o.Error.Get()
	return toSerialize, nil
}

type NullableRawTransactionResponseResponseContainer struct {
	value *RawTransactionResponseResponseContainer
	isSet bool
}

func (v NullableRawTransactionResponseResponseContainer) Get() *RawTransactionResponseResponseContainer {
	return v.value
}

func (v *NullableRawTransactionResponseResponseContainer) Set(val *RawTransactionResponseResponseContainer) {
	v.value = val
	v.isSet = true
}

func (v NullableRawTransactionResponseResponseContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableRawTransactionResponseResponseContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawTransactionResponseResponseContainer(val *RawTransactionResponseResponseContainer) *NullableRawTransactionResponseResponseContainer {
	return &NullableRawTransactionResponseResponseContainer{value: val, isSet: true}
}

func (v NullableRawTransactionResponseResponseContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawTransactionResponseResponseContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


