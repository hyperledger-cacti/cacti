/*
Hyperledger Cactus Plugin - Connector Polkadot

Can perform basic tasks on a Polkadot parachain

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-polkadot

import (
	"encoding/json"
)

// checks if the RawTransactionResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RawTransactionResponseData{}

// RawTransactionResponseData struct for RawTransactionResponseData
type RawTransactionResponseData struct {
	RawTransaction string `json:"rawTransaction"`
}

// NewRawTransactionResponseData instantiates a new RawTransactionResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRawTransactionResponseData(rawTransaction string) *RawTransactionResponseData {
	this := RawTransactionResponseData{}
	this.RawTransaction = rawTransaction
	return &this
}

// NewRawTransactionResponseDataWithDefaults instantiates a new RawTransactionResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRawTransactionResponseDataWithDefaults() *RawTransactionResponseData {
	this := RawTransactionResponseData{}
	return &this
}

// GetRawTransaction returns the RawTransaction field value
func (o *RawTransactionResponseData) GetRawTransaction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RawTransaction
}

// GetRawTransactionOk returns a tuple with the RawTransaction field value
// and a boolean to check if the value has been set.
func (o *RawTransactionResponseData) GetRawTransactionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RawTransaction, true
}

// SetRawTransaction sets field value
func (o *RawTransactionResponseData) SetRawTransaction(v string) {
	o.RawTransaction = v
}

func (o RawTransactionResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RawTransactionResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rawTransaction"] = o.RawTransaction
	return toSerialize, nil
}

type NullableRawTransactionResponseData struct {
	value *RawTransactionResponseData
	isSet bool
}

func (v NullableRawTransactionResponseData) Get() *RawTransactionResponseData {
	return v.value
}

func (v *NullableRawTransactionResponseData) Set(val *RawTransactionResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableRawTransactionResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableRawTransactionResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawTransactionResponseData(val *RawTransactionResponseData) *NullableRawTransactionResponseData {
	return &NullableRawTransactionResponseData{value: val, isSet: true}
}

func (v NullableRawTransactionResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawTransactionResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


