/*
Hyperledger Cacti Plugin - Connector Aries

Can communicate with other Aries agents and Cacti Aries connectors

API version: 2.0.0-rc.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-aries

import (
	"encoding/json"
)

// checks if the CactiProofRequestAttributeV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CactiProofRequestAttributeV1{}

// CactiProofRequestAttributeV1 Credential attribute checks to be performed by a proof request.
type CactiProofRequestAttributeV1 struct {
	// Attribute name.
	Name string `json:"name"`
	// Check if attribute has specified value
	IsValueEqual interface{} `json:"isValueEqual,omitempty"`
	// Check if credentialDefinitionId has specified value
	IsCredentialDefinitionIdEqual interface{} `json:"isCredentialDefinitionIdEqual,omitempty"`
}

// NewCactiProofRequestAttributeV1 instantiates a new CactiProofRequestAttributeV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCactiProofRequestAttributeV1(name string) *CactiProofRequestAttributeV1 {
	this := CactiProofRequestAttributeV1{}
	this.Name = name
	return &this
}

// NewCactiProofRequestAttributeV1WithDefaults instantiates a new CactiProofRequestAttributeV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCactiProofRequestAttributeV1WithDefaults() *CactiProofRequestAttributeV1 {
	this := CactiProofRequestAttributeV1{}
	return &this
}

// GetName returns the Name field value
func (o *CactiProofRequestAttributeV1) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CactiProofRequestAttributeV1) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CactiProofRequestAttributeV1) SetName(v string) {
	o.Name = v
}

// GetIsValueEqual returns the IsValueEqual field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CactiProofRequestAttributeV1) GetIsValueEqual() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.IsValueEqual
}

// GetIsValueEqualOk returns a tuple with the IsValueEqual field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CactiProofRequestAttributeV1) GetIsValueEqualOk() (*interface{}, bool) {
	if o == nil || IsNil(o.IsValueEqual) {
		return nil, false
	}
	return &o.IsValueEqual, true
}

// HasIsValueEqual returns a boolean if a field has been set.
func (o *CactiProofRequestAttributeV1) HasIsValueEqual() bool {
	if o != nil && IsNil(o.IsValueEqual) {
		return true
	}

	return false
}

// SetIsValueEqual gets a reference to the given interface{} and assigns it to the IsValueEqual field.
func (o *CactiProofRequestAttributeV1) SetIsValueEqual(v interface{}) {
	o.IsValueEqual = v
}

// GetIsCredentialDefinitionIdEqual returns the IsCredentialDefinitionIdEqual field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CactiProofRequestAttributeV1) GetIsCredentialDefinitionIdEqual() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.IsCredentialDefinitionIdEqual
}

// GetIsCredentialDefinitionIdEqualOk returns a tuple with the IsCredentialDefinitionIdEqual field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CactiProofRequestAttributeV1) GetIsCredentialDefinitionIdEqualOk() (*interface{}, bool) {
	if o == nil || IsNil(o.IsCredentialDefinitionIdEqual) {
		return nil, false
	}
	return &o.IsCredentialDefinitionIdEqual, true
}

// HasIsCredentialDefinitionIdEqual returns a boolean if a field has been set.
func (o *CactiProofRequestAttributeV1) HasIsCredentialDefinitionIdEqual() bool {
	if o != nil && IsNil(o.IsCredentialDefinitionIdEqual) {
		return true
	}

	return false
}

// SetIsCredentialDefinitionIdEqual gets a reference to the given interface{} and assigns it to the IsCredentialDefinitionIdEqual field.
func (o *CactiProofRequestAttributeV1) SetIsCredentialDefinitionIdEqual(v interface{}) {
	o.IsCredentialDefinitionIdEqual = v
}

func (o CactiProofRequestAttributeV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CactiProofRequestAttributeV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if o.IsValueEqual != nil {
		toSerialize["isValueEqual"] = o.IsValueEqual
	}
	if o.IsCredentialDefinitionIdEqual != nil {
		toSerialize["isCredentialDefinitionIdEqual"] = o.IsCredentialDefinitionIdEqual
	}
	return toSerialize, nil
}

type NullableCactiProofRequestAttributeV1 struct {
	value *CactiProofRequestAttributeV1
	isSet bool
}

func (v NullableCactiProofRequestAttributeV1) Get() *CactiProofRequestAttributeV1 {
	return v.value
}

func (v *NullableCactiProofRequestAttributeV1) Set(val *CactiProofRequestAttributeV1) {
	v.value = val
	v.isSet = true
}

func (v NullableCactiProofRequestAttributeV1) IsSet() bool {
	return v.isSet
}

func (v *NullableCactiProofRequestAttributeV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCactiProofRequestAttributeV1(val *CactiProofRequestAttributeV1) *NullableCactiProofRequestAttributeV1 {
	return &NullableCactiProofRequestAttributeV1{value: val, isSet: true}
}

func (v NullableCactiProofRequestAttributeV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCactiProofRequestAttributeV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


