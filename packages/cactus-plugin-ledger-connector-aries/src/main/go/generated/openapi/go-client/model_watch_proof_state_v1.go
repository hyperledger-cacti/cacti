/*
Hyperledger Cacti Plugin - Connector Aries

Can communicate with other Aries agents and Cacti Aries connectors

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-aries

import (
	"encoding/json"
	"fmt"
)

// WatchProofStateV1 Websocket requests for monitoring proof state change events.
type WatchProofStateV1 string

// List of WatchProofStateV1
const (
	Subscribe WatchProofStateV1 = "org.hyperledger.cactus.api.async.hlaries.WatchProofStateV1.Subscribe"
	Next WatchProofStateV1 = "org.hyperledger.cactus.api.async.hlaries.WatchProofStateV1.Next"
	Unsubscribe WatchProofStateV1 = "org.hyperledger.cactus.api.async.hlaries.WatchProofStateV1.Unsubscribe"
	Error WatchProofStateV1 = "org.hyperledger.cactus.api.async.hlaries.WatchProofStateV1.Error"
	Complete WatchProofStateV1 = "org.hyperledger.cactus.api.async.hlaries.WatchProofStateV1.Complete"
)

// All allowed values of WatchProofStateV1 enum
var AllowedWatchProofStateV1EnumValues = []WatchProofStateV1{
	"org.hyperledger.cactus.api.async.hlaries.WatchProofStateV1.Subscribe",
	"org.hyperledger.cactus.api.async.hlaries.WatchProofStateV1.Next",
	"org.hyperledger.cactus.api.async.hlaries.WatchProofStateV1.Unsubscribe",
	"org.hyperledger.cactus.api.async.hlaries.WatchProofStateV1.Error",
	"org.hyperledger.cactus.api.async.hlaries.WatchProofStateV1.Complete",
}

func (v *WatchProofStateV1) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WatchProofStateV1(value)
	for _, existing := range AllowedWatchProofStateV1EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WatchProofStateV1", value)
}

// NewWatchProofStateV1FromValue returns a pointer to a valid WatchProofStateV1
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWatchProofStateV1FromValue(v string) (*WatchProofStateV1, error) {
	ev := WatchProofStateV1(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WatchProofStateV1: valid values are %v", v, AllowedWatchProofStateV1EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WatchProofStateV1) IsValid() bool {
	for _, existing := range AllowedWatchProofStateV1EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WatchProofStateV1 value
func (v WatchProofStateV1) Ptr() *WatchProofStateV1 {
	return &v
}

type NullableWatchProofStateV1 struct {
	value *WatchProofStateV1
	isSet bool
}

func (v NullableWatchProofStateV1) Get() *WatchProofStateV1 {
	return v.value
}

func (v *NullableWatchProofStateV1) Set(val *WatchProofStateV1) {
	v.value = val
	v.isSet = true
}

func (v NullableWatchProofStateV1) IsSet() bool {
	return v.isSet
}

func (v *NullableWatchProofStateV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWatchProofStateV1(val *WatchProofStateV1) *NullableWatchProofStateV1 {
	return &NullableWatchProofStateV1{value: val, isSet: true}
}

func (v NullableWatchProofStateV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWatchProofStateV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

