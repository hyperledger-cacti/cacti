/*
Hyperledger Cactus Plugin - Connector Fabric

Can perform basic tasks on a fabric ledger

API version: 2.0.0-rc.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-fabric

import (
	"encoding/json"
)

// checks if the GetBlockRequestV1QueryBlockHash type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetBlockRequestV1QueryBlockHash{}

// GetBlockRequestV1QueryBlockHash Select block by it's hash.
type GetBlockRequestV1QueryBlockHash struct {
	// NodeJS Buffer encoding (utf-8, hex, binary, base64, etc...). Passed directly to `Buffer.from()` call on hashBuffer. If not provided then JSON buffer format is assumed.
	Encoding *string `json:"encoding,omitempty"`
	// Buffer of blockHash. It's encoding should be described in `encoding` parameter.
	Buffer string `json:"buffer"`
}

// NewGetBlockRequestV1QueryBlockHash instantiates a new GetBlockRequestV1QueryBlockHash object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetBlockRequestV1QueryBlockHash(buffer string) *GetBlockRequestV1QueryBlockHash {
	this := GetBlockRequestV1QueryBlockHash{}
	this.Buffer = buffer
	return &this
}

// NewGetBlockRequestV1QueryBlockHashWithDefaults instantiates a new GetBlockRequestV1QueryBlockHash object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetBlockRequestV1QueryBlockHashWithDefaults() *GetBlockRequestV1QueryBlockHash {
	this := GetBlockRequestV1QueryBlockHash{}
	return &this
}

// GetEncoding returns the Encoding field value if set, zero value otherwise.
func (o *GetBlockRequestV1QueryBlockHash) GetEncoding() string {
	if o == nil || IsNil(o.Encoding) {
		var ret string
		return ret
	}
	return *o.Encoding
}

// GetEncodingOk returns a tuple with the Encoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetBlockRequestV1QueryBlockHash) GetEncodingOk() (*string, bool) {
	if o == nil || IsNil(o.Encoding) {
		return nil, false
	}
	return o.Encoding, true
}

// HasEncoding returns a boolean if a field has been set.
func (o *GetBlockRequestV1QueryBlockHash) HasEncoding() bool {
	if o != nil && !IsNil(o.Encoding) {
		return true
	}

	return false
}

// SetEncoding gets a reference to the given string and assigns it to the Encoding field.
func (o *GetBlockRequestV1QueryBlockHash) SetEncoding(v string) {
	o.Encoding = &v
}

// GetBuffer returns the Buffer field value
func (o *GetBlockRequestV1QueryBlockHash) GetBuffer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Buffer
}

// GetBufferOk returns a tuple with the Buffer field value
// and a boolean to check if the value has been set.
func (o *GetBlockRequestV1QueryBlockHash) GetBufferOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Buffer, true
}

// SetBuffer sets field value
func (o *GetBlockRequestV1QueryBlockHash) SetBuffer(v string) {
	o.Buffer = v
}

func (o GetBlockRequestV1QueryBlockHash) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetBlockRequestV1QueryBlockHash) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Encoding) {
		toSerialize["encoding"] = o.Encoding
	}
	toSerialize["buffer"] = o.Buffer
	return toSerialize, nil
}

type NullableGetBlockRequestV1QueryBlockHash struct {
	value *GetBlockRequestV1QueryBlockHash
	isSet bool
}

func (v NullableGetBlockRequestV1QueryBlockHash) Get() *GetBlockRequestV1QueryBlockHash {
	return v.value
}

func (v *NullableGetBlockRequestV1QueryBlockHash) Set(val *GetBlockRequestV1QueryBlockHash) {
	v.value = val
	v.isSet = true
}

func (v NullableGetBlockRequestV1QueryBlockHash) IsSet() bool {
	return v.isSet
}

func (v *NullableGetBlockRequestV1QueryBlockHash) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetBlockRequestV1QueryBlockHash(val *GetBlockRequestV1QueryBlockHash) *NullableGetBlockRequestV1QueryBlockHash {
	return &NullableGetBlockRequestV1QueryBlockHash{value: val, isSet: true}
}

func (v NullableGetBlockRequestV1QueryBlockHash) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetBlockRequestV1QueryBlockHash) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


