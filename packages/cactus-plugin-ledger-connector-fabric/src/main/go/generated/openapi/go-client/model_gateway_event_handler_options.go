/*
Hyperledger Cactus Plugin - Connector Fabric

Can perform basic tasks on a fabric ledger

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-fabric

import (
	"encoding/json"
)

// checks if the GatewayEventHandlerOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GatewayEventHandlerOptions{}

// GatewayEventHandlerOptions struct for GatewayEventHandlerOptions
type GatewayEventHandlerOptions struct {
	CommitTimeout *float32 `json:"commitTimeout,omitempty"`
	EndorseTimeout *float32 `json:"endorseTimeout,omitempty"`
	Strategy DefaultEventHandlerStrategy `json:"strategy"`
}

// NewGatewayEventHandlerOptions instantiates a new GatewayEventHandlerOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGatewayEventHandlerOptions(strategy DefaultEventHandlerStrategy) *GatewayEventHandlerOptions {
	this := GatewayEventHandlerOptions{}
	this.Strategy = strategy
	return &this
}

// NewGatewayEventHandlerOptionsWithDefaults instantiates a new GatewayEventHandlerOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGatewayEventHandlerOptionsWithDefaults() *GatewayEventHandlerOptions {
	this := GatewayEventHandlerOptions{}
	return &this
}

// GetCommitTimeout returns the CommitTimeout field value if set, zero value otherwise.
func (o *GatewayEventHandlerOptions) GetCommitTimeout() float32 {
	if o == nil || IsNil(o.CommitTimeout) {
		var ret float32
		return ret
	}
	return *o.CommitTimeout
}

// GetCommitTimeoutOk returns a tuple with the CommitTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatewayEventHandlerOptions) GetCommitTimeoutOk() (*float32, bool) {
	if o == nil || IsNil(o.CommitTimeout) {
		return nil, false
	}
	return o.CommitTimeout, true
}

// HasCommitTimeout returns a boolean if a field has been set.
func (o *GatewayEventHandlerOptions) HasCommitTimeout() bool {
	if o != nil && !IsNil(o.CommitTimeout) {
		return true
	}

	return false
}

// SetCommitTimeout gets a reference to the given float32 and assigns it to the CommitTimeout field.
func (o *GatewayEventHandlerOptions) SetCommitTimeout(v float32) {
	o.CommitTimeout = &v
}

// GetEndorseTimeout returns the EndorseTimeout field value if set, zero value otherwise.
func (o *GatewayEventHandlerOptions) GetEndorseTimeout() float32 {
	if o == nil || IsNil(o.EndorseTimeout) {
		var ret float32
		return ret
	}
	return *o.EndorseTimeout
}

// GetEndorseTimeoutOk returns a tuple with the EndorseTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatewayEventHandlerOptions) GetEndorseTimeoutOk() (*float32, bool) {
	if o == nil || IsNil(o.EndorseTimeout) {
		return nil, false
	}
	return o.EndorseTimeout, true
}

// HasEndorseTimeout returns a boolean if a field has been set.
func (o *GatewayEventHandlerOptions) HasEndorseTimeout() bool {
	if o != nil && !IsNil(o.EndorseTimeout) {
		return true
	}

	return false
}

// SetEndorseTimeout gets a reference to the given float32 and assigns it to the EndorseTimeout field.
func (o *GatewayEventHandlerOptions) SetEndorseTimeout(v float32) {
	o.EndorseTimeout = &v
}

// GetStrategy returns the Strategy field value
func (o *GatewayEventHandlerOptions) GetStrategy() DefaultEventHandlerStrategy {
	if o == nil {
		var ret DefaultEventHandlerStrategy
		return ret
	}

	return o.Strategy
}

// GetStrategyOk returns a tuple with the Strategy field value
// and a boolean to check if the value has been set.
func (o *GatewayEventHandlerOptions) GetStrategyOk() (*DefaultEventHandlerStrategy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Strategy, true
}

// SetStrategy sets field value
func (o *GatewayEventHandlerOptions) SetStrategy(v DefaultEventHandlerStrategy) {
	o.Strategy = v
}

func (o GatewayEventHandlerOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GatewayEventHandlerOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommitTimeout) {
		toSerialize["commitTimeout"] = o.CommitTimeout
	}
	if !IsNil(o.EndorseTimeout) {
		toSerialize["endorseTimeout"] = o.EndorseTimeout
	}
	toSerialize["strategy"] = o.Strategy
	return toSerialize, nil
}

type NullableGatewayEventHandlerOptions struct {
	value *GatewayEventHandlerOptions
	isSet bool
}

func (v NullableGatewayEventHandlerOptions) Get() *GatewayEventHandlerOptions {
	return v.value
}

func (v *NullableGatewayEventHandlerOptions) Set(val *GatewayEventHandlerOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableGatewayEventHandlerOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableGatewayEventHandlerOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGatewayEventHandlerOptions(val *GatewayEventHandlerOptions) *NullableGatewayEventHandlerOptions {
	return &NullableGatewayEventHandlerOptions{value: val, isSet: true}
}

func (v NullableGatewayEventHandlerOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGatewayEventHandlerOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


