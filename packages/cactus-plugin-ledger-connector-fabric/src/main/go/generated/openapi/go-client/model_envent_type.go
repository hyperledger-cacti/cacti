/*
Hyperledger Cactus Plugin - Connector Fabric

Can perform basic tasks on a fabric ledger

API version: 2.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-fabric

import (
	"encoding/json"
	"fmt"
)

// EnventType Type of event to listen supported by Hyperledger Fabric
type EnventType string

// List of EnventType
const (
	CONTRACT EnventType = "Contract"
	BLOCK EnventType = "Block"
	COMMIT EnventType = "Commit"
)

// All allowed values of EnventType enum
var AllowedEnventTypeEnumValues = []EnventType{
	"Contract",
	"Block",
	"Commit",
}

func (v *EnventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnventType(value)
	for _, existing := range AllowedEnventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnventType", value)
}

// NewEnventTypeFromValue returns a pointer to a valid EnventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnventTypeFromValue(v string) (*EnventType, error) {
	ev := EnventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnventType: valid values are %v", v, AllowedEnventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnventType) IsValid() bool {
	for _, existing := range AllowedEnventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnventType value
func (v EnventType) Ptr() *EnventType {
	return &v
}

type NullableEnventType struct {
	value *EnventType
	isSet bool
}

func (v NullableEnventType) Get() *EnventType {
	return v.value
}

func (v *NullableEnventType) Set(val *EnventType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnventType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnventType(val *EnventType) *NullableEnventType {
	return &NullableEnventType{value: val, isSet: true}
}

func (v NullableEnventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

