/*
Hyperledger Cactus Plugin - Connector Fabric

Can perform basic tasks on a fabric ledger

API version: 2.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-fabric

import (
	"encoding/json"
)

// checks if the Endorsement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Endorsement{}

// Endorsement struct for Endorsement
type Endorsement struct {
	Endorser *string `json:"endorser,omitempty"`
	Signature *string `json:"signature,omitempty"`
}

// NewEndorsement instantiates a new Endorsement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndorsement() *Endorsement {
	this := Endorsement{}
	return &this
}

// NewEndorsementWithDefaults instantiates a new Endorsement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndorsementWithDefaults() *Endorsement {
	this := Endorsement{}
	return &this
}

// GetEndorser returns the Endorser field value if set, zero value otherwise.
func (o *Endorsement) GetEndorser() string {
	if o == nil || IsNil(o.Endorser) {
		var ret string
		return ret
	}
	return *o.Endorser
}

// GetEndorserOk returns a tuple with the Endorser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Endorsement) GetEndorserOk() (*string, bool) {
	if o == nil || IsNil(o.Endorser) {
		return nil, false
	}
	return o.Endorser, true
}

// HasEndorser returns a boolean if a field has been set.
func (o *Endorsement) HasEndorser() bool {
	if o != nil && !IsNil(o.Endorser) {
		return true
	}

	return false
}

// SetEndorser gets a reference to the given string and assigns it to the Endorser field.
func (o *Endorsement) SetEndorser(v string) {
	o.Endorser = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *Endorsement) GetSignature() string {
	if o == nil || IsNil(o.Signature) {
		var ret string
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Endorsement) GetSignatureOk() (*string, bool) {
	if o == nil || IsNil(o.Signature) {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *Endorsement) HasSignature() bool {
	if o != nil && !IsNil(o.Signature) {
		return true
	}

	return false
}

// SetSignature gets a reference to the given string and assigns it to the Signature field.
func (o *Endorsement) SetSignature(v string) {
	o.Signature = &v
}

func (o Endorsement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Endorsement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Endorser) {
		toSerialize["endorser"] = o.Endorser
	}
	if !IsNil(o.Signature) {
		toSerialize["signature"] = o.Signature
	}
	return toSerialize, nil
}

type NullableEndorsement struct {
	value *Endorsement
	isSet bool
}

func (v NullableEndorsement) Get() *Endorsement {
	return v.value
}

func (v *NullableEndorsement) Set(val *Endorsement) {
	v.value = val
	v.isSet = true
}

func (v NullableEndorsement) IsSet() bool {
	return v.isSet
}

func (v *NullableEndorsement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndorsement(val *Endorsement) *NullableEndorsement {
	return &NullableEndorsement{value: val, isSet: true}
}

func (v NullableEndorsement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndorsement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


