/*
Hyperledger Cactus Plugin - Connector Fabric

Can perform basic tasks on a fabric ledger

API version: 2.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-fabric

import (
	"encoding/json"
)

// checks if the EndorsedProposalResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EndorsedProposalResponse{}

// EndorsedProposalResponse struct for EndorsedProposalResponse
type EndorsedProposalResponse struct {
	Payload *ProposalResponsePayload `json:"payload,omitempty"`
	Endorsement *Endorsement `json:"endorsement,omitempty"`
}

// NewEndorsedProposalResponse instantiates a new EndorsedProposalResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndorsedProposalResponse() *EndorsedProposalResponse {
	this := EndorsedProposalResponse{}
	return &this
}

// NewEndorsedProposalResponseWithDefaults instantiates a new EndorsedProposalResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndorsedProposalResponseWithDefaults() *EndorsedProposalResponse {
	this := EndorsedProposalResponse{}
	return &this
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *EndorsedProposalResponse) GetPayload() ProposalResponsePayload {
	if o == nil || IsNil(o.Payload) {
		var ret ProposalResponsePayload
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndorsedProposalResponse) GetPayloadOk() (*ProposalResponsePayload, bool) {
	if o == nil || IsNil(o.Payload) {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *EndorsedProposalResponse) HasPayload() bool {
	if o != nil && !IsNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given ProposalResponsePayload and assigns it to the Payload field.
func (o *EndorsedProposalResponse) SetPayload(v ProposalResponsePayload) {
	o.Payload = &v
}

// GetEndorsement returns the Endorsement field value if set, zero value otherwise.
func (o *EndorsedProposalResponse) GetEndorsement() Endorsement {
	if o == nil || IsNil(o.Endorsement) {
		var ret Endorsement
		return ret
	}
	return *o.Endorsement
}

// GetEndorsementOk returns a tuple with the Endorsement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndorsedProposalResponse) GetEndorsementOk() (*Endorsement, bool) {
	if o == nil || IsNil(o.Endorsement) {
		return nil, false
	}
	return o.Endorsement, true
}

// HasEndorsement returns a boolean if a field has been set.
func (o *EndorsedProposalResponse) HasEndorsement() bool {
	if o != nil && !IsNil(o.Endorsement) {
		return true
	}

	return false
}

// SetEndorsement gets a reference to the given Endorsement and assigns it to the Endorsement field.
func (o *EndorsedProposalResponse) SetEndorsement(v Endorsement) {
	o.Endorsement = &v
}

func (o EndorsedProposalResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EndorsedProposalResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}
	if !IsNil(o.Endorsement) {
		toSerialize["endorsement"] = o.Endorsement
	}
	return toSerialize, nil
}

type NullableEndorsedProposalResponse struct {
	value *EndorsedProposalResponse
	isSet bool
}

func (v NullableEndorsedProposalResponse) Get() *EndorsedProposalResponse {
	return v.value
}

func (v *NullableEndorsedProposalResponse) Set(val *EndorsedProposalResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEndorsedProposalResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEndorsedProposalResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndorsedProposalResponse(val *EndorsedProposalResponse) *NullableEndorsedProposalResponse {
	return &NullableEndorsedProposalResponse{value: val, isSet: true}
}

func (v NullableEndorsedProposalResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndorsedProposalResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


