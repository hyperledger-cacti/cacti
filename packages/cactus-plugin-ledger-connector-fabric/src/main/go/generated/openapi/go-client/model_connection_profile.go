/*
Hyperledger Cactus Plugin - Connector Fabric

Can perform basic tasks on a fabric ledger

API version: 2.0.0-rc.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-fabric

import (
	"encoding/json"
)

// checks if the ConnectionProfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionProfile{}

// ConnectionProfile struct for ConnectionProfile
type ConnectionProfile struct {
	Name string `json:"name"`
	XType *string `json:"x-type,omitempty"`
	Description *string `json:"description,omitempty"`
	Version string `json:"version"`
	Client *ConnectionProfileClient `json:"client,omitempty"`
	Channels map[string]interface{} `json:"channels,omitempty"`
	Organizations map[string]interface{} `json:"organizations"`
	Orderers map[string]interface{} `json:"orderers,omitempty"`
	Peers map[string]interface{} `json:"peers"`
	CertificateAuthorities map[string]interface{} `json:"certificateAuthorities,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ConnectionProfile ConnectionProfile

// NewConnectionProfile instantiates a new ConnectionProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionProfile(name string, version string, organizations map[string]interface{}, peers map[string]interface{}) *ConnectionProfile {
	this := ConnectionProfile{}
	this.Name = name
	this.Version = version
	this.Organizations = organizations
	this.Peers = peers
	return &this
}

// NewConnectionProfileWithDefaults instantiates a new ConnectionProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionProfileWithDefaults() *ConnectionProfile {
	this := ConnectionProfile{}
	return &this
}

// GetName returns the Name field value
func (o *ConnectionProfile) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConnectionProfile) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConnectionProfile) SetName(v string) {
	o.Name = v
}

// GetXType returns the XType field value if set, zero value otherwise.
func (o *ConnectionProfile) GetXType() string {
	if o == nil || IsNil(o.XType) {
		var ret string
		return ret
	}
	return *o.XType
}

// GetXTypeOk returns a tuple with the XType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionProfile) GetXTypeOk() (*string, bool) {
	if o == nil || IsNil(o.XType) {
		return nil, false
	}
	return o.XType, true
}

// HasXType returns a boolean if a field has been set.
func (o *ConnectionProfile) HasXType() bool {
	if o != nil && !IsNil(o.XType) {
		return true
	}

	return false
}

// SetXType gets a reference to the given string and assigns it to the XType field.
func (o *ConnectionProfile) SetXType(v string) {
	o.XType = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ConnectionProfile) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionProfile) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ConnectionProfile) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ConnectionProfile) SetDescription(v string) {
	o.Description = &v
}

// GetVersion returns the Version field value
func (o *ConnectionProfile) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ConnectionProfile) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ConnectionProfile) SetVersion(v string) {
	o.Version = v
}

// GetClient returns the Client field value if set, zero value otherwise.
func (o *ConnectionProfile) GetClient() ConnectionProfileClient {
	if o == nil || IsNil(o.Client) {
		var ret ConnectionProfileClient
		return ret
	}
	return *o.Client
}

// GetClientOk returns a tuple with the Client field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionProfile) GetClientOk() (*ConnectionProfileClient, bool) {
	if o == nil || IsNil(o.Client) {
		return nil, false
	}
	return o.Client, true
}

// HasClient returns a boolean if a field has been set.
func (o *ConnectionProfile) HasClient() bool {
	if o != nil && !IsNil(o.Client) {
		return true
	}

	return false
}

// SetClient gets a reference to the given ConnectionProfileClient and assigns it to the Client field.
func (o *ConnectionProfile) SetClient(v ConnectionProfileClient) {
	o.Client = &v
}

// GetChannels returns the Channels field value if set, zero value otherwise.
func (o *ConnectionProfile) GetChannels() map[string]interface{} {
	if o == nil || IsNil(o.Channels) {
		var ret map[string]interface{}
		return ret
	}
	return o.Channels
}

// GetChannelsOk returns a tuple with the Channels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionProfile) GetChannelsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Channels) {
		return map[string]interface{}{}, false
	}
	return o.Channels, true
}

// HasChannels returns a boolean if a field has been set.
func (o *ConnectionProfile) HasChannels() bool {
	if o != nil && !IsNil(o.Channels) {
		return true
	}

	return false
}

// SetChannels gets a reference to the given map[string]interface{} and assigns it to the Channels field.
func (o *ConnectionProfile) SetChannels(v map[string]interface{}) {
	o.Channels = v
}

// GetOrganizations returns the Organizations field value
func (o *ConnectionProfile) GetOrganizations() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Organizations
}

// GetOrganizationsOk returns a tuple with the Organizations field value
// and a boolean to check if the value has been set.
func (o *ConnectionProfile) GetOrganizationsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Organizations, true
}

// SetOrganizations sets field value
func (o *ConnectionProfile) SetOrganizations(v map[string]interface{}) {
	o.Organizations = v
}

// GetOrderers returns the Orderers field value if set, zero value otherwise.
func (o *ConnectionProfile) GetOrderers() map[string]interface{} {
	if o == nil || IsNil(o.Orderers) {
		var ret map[string]interface{}
		return ret
	}
	return o.Orderers
}

// GetOrderersOk returns a tuple with the Orderers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionProfile) GetOrderersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Orderers) {
		return map[string]interface{}{}, false
	}
	return o.Orderers, true
}

// HasOrderers returns a boolean if a field has been set.
func (o *ConnectionProfile) HasOrderers() bool {
	if o != nil && !IsNil(o.Orderers) {
		return true
	}

	return false
}

// SetOrderers gets a reference to the given map[string]interface{} and assigns it to the Orderers field.
func (o *ConnectionProfile) SetOrderers(v map[string]interface{}) {
	o.Orderers = v
}

// GetPeers returns the Peers field value
func (o *ConnectionProfile) GetPeers() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Peers
}

// GetPeersOk returns a tuple with the Peers field value
// and a boolean to check if the value has been set.
func (o *ConnectionProfile) GetPeersOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Peers, true
}

// SetPeers sets field value
func (o *ConnectionProfile) SetPeers(v map[string]interface{}) {
	o.Peers = v
}

// GetCertificateAuthorities returns the CertificateAuthorities field value if set, zero value otherwise.
func (o *ConnectionProfile) GetCertificateAuthorities() map[string]interface{} {
	if o == nil || IsNil(o.CertificateAuthorities) {
		var ret map[string]interface{}
		return ret
	}
	return o.CertificateAuthorities
}

// GetCertificateAuthoritiesOk returns a tuple with the CertificateAuthorities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionProfile) GetCertificateAuthoritiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CertificateAuthorities) {
		return map[string]interface{}{}, false
	}
	return o.CertificateAuthorities, true
}

// HasCertificateAuthorities returns a boolean if a field has been set.
func (o *ConnectionProfile) HasCertificateAuthorities() bool {
	if o != nil && !IsNil(o.CertificateAuthorities) {
		return true
	}

	return false
}

// SetCertificateAuthorities gets a reference to the given map[string]interface{} and assigns it to the CertificateAuthorities field.
func (o *ConnectionProfile) SetCertificateAuthorities(v map[string]interface{}) {
	o.CertificateAuthorities = v
}

func (o ConnectionProfile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.XType) {
		toSerialize["x-type"] = o.XType
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["version"] = o.Version
	if !IsNil(o.Client) {
		toSerialize["client"] = o.Client
	}
	if !IsNil(o.Channels) {
		toSerialize["channels"] = o.Channels
	}
	toSerialize["organizations"] = o.Organizations
	if !IsNil(o.Orderers) {
		toSerialize["orderers"] = o.Orderers
	}
	toSerialize["peers"] = o.Peers
	if !IsNil(o.CertificateAuthorities) {
		toSerialize["certificateAuthorities"] = o.CertificateAuthorities
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConnectionProfile) UnmarshalJSON(bytes []byte) (err error) {
	varConnectionProfile := _ConnectionProfile{}

	if err = json.Unmarshal(bytes, &varConnectionProfile); err == nil {
		*o = ConnectionProfile(varConnectionProfile)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "x-type")
		delete(additionalProperties, "description")
		delete(additionalProperties, "version")
		delete(additionalProperties, "client")
		delete(additionalProperties, "channels")
		delete(additionalProperties, "organizations")
		delete(additionalProperties, "orderers")
		delete(additionalProperties, "peers")
		delete(additionalProperties, "certificateAuthorities")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConnectionProfile struct {
	value *ConnectionProfile
	isSet bool
}

func (v NullableConnectionProfile) Get() *ConnectionProfile {
	return v.value
}

func (v *NullableConnectionProfile) Set(val *ConnectionProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionProfile(val *ConnectionProfile) *NullableConnectionProfile {
	return &NullableConnectionProfile{value: val, isSet: true}
}

func (v NullableConnectionProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


