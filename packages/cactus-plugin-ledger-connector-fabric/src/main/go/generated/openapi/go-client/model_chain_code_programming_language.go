/*
Hyperledger Cactus Plugin - Connector Fabric

Can perform basic tasks on a fabric ledger

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-fabric

import (
	"encoding/json"
	"fmt"
)

// ChainCodeProgrammingLanguage Enumerates the supported source code programming languages of Hyperledger Fabric
type ChainCodeProgrammingLanguage string

// List of ChainCodeProgrammingLanguage
const (
	GOLANG ChainCodeProgrammingLanguage = "golang"
	JAVASCRIPT ChainCodeProgrammingLanguage = "javascript"
	TYPESCRIPT ChainCodeProgrammingLanguage = "typescript"
	JAVA ChainCodeProgrammingLanguage = "java"
)

// All allowed values of ChainCodeProgrammingLanguage enum
var AllowedChainCodeProgrammingLanguageEnumValues = []ChainCodeProgrammingLanguage{
	"golang",
	"javascript",
	"typescript",
	"java",
}

func (v *ChainCodeProgrammingLanguage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChainCodeProgrammingLanguage(value)
	for _, existing := range AllowedChainCodeProgrammingLanguageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChainCodeProgrammingLanguage", value)
}

// NewChainCodeProgrammingLanguageFromValue returns a pointer to a valid ChainCodeProgrammingLanguage
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChainCodeProgrammingLanguageFromValue(v string) (*ChainCodeProgrammingLanguage, error) {
	ev := ChainCodeProgrammingLanguage(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChainCodeProgrammingLanguage: valid values are %v", v, AllowedChainCodeProgrammingLanguageEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChainCodeProgrammingLanguage) IsValid() bool {
	for _, existing := range AllowedChainCodeProgrammingLanguageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChainCodeProgrammingLanguage value
func (v ChainCodeProgrammingLanguage) Ptr() *ChainCodeProgrammingLanguage {
	return &v
}

type NullableChainCodeProgrammingLanguage struct {
	value *ChainCodeProgrammingLanguage
	isSet bool
}

func (v NullableChainCodeProgrammingLanguage) Get() *ChainCodeProgrammingLanguage {
	return v.value
}

func (v *NullableChainCodeProgrammingLanguage) Set(val *ChainCodeProgrammingLanguage) {
	v.value = val
	v.isSet = true
}

func (v NullableChainCodeProgrammingLanguage) IsSet() bool {
	return v.isSet
}

func (v *NullableChainCodeProgrammingLanguage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChainCodeProgrammingLanguage(val *ChainCodeProgrammingLanguage) *NullableChainCodeProgrammingLanguage {
	return &NullableChainCodeProgrammingLanguage{value: val, isSet: true}
}

func (v NullableChainCodeProgrammingLanguage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChainCodeProgrammingLanguage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

