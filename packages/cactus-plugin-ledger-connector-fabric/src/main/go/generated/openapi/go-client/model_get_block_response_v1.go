/*
Hyperledger Cactus Plugin - Connector Fabric

Can perform basic tasks on a fabric ledger

API version: 2.0.0-rc.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-fabric

import (
	"encoding/json"
	"fmt"
)

// GetBlockResponseV1 - Response from GetBlock endpoint.
type GetBlockResponseV1 struct {
	CactiBlockFullResponseV1 *CactiBlockFullResponseV1
	CactiBlockTransactionsResponseV1 *CactiBlockTransactionsResponseV1
	GetBlockResponseDecodedV1 *GetBlockResponseDecodedV1
	GetBlockResponseEncodedV1 *GetBlockResponseEncodedV1
}

// CactiBlockFullResponseV1AsGetBlockResponseV1 is a convenience function that returns CactiBlockFullResponseV1 wrapped in GetBlockResponseV1
func CactiBlockFullResponseV1AsGetBlockResponseV1(v *CactiBlockFullResponseV1) GetBlockResponseV1 {
	return GetBlockResponseV1{
		CactiBlockFullResponseV1: v,
	}
}

// CactiBlockTransactionsResponseV1AsGetBlockResponseV1 is a convenience function that returns CactiBlockTransactionsResponseV1 wrapped in GetBlockResponseV1
func CactiBlockTransactionsResponseV1AsGetBlockResponseV1(v *CactiBlockTransactionsResponseV1) GetBlockResponseV1 {
	return GetBlockResponseV1{
		CactiBlockTransactionsResponseV1: v,
	}
}

// GetBlockResponseDecodedV1AsGetBlockResponseV1 is a convenience function that returns GetBlockResponseDecodedV1 wrapped in GetBlockResponseV1
func GetBlockResponseDecodedV1AsGetBlockResponseV1(v *GetBlockResponseDecodedV1) GetBlockResponseV1 {
	return GetBlockResponseV1{
		GetBlockResponseDecodedV1: v,
	}
}

// GetBlockResponseEncodedV1AsGetBlockResponseV1 is a convenience function that returns GetBlockResponseEncodedV1 wrapped in GetBlockResponseV1
func GetBlockResponseEncodedV1AsGetBlockResponseV1(v *GetBlockResponseEncodedV1) GetBlockResponseV1 {
	return GetBlockResponseV1{
		GetBlockResponseEncodedV1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetBlockResponseV1) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CactiBlockFullResponseV1
	err = newStrictDecoder(data).Decode(&dst.CactiBlockFullResponseV1)
	if err == nil {
		jsonCactiBlockFullResponseV1, _ := json.Marshal(dst.CactiBlockFullResponseV1)
		if string(jsonCactiBlockFullResponseV1) == "{}" { // empty struct
			dst.CactiBlockFullResponseV1 = nil
		} else {
			match++
		}
	} else {
		dst.CactiBlockFullResponseV1 = nil
	}

	// try to unmarshal data into CactiBlockTransactionsResponseV1
	err = newStrictDecoder(data).Decode(&dst.CactiBlockTransactionsResponseV1)
	if err == nil {
		jsonCactiBlockTransactionsResponseV1, _ := json.Marshal(dst.CactiBlockTransactionsResponseV1)
		if string(jsonCactiBlockTransactionsResponseV1) == "{}" { // empty struct
			dst.CactiBlockTransactionsResponseV1 = nil
		} else {
			match++
		}
	} else {
		dst.CactiBlockTransactionsResponseV1 = nil
	}

	// try to unmarshal data into GetBlockResponseDecodedV1
	err = newStrictDecoder(data).Decode(&dst.GetBlockResponseDecodedV1)
	if err == nil {
		jsonGetBlockResponseDecodedV1, _ := json.Marshal(dst.GetBlockResponseDecodedV1)
		if string(jsonGetBlockResponseDecodedV1) == "{}" { // empty struct
			dst.GetBlockResponseDecodedV1 = nil
		} else {
			match++
		}
	} else {
		dst.GetBlockResponseDecodedV1 = nil
	}

	// try to unmarshal data into GetBlockResponseEncodedV1
	err = newStrictDecoder(data).Decode(&dst.GetBlockResponseEncodedV1)
	if err == nil {
		jsonGetBlockResponseEncodedV1, _ := json.Marshal(dst.GetBlockResponseEncodedV1)
		if string(jsonGetBlockResponseEncodedV1) == "{}" { // empty struct
			dst.GetBlockResponseEncodedV1 = nil
		} else {
			match++
		}
	} else {
		dst.GetBlockResponseEncodedV1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CactiBlockFullResponseV1 = nil
		dst.CactiBlockTransactionsResponseV1 = nil
		dst.GetBlockResponseDecodedV1 = nil
		dst.GetBlockResponseEncodedV1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetBlockResponseV1)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetBlockResponseV1)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetBlockResponseV1) MarshalJSON() ([]byte, error) {
	if src.CactiBlockFullResponseV1 != nil {
		return json.Marshal(&src.CactiBlockFullResponseV1)
	}

	if src.CactiBlockTransactionsResponseV1 != nil {
		return json.Marshal(&src.CactiBlockTransactionsResponseV1)
	}

	if src.GetBlockResponseDecodedV1 != nil {
		return json.Marshal(&src.GetBlockResponseDecodedV1)
	}

	if src.GetBlockResponseEncodedV1 != nil {
		return json.Marshal(&src.GetBlockResponseEncodedV1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetBlockResponseV1) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CactiBlockFullResponseV1 != nil {
		return obj.CactiBlockFullResponseV1
	}

	if obj.CactiBlockTransactionsResponseV1 != nil {
		return obj.CactiBlockTransactionsResponseV1
	}

	if obj.GetBlockResponseDecodedV1 != nil {
		return obj.GetBlockResponseDecodedV1
	}

	if obj.GetBlockResponseEncodedV1 != nil {
		return obj.GetBlockResponseEncodedV1
	}

	// all schemas are nil
	return nil
}

type NullableGetBlockResponseV1 struct {
	value *GetBlockResponseV1
	isSet bool
}

func (v NullableGetBlockResponseV1) Get() *GetBlockResponseV1 {
	return v.value
}

func (v *NullableGetBlockResponseV1) Set(val *GetBlockResponseV1) {
	v.value = val
	v.isSet = true
}

func (v NullableGetBlockResponseV1) IsSet() bool {
	return v.isSet
}

func (v *NullableGetBlockResponseV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetBlockResponseV1(val *GetBlockResponseV1) *NullableGetBlockResponseV1 {
	return &NullableGetBlockResponseV1{value: val, isSet: true}
}

func (v NullableGetBlockResponseV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetBlockResponseV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


