/*
Hyperledger Cactus Plugin - Connector Fabric

Can perform basic tasks on a fabric ledger

API version: 2.0.0-rc.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-fabric

import (
	"encoding/json"
	"fmt"
)

// WatchBlocksListenerTypeV1 Response type from WatchBlocks. 'Cacti*' are custom views, others correspond to fabric SDK call.
type WatchBlocksListenerTypeV1 string

// List of WatchBlocksListenerTypeV1
const (
	Filtered WatchBlocksListenerTypeV1 = "filtered"
	Full WatchBlocksListenerTypeV1 = "full"
	Private WatchBlocksListenerTypeV1 = "private"
	CactiTransactions WatchBlocksListenerTypeV1 = "cacti:transactions"
	CactiFullBlock WatchBlocksListenerTypeV1 = "cacti:full-block"
)

// All allowed values of WatchBlocksListenerTypeV1 enum
var AllowedWatchBlocksListenerTypeV1EnumValues = []WatchBlocksListenerTypeV1{
	"filtered",
	"full",
	"private",
	"cacti:transactions",
	"cacti:full-block",
}

func (v *WatchBlocksListenerTypeV1) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WatchBlocksListenerTypeV1(value)
	for _, existing := range AllowedWatchBlocksListenerTypeV1EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WatchBlocksListenerTypeV1", value)
}

// NewWatchBlocksListenerTypeV1FromValue returns a pointer to a valid WatchBlocksListenerTypeV1
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWatchBlocksListenerTypeV1FromValue(v string) (*WatchBlocksListenerTypeV1, error) {
	ev := WatchBlocksListenerTypeV1(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WatchBlocksListenerTypeV1: valid values are %v", v, AllowedWatchBlocksListenerTypeV1EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WatchBlocksListenerTypeV1) IsValid() bool {
	for _, existing := range AllowedWatchBlocksListenerTypeV1EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WatchBlocksListenerTypeV1 value
func (v WatchBlocksListenerTypeV1) Ptr() *WatchBlocksListenerTypeV1 {
	return &v
}

type NullableWatchBlocksListenerTypeV1 struct {
	value *WatchBlocksListenerTypeV1
	isSet bool
}

func (v NullableWatchBlocksListenerTypeV1) Get() *WatchBlocksListenerTypeV1 {
	return v.value
}

func (v *NullableWatchBlocksListenerTypeV1) Set(val *WatchBlocksListenerTypeV1) {
	v.value = val
	v.isSet = true
}

func (v NullableWatchBlocksListenerTypeV1) IsSet() bool {
	return v.isSet
}

func (v *NullableWatchBlocksListenerTypeV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWatchBlocksListenerTypeV1(val *WatchBlocksListenerTypeV1) *NullableWatchBlocksListenerTypeV1 {
	return &NullableWatchBlocksListenerTypeV1{value: val, isSet: true}
}

func (v NullableWatchBlocksListenerTypeV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWatchBlocksListenerTypeV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

