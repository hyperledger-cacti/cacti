/*
 * Hyperledger Cactus Plugin - Connector Fabric
 * Can perform basic tasks on a fabric ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ConnectionProfileClient;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConnectionProfile
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ConnectionProfile {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_X_TYPE = "x-type";
  @SerializedName(SERIALIZED_NAME_X_TYPE)
  private String xType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_CLIENT = "client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  private ConnectionProfileClient client;

  public static final String SERIALIZED_NAME_CHANNELS = "channels";
  @SerializedName(SERIALIZED_NAME_CHANNELS)
  private Map<String, Object> channels = new HashMap<>();

  public static final String SERIALIZED_NAME_ORGANIZATIONS = "organizations";
  @SerializedName(SERIALIZED_NAME_ORGANIZATIONS)
  private Map<String, Object> organizations = new HashMap<>();

  public static final String SERIALIZED_NAME_ORDERERS = "orderers";
  @SerializedName(SERIALIZED_NAME_ORDERERS)
  private Map<String, Object> orderers = new HashMap<>();

  public static final String SERIALIZED_NAME_PEERS = "peers";
  @SerializedName(SERIALIZED_NAME_PEERS)
  private Map<String, Object> peers = new HashMap<>();

  public static final String SERIALIZED_NAME_CERTIFICATE_AUTHORITIES = "certificateAuthorities";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_AUTHORITIES)
  private Map<String, Object> certificateAuthorities = new HashMap<>();

  public ConnectionProfile() {
  }

  public ConnectionProfile name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public ConnectionProfile xType(String xType) {
    
    this.xType = xType;
    return this;
  }

   /**
   * Get xType
   * @return xType
  **/
  @javax.annotation.Nullable
  public String getxType() {
    return xType;
  }


  public void setxType(String xType) {
    this.xType = xType;
  }


  public ConnectionProfile description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public ConnectionProfile version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  public ConnectionProfile client(ConnectionProfileClient client) {
    
    this.client = client;
    return this;
  }

   /**
   * Get client
   * @return client
  **/
  @javax.annotation.Nullable
  public ConnectionProfileClient getClient() {
    return client;
  }


  public void setClient(ConnectionProfileClient client) {
    this.client = client;
  }


  public ConnectionProfile channels(Map<String, Object> channels) {
    
    this.channels = channels;
    return this;
  }

  public ConnectionProfile putChannelsItem(String key, Object channelsItem) {
    if (this.channels == null) {
      this.channels = new HashMap<>();
    }
    this.channels.put(key, channelsItem);
    return this;
  }

   /**
   * Get channels
   * @return channels
  **/
  @javax.annotation.Nullable
  public Map<String, Object> getChannels() {
    return channels;
  }


  public void setChannels(Map<String, Object> channels) {
    this.channels = channels;
  }


  public ConnectionProfile organizations(Map<String, Object> organizations) {
    
    this.organizations = organizations;
    return this;
  }

  public ConnectionProfile putOrganizationsItem(String key, Object organizationsItem) {
    if (this.organizations == null) {
      this.organizations = new HashMap<>();
    }
    this.organizations.put(key, organizationsItem);
    return this;
  }

   /**
   * Get organizations
   * @return organizations
  **/
  @javax.annotation.Nonnull
  public Map<String, Object> getOrganizations() {
    return organizations;
  }


  public void setOrganizations(Map<String, Object> organizations) {
    this.organizations = organizations;
  }


  public ConnectionProfile orderers(Map<String, Object> orderers) {
    
    this.orderers = orderers;
    return this;
  }

  public ConnectionProfile putOrderersItem(String key, Object orderersItem) {
    if (this.orderers == null) {
      this.orderers = new HashMap<>();
    }
    this.orderers.put(key, orderersItem);
    return this;
  }

   /**
   * Get orderers
   * @return orderers
  **/
  @javax.annotation.Nullable
  public Map<String, Object> getOrderers() {
    return orderers;
  }


  public void setOrderers(Map<String, Object> orderers) {
    this.orderers = orderers;
  }


  public ConnectionProfile peers(Map<String, Object> peers) {
    
    this.peers = peers;
    return this;
  }

  public ConnectionProfile putPeersItem(String key, Object peersItem) {
    if (this.peers == null) {
      this.peers = new HashMap<>();
    }
    this.peers.put(key, peersItem);
    return this;
  }

   /**
   * Get peers
   * @return peers
  **/
  @javax.annotation.Nonnull
  public Map<String, Object> getPeers() {
    return peers;
  }


  public void setPeers(Map<String, Object> peers) {
    this.peers = peers;
  }


  public ConnectionProfile certificateAuthorities(Map<String, Object> certificateAuthorities) {
    
    this.certificateAuthorities = certificateAuthorities;
    return this;
  }

  public ConnectionProfile putCertificateAuthoritiesItem(String key, Object certificateAuthoritiesItem) {
    if (this.certificateAuthorities == null) {
      this.certificateAuthorities = new HashMap<>();
    }
    this.certificateAuthorities.put(key, certificateAuthoritiesItem);
    return this;
  }

   /**
   * Get certificateAuthorities
   * @return certificateAuthorities
  **/
  @javax.annotation.Nullable
  public Map<String, Object> getCertificateAuthorities() {
    return certificateAuthorities;
  }


  public void setCertificateAuthorities(Map<String, Object> certificateAuthorities) {
    this.certificateAuthorities = certificateAuthorities;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ConnectionProfile instance itself
   */
  public ConnectionProfile putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectionProfile connectionProfile = (ConnectionProfile) o;
    return Objects.equals(this.name, connectionProfile.name) &&
        Objects.equals(this.xType, connectionProfile.xType) &&
        Objects.equals(this.description, connectionProfile.description) &&
        Objects.equals(this.version, connectionProfile.version) &&
        Objects.equals(this.client, connectionProfile.client) &&
        Objects.equals(this.channels, connectionProfile.channels) &&
        Objects.equals(this.organizations, connectionProfile.organizations) &&
        Objects.equals(this.orderers, connectionProfile.orderers) &&
        Objects.equals(this.peers, connectionProfile.peers) &&
        Objects.equals(this.certificateAuthorities, connectionProfile.certificateAuthorities)&&
        Objects.equals(this.additionalProperties, connectionProfile.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, xType, description, version, client, channels, organizations, orderers, peers, certificateAuthorities, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectionProfile {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    xType: ").append(toIndentedString(xType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    channels: ").append(toIndentedString(channels)).append("\n");
    sb.append("    organizations: ").append(toIndentedString(organizations)).append("\n");
    sb.append("    orderers: ").append(toIndentedString(orderers)).append("\n");
    sb.append("    peers: ").append(toIndentedString(peers)).append("\n");
    sb.append("    certificateAuthorities: ").append(toIndentedString(certificateAuthorities)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("x-type");
    openapiFields.add("description");
    openapiFields.add("version");
    openapiFields.add("client");
    openapiFields.add("channels");
    openapiFields.add("organizations");
    openapiFields.add("orderers");
    openapiFields.add("peers");
    openapiFields.add("certificateAuthorities");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("organizations");
    openapiRequiredFields.add("peers");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConnectionProfile
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ConnectionProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectionProfile is not found in the empty JSON string", ConnectionProfile.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConnectionProfile.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("x-type") != null && !jsonObj.get("x-type").isJsonNull()) && !jsonObj.get("x-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `x-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("x-type").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      // validate the optional field `client`
      if (jsonObj.get("client") != null && !jsonObj.get("client").isJsonNull()) {
        ConnectionProfileClient.validateJsonObject(jsonObj.getAsJsonObject("client"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectionProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectionProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectionProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectionProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectionProfile>() {
           @Override
           public void write(JsonWriter out, ConnectionProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectionProfile read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ConnectionProfile instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConnectionProfile given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConnectionProfile
  * @throws IOException if the JSON string is invalid with respect to ConnectionProfile
  */
  public static ConnectionProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectionProfile.class);
  }

 /**
  * Convert an instance of ConnectionProfile to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

