/*
 * Hyperledger Cactus Plugin - Connector Fabric
 * Can perform basic tasks on a fabric ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.SSHExecCommandResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeployContractGoSourceV1Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DeployContractGoSourceV1Response {
  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private Boolean success;

  public static final String SERIALIZED_NAME_INSTALLATION_COMMAND_RESPONSES = "installationCommandResponses";
  @SerializedName(SERIALIZED_NAME_INSTALLATION_COMMAND_RESPONSES)
  private List<SSHExecCommandResponse> installationCommandResponses = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSTANTIATION_COMMAND_RESPONSE = "instantiationCommandResponse";
  @SerializedName(SERIALIZED_NAME_INSTANTIATION_COMMAND_RESPONSE)
  private SSHExecCommandResponse instantiationCommandResponse;

  public DeployContractGoSourceV1Response() {
  }

  public DeployContractGoSourceV1Response success(Boolean success) {
    
    this.success = success;
    return this;
  }

   /**
   * Get success
   * @return success
  **/
  @javax.annotation.Nonnull
  public Boolean getSuccess() {
    return success;
  }


  public void setSuccess(Boolean success) {
    this.success = success;
  }


  public DeployContractGoSourceV1Response installationCommandResponses(List<SSHExecCommandResponse> installationCommandResponses) {
    
    this.installationCommandResponses = installationCommandResponses;
    return this;
  }

  public DeployContractGoSourceV1Response addInstallationCommandResponsesItem(SSHExecCommandResponse installationCommandResponsesItem) {
    if (this.installationCommandResponses == null) {
      this.installationCommandResponses = new ArrayList<>();
    }
    this.installationCommandResponses.add(installationCommandResponsesItem);
    return this;
  }

   /**
   * Get installationCommandResponses
   * @return installationCommandResponses
  **/
  @javax.annotation.Nonnull
  public List<SSHExecCommandResponse> getInstallationCommandResponses() {
    return installationCommandResponses;
  }


  public void setInstallationCommandResponses(List<SSHExecCommandResponse> installationCommandResponses) {
    this.installationCommandResponses = installationCommandResponses;
  }


  public DeployContractGoSourceV1Response instantiationCommandResponse(SSHExecCommandResponse instantiationCommandResponse) {
    
    this.instantiationCommandResponse = instantiationCommandResponse;
    return this;
  }

   /**
   * Get instantiationCommandResponse
   * @return instantiationCommandResponse
  **/
  @javax.annotation.Nonnull
  public SSHExecCommandResponse getInstantiationCommandResponse() {
    return instantiationCommandResponse;
  }


  public void setInstantiationCommandResponse(SSHExecCommandResponse instantiationCommandResponse) {
    this.instantiationCommandResponse = instantiationCommandResponse;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeployContractGoSourceV1Response deployContractGoSourceV1Response = (DeployContractGoSourceV1Response) o;
    return Objects.equals(this.success, deployContractGoSourceV1Response.success) &&
        Objects.equals(this.installationCommandResponses, deployContractGoSourceV1Response.installationCommandResponses) &&
        Objects.equals(this.instantiationCommandResponse, deployContractGoSourceV1Response.instantiationCommandResponse);
  }

  @Override
  public int hashCode() {
    return Objects.hash(success, installationCommandResponses, instantiationCommandResponse);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeployContractGoSourceV1Response {\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    installationCommandResponses: ").append(toIndentedString(installationCommandResponses)).append("\n");
    sb.append("    instantiationCommandResponse: ").append(toIndentedString(instantiationCommandResponse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("success");
    openapiFields.add("installationCommandResponses");
    openapiFields.add("instantiationCommandResponse");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("success");
    openapiRequiredFields.add("installationCommandResponses");
    openapiRequiredFields.add("instantiationCommandResponse");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DeployContractGoSourceV1Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DeployContractGoSourceV1Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeployContractGoSourceV1Response is not found in the empty JSON string", DeployContractGoSourceV1Response.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DeployContractGoSourceV1Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeployContractGoSourceV1Response` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeployContractGoSourceV1Response.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("installationCommandResponses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `installationCommandResponses` to be an array in the JSON string but got `%s`", jsonObj.get("installationCommandResponses").toString()));
      }

      JsonArray jsonArrayinstallationCommandResponses = jsonObj.getAsJsonArray("installationCommandResponses");
      // validate the required field `installationCommandResponses` (array)
      for (int i = 0; i < jsonArrayinstallationCommandResponses.size(); i++) {
        SSHExecCommandResponse.validateJsonObject(jsonArrayinstallationCommandResponses.get(i).getAsJsonObject());
      };
      // validate the required field `instantiationCommandResponse`
      SSHExecCommandResponse.validateJsonObject(jsonObj.getAsJsonObject("instantiationCommandResponse"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeployContractGoSourceV1Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeployContractGoSourceV1Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeployContractGoSourceV1Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeployContractGoSourceV1Response.class));

       return (TypeAdapter<T>) new TypeAdapter<DeployContractGoSourceV1Response>() {
           @Override
           public void write(JsonWriter out, DeployContractGoSourceV1Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeployContractGoSourceV1Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DeployContractGoSourceV1Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DeployContractGoSourceV1Response
  * @throws IOException if the JSON string is invalid with respect to DeployContractGoSourceV1Response
  */
  public static DeployContractGoSourceV1Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeployContractGoSourceV1Response.class);
  }

 /**
  * Convert an instance of DeployContractGoSourceV1Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

