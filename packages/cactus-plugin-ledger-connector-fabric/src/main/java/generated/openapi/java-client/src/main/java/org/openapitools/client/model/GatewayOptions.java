/*
 * Hyperledger Cactus Plugin - Connector Fabric
 * Can perform basic tasks on a fabric ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.ConnectionProfile;
import org.openapitools.client.model.GatewayDiscoveryOptions;
import org.openapitools.client.model.GatewayEventHandlerOptions;
import org.openapitools.client.model.GatewayOptionsWallet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GatewayOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GatewayOptions {
  public static final String SERIALIZED_NAME_CONNECTION_PROFILE = "connectionProfile";
  @SerializedName(SERIALIZED_NAME_CONNECTION_PROFILE)
  private ConnectionProfile connectionProfile;

  public static final String SERIALIZED_NAME_DISCOVERY = "discovery";
  @SerializedName(SERIALIZED_NAME_DISCOVERY)
  private GatewayDiscoveryOptions discovery;

  public static final String SERIALIZED_NAME_EVENT_HANDLER_OPTIONS = "eventHandlerOptions";
  @SerializedName(SERIALIZED_NAME_EVENT_HANDLER_OPTIONS)
  private GatewayEventHandlerOptions eventHandlerOptions;

  public static final String SERIALIZED_NAME_IDENTITY = "identity";
  @SerializedName(SERIALIZED_NAME_IDENTITY)
  private String identity;

  public static final String SERIALIZED_NAME_WALLET = "wallet";
  @SerializedName(SERIALIZED_NAME_WALLET)
  private GatewayOptionsWallet wallet;

  public GatewayOptions() {
  }

  public GatewayOptions connectionProfile(ConnectionProfile connectionProfile) {
    
    this.connectionProfile = connectionProfile;
    return this;
  }

   /**
   * Get connectionProfile
   * @return connectionProfile
  **/
  @javax.annotation.Nullable
  public ConnectionProfile getConnectionProfile() {
    return connectionProfile;
  }


  public void setConnectionProfile(ConnectionProfile connectionProfile) {
    this.connectionProfile = connectionProfile;
  }


  public GatewayOptions discovery(GatewayDiscoveryOptions discovery) {
    
    this.discovery = discovery;
    return this;
  }

   /**
   * Get discovery
   * @return discovery
  **/
  @javax.annotation.Nullable
  public GatewayDiscoveryOptions getDiscovery() {
    return discovery;
  }


  public void setDiscovery(GatewayDiscoveryOptions discovery) {
    this.discovery = discovery;
  }


  public GatewayOptions eventHandlerOptions(GatewayEventHandlerOptions eventHandlerOptions) {
    
    this.eventHandlerOptions = eventHandlerOptions;
    return this;
  }

   /**
   * Get eventHandlerOptions
   * @return eventHandlerOptions
  **/
  @javax.annotation.Nullable
  public GatewayEventHandlerOptions getEventHandlerOptions() {
    return eventHandlerOptions;
  }


  public void setEventHandlerOptions(GatewayEventHandlerOptions eventHandlerOptions) {
    this.eventHandlerOptions = eventHandlerOptions;
  }


  public GatewayOptions identity(String identity) {
    
    this.identity = identity;
    return this;
  }

   /**
   * Get identity
   * @return identity
  **/
  @javax.annotation.Nonnull
  public String getIdentity() {
    return identity;
  }


  public void setIdentity(String identity) {
    this.identity = identity;
  }


  public GatewayOptions wallet(GatewayOptionsWallet wallet) {
    
    this.wallet = wallet;
    return this;
  }

   /**
   * Get wallet
   * @return wallet
  **/
  @javax.annotation.Nonnull
  public GatewayOptionsWallet getWallet() {
    return wallet;
  }


  public void setWallet(GatewayOptionsWallet wallet) {
    this.wallet = wallet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayOptions gatewayOptions = (GatewayOptions) o;
    return Objects.equals(this.connectionProfile, gatewayOptions.connectionProfile) &&
        Objects.equals(this.discovery, gatewayOptions.discovery) &&
        Objects.equals(this.eventHandlerOptions, gatewayOptions.eventHandlerOptions) &&
        Objects.equals(this.identity, gatewayOptions.identity) &&
        Objects.equals(this.wallet, gatewayOptions.wallet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionProfile, discovery, eventHandlerOptions, identity, wallet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayOptions {\n");
    sb.append("    connectionProfile: ").append(toIndentedString(connectionProfile)).append("\n");
    sb.append("    discovery: ").append(toIndentedString(discovery)).append("\n");
    sb.append("    eventHandlerOptions: ").append(toIndentedString(eventHandlerOptions)).append("\n");
    sb.append("    identity: ").append(toIndentedString(identity)).append("\n");
    sb.append("    wallet: ").append(toIndentedString(wallet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectionProfile");
    openapiFields.add("discovery");
    openapiFields.add("eventHandlerOptions");
    openapiFields.add("identity");
    openapiFields.add("wallet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("identity");
    openapiRequiredFields.add("wallet");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GatewayOptions
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GatewayOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GatewayOptions is not found in the empty JSON string", GatewayOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GatewayOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GatewayOptions` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GatewayOptions.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `discovery`
      if (jsonObj.get("discovery") != null && !jsonObj.get("discovery").isJsonNull()) {
        GatewayDiscoveryOptions.validateJsonObject(jsonObj.getAsJsonObject("discovery"));
      }
      // validate the optional field `eventHandlerOptions`
      if (jsonObj.get("eventHandlerOptions") != null && !jsonObj.get("eventHandlerOptions").isJsonNull()) {
        GatewayEventHandlerOptions.validateJsonObject(jsonObj.getAsJsonObject("eventHandlerOptions"));
      }
      if (!jsonObj.get("identity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identity").toString()));
      }
      // validate the required field `wallet`
      GatewayOptionsWallet.validateJsonObject(jsonObj.getAsJsonObject("wallet"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GatewayOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GatewayOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GatewayOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GatewayOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<GatewayOptions>() {
           @Override
           public void write(JsonWriter out, GatewayOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GatewayOptions read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GatewayOptions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GatewayOptions
  * @throws IOException if the JSON string is invalid with respect to GatewayOptions
  */
  public static GatewayOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GatewayOptions.class);
  }

 /**
  * Convert an instance of GatewayOptions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

