/*
 * Hyperledger Cactus Plugin - Connector Fabric
 * Can perform basic tasks on a fabric ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.TransactReceiptBlockMetaData;
import org.openapitools.client.model.TransactReceiptTransactionCreator;
import org.openapitools.client.model.TransactReceiptTransactionEndorsement;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetTransactionReceiptResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GetTransactionReceiptResponse {
  public static final String SERIALIZED_NAME_BLOCK_NUMBER = "blockNumber";
  @SerializedName(SERIALIZED_NAME_BLOCK_NUMBER)
  private String blockNumber;

  public static final String SERIALIZED_NAME_CHANNEL_I_D = "channelID";
  @SerializedName(SERIALIZED_NAME_CHANNEL_I_D)
  private String channelID;

  public static final String SERIALIZED_NAME_TRANSACTION_CREATOR = "transactionCreator";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_CREATOR)
  private TransactReceiptTransactionCreator transactionCreator;

  public static final String SERIALIZED_NAME_TRANSACTION_ENDORSEMENT = "transactionEndorsement";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ENDORSEMENT)
  private List<TransactReceiptTransactionEndorsement> transactionEndorsement;

  public static final String SERIALIZED_NAME_BLOCK_META_DATA = "blockMetaData";
  @SerializedName(SERIALIZED_NAME_BLOCK_META_DATA)
  private TransactReceiptBlockMetaData blockMetaData;

  public static final String SERIALIZED_NAME_CHAIN_CODE_NAME = "chainCodeName";
  @SerializedName(SERIALIZED_NAME_CHAIN_CODE_NAME)
  private String chainCodeName;

  public static final String SERIALIZED_NAME_CHAIN_CODE_VERSION = "chainCodeVersion";
  @SerializedName(SERIALIZED_NAME_CHAIN_CODE_VERSION)
  private String chainCodeVersion;

  public static final String SERIALIZED_NAME_RESPONSE_STATUS = "responseStatus";
  @SerializedName(SERIALIZED_NAME_RESPONSE_STATUS)
  private String responseStatus;

  public static final String SERIALIZED_NAME_RWSET_KEY = "rwsetKey";
  @SerializedName(SERIALIZED_NAME_RWSET_KEY)
  private String rwsetKey;

  public static final String SERIALIZED_NAME_RWSET_WRITE_DATA = "rwsetWriteData";
  @SerializedName(SERIALIZED_NAME_RWSET_WRITE_DATA)
  private String rwsetWriteData;

  public GetTransactionReceiptResponse() {
  }

  public GetTransactionReceiptResponse blockNumber(String blockNumber) {
    
    this.blockNumber = blockNumber;
    return this;
  }

   /**
   * Get blockNumber
   * @return blockNumber
  **/
  @javax.annotation.Nullable
  public String getBlockNumber() {
    return blockNumber;
  }


  public void setBlockNumber(String blockNumber) {
    this.blockNumber = blockNumber;
  }


  public GetTransactionReceiptResponse channelID(String channelID) {
    
    this.channelID = channelID;
    return this;
  }

   /**
   * Get channelID
   * @return channelID
  **/
  @javax.annotation.Nullable
  public String getChannelID() {
    return channelID;
  }


  public void setChannelID(String channelID) {
    this.channelID = channelID;
  }


  public GetTransactionReceiptResponse transactionCreator(TransactReceiptTransactionCreator transactionCreator) {
    
    this.transactionCreator = transactionCreator;
    return this;
  }

   /**
   * Get transactionCreator
   * @return transactionCreator
  **/
  @javax.annotation.Nullable
  public TransactReceiptTransactionCreator getTransactionCreator() {
    return transactionCreator;
  }


  public void setTransactionCreator(TransactReceiptTransactionCreator transactionCreator) {
    this.transactionCreator = transactionCreator;
  }


  public GetTransactionReceiptResponse transactionEndorsement(List<TransactReceiptTransactionEndorsement> transactionEndorsement) {
    
    this.transactionEndorsement = transactionEndorsement;
    return this;
  }

  public GetTransactionReceiptResponse addTransactionEndorsementItem(TransactReceiptTransactionEndorsement transactionEndorsementItem) {
    if (this.transactionEndorsement == null) {
      this.transactionEndorsement = new ArrayList<>();
    }
    this.transactionEndorsement.add(transactionEndorsementItem);
    return this;
  }

   /**
   * Get transactionEndorsement
   * @return transactionEndorsement
  **/
  @javax.annotation.Nullable
  public List<TransactReceiptTransactionEndorsement> getTransactionEndorsement() {
    return transactionEndorsement;
  }


  public void setTransactionEndorsement(List<TransactReceiptTransactionEndorsement> transactionEndorsement) {
    this.transactionEndorsement = transactionEndorsement;
  }


  public GetTransactionReceiptResponse blockMetaData(TransactReceiptBlockMetaData blockMetaData) {
    
    this.blockMetaData = blockMetaData;
    return this;
  }

   /**
   * Get blockMetaData
   * @return blockMetaData
  **/
  @javax.annotation.Nullable
  public TransactReceiptBlockMetaData getBlockMetaData() {
    return blockMetaData;
  }


  public void setBlockMetaData(TransactReceiptBlockMetaData blockMetaData) {
    this.blockMetaData = blockMetaData;
  }


  public GetTransactionReceiptResponse chainCodeName(String chainCodeName) {
    
    this.chainCodeName = chainCodeName;
    return this;
  }

   /**
   * Get chainCodeName
   * @return chainCodeName
  **/
  @javax.annotation.Nullable
  public String getChainCodeName() {
    return chainCodeName;
  }


  public void setChainCodeName(String chainCodeName) {
    this.chainCodeName = chainCodeName;
  }


  public GetTransactionReceiptResponse chainCodeVersion(String chainCodeVersion) {
    
    this.chainCodeVersion = chainCodeVersion;
    return this;
  }

   /**
   * Get chainCodeVersion
   * @return chainCodeVersion
  **/
  @javax.annotation.Nullable
  public String getChainCodeVersion() {
    return chainCodeVersion;
  }


  public void setChainCodeVersion(String chainCodeVersion) {
    this.chainCodeVersion = chainCodeVersion;
  }


  public GetTransactionReceiptResponse responseStatus(String responseStatus) {
    
    this.responseStatus = responseStatus;
    return this;
  }

   /**
   * Get responseStatus
   * @return responseStatus
  **/
  @javax.annotation.Nullable
  public String getResponseStatus() {
    return responseStatus;
  }


  public void setResponseStatus(String responseStatus) {
    this.responseStatus = responseStatus;
  }


  public GetTransactionReceiptResponse rwsetKey(String rwsetKey) {
    
    this.rwsetKey = rwsetKey;
    return this;
  }

   /**
   * Get rwsetKey
   * @return rwsetKey
  **/
  @javax.annotation.Nullable
  public String getRwsetKey() {
    return rwsetKey;
  }


  public void setRwsetKey(String rwsetKey) {
    this.rwsetKey = rwsetKey;
  }


  public GetTransactionReceiptResponse rwsetWriteData(String rwsetWriteData) {
    
    this.rwsetWriteData = rwsetWriteData;
    return this;
  }

   /**
   * Get rwsetWriteData
   * @return rwsetWriteData
  **/
  @javax.annotation.Nullable
  public String getRwsetWriteData() {
    return rwsetWriteData;
  }


  public void setRwsetWriteData(String rwsetWriteData) {
    this.rwsetWriteData = rwsetWriteData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetTransactionReceiptResponse getTransactionReceiptResponse = (GetTransactionReceiptResponse) o;
    return Objects.equals(this.blockNumber, getTransactionReceiptResponse.blockNumber) &&
        Objects.equals(this.channelID, getTransactionReceiptResponse.channelID) &&
        Objects.equals(this.transactionCreator, getTransactionReceiptResponse.transactionCreator) &&
        Objects.equals(this.transactionEndorsement, getTransactionReceiptResponse.transactionEndorsement) &&
        Objects.equals(this.blockMetaData, getTransactionReceiptResponse.blockMetaData) &&
        Objects.equals(this.chainCodeName, getTransactionReceiptResponse.chainCodeName) &&
        Objects.equals(this.chainCodeVersion, getTransactionReceiptResponse.chainCodeVersion) &&
        Objects.equals(this.responseStatus, getTransactionReceiptResponse.responseStatus) &&
        Objects.equals(this.rwsetKey, getTransactionReceiptResponse.rwsetKey) &&
        Objects.equals(this.rwsetWriteData, getTransactionReceiptResponse.rwsetWriteData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockNumber, channelID, transactionCreator, transactionEndorsement, blockMetaData, chainCodeName, chainCodeVersion, responseStatus, rwsetKey, rwsetWriteData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetTransactionReceiptResponse {\n");
    sb.append("    blockNumber: ").append(toIndentedString(blockNumber)).append("\n");
    sb.append("    channelID: ").append(toIndentedString(channelID)).append("\n");
    sb.append("    transactionCreator: ").append(toIndentedString(transactionCreator)).append("\n");
    sb.append("    transactionEndorsement: ").append(toIndentedString(transactionEndorsement)).append("\n");
    sb.append("    blockMetaData: ").append(toIndentedString(blockMetaData)).append("\n");
    sb.append("    chainCodeName: ").append(toIndentedString(chainCodeName)).append("\n");
    sb.append("    chainCodeVersion: ").append(toIndentedString(chainCodeVersion)).append("\n");
    sb.append("    responseStatus: ").append(toIndentedString(responseStatus)).append("\n");
    sb.append("    rwsetKey: ").append(toIndentedString(rwsetKey)).append("\n");
    sb.append("    rwsetWriteData: ").append(toIndentedString(rwsetWriteData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blockNumber");
    openapiFields.add("channelID");
    openapiFields.add("transactionCreator");
    openapiFields.add("transactionEndorsement");
    openapiFields.add("blockMetaData");
    openapiFields.add("chainCodeName");
    openapiFields.add("chainCodeVersion");
    openapiFields.add("responseStatus");
    openapiFields.add("rwsetKey");
    openapiFields.add("rwsetWriteData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetTransactionReceiptResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GetTransactionReceiptResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetTransactionReceiptResponse is not found in the empty JSON string", GetTransactionReceiptResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GetTransactionReceiptResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetTransactionReceiptResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("blockNumber") != null && !jsonObj.get("blockNumber").isJsonNull()) && !jsonObj.get("blockNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blockNumber").toString()));
      }
      if ((jsonObj.get("channelID") != null && !jsonObj.get("channelID").isJsonNull()) && !jsonObj.get("channelID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelID").toString()));
      }
      // validate the optional field `transactionCreator`
      if (jsonObj.get("transactionCreator") != null && !jsonObj.get("transactionCreator").isJsonNull()) {
        TransactReceiptTransactionCreator.validateJsonObject(jsonObj.getAsJsonObject("transactionCreator"));
      }
      if (jsonObj.get("transactionEndorsement") != null && !jsonObj.get("transactionEndorsement").isJsonNull()) {
        JsonArray jsonArraytransactionEndorsement = jsonObj.getAsJsonArray("transactionEndorsement");
        if (jsonArraytransactionEndorsement != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transactionEndorsement").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transactionEndorsement` to be an array in the JSON string but got `%s`", jsonObj.get("transactionEndorsement").toString()));
          }

          // validate the optional field `transactionEndorsement` (array)
          for (int i = 0; i < jsonArraytransactionEndorsement.size(); i++) {
            TransactReceiptTransactionEndorsement.validateJsonObject(jsonArraytransactionEndorsement.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `blockMetaData`
      if (jsonObj.get("blockMetaData") != null && !jsonObj.get("blockMetaData").isJsonNull()) {
        TransactReceiptBlockMetaData.validateJsonObject(jsonObj.getAsJsonObject("blockMetaData"));
      }
      if ((jsonObj.get("chainCodeName") != null && !jsonObj.get("chainCodeName").isJsonNull()) && !jsonObj.get("chainCodeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chainCodeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chainCodeName").toString()));
      }
      if ((jsonObj.get("chainCodeVersion") != null && !jsonObj.get("chainCodeVersion").isJsonNull()) && !jsonObj.get("chainCodeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chainCodeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chainCodeVersion").toString()));
      }
      if ((jsonObj.get("responseStatus") != null && !jsonObj.get("responseStatus").isJsonNull()) && !jsonObj.get("responseStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseStatus").toString()));
      }
      if ((jsonObj.get("rwsetKey") != null && !jsonObj.get("rwsetKey").isJsonNull()) && !jsonObj.get("rwsetKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rwsetKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rwsetKey").toString()));
      }
      if ((jsonObj.get("rwsetWriteData") != null && !jsonObj.get("rwsetWriteData").isJsonNull()) && !jsonObj.get("rwsetWriteData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rwsetWriteData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rwsetWriteData").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetTransactionReceiptResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetTransactionReceiptResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetTransactionReceiptResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetTransactionReceiptResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetTransactionReceiptResponse>() {
           @Override
           public void write(JsonWriter out, GetTransactionReceiptResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetTransactionReceiptResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetTransactionReceiptResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetTransactionReceiptResponse
  * @throws IOException if the JSON string is invalid with respect to GetTransactionReceiptResponse
  */
  public static GetTransactionReceiptResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetTransactionReceiptResponse.class);
  }

 /**
  * Convert an instance of GetTransactionReceiptResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

