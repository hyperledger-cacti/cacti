/*
 * Hyperledger Cactus Plugin - Connector Fabric
 * Can perform basic tasks on a fabric ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Transaction summary from commited block.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class WatchBlocksCactusTransactionsEventV1 {
  public static final String SERIALIZED_NAME_CHAINCODE_ID = "chaincodeId";
  @SerializedName(SERIALIZED_NAME_CHAINCODE_ID)
  private String chaincodeId;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_FUNCTION_NAME = "functionName";
  @SerializedName(SERIALIZED_NAME_FUNCTION_NAME)
  private String functionName;

  public static final String SERIALIZED_NAME_FUNCTION_ARGS = "functionArgs";
  @SerializedName(SERIALIZED_NAME_FUNCTION_ARGS)
  private List<String> functionArgs = new ArrayList<>();

  public WatchBlocksCactusTransactionsEventV1() {
  }

  public WatchBlocksCactusTransactionsEventV1 chaincodeId(String chaincodeId) {
    
    this.chaincodeId = chaincodeId;
    return this;
  }

   /**
   * ChainCode containing function that was executed.
   * @return chaincodeId
  **/
  @javax.annotation.Nonnull
  public String getChaincodeId() {
    return chaincodeId;
  }


  public void setChaincodeId(String chaincodeId) {
    this.chaincodeId = chaincodeId;
  }


  public WatchBlocksCactusTransactionsEventV1 transactionId(String transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Transaction identifier.
   * @return transactionId
  **/
  @javax.annotation.Nonnull
  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public WatchBlocksCactusTransactionsEventV1 functionName(String functionName) {
    
    this.functionName = functionName;
    return this;
  }

   /**
   * Function name that was executed.
   * @return functionName
  **/
  @javax.annotation.Nonnull
  public String getFunctionName() {
    return functionName;
  }


  public void setFunctionName(String functionName) {
    this.functionName = functionName;
  }


  public WatchBlocksCactusTransactionsEventV1 functionArgs(List<String> functionArgs) {
    
    this.functionArgs = functionArgs;
    return this;
  }

  public WatchBlocksCactusTransactionsEventV1 addFunctionArgsItem(String functionArgsItem) {
    if (this.functionArgs == null) {
      this.functionArgs = new ArrayList<>();
    }
    this.functionArgs.add(functionArgsItem);
    return this;
  }

   /**
   * List of function arguments.
   * @return functionArgs
  **/
  @javax.annotation.Nonnull
  public List<String> getFunctionArgs() {
    return functionArgs;
  }


  public void setFunctionArgs(List<String> functionArgs) {
    this.functionArgs = functionArgs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WatchBlocksCactusTransactionsEventV1 watchBlocksCactusTransactionsEventV1 = (WatchBlocksCactusTransactionsEventV1) o;
    return Objects.equals(this.chaincodeId, watchBlocksCactusTransactionsEventV1.chaincodeId) &&
        Objects.equals(this.transactionId, watchBlocksCactusTransactionsEventV1.transactionId) &&
        Objects.equals(this.functionName, watchBlocksCactusTransactionsEventV1.functionName) &&
        Objects.equals(this.functionArgs, watchBlocksCactusTransactionsEventV1.functionArgs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chaincodeId, transactionId, functionName, functionArgs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WatchBlocksCactusTransactionsEventV1 {\n");
    sb.append("    chaincodeId: ").append(toIndentedString(chaincodeId)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    functionName: ").append(toIndentedString(functionName)).append("\n");
    sb.append("    functionArgs: ").append(toIndentedString(functionArgs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chaincodeId");
    openapiFields.add("transactionId");
    openapiFields.add("functionName");
    openapiFields.add("functionArgs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("chaincodeId");
    openapiRequiredFields.add("transactionId");
    openapiRequiredFields.add("functionName");
    openapiRequiredFields.add("functionArgs");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WatchBlocksCactusTransactionsEventV1
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WatchBlocksCactusTransactionsEventV1.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WatchBlocksCactusTransactionsEventV1 is not found in the empty JSON string", WatchBlocksCactusTransactionsEventV1.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WatchBlocksCactusTransactionsEventV1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WatchBlocksCactusTransactionsEventV1` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WatchBlocksCactusTransactionsEventV1.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("chaincodeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chaincodeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chaincodeId").toString()));
      }
      if (!jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if (!jsonObj.get("functionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functionName").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("functionArgs") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("functionArgs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionArgs` to be an array in the JSON string but got `%s`", jsonObj.get("functionArgs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WatchBlocksCactusTransactionsEventV1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WatchBlocksCactusTransactionsEventV1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WatchBlocksCactusTransactionsEventV1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WatchBlocksCactusTransactionsEventV1.class));

       return (TypeAdapter<T>) new TypeAdapter<WatchBlocksCactusTransactionsEventV1>() {
           @Override
           public void write(JsonWriter out, WatchBlocksCactusTransactionsEventV1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WatchBlocksCactusTransactionsEventV1 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WatchBlocksCactusTransactionsEventV1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WatchBlocksCactusTransactionsEventV1
  * @throws IOException if the JSON string is invalid with respect to WatchBlocksCactusTransactionsEventV1
  */
  public static WatchBlocksCactusTransactionsEventV1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WatchBlocksCactusTransactionsEventV1.class);
  }

 /**
  * Convert an instance of WatchBlocksCactusTransactionsEventV1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

