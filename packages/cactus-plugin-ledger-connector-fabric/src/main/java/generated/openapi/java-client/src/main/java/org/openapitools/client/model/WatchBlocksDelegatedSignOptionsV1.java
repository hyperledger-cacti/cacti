/*
 * Hyperledger Cactus Plugin - Connector Fabric
 * Can perform basic tasks on a fabric ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.WatchBlocksListenerTypeV1;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Options passed when subscribing to block monitoring with delegated signing.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class WatchBlocksDelegatedSignOptionsV1 {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private WatchBlocksListenerTypeV1 type;

  public static final String SERIALIZED_NAME_START_BLOCK = "startBlock";
  @SerializedName(SERIALIZED_NAME_START_BLOCK)
  private String startBlock;

  public static final String SERIALIZED_NAME_CHANNEL_NAME = "channelName";
  @SerializedName(SERIALIZED_NAME_CHANNEL_NAME)
  private String channelName;

  public static final String SERIALIZED_NAME_SIGNER_CERTIFICATE = "signerCertificate";
  @SerializedName(SERIALIZED_NAME_SIGNER_CERTIFICATE)
  private String signerCertificate;

  public static final String SERIALIZED_NAME_SIGNER_MSP_I_D = "signerMspID";
  @SerializedName(SERIALIZED_NAME_SIGNER_MSP_I_D)
  private String signerMspID;

  public static final String SERIALIZED_NAME_UNIQUE_TRANSACTION_DATA = "uniqueTransactionData";
  @SerializedName(SERIALIZED_NAME_UNIQUE_TRANSACTION_DATA)
  private Object uniqueTransactionData = null;

  public WatchBlocksDelegatedSignOptionsV1() {
  }

  public WatchBlocksDelegatedSignOptionsV1 type(WatchBlocksListenerTypeV1 type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  public WatchBlocksListenerTypeV1 getType() {
    return type;
  }


  public void setType(WatchBlocksListenerTypeV1 type) {
    this.type = type;
  }


  public WatchBlocksDelegatedSignOptionsV1 startBlock(String startBlock) {
    
    this.startBlock = startBlock;
    return this;
  }

   /**
   * From which block start monitoring. Defaults to latest.
   * @return startBlock
  **/
  @javax.annotation.Nullable
  public String getStartBlock() {
    return startBlock;
  }


  public void setStartBlock(String startBlock) {
    this.startBlock = startBlock;
  }


  public WatchBlocksDelegatedSignOptionsV1 channelName(String channelName) {
    
    this.channelName = channelName;
    return this;
  }

   /**
   * Get channelName
   * @return channelName
  **/
  @javax.annotation.Nonnull
  public String getChannelName() {
    return channelName;
  }


  public void setChannelName(String channelName) {
    this.channelName = channelName;
  }


  public WatchBlocksDelegatedSignOptionsV1 signerCertificate(String signerCertificate) {
    
    this.signerCertificate = signerCertificate;
    return this;
  }

   /**
   * Get signerCertificate
   * @return signerCertificate
  **/
  @javax.annotation.Nonnull
  public String getSignerCertificate() {
    return signerCertificate;
  }


  public void setSignerCertificate(String signerCertificate) {
    this.signerCertificate = signerCertificate;
  }


  public WatchBlocksDelegatedSignOptionsV1 signerMspID(String signerMspID) {
    
    this.signerMspID = signerMspID;
    return this;
  }

   /**
   * Get signerMspID
   * @return signerMspID
  **/
  @javax.annotation.Nonnull
  public String getSignerMspID() {
    return signerMspID;
  }


  public void setSignerMspID(String signerMspID) {
    this.signerMspID = signerMspID;
  }


  public WatchBlocksDelegatedSignOptionsV1 uniqueTransactionData(Object uniqueTransactionData) {
    
    this.uniqueTransactionData = uniqueTransactionData;
    return this;
  }

   /**
   * Can be used to uniquely identify and authorize signing request
   * @return uniqueTransactionData
  **/
  @javax.annotation.Nullable
  public Object getUniqueTransactionData() {
    return uniqueTransactionData;
  }


  public void setUniqueTransactionData(Object uniqueTransactionData) {
    this.uniqueTransactionData = uniqueTransactionData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WatchBlocksDelegatedSignOptionsV1 watchBlocksDelegatedSignOptionsV1 = (WatchBlocksDelegatedSignOptionsV1) o;
    return Objects.equals(this.type, watchBlocksDelegatedSignOptionsV1.type) &&
        Objects.equals(this.startBlock, watchBlocksDelegatedSignOptionsV1.startBlock) &&
        Objects.equals(this.channelName, watchBlocksDelegatedSignOptionsV1.channelName) &&
        Objects.equals(this.signerCertificate, watchBlocksDelegatedSignOptionsV1.signerCertificate) &&
        Objects.equals(this.signerMspID, watchBlocksDelegatedSignOptionsV1.signerMspID) &&
        Objects.equals(this.uniqueTransactionData, watchBlocksDelegatedSignOptionsV1.uniqueTransactionData);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, startBlock, channelName, signerCertificate, signerMspID, uniqueTransactionData);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WatchBlocksDelegatedSignOptionsV1 {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    startBlock: ").append(toIndentedString(startBlock)).append("\n");
    sb.append("    channelName: ").append(toIndentedString(channelName)).append("\n");
    sb.append("    signerCertificate: ").append(toIndentedString(signerCertificate)).append("\n");
    sb.append("    signerMspID: ").append(toIndentedString(signerMspID)).append("\n");
    sb.append("    uniqueTransactionData: ").append(toIndentedString(uniqueTransactionData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("startBlock");
    openapiFields.add("channelName");
    openapiFields.add("signerCertificate");
    openapiFields.add("signerMspID");
    openapiFields.add("uniqueTransactionData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("channelName");
    openapiRequiredFields.add("signerCertificate");
    openapiRequiredFields.add("signerMspID");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WatchBlocksDelegatedSignOptionsV1
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WatchBlocksDelegatedSignOptionsV1.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WatchBlocksDelegatedSignOptionsV1 is not found in the empty JSON string", WatchBlocksDelegatedSignOptionsV1.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WatchBlocksDelegatedSignOptionsV1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WatchBlocksDelegatedSignOptionsV1` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WatchBlocksDelegatedSignOptionsV1.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("startBlock") != null && !jsonObj.get("startBlock").isJsonNull()) && !jsonObj.get("startBlock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startBlock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startBlock").toString()));
      }
      if (!jsonObj.get("channelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelName").toString()));
      }
      if (!jsonObj.get("signerCertificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signerCertificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signerCertificate").toString()));
      }
      if (!jsonObj.get("signerMspID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signerMspID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signerMspID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WatchBlocksDelegatedSignOptionsV1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WatchBlocksDelegatedSignOptionsV1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WatchBlocksDelegatedSignOptionsV1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WatchBlocksDelegatedSignOptionsV1.class));

       return (TypeAdapter<T>) new TypeAdapter<WatchBlocksDelegatedSignOptionsV1>() {
           @Override
           public void write(JsonWriter out, WatchBlocksDelegatedSignOptionsV1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WatchBlocksDelegatedSignOptionsV1 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WatchBlocksDelegatedSignOptionsV1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WatchBlocksDelegatedSignOptionsV1
  * @throws IOException if the JSON string is invalid with respect to WatchBlocksDelegatedSignOptionsV1
  */
  public static WatchBlocksDelegatedSignOptionsV1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WatchBlocksDelegatedSignOptionsV1.class);
  }

 /**
  * Convert an instance of WatchBlocksDelegatedSignOptionsV1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

