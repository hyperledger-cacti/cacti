/*
 * Hyperledger Cactus Plugin - Connector Fabric
 * Can perform basic tasks on a fabric ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.DeployContractGoSourceV1RequestConstructorArgs;
import org.openapitools.client.model.DeploymentTargetOrganization;
import org.openapitools.client.model.FileBase64;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeployContractGoSourceV1Request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DeployContractGoSourceV1Request {
  public static final String SERIALIZED_NAME_POLICY_DSL_SOURCE = "policyDslSource";
  @SerializedName(SERIALIZED_NAME_POLICY_DSL_SOURCE)
  private String policyDslSource;

  public static final String SERIALIZED_NAME_TLS_ROOT_CERT_FILES = "tlsRootCertFiles";
  @SerializedName(SERIALIZED_NAME_TLS_ROOT_CERT_FILES)
  private String tlsRootCertFiles;

  public static final String SERIALIZED_NAME_CHANNEL_ID = "channelId";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ID)
  private String channelId;

  public static final String SERIALIZED_NAME_TARGET_ORGANIZATIONS = "targetOrganizations";
  @SerializedName(SERIALIZED_NAME_TARGET_ORGANIZATIONS)
  private List<DeploymentTargetOrganization> targetOrganizations = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_PEER_ADDRESSES = "targetPeerAddresses";
  @SerializedName(SERIALIZED_NAME_TARGET_PEER_ADDRESSES)
  private List<String> targetPeerAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONSTRUCTOR_ARGS = "constructorArgs";
  @SerializedName(SERIALIZED_NAME_CONSTRUCTOR_ARGS)
  private DeployContractGoSourceV1RequestConstructorArgs constructorArgs;

  public static final String SERIALIZED_NAME_CHAIN_CODE_VERSION = "chainCodeVersion";
  @SerializedName(SERIALIZED_NAME_CHAIN_CODE_VERSION)
  private String chainCodeVersion;

  public static final String SERIALIZED_NAME_GO_SOURCE = "goSource";
  @SerializedName(SERIALIZED_NAME_GO_SOURCE)
  private FileBase64 goSource;

  public static final String SERIALIZED_NAME_GO_MOD = "goMod";
  @SerializedName(SERIALIZED_NAME_GO_MOD)
  private FileBase64 goMod;

  public static final String SERIALIZED_NAME_MODULE_NAME = "moduleName";
  @SerializedName(SERIALIZED_NAME_MODULE_NAME)
  private String moduleName;

  public static final String SERIALIZED_NAME_PINNED_DEPS = "pinnedDeps";
  @SerializedName(SERIALIZED_NAME_PINNED_DEPS)
  private List<String> pinnedDeps;

  public static final String SERIALIZED_NAME_MOD_TIDY_ONLY = "modTidyOnly";
  @SerializedName(SERIALIZED_NAME_MOD_TIDY_ONLY)
  private Boolean modTidyOnly;

  public DeployContractGoSourceV1Request() {
  }

  public DeployContractGoSourceV1Request policyDslSource(String policyDslSource) {
    
    this.policyDslSource = policyDslSource;
    return this;
  }

   /**
   * Get policyDslSource
   * @return policyDslSource
  **/
  @javax.annotation.Nonnull
  public String getPolicyDslSource() {
    return policyDslSource;
  }


  public void setPolicyDslSource(String policyDslSource) {
    this.policyDslSource = policyDslSource;
  }


  public DeployContractGoSourceV1Request tlsRootCertFiles(String tlsRootCertFiles) {
    
    this.tlsRootCertFiles = tlsRootCertFiles;
    return this;
  }

   /**
   * The TLS root cert files that will be passed to the chaincode instantiation command.
   * @return tlsRootCertFiles
  **/
  @javax.annotation.Nonnull
  public String getTlsRootCertFiles() {
    return tlsRootCertFiles;
  }


  public void setTlsRootCertFiles(String tlsRootCertFiles) {
    this.tlsRootCertFiles = tlsRootCertFiles;
  }


  public DeployContractGoSourceV1Request channelId(String channelId) {
    
    this.channelId = channelId;
    return this;
  }

   /**
   * The name of the Fabric channel where the contract will get instantiated.
   * @return channelId
  **/
  @javax.annotation.Nonnull
  public String getChannelId() {
    return channelId;
  }


  public void setChannelId(String channelId) {
    this.channelId = channelId;
  }


  public DeployContractGoSourceV1Request targetOrganizations(List<DeploymentTargetOrganization> targetOrganizations) {
    
    this.targetOrganizations = targetOrganizations;
    return this;
  }

  public DeployContractGoSourceV1Request addTargetOrganizationsItem(DeploymentTargetOrganization targetOrganizationsItem) {
    if (this.targetOrganizations == null) {
      this.targetOrganizations = new ArrayList<>();
    }
    this.targetOrganizations.add(targetOrganizationsItem);
    return this;
  }

   /**
   * Get targetOrganizations
   * @return targetOrganizations
  **/
  @javax.annotation.Nonnull
  public List<DeploymentTargetOrganization> getTargetOrganizations() {
    return targetOrganizations;
  }


  public void setTargetOrganizations(List<DeploymentTargetOrganization> targetOrganizations) {
    this.targetOrganizations = targetOrganizations;
  }


  public DeployContractGoSourceV1Request targetPeerAddresses(List<String> targetPeerAddresses) {
    
    this.targetPeerAddresses = targetPeerAddresses;
    return this;
  }

  public DeployContractGoSourceV1Request addTargetPeerAddressesItem(String targetPeerAddressesItem) {
    if (this.targetPeerAddresses == null) {
      this.targetPeerAddresses = new ArrayList<>();
    }
    this.targetPeerAddresses.add(targetPeerAddressesItem);
    return this;
  }

   /**
   * An array of peer addresses where the contract will be instantiated. Note that at present only the first item from this array will be used which is the behavior taken from the official Fabric samples repository and therefore it is assumed to be correct usage.
   * @return targetPeerAddresses
  **/
  @javax.annotation.Nonnull
  public List<String> getTargetPeerAddresses() {
    return targetPeerAddresses;
  }


  public void setTargetPeerAddresses(List<String> targetPeerAddresses) {
    this.targetPeerAddresses = targetPeerAddresses;
  }


  public DeployContractGoSourceV1Request constructorArgs(DeployContractGoSourceV1RequestConstructorArgs constructorArgs) {
    
    this.constructorArgs = constructorArgs;
    return this;
  }

   /**
   * Get constructorArgs
   * @return constructorArgs
  **/
  @javax.annotation.Nullable
  public DeployContractGoSourceV1RequestConstructorArgs getConstructorArgs() {
    return constructorArgs;
  }


  public void setConstructorArgs(DeployContractGoSourceV1RequestConstructorArgs constructorArgs) {
    this.constructorArgs = constructorArgs;
  }


  public DeployContractGoSourceV1Request chainCodeVersion(String chainCodeVersion) {
    
    this.chainCodeVersion = chainCodeVersion;
    return this;
  }

   /**
   * Get chainCodeVersion
   * @return chainCodeVersion
  **/
  @javax.annotation.Nonnull
  public String getChainCodeVersion() {
    return chainCodeVersion;
  }


  public void setChainCodeVersion(String chainCodeVersion) {
    this.chainCodeVersion = chainCodeVersion;
  }


  public DeployContractGoSourceV1Request goSource(FileBase64 goSource) {
    
    this.goSource = goSource;
    return this;
  }

   /**
   * Get goSource
   * @return goSource
  **/
  @javax.annotation.Nonnull
  public FileBase64 getGoSource() {
    return goSource;
  }


  public void setGoSource(FileBase64 goSource) {
    this.goSource = goSource;
  }


  public DeployContractGoSourceV1Request goMod(FileBase64 goMod) {
    
    this.goMod = goMod;
    return this;
  }

   /**
   * Get goMod
   * @return goMod
  **/
  @javax.annotation.Nullable
  public FileBase64 getGoMod() {
    return goMod;
  }


  public void setGoMod(FileBase64 goMod) {
    this.goMod = goMod;
  }


  public DeployContractGoSourceV1Request moduleName(String moduleName) {
    
    this.moduleName = moduleName;
    return this;
  }

   /**
   * The go module name that will be used for the go compilation process.
   * @return moduleName
  **/
  @javax.annotation.Nullable
  public String getModuleName() {
    return moduleName;
  }


  public void setModuleName(String moduleName) {
    this.moduleName = moduleName;
  }


  public DeployContractGoSourceV1Request pinnedDeps(List<String> pinnedDeps) {
    
    this.pinnedDeps = pinnedDeps;
    return this;
  }

  public DeployContractGoSourceV1Request addPinnedDepsItem(String pinnedDepsItem) {
    if (this.pinnedDeps == null) {
      this.pinnedDeps = new ArrayList<>();
    }
    this.pinnedDeps.add(pinnedDepsItem);
    return this;
  }

   /**
   * Get pinnedDeps
   * @return pinnedDeps
  **/
  @javax.annotation.Nullable
  public List<String> getPinnedDeps() {
    return pinnedDeps;
  }


  public void setPinnedDeps(List<String> pinnedDeps) {
    this.pinnedDeps = pinnedDeps;
  }


  public DeployContractGoSourceV1Request modTidyOnly(Boolean modTidyOnly) {
    
    this.modTidyOnly = modTidyOnly;
    return this;
  }

   /**
   * Indicates to the go chaincode compiler of Cactus if it should do an actual go compilation with the contact source or if it should just execute the go mod tidy command.
   * @return modTidyOnly
  **/
  @javax.annotation.Nullable
  public Boolean getModTidyOnly() {
    return modTidyOnly;
  }


  public void setModTidyOnly(Boolean modTidyOnly) {
    this.modTidyOnly = modTidyOnly;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeployContractGoSourceV1Request deployContractGoSourceV1Request = (DeployContractGoSourceV1Request) o;
    return Objects.equals(this.policyDslSource, deployContractGoSourceV1Request.policyDslSource) &&
        Objects.equals(this.tlsRootCertFiles, deployContractGoSourceV1Request.tlsRootCertFiles) &&
        Objects.equals(this.channelId, deployContractGoSourceV1Request.channelId) &&
        Objects.equals(this.targetOrganizations, deployContractGoSourceV1Request.targetOrganizations) &&
        Objects.equals(this.targetPeerAddresses, deployContractGoSourceV1Request.targetPeerAddresses) &&
        Objects.equals(this.constructorArgs, deployContractGoSourceV1Request.constructorArgs) &&
        Objects.equals(this.chainCodeVersion, deployContractGoSourceV1Request.chainCodeVersion) &&
        Objects.equals(this.goSource, deployContractGoSourceV1Request.goSource) &&
        Objects.equals(this.goMod, deployContractGoSourceV1Request.goMod) &&
        Objects.equals(this.moduleName, deployContractGoSourceV1Request.moduleName) &&
        Objects.equals(this.pinnedDeps, deployContractGoSourceV1Request.pinnedDeps) &&
        Objects.equals(this.modTidyOnly, deployContractGoSourceV1Request.modTidyOnly);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(policyDslSource, tlsRootCertFiles, channelId, targetOrganizations, targetPeerAddresses, constructorArgs, chainCodeVersion, goSource, goMod, moduleName, pinnedDeps, modTidyOnly);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeployContractGoSourceV1Request {\n");
    sb.append("    policyDslSource: ").append(toIndentedString(policyDslSource)).append("\n");
    sb.append("    tlsRootCertFiles: ").append(toIndentedString(tlsRootCertFiles)).append("\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    targetOrganizations: ").append(toIndentedString(targetOrganizations)).append("\n");
    sb.append("    targetPeerAddresses: ").append(toIndentedString(targetPeerAddresses)).append("\n");
    sb.append("    constructorArgs: ").append(toIndentedString(constructorArgs)).append("\n");
    sb.append("    chainCodeVersion: ").append(toIndentedString(chainCodeVersion)).append("\n");
    sb.append("    goSource: ").append(toIndentedString(goSource)).append("\n");
    sb.append("    goMod: ").append(toIndentedString(goMod)).append("\n");
    sb.append("    moduleName: ").append(toIndentedString(moduleName)).append("\n");
    sb.append("    pinnedDeps: ").append(toIndentedString(pinnedDeps)).append("\n");
    sb.append("    modTidyOnly: ").append(toIndentedString(modTidyOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("policyDslSource");
    openapiFields.add("tlsRootCertFiles");
    openapiFields.add("channelId");
    openapiFields.add("targetOrganizations");
    openapiFields.add("targetPeerAddresses");
    openapiFields.add("constructorArgs");
    openapiFields.add("chainCodeVersion");
    openapiFields.add("goSource");
    openapiFields.add("goMod");
    openapiFields.add("moduleName");
    openapiFields.add("pinnedDeps");
    openapiFields.add("modTidyOnly");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("policyDslSource");
    openapiRequiredFields.add("tlsRootCertFiles");
    openapiRequiredFields.add("channelId");
    openapiRequiredFields.add("targetOrganizations");
    openapiRequiredFields.add("targetPeerAddresses");
    openapiRequiredFields.add("chainCodeVersion");
    openapiRequiredFields.add("goSource");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DeployContractGoSourceV1Request
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DeployContractGoSourceV1Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeployContractGoSourceV1Request is not found in the empty JSON string", DeployContractGoSourceV1Request.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DeployContractGoSourceV1Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeployContractGoSourceV1Request` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeployContractGoSourceV1Request.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("policyDslSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyDslSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyDslSource").toString()));
      }
      if (!jsonObj.get("tlsRootCertFiles").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tlsRootCertFiles` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tlsRootCertFiles").toString()));
      }
      if (!jsonObj.get("channelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("targetOrganizations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetOrganizations` to be an array in the JSON string but got `%s`", jsonObj.get("targetOrganizations").toString()));
      }

      JsonArray jsonArraytargetOrganizations = jsonObj.getAsJsonArray("targetOrganizations");
      // validate the required field `targetOrganizations` (array)
      for (int i = 0; i < jsonArraytargetOrganizations.size(); i++) {
        DeploymentTargetOrganization.validateJsonObject(jsonArraytargetOrganizations.get(i).getAsJsonObject());
      };
      // ensure the required json array is present
      if (jsonObj.get("targetPeerAddresses") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("targetPeerAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetPeerAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("targetPeerAddresses").toString()));
      }
      // validate the optional field `constructorArgs`
      if (jsonObj.get("constructorArgs") != null && !jsonObj.get("constructorArgs").isJsonNull()) {
        DeployContractGoSourceV1RequestConstructorArgs.validateJsonObject(jsonObj.getAsJsonObject("constructorArgs"));
      }
      if (!jsonObj.get("chainCodeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chainCodeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chainCodeVersion").toString()));
      }
      // validate the required field `goSource`
      FileBase64.validateJsonObject(jsonObj.getAsJsonObject("goSource"));
      // validate the optional field `goMod`
      if (jsonObj.get("goMod") != null && !jsonObj.get("goMod").isJsonNull()) {
        FileBase64.validateJsonObject(jsonObj.getAsJsonObject("goMod"));
      }
      if ((jsonObj.get("moduleName") != null && !jsonObj.get("moduleName").isJsonNull()) && !jsonObj.get("moduleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moduleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moduleName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pinnedDeps") != null && !jsonObj.get("pinnedDeps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pinnedDeps` to be an array in the JSON string but got `%s`", jsonObj.get("pinnedDeps").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeployContractGoSourceV1Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeployContractGoSourceV1Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeployContractGoSourceV1Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeployContractGoSourceV1Request.class));

       return (TypeAdapter<T>) new TypeAdapter<DeployContractGoSourceV1Request>() {
           @Override
           public void write(JsonWriter out, DeployContractGoSourceV1Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeployContractGoSourceV1Request read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DeployContractGoSourceV1Request given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DeployContractGoSourceV1Request
  * @throws IOException if the JSON string is invalid with respect to DeployContractGoSourceV1Request
  */
  public static DeployContractGoSourceV1Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeployContractGoSourceV1Request.class);
  }

 /**
  * Convert an instance of DeployContractGoSourceV1Request to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

