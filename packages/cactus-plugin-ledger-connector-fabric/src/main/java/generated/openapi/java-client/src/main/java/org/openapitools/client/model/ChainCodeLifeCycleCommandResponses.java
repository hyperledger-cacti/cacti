/*
 * Hyperledger Cactus Plugin - Connector Fabric
 * Can perform basic tasks on a fabric ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.SSHExecCommandResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChainCodeLifeCycleCommandResponses
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ChainCodeLifeCycleCommandResponses {
  public static final String SERIALIZED_NAME_PACKAGING = "packaging";
  @SerializedName(SERIALIZED_NAME_PACKAGING)
  private SSHExecCommandResponse packaging;

  public static final String SERIALIZED_NAME_INSTALL_LIST = "installList";
  @SerializedName(SERIALIZED_NAME_INSTALL_LIST)
  private List<SSHExecCommandResponse> installList = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUERY_INSTALLED_LIST = "queryInstalledList";
  @SerializedName(SERIALIZED_NAME_QUERY_INSTALLED_LIST)
  private List<SSHExecCommandResponse> queryInstalledList = new ArrayList<>();

  public static final String SERIALIZED_NAME_APPROVE_FOR_MY_ORG_LIST = "approveForMyOrgList";
  @SerializedName(SERIALIZED_NAME_APPROVE_FOR_MY_ORG_LIST)
  private List<SSHExecCommandResponse> approveForMyOrgList = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMIT = "commit";
  @SerializedName(SERIALIZED_NAME_COMMIT)
  private SSHExecCommandResponse commit;

  public static final String SERIALIZED_NAME_QUERY_COMMITTED = "queryCommitted";
  @SerializedName(SERIALIZED_NAME_QUERY_COMMITTED)
  private SSHExecCommandResponse queryCommitted;

  public static final String SERIALIZED_NAME_INIT = "init";
  @SerializedName(SERIALIZED_NAME_INIT)
  private SSHExecCommandResponse init;

  public ChainCodeLifeCycleCommandResponses() {
  }

  public ChainCodeLifeCycleCommandResponses packaging(SSHExecCommandResponse packaging) {
    
    this.packaging = packaging;
    return this;
  }

   /**
   * Get packaging
   * @return packaging
  **/
  @javax.annotation.Nullable
  public SSHExecCommandResponse getPackaging() {
    return packaging;
  }


  public void setPackaging(SSHExecCommandResponse packaging) {
    this.packaging = packaging;
  }


  public ChainCodeLifeCycleCommandResponses installList(List<SSHExecCommandResponse> installList) {
    
    this.installList = installList;
    return this;
  }

  public ChainCodeLifeCycleCommandResponses addInstallListItem(SSHExecCommandResponse installListItem) {
    if (this.installList == null) {
      this.installList = new ArrayList<>();
    }
    this.installList.add(installListItem);
    return this;
  }

   /**
   * Get installList
   * @return installList
  **/
  @javax.annotation.Nonnull
  public List<SSHExecCommandResponse> getInstallList() {
    return installList;
  }


  public void setInstallList(List<SSHExecCommandResponse> installList) {
    this.installList = installList;
  }


  public ChainCodeLifeCycleCommandResponses queryInstalledList(List<SSHExecCommandResponse> queryInstalledList) {
    
    this.queryInstalledList = queryInstalledList;
    return this;
  }

  public ChainCodeLifeCycleCommandResponses addQueryInstalledListItem(SSHExecCommandResponse queryInstalledListItem) {
    if (this.queryInstalledList == null) {
      this.queryInstalledList = new ArrayList<>();
    }
    this.queryInstalledList.add(queryInstalledListItem);
    return this;
  }

   /**
   * Get queryInstalledList
   * @return queryInstalledList
  **/
  @javax.annotation.Nonnull
  public List<SSHExecCommandResponse> getQueryInstalledList() {
    return queryInstalledList;
  }


  public void setQueryInstalledList(List<SSHExecCommandResponse> queryInstalledList) {
    this.queryInstalledList = queryInstalledList;
  }


  public ChainCodeLifeCycleCommandResponses approveForMyOrgList(List<SSHExecCommandResponse> approveForMyOrgList) {
    
    this.approveForMyOrgList = approveForMyOrgList;
    return this;
  }

  public ChainCodeLifeCycleCommandResponses addApproveForMyOrgListItem(SSHExecCommandResponse approveForMyOrgListItem) {
    if (this.approveForMyOrgList == null) {
      this.approveForMyOrgList = new ArrayList<>();
    }
    this.approveForMyOrgList.add(approveForMyOrgListItem);
    return this;
  }

   /**
   * Get approveForMyOrgList
   * @return approveForMyOrgList
  **/
  @javax.annotation.Nonnull
  public List<SSHExecCommandResponse> getApproveForMyOrgList() {
    return approveForMyOrgList;
  }


  public void setApproveForMyOrgList(List<SSHExecCommandResponse> approveForMyOrgList) {
    this.approveForMyOrgList = approveForMyOrgList;
  }


  public ChainCodeLifeCycleCommandResponses commit(SSHExecCommandResponse commit) {
    
    this.commit = commit;
    return this;
  }

   /**
   * Get commit
   * @return commit
  **/
  @javax.annotation.Nullable
  public SSHExecCommandResponse getCommit() {
    return commit;
  }


  public void setCommit(SSHExecCommandResponse commit) {
    this.commit = commit;
  }


  public ChainCodeLifeCycleCommandResponses queryCommitted(SSHExecCommandResponse queryCommitted) {
    
    this.queryCommitted = queryCommitted;
    return this;
  }

   /**
   * Get queryCommitted
   * @return queryCommitted
  **/
  @javax.annotation.Nullable
  public SSHExecCommandResponse getQueryCommitted() {
    return queryCommitted;
  }


  public void setQueryCommitted(SSHExecCommandResponse queryCommitted) {
    this.queryCommitted = queryCommitted;
  }


  public ChainCodeLifeCycleCommandResponses init(SSHExecCommandResponse init) {
    
    this.init = init;
    return this;
  }

   /**
   * Get init
   * @return init
  **/
  @javax.annotation.Nullable
  public SSHExecCommandResponse getInit() {
    return init;
  }


  public void setInit(SSHExecCommandResponse init) {
    this.init = init;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChainCodeLifeCycleCommandResponses chainCodeLifeCycleCommandResponses = (ChainCodeLifeCycleCommandResponses) o;
    return Objects.equals(this.packaging, chainCodeLifeCycleCommandResponses.packaging) &&
        Objects.equals(this.installList, chainCodeLifeCycleCommandResponses.installList) &&
        Objects.equals(this.queryInstalledList, chainCodeLifeCycleCommandResponses.queryInstalledList) &&
        Objects.equals(this.approveForMyOrgList, chainCodeLifeCycleCommandResponses.approveForMyOrgList) &&
        Objects.equals(this.commit, chainCodeLifeCycleCommandResponses.commit) &&
        Objects.equals(this.queryCommitted, chainCodeLifeCycleCommandResponses.queryCommitted) &&
        Objects.equals(this.init, chainCodeLifeCycleCommandResponses.init);
  }

  @Override
  public int hashCode() {
    return Objects.hash(packaging, installList, queryInstalledList, approveForMyOrgList, commit, queryCommitted, init);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChainCodeLifeCycleCommandResponses {\n");
    sb.append("    packaging: ").append(toIndentedString(packaging)).append("\n");
    sb.append("    installList: ").append(toIndentedString(installList)).append("\n");
    sb.append("    queryInstalledList: ").append(toIndentedString(queryInstalledList)).append("\n");
    sb.append("    approveForMyOrgList: ").append(toIndentedString(approveForMyOrgList)).append("\n");
    sb.append("    commit: ").append(toIndentedString(commit)).append("\n");
    sb.append("    queryCommitted: ").append(toIndentedString(queryCommitted)).append("\n");
    sb.append("    init: ").append(toIndentedString(init)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("packaging");
    openapiFields.add("installList");
    openapiFields.add("queryInstalledList");
    openapiFields.add("approveForMyOrgList");
    openapiFields.add("commit");
    openapiFields.add("queryCommitted");
    openapiFields.add("init");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("installList");
    openapiRequiredFields.add("queryInstalledList");
    openapiRequiredFields.add("approveForMyOrgList");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ChainCodeLifeCycleCommandResponses
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ChainCodeLifeCycleCommandResponses.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChainCodeLifeCycleCommandResponses is not found in the empty JSON string", ChainCodeLifeCycleCommandResponses.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ChainCodeLifeCycleCommandResponses.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChainCodeLifeCycleCommandResponses` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChainCodeLifeCycleCommandResponses.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `packaging`
      if (jsonObj.get("packaging") != null && !jsonObj.get("packaging").isJsonNull()) {
        SSHExecCommandResponse.validateJsonObject(jsonObj.getAsJsonObject("packaging"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("installList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `installList` to be an array in the JSON string but got `%s`", jsonObj.get("installList").toString()));
      }

      JsonArray jsonArrayinstallList = jsonObj.getAsJsonArray("installList");
      // validate the required field `installList` (array)
      for (int i = 0; i < jsonArrayinstallList.size(); i++) {
        SSHExecCommandResponse.validateJsonObject(jsonArrayinstallList.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("queryInstalledList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryInstalledList` to be an array in the JSON string but got `%s`", jsonObj.get("queryInstalledList").toString()));
      }

      JsonArray jsonArrayqueryInstalledList = jsonObj.getAsJsonArray("queryInstalledList");
      // validate the required field `queryInstalledList` (array)
      for (int i = 0; i < jsonArrayqueryInstalledList.size(); i++) {
        SSHExecCommandResponse.validateJsonObject(jsonArrayqueryInstalledList.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("approveForMyOrgList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `approveForMyOrgList` to be an array in the JSON string but got `%s`", jsonObj.get("approveForMyOrgList").toString()));
      }

      JsonArray jsonArrayapproveForMyOrgList = jsonObj.getAsJsonArray("approveForMyOrgList");
      // validate the required field `approveForMyOrgList` (array)
      for (int i = 0; i < jsonArrayapproveForMyOrgList.size(); i++) {
        SSHExecCommandResponse.validateJsonObject(jsonArrayapproveForMyOrgList.get(i).getAsJsonObject());
      };
      // validate the optional field `commit`
      if (jsonObj.get("commit") != null && !jsonObj.get("commit").isJsonNull()) {
        SSHExecCommandResponse.validateJsonObject(jsonObj.getAsJsonObject("commit"));
      }
      // validate the optional field `queryCommitted`
      if (jsonObj.get("queryCommitted") != null && !jsonObj.get("queryCommitted").isJsonNull()) {
        SSHExecCommandResponse.validateJsonObject(jsonObj.getAsJsonObject("queryCommitted"));
      }
      // validate the optional field `init`
      if (jsonObj.get("init") != null && !jsonObj.get("init").isJsonNull()) {
        SSHExecCommandResponse.validateJsonObject(jsonObj.getAsJsonObject("init"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChainCodeLifeCycleCommandResponses.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChainCodeLifeCycleCommandResponses' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChainCodeLifeCycleCommandResponses> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChainCodeLifeCycleCommandResponses.class));

       return (TypeAdapter<T>) new TypeAdapter<ChainCodeLifeCycleCommandResponses>() {
           @Override
           public void write(JsonWriter out, ChainCodeLifeCycleCommandResponses value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChainCodeLifeCycleCommandResponses read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ChainCodeLifeCycleCommandResponses given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ChainCodeLifeCycleCommandResponses
  * @throws IOException if the JSON string is invalid with respect to ChainCodeLifeCycleCommandResponses
  */
  public static ChainCodeLifeCycleCommandResponses fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChainCodeLifeCycleCommandResponses.class);
  }

 /**
  * Convert an instance of ChainCodeLifeCycleCommandResponses to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

