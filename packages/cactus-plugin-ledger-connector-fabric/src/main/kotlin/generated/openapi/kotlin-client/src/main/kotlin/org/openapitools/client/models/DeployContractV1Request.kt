/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.ChainCodeProgrammingLanguage
import org.openapitools.client.models.DeployContractGoSourceV1RequestConstructorArgs
import org.openapitools.client.models.DeploymentTargetOrganization
import org.openapitools.client.models.FileBase64

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param ccLang 
 * @param caFile File-system path pointing at the CA file.
 * @param orderer Ordering service endpoint specified as <hostname or IP address>:<port>
 * @param ordererTLSHostnameOverride The hostname override to use when validating the TLS connection to the orderer
 * @param channelId The name of the Fabric channel where the contract will get instantiated.
 * @param targetOrganizations 
 * @param ccSequence 
 * @param ccVersion 
 * @param ccName 
 * @param ccLabel Human readable label to uniquely identify the contract. Recommended to include in this at least the contract name and the exact version in order to make it easily distinguishable from other deployments of the same contract.
 * @param sourceFiles The your-smart-contract.go file where the functionality of your contract is implemented.
 * @param connTimeout Timeout for client to connect (default 3s)
 * @param signaturePolicy Passed in to the peer via the --signature-policy argument on the command line. See also: https://hyperledger-fabric.readthedocs.io/en/release-2.2/endorsement-policies.html#setting-chaincode-level-endorsement-policies
 * @param collectionsConfigFile Name of the collections config file as present in the sourceFiles array of the request.
 * @param constructorArgs 
 */


data class DeployContractV1Request (

    @Json(name = "ccLang")
    val ccLang: ChainCodeProgrammingLanguage,

    /* File-system path pointing at the CA file. */
    @Json(name = "caFile")
    val caFile: kotlin.String,

    /* Ordering service endpoint specified as <hostname or IP address>:<port> */
    @Json(name = "orderer")
    val orderer: kotlin.String,

    /* The hostname override to use when validating the TLS connection to the orderer */
    @Json(name = "ordererTLSHostnameOverride")
    val ordererTLSHostnameOverride: kotlin.String,

    /* The name of the Fabric channel where the contract will get instantiated. */
    @Json(name = "channelId")
    val channelId: kotlin.String,

    @Json(name = "targetOrganizations")
    val targetOrganizations: kotlin.collections.List<DeploymentTargetOrganization>,

    @Json(name = "ccSequence")
    val ccSequence: java.math.BigDecimal,

    @Json(name = "ccVersion")
    val ccVersion: kotlin.String,

    @Json(name = "ccName")
    val ccName: kotlin.String,

    /* Human readable label to uniquely identify the contract. Recommended to include in this at least the contract name and the exact version in order to make it easily distinguishable from other deployments of the same contract. */
    @Json(name = "ccLabel")
    val ccLabel: kotlin.String,

    /* The your-smart-contract.go file where the functionality of your contract is implemented. */
    @Json(name = "sourceFiles")
    val sourceFiles: kotlin.collections.List<FileBase64>,

    /* Timeout for client to connect (default 3s) */
    @Json(name = "connTimeout")
    val connTimeout: kotlin.Int? = null,

    /* Passed in to the peer via the --signature-policy argument on the command line. See also: https://hyperledger-fabric.readthedocs.io/en/release-2.2/endorsement-policies.html#setting-chaincode-level-endorsement-policies */
    @Json(name = "signaturePolicy")
    val signaturePolicy: kotlin.String? = null,

    /* Name of the collections config file as present in the sourceFiles array of the request. */
    @Json(name = "collectionsConfigFile")
    val collectionsConfigFile: kotlin.String? = null,

    @Json(name = "constructorArgs")
    val constructorArgs: DeployContractGoSourceV1RequestConstructorArgs? = null

)

