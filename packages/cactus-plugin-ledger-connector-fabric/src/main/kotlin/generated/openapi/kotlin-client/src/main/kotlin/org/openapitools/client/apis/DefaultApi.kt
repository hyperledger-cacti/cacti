/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.DeployContractGoSourceV1501Response
import org.openapitools.client.models.DeployContractGoSourceV1Request
import org.openapitools.client.models.DeployContractGoSourceV1Response
import org.openapitools.client.models.DeployContractV1Request
import org.openapitools.client.models.DeployContractV1Response
import org.openapitools.client.models.ErrorExceptionResponseV1
import org.openapitools.client.models.GetBlockRequestV1
import org.openapitools.client.models.GetBlockResponseV1
import org.openapitools.client.models.GetTransactionReceiptResponse
import org.openapitools.client.models.RunDelegatedSignTransactionRequest
import org.openapitools.client.models.RunTransactionRequest
import org.openapitools.client.models.RunTransactionResponse

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class DefaultApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * Deploys a chaincode contract in the form of a go sources.
     * 
     * @param deployContractGoSourceV1Request  (optional)
     * @return DeployContractGoSourceV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deployContractGoSourceV1(deployContractGoSourceV1Request: DeployContractGoSourceV1Request? = null) : DeployContractGoSourceV1Response {
        val localVarResponse = deployContractGoSourceV1WithHttpInfo(deployContractGoSourceV1Request = deployContractGoSourceV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DeployContractGoSourceV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Deploys a chaincode contract in the form of a go sources.
     * 
     * @param deployContractGoSourceV1Request  (optional)
     * @return ApiResponse<DeployContractGoSourceV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deployContractGoSourceV1WithHttpInfo(deployContractGoSourceV1Request: DeployContractGoSourceV1Request?) : ApiResponse<DeployContractGoSourceV1Response?> {
        val localVariableConfig = deployContractGoSourceV1RequestConfig(deployContractGoSourceV1Request = deployContractGoSourceV1Request)

        return request<DeployContractGoSourceV1Request, DeployContractGoSourceV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deployContractGoSourceV1
     *
     * @param deployContractGoSourceV1Request  (optional)
     * @return RequestConfig
     */
    fun deployContractGoSourceV1RequestConfig(deployContractGoSourceV1Request: DeployContractGoSourceV1Request?) : RequestConfig<DeployContractGoSourceV1Request> {
        val localVariableBody = deployContractGoSourceV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-fabric/deploy-contract-go-source",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Deploys a chaincode contract from a set of source files. Note: This endpoint only supports Fabric 2.x. The &#39;v1&#39; suffix in the method name refers to the Cactus API version, not the supported Fabric ledger version.
     * 
     * @param deployContractV1Request  (optional)
     * @return DeployContractV1Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deployContractV1(deployContractV1Request: DeployContractV1Request? = null) : DeployContractV1Response {
        val localVarResponse = deployContractV1WithHttpInfo(deployContractV1Request = deployContractV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DeployContractV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Deploys a chaincode contract from a set of source files. Note: This endpoint only supports Fabric 2.x. The &#39;v1&#39; suffix in the method name refers to the Cactus API version, not the supported Fabric ledger version.
     * 
     * @param deployContractV1Request  (optional)
     * @return ApiResponse<DeployContractV1Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deployContractV1WithHttpInfo(deployContractV1Request: DeployContractV1Request?) : ApiResponse<DeployContractV1Response?> {
        val localVariableConfig = deployContractV1RequestConfig(deployContractV1Request = deployContractV1Request)

        return request<DeployContractV1Request, DeployContractV1Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deployContractV1
     *
     * @param deployContractV1Request  (optional)
     * @return RequestConfig
     */
    fun deployContractV1RequestConfig(deployContractV1Request: DeployContractV1Request?) : RequestConfig<DeployContractV1Request> {
        val localVariableBody = deployContractV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-fabric/deploy-contract",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get block from the channel using one of selectors from the input. Works only on Fabric 2.x.
     * 
     * @param getBlockRequestV1  (optional)
     * @return GetBlockResponseV1
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getBlockV1(getBlockRequestV1: GetBlockRequestV1? = null) : GetBlockResponseV1 {
        val localVarResponse = getBlockV1WithHttpInfo(getBlockRequestV1 = getBlockRequestV1)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetBlockResponseV1
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get block from the channel using one of selectors from the input. Works only on Fabric 2.x.
     * 
     * @param getBlockRequestV1  (optional)
     * @return ApiResponse<GetBlockResponseV1?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getBlockV1WithHttpInfo(getBlockRequestV1: GetBlockRequestV1?) : ApiResponse<GetBlockResponseV1?> {
        val localVariableConfig = getBlockV1RequestConfig(getBlockRequestV1 = getBlockRequestV1)

        return request<GetBlockRequestV1, GetBlockResponseV1>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getBlockV1
     *
     * @param getBlockRequestV1  (optional)
     * @return RequestConfig
     */
    fun getBlockV1RequestConfig(getBlockRequestV1: GetBlockRequestV1?) : RequestConfig<GetBlockRequestV1> {
        val localVariableBody = getBlockRequestV1
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-fabric/get-block",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get the Prometheus Metrics
     * 
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getPrometheusMetricsV1() : kotlin.String {
        val localVarResponse = getPrometheusMetricsV1WithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get the Prometheus Metrics
     * 
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getPrometheusMetricsV1WithHttpInfo() : ApiResponse<kotlin.String?> {
        val localVariableConfig = getPrometheusMetricsV1RequestConfig()

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getPrometheusMetricsV1
     *
     * @return RequestConfig
     */
    fun getPrometheusMetricsV1RequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-fabric/get-prometheus-exporter-metrics",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * get a transaction receipt by tx id on a Fabric ledger.
     * 
     * @param runTransactionRequest 
     * @return GetTransactionReceiptResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTransactionReceiptByTxIDV1(runTransactionRequest: RunTransactionRequest) : GetTransactionReceiptResponse {
        val localVarResponse = getTransactionReceiptByTxIDV1WithHttpInfo(runTransactionRequest = runTransactionRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetTransactionReceiptResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * get a transaction receipt by tx id on a Fabric ledger.
     * 
     * @param runTransactionRequest 
     * @return ApiResponse<GetTransactionReceiptResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getTransactionReceiptByTxIDV1WithHttpInfo(runTransactionRequest: RunTransactionRequest) : ApiResponse<GetTransactionReceiptResponse?> {
        val localVariableConfig = getTransactionReceiptByTxIDV1RequestConfig(runTransactionRequest = runTransactionRequest)

        return request<RunTransactionRequest, GetTransactionReceiptResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getTransactionReceiptByTxIDV1
     *
     * @param runTransactionRequest 
     * @return RequestConfig
     */
    fun getTransactionReceiptByTxIDV1RequestConfig(runTransactionRequest: RunTransactionRequest) : RequestConfig<RunTransactionRequest> {
        val localVariableBody = runTransactionRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-fabric/get-transaction-receipt-by-txid",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Runs a transaction on a Fabric ledger using user-provided signing callback.
     * 
     * @param runDelegatedSignTransactionRequest 
     * @return RunTransactionResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun runDelegatedSignTransactionV1(runDelegatedSignTransactionRequest: RunDelegatedSignTransactionRequest) : RunTransactionResponse {
        val localVarResponse = runDelegatedSignTransactionV1WithHttpInfo(runDelegatedSignTransactionRequest = runDelegatedSignTransactionRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RunTransactionResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Runs a transaction on a Fabric ledger using user-provided signing callback.
     * 
     * @param runDelegatedSignTransactionRequest 
     * @return ApiResponse<RunTransactionResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun runDelegatedSignTransactionV1WithHttpInfo(runDelegatedSignTransactionRequest: RunDelegatedSignTransactionRequest) : ApiResponse<RunTransactionResponse?> {
        val localVariableConfig = runDelegatedSignTransactionV1RequestConfig(runDelegatedSignTransactionRequest = runDelegatedSignTransactionRequest)

        return request<RunDelegatedSignTransactionRequest, RunTransactionResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation runDelegatedSignTransactionV1
     *
     * @param runDelegatedSignTransactionRequest 
     * @return RequestConfig
     */
    fun runDelegatedSignTransactionV1RequestConfig(runDelegatedSignTransactionRequest: RunDelegatedSignTransactionRequest) : RequestConfig<RunDelegatedSignTransactionRequest> {
        val localVariableBody = runDelegatedSignTransactionRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-fabric/run-delegated-sign-transaction",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Runs a transaction on a Fabric ledger.
     * 
     * @param runTransactionRequest 
     * @return RunTransactionResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun runTransactionV1(runTransactionRequest: RunTransactionRequest) : RunTransactionResponse {
        val localVarResponse = runTransactionV1WithHttpInfo(runTransactionRequest = runTransactionRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RunTransactionResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Runs a transaction on a Fabric ledger.
     * 
     * @param runTransactionRequest 
     * @return ApiResponse<RunTransactionResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun runTransactionV1WithHttpInfo(runTransactionRequest: RunTransactionRequest) : ApiResponse<RunTransactionResponse?> {
        val localVariableConfig = runTransactionV1RequestConfig(runTransactionRequest = runTransactionRequest)

        return request<RunTransactionRequest, RunTransactionResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation runTransactionV1
     *
     * @param runTransactionRequest 
     * @return RequestConfig
     */
    fun runTransactionV1RequestConfig(runTransactionRequest: RunTransactionRequest) : RequestConfig<RunTransactionRequest> {
        val localVariableBody = runTransactionRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-fabric/run-transaction",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
