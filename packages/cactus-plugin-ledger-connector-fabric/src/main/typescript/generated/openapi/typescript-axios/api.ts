/* tslint:disable */
/* eslint-disable */
/**
 * Hyperledger Cactus Plugin - Connector Fabric
 * Can perform basic tasks on a fabric ledger
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ConnectionProfile
 */
export interface ConnectionProfile {
    [key: string]: object | any;

    /**
     * 
     * @type {string}
     * @memberof ConnectionProfile
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionProfile
     */
    x_type?: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionProfile
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectionProfile
     */
    version: string;
    /**
     * 
     * @type {ConnectionProfileClient}
     * @memberof ConnectionProfile
     */
    client?: ConnectionProfileClient;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ConnectionProfile
     */
    channels?: { [key: string]: object; };
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ConnectionProfile
     */
    organizations: { [key: string]: object; };
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ConnectionProfile
     */
    orderers?: { [key: string]: object; };
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ConnectionProfile
     */
    peers: { [key: string]: object; };
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ConnectionProfile
     */
    certificateAuthorities?: { [key: string]: object; };
}
/**
 * 
 * @export
 * @interface ConnectionProfileClient
 */
export interface ConnectionProfileClient {
    /**
     * 
     * @type {string}
     * @memberof ConnectionProfileClient
     */
    organization?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum DefaultEventHandlerStrategy {
    MSPIDSCOPEALLFORTX = 'MSPID_SCOPE_ALLFORTX',
    MSPIDSCOPEANYFORTX = 'MSPID_SCOPE_ANYFORTX',
    NETWORKSCOPEALLFORTX = 'NETWORK_SCOPE_ALLFORTX',
    NETWORKSCOPEANYFORTX = 'NETWORK_SCOPE_ANYFORTX'
}

/**
 * 
 * @export
 * @interface DeployContractGoSourceV1Request
 */
export interface DeployContractGoSourceV1Request {
    /**
     * 
     * @type {string}
     * @memberof DeployContractGoSourceV1Request
     */
    policyDslSource: string;
    /**
     * The TLS root cert files that will be passed to the chaincode instantiation command.
     * @type {string}
     * @memberof DeployContractGoSourceV1Request
     */
    tlsRootCertFiles: string;
    /**
     * The name of the Fabric channel where the contract will get instantiated.
     * @type {string}
     * @memberof DeployContractGoSourceV1Request
     */
    channelId: string;
    /**
     * 
     * @type {Array<DeploymentTargetOrganization>}
     * @memberof DeployContractGoSourceV1Request
     */
    targetOrganizations: Array<DeploymentTargetOrganization>;
    /**
     * An array of peer addresses where the contract will be instantiated.
     * @type {Array<string>}
     * @memberof DeployContractGoSourceV1Request
     */
    targetPeerAddresses: Array<string>;
    /**
     * 
     * @type {DeployContractGoSourceV1RequestConstructorArgs}
     * @memberof DeployContractGoSourceV1Request
     */
    constructorArgs?: DeployContractGoSourceV1RequestConstructorArgs;
    /**
     * 
     * @type {string}
     * @memberof DeployContractGoSourceV1Request
     */
    chainCodeVersion: string;
    /**
     * 
     * @type {FileBase64}
     * @memberof DeployContractGoSourceV1Request
     */
    goSource: FileBase64;
    /**
     * 
     * @type {FileBase64}
     * @memberof DeployContractGoSourceV1Request
     */
    goMod?: FileBase64;
    /**
     * The go module name that will be used for the go compilation process.
     * @type {string}
     * @memberof DeployContractGoSourceV1Request
     */
    moduleName?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DeployContractGoSourceV1Request
     */
    pinnedDeps?: Array<string>;
    /**
     * Indicates to the go chaincode compiler of Cactus if it should do an actual go compilation with the contact source or if it should just execute the go mod tidy command.
     * @type {boolean}
     * @memberof DeployContractGoSourceV1Request
     */
    modTidyOnly?: boolean | null;
}
/**
 * 
 * @export
 * @interface DeployContractGoSourceV1RequestConstructorArgs
 */
export interface DeployContractGoSourceV1RequestConstructorArgs {
    /**
     * 
     * @type {Array<any>}
     * @memberof DeployContractGoSourceV1RequestConstructorArgs
     */
    Args?: Array<any>;
}
/**
 * 
 * @export
 * @interface DeployContractGoSourceV1Response
 */
export interface DeployContractGoSourceV1Response {
    /**
     * 
     * @type {boolean}
     * @memberof DeployContractGoSourceV1Response
     */
    success: boolean;
    /**
     * 
     * @type {SSHExecCommandResponse}
     * @memberof DeployContractGoSourceV1Response
     */
    installationCommandResponse: SSHExecCommandResponse;
    /**
     * 
     * @type {SSHExecCommandResponse}
     * @memberof DeployContractGoSourceV1Response
     */
    instantiationCommandResponse: SSHExecCommandResponse;
}
/**
 * 
 * @export
 * @interface DeploymentTargetOrganization
 */
export interface DeploymentTargetOrganization {
    /**
     * Mapped to environment variables of the Fabric CLI container.
     * @type {string}
     * @memberof DeploymentTargetOrganization
     */
    CORE_PEER_LOCALMSPID: string;
    /**
     * Mapped to environment variables of the Fabric CLI container.
     * @type {string}
     * @memberof DeploymentTargetOrganization
     */
    CORE_PEER_ADDRESS: string;
    /**
     * Mapped to environment variables of the Fabric CLI container.
     * @type {string}
     * @memberof DeploymentTargetOrganization
     */
    CORE_PEER_MSPCONFIGPATH: string;
    /**
     * Mapped to environment variables of the Fabric CLI container.
     * @type {string}
     * @memberof DeploymentTargetOrganization
     */
    CORE_PEER_TLS_ROOTCERT_FILE: string;
    /**
     * Mapped to environment variables of the Fabric CLI container.
     * @type {string}
     * @memberof DeploymentTargetOrganization
     */
    ORDERER_TLS_ROOTCERT_FILE: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum FabricContractInvocationType {
    SEND = 'FabricContractInvocationType.SEND',
    CALL = 'FabricContractInvocationType.CALL'
}

/**
 * 
 * @export
 * @interface FabricSigningCredential
 */
export interface FabricSigningCredential {
    /**
     * 
     * @type {string}
     * @memberof FabricSigningCredential
     */
    keychainId: string;
    /**
     * 
     * @type {string}
     * @memberof FabricSigningCredential
     */
    keychainRef: string;
}
/**
 * Represents a file-system file that has a name and a body which holds the file contents as a Base64 encoded string
 * @export
 * @interface FileBase64
 */
export interface FileBase64 {
    /**
     * The file\'s contents encoded as a Base64 string.
     * @type {string}
     * @memberof FileBase64
     */
    body: string;
    /**
     * The name as referred to on a file system
     * @type {string}
     * @memberof FileBase64
     */
    filename: string;
}
/**
 * 
 * @export
 * @interface GatewayDiscoveryOptions
 */
export interface GatewayDiscoveryOptions {
    /**
     * 
     * @type {boolean}
     * @memberof GatewayDiscoveryOptions
     */
    asLocalhost?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GatewayDiscoveryOptions
     */
    enabled?: boolean;
}
/**
 * 
 * @export
 * @interface GatewayEventHandlerOptions
 */
export interface GatewayEventHandlerOptions {
    /**
     * 
     * @type {number}
     * @memberof GatewayEventHandlerOptions
     */
    commitTimeout?: number;
    /**
     * 
     * @type {DefaultEventHandlerStrategy}
     * @memberof GatewayEventHandlerOptions
     */
    strategy: DefaultEventHandlerStrategy;
}
/**
 * 
 * @export
 * @interface InlineResponse501
 */
export interface InlineResponse501 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse501
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface RunTransactionRequest
 */
export interface RunTransactionRequest {
    /**
     * 
     * @type {FabricSigningCredential}
     * @memberof RunTransactionRequest
     */
    signingCredential: FabricSigningCredential;
    /**
     * 
     * @type {string}
     * @memberof RunTransactionRequest
     */
    channelName: string;
    /**
     * 
     * @type {string}
     * @memberof RunTransactionRequest
     */
    contractName: string;
    /**
     * 
     * @type {FabricContractInvocationType}
     * @memberof RunTransactionRequest
     */
    invocationType: FabricContractInvocationType;
    /**
     * 
     * @type {string}
     * @memberof RunTransactionRequest
     */
    methodName: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RunTransactionRequest
     */
    params: Array<string>;
}
/**
 * 
 * @export
 * @interface RunTransactionResponse
 */
export interface RunTransactionResponse {
    /**
     * 
     * @type {string}
     * @memberof RunTransactionResponse
     */
    functionOutput: string;
    /**
     * 
     * @type {boolean}
     * @memberof RunTransactionResponse
     */
    success: boolean;
}
/**
 * 
 * @export
 * @interface SSHExecCommandResponse
 */
export interface SSHExecCommandResponse {
    /**
     * 
     * @type {string}
     * @memberof SSHExecCommandResponse
     */
    stdout: string;
    /**
     * 
     * @type {string}
     * @memberof SSHExecCommandResponse
     */
    stderr: string;
    /**
     * 
     * @type {number}
     * @memberof SSHExecCommandResponse
     */
    code: number | null;
    /**
     * 
     * @type {string}
     * @memberof SSHExecCommandResponse
     */
    signal: string | null;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deploys a chaincode contract in the form of a go sources.
         * @param {DeployContractGoSourceV1Request} [deployContractGoSourceV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployContractGoSourceV1: async (deployContractGoSourceV1Request?: DeployContractGoSourceV1Request, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-fabric/deploy-contract-go-source`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof deployContractGoSourceV1Request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(deployContractGoSourceV1Request !== undefined ? deployContractGoSourceV1Request : {}) : (deployContractGoSourceV1Request || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the Prometheus Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrometheusExporterMetricsV1: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-fabric/get-prometheus-exporter-metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Runs a transaction on a Fabric ledger.
         * @param {RunTransactionRequest} runTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runTransactionV1: async (runTransactionRequest: RunTransactionRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'runTransactionRequest' is not null or undefined
            if (runTransactionRequest === null || runTransactionRequest === undefined) {
                throw new RequiredError('runTransactionRequest','Required parameter runTransactionRequest was null or undefined when calling runTransactionV1.');
            }
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-fabric/run-transaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof runTransactionRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(runTransactionRequest !== undefined ? runTransactionRequest : {}) : (runTransactionRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deploys a chaincode contract in the form of a go sources.
         * @param {DeployContractGoSourceV1Request} [deployContractGoSourceV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deployContractGoSourceV1(deployContractGoSourceV1Request?: DeployContractGoSourceV1Request, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeployContractGoSourceV1Response>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deployContractGoSourceV1(deployContractGoSourceV1Request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get the Prometheus Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrometheusExporterMetricsV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getPrometheusExporterMetricsV1(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Runs a transaction on a Fabric ledger.
         * @param {RunTransactionRequest} runTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runTransactionV1(runTransactionRequest: RunTransactionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunTransactionResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).runTransactionV1(runTransactionRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Deploys a chaincode contract in the form of a go sources.
         * @param {DeployContractGoSourceV1Request} [deployContractGoSourceV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployContractGoSourceV1(deployContractGoSourceV1Request?: DeployContractGoSourceV1Request, options?: any): AxiosPromise<DeployContractGoSourceV1Response> {
            return DefaultApiFp(configuration).deployContractGoSourceV1(deployContractGoSourceV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the Prometheus Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrometheusExporterMetricsV1(options?: any): AxiosPromise<string> {
            return DefaultApiFp(configuration).getPrometheusExporterMetricsV1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Runs a transaction on a Fabric ledger.
         * @param {RunTransactionRequest} runTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runTransactionV1(runTransactionRequest: RunTransactionRequest, options?: any): AxiosPromise<RunTransactionResponse> {
            return DefaultApiFp(configuration).runTransactionV1(runTransactionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Deploys a chaincode contract in the form of a go sources.
     * @param {DeployContractGoSourceV1Request} [deployContractGoSourceV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deployContractGoSourceV1(deployContractGoSourceV1Request?: DeployContractGoSourceV1Request, options?: any) {
        return DefaultApiFp(this.configuration).deployContractGoSourceV1(deployContractGoSourceV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the Prometheus Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPrometheusExporterMetricsV1(options?: any) {
        return DefaultApiFp(this.configuration).getPrometheusExporterMetricsV1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Runs a transaction on a Fabric ledger.
     * @param {RunTransactionRequest} runTransactionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public runTransactionV1(runTransactionRequest: RunTransactionRequest, options?: any) {
        return DefaultApiFp(this.configuration).runTransactionV1(runTransactionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


