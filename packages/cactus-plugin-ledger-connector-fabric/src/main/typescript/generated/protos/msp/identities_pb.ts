// Copyright the Hyperledger Fabric contributors. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0

// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file msp/identities.proto (package msp, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file msp/identities.proto.
 */
export const file_msp_identities: GenFile = /*@__PURE__*/
  fileDesc("ChRtc3AvaWRlbnRpdGllcy5wcm90bxIDbXNwIjUKElNlcmlhbGl6ZWRJZGVudGl0eRINCgVtc3BpZBgBIAEoCRIQCghpZF9ieXRlcxgCIAEoDCJhChhTZXJpYWxpemVkSWRlbWl4SWRlbnRpdHkSDQoFbnltX3gYASABKAwSDQoFbnltX3kYAiABKAwSCgoCb3UYAyABKAwSDAoEcm9sZRgEIAEoDBINCgVwcm9vZhgFIAEoDEJQCiFvcmcuaHlwZXJsZWRnZXIuZmFicmljLnByb3Rvcy5tc3BaK2dpdGh1Yi5jb20vaHlwZXJsZWRnZXIvZmFicmljLXByb3Rvcy1nby9tc3BiBnByb3RvMw");

/**
 * This struct represents an Identity
 * (with its MSP identifier) to be used
 * to serialize it and deserialize it
 *
 * @generated from message msp.SerializedIdentity
 */
export type SerializedIdentity = Message<"msp.SerializedIdentity"> & {
  /**
   * The identifier of the associated membership service provider
   *
   * @generated from field: string mspid = 1;
   */
  mspid: string;

  /**
   * the Identity, serialized according to the rules of its MPS
   *
   * @generated from field: bytes id_bytes = 2;
   */
  idBytes: Uint8Array;
};

/**
 * Describes the message msp.SerializedIdentity.
 * Use `create(SerializedIdentitySchema)` to create a new message.
 */
export const SerializedIdentitySchema: GenMessage<SerializedIdentity> = /*@__PURE__*/
  messageDesc(file_msp_identities, 0);

/**
 * This struct represents an Idemix Identity
 * to be used to serialize it and deserialize it.
 * The IdemixMSP will first serialize an idemix identity to bytes using
 * this proto, and then uses these bytes as id_bytes in SerializedIdentity
 *
 * @generated from message msp.SerializedIdemixIdentity
 */
export type SerializedIdemixIdentity = Message<"msp.SerializedIdemixIdentity"> & {
  /**
   * nym_x is the X-component of the pseudonym elliptic curve point.
   * It is a []byte representation of an amcl.BIG
   * The pseudonym can be seen as a public key of the identity, it is used to verify signatures.
   *
   * @generated from field: bytes nym_x = 1;
   */
  nymX: Uint8Array;

  /**
   * nym_y is the Y-component of the pseudonym elliptic curve point.
   * It is a []byte representation of an amcl.BIG
   * The pseudonym can be seen as a public key of the identity, it is used to verify signatures.
   *
   * @generated from field: bytes nym_y = 2;
   */
  nymY: Uint8Array;

  /**
   * ou contains the organizational unit of the idemix identity
   *
   * @generated from field: bytes ou = 3;
   */
  ou: Uint8Array;

  /**
   * role contains the role of this identity (e.g., ADMIN or MEMBER)
   *
   * @generated from field: bytes role = 4;
   */
  role: Uint8Array;

  /**
   * proof contains the cryptographic evidence that this identity is valid
   *
   * @generated from field: bytes proof = 5;
   */
  proof: Uint8Array;
};

/**
 * Describes the message msp.SerializedIdemixIdentity.
 * Use `create(SerializedIdemixIdentitySchema)` to create a new message.
 */
export const SerializedIdemixIdentitySchema: GenMessage<SerializedIdemixIdentity> = /*@__PURE__*/
  messageDesc(file_msp_identities, 1);

