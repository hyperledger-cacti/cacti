// Copyright the Hyperledger Fabric contributors. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0

// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file msp/msp_principal.proto (package common, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file msp/msp_principal.proto.
 */
export const file_msp_msp_principal: GenFile = /*@__PURE__*/
  fileDesc("Chdtc3AvbXNwX3ByaW5jaXBhbC5wcm90bxIGY29tbW9uIsYBCgxNU1BQcmluY2lwYWwSRQoYcHJpbmNpcGFsX2NsYXNzaWZpY2F0aW9uGAEgASgOMiMuY29tbW9uLk1TUFByaW5jaXBhbC5DbGFzc2lmaWNhdGlvbhIRCglwcmluY2lwYWwYAiABKAwiXAoOQ2xhc3NpZmljYXRpb24SCAoEUk9MRRAAEhUKEU9SR0FOSVpBVElPTl9VTklUEAESDAoISURFTlRJVFkQAhINCglBTk9OWU1JVFkQAxIMCghDT01CSU5FRBAEInEKEE9yZ2FuaXphdGlvblVuaXQSFgoObXNwX2lkZW50aWZpZXIYASABKAkSJgoeb3JnYW5pemF0aW9uYWxfdW5pdF9pZGVudGlmaWVyGAIgASgJEh0KFWNlcnRpZmllcnNfaWRlbnRpZmllchgDIAEoDCKVAQoHTVNQUm9sZRIWCg5tc3BfaWRlbnRpZmllchgBIAEoCRIpCgRyb2xlGAIgASgOMhsuY29tbW9uLk1TUFJvbGUuTVNQUm9sZVR5cGUiRwoLTVNQUm9sZVR5cGUSCgoGTUVNQkVSEAASCQoFQURNSU4QARIKCgZDTElFTlQQAhIICgRQRUVSEAMSCwoHT1JERVJFUhAEIp0BChRNU1BJZGVudGl0eUFub255bWl0eRJNCg5hbm9ueW1pdHlfdHlwZRgBIAEoDjI1LmNvbW1vbi5NU1BJZGVudGl0eUFub255bWl0eS5NU1BJZGVudGl0eUFub255bWl0eVR5cGUiNgoYTVNQSWRlbnRpdHlBbm9ueW1pdHlUeXBlEgsKB05PTUlOQUwQABINCglBTk9OWU1PVVMQASI9ChFDb21iaW5lZFByaW5jaXBhbBIoCgpwcmluY2lwYWxzGAEgAygLMhQuY29tbW9uLk1TUFByaW5jaXBhbEJTCiRvcmcuaHlwZXJsZWRnZXIuZmFicmljLnByb3Rvcy5jb21tb25aK2dpdGh1Yi5jb20vaHlwZXJsZWRnZXIvZmFicmljLXByb3Rvcy1nby9tc3BiBnByb3RvMw");

/**
 * MSPPrincipal aims to represent an MSP-centric set of identities.
 * In particular, this structure allows for definition of
 *  - a group of identities that are member of the same MSP
 *  - a group of identities that are member of the same organization unit
 *    in the same MSP
 *  - a group of identities that are administering a specific MSP
 *  - a specific identity
 * Expressing these groups is done given two fields of the fields below
 *  - Classification, that defines the type of classification of identities
 *    in an MSP this principal would be defined on; Classification can take
 *    three values:
 *     (i)  ByMSPRole: that represents a classification of identities within
 *          MSP based on one of the two pre-defined MSP rules, "member" and "admin"
 *     (ii) ByOrganizationUnit: that represents a classification of identities
 *          within MSP based on the organization unit an identity belongs to
 *     (iii)ByIdentity that denotes that MSPPrincipal is mapped to a single
 *          identity/certificate; this would mean that the Principal bytes
 *          message
 *
 * @generated from message common.MSPPrincipal
 */
export type MSPPrincipal = Message<"common.MSPPrincipal"> & {
  /**
   * Classification describes the way that one should process
   * Principal. An Classification value of "ByOrganizationUnit" reflects
   * that "Principal" contains the name of an organization this MSP
   * handles. A Classification value "ByIdentity" means that
   * "Principal" contains a specific identity. Default value
   * denotes that Principal contains one of the groups by
   * default supported by all MSPs ("admin" or "member").
   *
   * @generated from field: common.MSPPrincipal.Classification principal_classification = 1;
   */
  principalClassification: MSPPrincipal_Classification;

  /**
   * Principal completes the policy principal definition. For the default
   * principal types, Principal can be either "Admin" or "Member".
   * For the ByOrganizationUnit/ByIdentity values of Classification,
   * PolicyPrincipal acquires its value from an organization unit or
   * identity, respectively.
   * For the Combined Classification type, the Principal is a marshalled
   * CombinedPrincipal.
   *
   * @generated from field: bytes principal = 2;
   */
  principal: Uint8Array;
};

/**
 * Describes the message common.MSPPrincipal.
 * Use `create(MSPPrincipalSchema)` to create a new message.
 */
export const MSPPrincipalSchema: GenMessage<MSPPrincipal> = /*@__PURE__*/
  messageDesc(file_msp_msp_principal, 0);

/**
 * @generated from enum common.MSPPrincipal.Classification
 */
export enum MSPPrincipal_Classification {
  /**
   * Represents the one of the dedicated MSP roles, the
   *
   * @generated from enum value: ROLE = 0;
   */
  ROLE = 0,

  /**
   * one of a member of MSP network, and the one of an
   * administrator of an MSP network
   *
   * Denotes a finer grained (affiliation-based)
   *
   * @generated from enum value: ORGANIZATION_UNIT = 1;
   */
  ORGANIZATION_UNIT = 1,

  /**
   * groupping of entities, per MSP affiliation
   * E.g., this can well be represented by an MSP's
   * Organization unit
   *
   * Denotes a principal that consists of a single
   *
   * @generated from enum value: IDENTITY = 2;
   */
  IDENTITY = 2,

  /**
   * identity
   *
   * Denotes a principal that can be used to enforce
   *
   * @generated from enum value: ANONYMITY = 3;
   */
  ANONYMITY = 3,

  /**
   * an identity to be anonymous or nominal.
   *
   * Denotes a combined principal
   *
   * @generated from enum value: COMBINED = 4;
   */
  COMBINED = 4,
}

/**
 * Describes the enum common.MSPPrincipal.Classification.
 */
export const MSPPrincipal_ClassificationSchema: GenEnum<MSPPrincipal_Classification> = /*@__PURE__*/
  enumDesc(file_msp_msp_principal, 0, 0);

/**
 * OrganizationUnit governs the organization of the Principal
 * field of a policy principal when a specific organization unity members
 * are to be defined within a policy principal.
 *
 * @generated from message common.OrganizationUnit
 */
export type OrganizationUnit = Message<"common.OrganizationUnit"> & {
  /**
   * MSPIdentifier represents the identifier of the MSP this organization unit
   * refers to
   *
   * @generated from field: string msp_identifier = 1;
   */
  mspIdentifier: string;

  /**
   * OrganizationUnitIdentifier defines the organizational unit under the
   * MSP identified with MSPIdentifier
   *
   * @generated from field: string organizational_unit_identifier = 2;
   */
  organizationalUnitIdentifier: string;

  /**
   * CertifiersIdentifier is the hash of certificates chain of trust
   * related to this organizational unit
   *
   * @generated from field: bytes certifiers_identifier = 3;
   */
  certifiersIdentifier: Uint8Array;
};

/**
 * Describes the message common.OrganizationUnit.
 * Use `create(OrganizationUnitSchema)` to create a new message.
 */
export const OrganizationUnitSchema: GenMessage<OrganizationUnit> = /*@__PURE__*/
  messageDesc(file_msp_msp_principal, 1);

/**
 * MSPRole governs the organization of the Principal
 * field of an MSPPrincipal when it aims to define one of the
 * two dedicated roles within an MSP: Admin and Members.
 *
 * @generated from message common.MSPRole
 */
export type MSPRole = Message<"common.MSPRole"> & {
  /**
   * MSPIdentifier represents the identifier of the MSP this principal
   * refers to
   *
   * @generated from field: string msp_identifier = 1;
   */
  mspIdentifier: string;

  /**
   * MSPRoleType defines which of the available, pre-defined MSP-roles
   * an identiy should posess inside the MSP with identifier MSPidentifier
   *
   * @generated from field: common.MSPRole.MSPRoleType role = 2;
   */
  role: MSPRole_MSPRoleType;
};

/**
 * Describes the message common.MSPRole.
 * Use `create(MSPRoleSchema)` to create a new message.
 */
export const MSPRoleSchema: GenMessage<MSPRole> = /*@__PURE__*/
  messageDesc(file_msp_msp_principal, 2);

/**
 * @generated from enum common.MSPRole.MSPRoleType
 */
export enum MSPRole_MSPRoleType {
  /**
   * Represents an MSP Member
   *
   * @generated from enum value: MEMBER = 0;
   */
  MEMBER = 0,

  /**
   * Represents an MSP Admin
   *
   * @generated from enum value: ADMIN = 1;
   */
  ADMIN = 1,

  /**
   * Represents an MSP Client
   *
   * @generated from enum value: CLIENT = 2;
   */
  CLIENT = 2,

  /**
   * Represents an MSP Peer
   *
   * @generated from enum value: PEER = 3;
   */
  PEER = 3,

  /**
   * Represents an MSP Orderer
   *
   * @generated from enum value: ORDERER = 4;
   */
  ORDERER = 4,
}

/**
 * Describes the enum common.MSPRole.MSPRoleType.
 */
export const MSPRole_MSPRoleTypeSchema: GenEnum<MSPRole_MSPRoleType> = /*@__PURE__*/
  enumDesc(file_msp_msp_principal, 2, 0);

/**
 * MSPIdentityAnonymity can be used to enforce an identity to be anonymous or nominal.
 *
 * @generated from message common.MSPIdentityAnonymity
 */
export type MSPIdentityAnonymity = Message<"common.MSPIdentityAnonymity"> & {
  /**
   * @generated from field: common.MSPIdentityAnonymity.MSPIdentityAnonymityType anonymity_type = 1;
   */
  anonymityType: MSPIdentityAnonymity_MSPIdentityAnonymityType;
};

/**
 * Describes the message common.MSPIdentityAnonymity.
 * Use `create(MSPIdentityAnonymitySchema)` to create a new message.
 */
export const MSPIdentityAnonymitySchema: GenMessage<MSPIdentityAnonymity> = /*@__PURE__*/
  messageDesc(file_msp_msp_principal, 3);

/**
 * @generated from enum common.MSPIdentityAnonymity.MSPIdentityAnonymityType
 */
export enum MSPIdentityAnonymity_MSPIdentityAnonymityType {
  /**
   * Represents a nominal MSP Identity
   *
   * @generated from enum value: NOMINAL = 0;
   */
  NOMINAL = 0,

  /**
   * Represents an anonymous MSP Identity
   *
   * @generated from enum value: ANONYMOUS = 1;
   */
  ANONYMOUS = 1,
}

/**
 * Describes the enum common.MSPIdentityAnonymity.MSPIdentityAnonymityType.
 */
export const MSPIdentityAnonymity_MSPIdentityAnonymityTypeSchema: GenEnum<MSPIdentityAnonymity_MSPIdentityAnonymityType> = /*@__PURE__*/
  enumDesc(file_msp_msp_principal, 3, 0);

/**
 * CombinedPrincipal governs the organization of the Principal
 * field of a policy principal when principal_classification has
 * indicated that a combined form of principals is required
 *
 * @generated from message common.CombinedPrincipal
 */
export type CombinedPrincipal = Message<"common.CombinedPrincipal"> & {
  /**
   * Principals refer to combined principals
   *
   * @generated from field: repeated common.MSPPrincipal principals = 1;
   */
  principals: MSPPrincipal[];
};

/**
 * Describes the message common.CombinedPrincipal.
 * Use `create(CombinedPrincipalSchema)` to create a new message.
 */
export const CombinedPrincipalSchema: GenMessage<CombinedPrincipal> = /*@__PURE__*/
  messageDesc(file_msp_msp_principal, 4);

