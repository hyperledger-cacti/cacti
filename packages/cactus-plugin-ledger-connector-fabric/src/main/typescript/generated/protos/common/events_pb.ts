// Copyright IBM Corp. All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0

// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file common/events.proto (package common.events, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Query } from "./query_pb";
import { file_common_query } from "./query_pb";
import type { RequestState } from "./state_pb";
import { file_common_state } from "./state_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file common/events.proto.
 */
export const file_common_events: GenFile = /*@__PURE__*/
  fileDesc("ChNjb21tb24vZXZlbnRzLnByb3RvEg1jb21tb24uZXZlbnRzIq4BCgxFdmVudE1hdGNoZXISLAoKZXZlbnRfdHlwZRgBIAEoDjIYLmNvbW1vbi5ldmVudHMuRXZlbnRUeXBlEhYKDmV2ZW50X2NsYXNzX2lkGAIgASgJEh0KFXRyYW5zYWN0aW9uX2xlZGdlcl9pZBgDIAEoCRIfChd0cmFuc2FjdGlvbl9jb250cmFjdF9pZBgEIAEoCRIYChB0cmFuc2FjdGlvbl9mdW5jGAUgASgJIqABChFFdmVudFN1YnNjcmlwdGlvbhIyCg1ldmVudF9tYXRjaGVyGAEgASgLMhsuY29tbW9uLmV2ZW50cy5FdmVudE1hdGNoZXISIgoFcXVlcnkYAiABKAsyEy5jb21tb24ucXVlcnkuUXVlcnkSMwoJb3BlcmF0aW9uGAMgASgOMiAuY29tbW9uLmV2ZW50cy5FdmVudFN1Yk9wZXJhdGlvbiLQAwoWRXZlbnRTdWJzY3JpcHRpb25TdGF0ZRISCgpyZXF1ZXN0X2lkGAEgASgJEh0KFXB1Ymxpc2hpbmdfcmVxdWVzdF9pZBgCIAEoCRI8CgZzdGF0dXMYAyABKA4yLC5jb21tb24uZXZlbnRzLkV2ZW50U3Vic2NyaXB0aW9uU3RhdGUuU1RBVFVTEg8KB21lc3NhZ2UYBCABKAkSMgoNZXZlbnRfbWF0Y2hlchgFIAEoCzIbLmNvbW1vbi5ldmVudHMuRXZlbnRNYXRjaGVyEkAKF2V2ZW50X3B1YmxpY2F0aW9uX3NwZWNzGAYgAygLMh8uY29tbW9uLmV2ZW50cy5FdmVudFB1YmxpY2F0aW9uIr0BCgZTVEFUVVMSGQoVU1VCU0NSSUJFX1BFTkRJTkdfQUNLEAASFQoRU1VCU0NSSUJFX1BFTkRJTkcQARIOCgpTVUJTQ1JJQkVEEAISGwoXVU5TVUJTQ1JJQkVfUEVORElOR19BQ0sQAxIXChNVTlNVQlNDUklCRV9QRU5ESU5HEAQSEAoMVU5TVUJTQ1JJQkVEEAUSCQoFRVJST1IQBhIeChpEVVBMSUNBVEVfUVVFUllfU1VCU0NSSUJFRBAHIpgBChNDb250cmFjdFRyYW5zYWN0aW9uEhEKCWRyaXZlcl9pZBgBIAEoCRIRCglsZWRnZXJfaWQYAiABKAkSEwoLY29udHJhY3RfaWQYAyABKAkSDAoEZnVuYxgEIAEoCRIMCgRhcmdzGAUgAygMEhkKEXJlcGxhY2VfYXJnX2luZGV4GAYgASgEEg8KB21lbWJlcnMYByADKAkibgoQRXZlbnRQdWJsaWNhdGlvbhIxCgNjdHgYASABKAsyIi5jb21tb24uZXZlbnRzLkNvbnRyYWN0VHJhbnNhY3Rpb25IABIRCgdhcHBfdXJsGAIgASgJSABCFAoScHVibGljYXRpb25fdGFyZ2V0IjgKC0V2ZW50U3RhdGVzEikKBnN0YXRlcxgBIAMoCzIZLmNvbW1vbi5ldmVudHMuRXZlbnRTdGF0ZSJaCgpFdmVudFN0YXRlEikKBXN0YXRlGAEgASgLMhouY29tbW9uLnN0YXRlLlJlcXVlc3RTdGF0ZRIQCghldmVudF9pZBgCIAEoCRIPCgdtZXNzYWdlGAMgASgJKj4KCUV2ZW50VHlwZRIQCgxMRURHRVJfU1RBVEUQABIOCgpBU1NFVF9MT0NLEAESDwoLQVNTRVRfQ0xBSU0QAio/ChFFdmVudFN1Yk9wZXJhdGlvbhINCglTVUJTQ1JJQkUQABIPCgtVTlNVQlNDUklCRRABEgoKBlVQREFURRACQnkKMW9yZy5oeXBlcmxlZGdlci5jYWN0aS53ZWF2ZXIucHJvdG9zLmNvbW1vbi5ldmVudHNaRGdpdGh1Yi5jb20vaHlwZXJsZWRnZXItY2FjdGkvY2FjdGkvd2VhdmVyL2NvbW1vbi9wcm90b3MtZ28vdjIvY29tbW9uYgZwcm90bzM", [file_common_query, file_common_state]);

/**
 * @generated from message common.events.EventMatcher
 */
export type EventMatcher = Message<"common.events.EventMatcher"> & {
  /**
   * @generated from field: common.events.EventType event_type = 1;
   */
  eventType: EventType;

  /**
   * @generated from field: string event_class_id = 2;
   */
  eventClassId: string;

  /**
   * @generated from field: string transaction_ledger_id = 3;
   */
  transactionLedgerId: string;

  /**
   * @generated from field: string transaction_contract_id = 4;
   */
  transactionContractId: string;

  /**
   * @generated from field: string transaction_func = 5;
   */
  transactionFunc: string;
};

/**
 * Describes the message common.events.EventMatcher.
 * Use `create(EventMatcherSchema)` to create a new message.
 */
export const EventMatcherSchema: GenMessage<EventMatcher> = /*@__PURE__*/
  messageDesc(file_common_events, 0);

/**
 * Below message is used to communicate between dest-relay and src-relay;
 * and src-relay and src-driver.
 *
 * @generated from message common.events.EventSubscription
 */
export type EventSubscription = Message<"common.events.EventSubscription"> & {
  /**
   * @generated from field: common.events.EventMatcher event_matcher = 1;
   */
  eventMatcher?: EventMatcher;

  /**
   * @generated from field: common.query.Query query = 2;
   */
  query?: Query;

  /**
   * @generated from field: common.events.EventSubOperation operation = 3;
   */
  operation: EventSubOperation;
};

/**
 * Describes the message common.events.EventSubscription.
 * Use `create(EventSubscriptionSchema)` to create a new message.
 */
export const EventSubscriptionSchema: GenMessage<EventSubscription> = /*@__PURE__*/
  messageDesc(file_common_events, 1);

/**
 * @generated from message common.events.EventSubscriptionState
 */
export type EventSubscriptionState = Message<"common.events.EventSubscriptionState"> & {
  /**
   * @generated from field: string request_id = 1;
   */
  requestId: string;

  /**
   * @generated from field: string publishing_request_id = 2;
   */
  publishingRequestId: string;

  /**
   * @generated from field: common.events.EventSubscriptionState.STATUS status = 3;
   */
  status: EventSubscriptionState_STATUS;

  /**
   * @generated from field: string message = 4;
   */
  message: string;

  /**
   * @generated from field: common.events.EventMatcher event_matcher = 5;
   */
  eventMatcher?: EventMatcher;

  /**
   * @generated from field: repeated common.events.EventPublication event_publication_specs = 6;
   */
  eventPublicationSpecs: EventPublication[];
};

/**
 * Describes the message common.events.EventSubscriptionState.
 * Use `create(EventSubscriptionStateSchema)` to create a new message.
 */
export const EventSubscriptionStateSchema: GenMessage<EventSubscriptionState> = /*@__PURE__*/
  messageDesc(file_common_events, 2);

/**
 * @generated from enum common.events.EventSubscriptionState.STATUS
 */
export enum EventSubscriptionState_STATUS {
  /**
   * pending ACK from remote relay
   *
   * @generated from enum value: SUBSCRIBE_PENDING_ACK = 0;
   */
  SUBSCRIBE_PENDING_ACK = 0,

  /**
   * Received ACK, waiting for event subscription confirmation from remote relay
   *
   * @generated from enum value: SUBSCRIBE_PENDING = 1;
   */
  SUBSCRIBE_PENDING = 1,

  /**
   * @generated from enum value: SUBSCRIBED = 2;
   */
  SUBSCRIBED = 2,

  /**
   * @generated from enum value: UNSUBSCRIBE_PENDING_ACK = 3;
   */
  UNSUBSCRIBE_PENDING_ACK = 3,

  /**
   * @generated from enum value: UNSUBSCRIBE_PENDING = 4;
   */
  UNSUBSCRIBE_PENDING = 4,

  /**
   * @generated from enum value: UNSUBSCRIBED = 5;
   */
  UNSUBSCRIBED = 5,

  /**
   * @generated from enum value: ERROR = 6;
   */
  ERROR = 6,

  /**
   * @generated from enum value: DUPLICATE_QUERY_SUBSCRIBED = 7;
   */
  DUPLICATE_QUERY_SUBSCRIBED = 7,
}

/**
 * Describes the enum common.events.EventSubscriptionState.STATUS.
 */
export const EventSubscriptionState_STATUSSchema: GenEnum<EventSubscriptionState_STATUS> = /*@__PURE__*/
  enumDesc(file_common_events, 2, 0);

/**
 * @generated from message common.events.ContractTransaction
 */
export type ContractTransaction = Message<"common.events.ContractTransaction"> & {
  /**
   * @generated from field: string driver_id = 1;
   */
  driverId: string;

  /**
   * @generated from field: string ledger_id = 2;
   */
  ledgerId: string;

  /**
   * @generated from field: string contract_id = 3;
   */
  contractId: string;

  /**
   * @generated from field: string func = 4;
   */
  func: string;

  /**
   * @generated from field: repeated bytes args = 5;
   */
  args: Uint8Array[];

  /**
   * @generated from field: uint64 replace_arg_index = 6;
   */
  replaceArgIndex: bigint;

  /**
   * @generated from field: repeated string members = 7;
   */
  members: string[];
};

/**
 * Describes the message common.events.ContractTransaction.
 * Use `create(ContractTransactionSchema)` to create a new message.
 */
export const ContractTransactionSchema: GenMessage<ContractTransaction> = /*@__PURE__*/
  messageDesc(file_common_events, 3);

/**
 * @generated from message common.events.EventPublication
 */
export type EventPublication = Message<"common.events.EventPublication"> & {
  /**
   * @generated from oneof common.events.EventPublication.publication_target
   */
  publicationTarget: {
    /**
     * @generated from field: common.events.ContractTransaction ctx = 1;
     */
    value: ContractTransaction;
    case: "ctx";
  } | {
    /**
     * @generated from field: string app_url = 2;
     */
    value: string;
    case: "appUrl";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message common.events.EventPublication.
 * Use `create(EventPublicationSchema)` to create a new message.
 */
export const EventPublicationSchema: GenMessage<EventPublication> = /*@__PURE__*/
  messageDesc(file_common_events, 4);

/**
 * @generated from message common.events.EventStates
 */
export type EventStates = Message<"common.events.EventStates"> & {
  /**
   * @generated from field: repeated common.events.EventState states = 1;
   */
  states: EventState[];
};

/**
 * Describes the message common.events.EventStates.
 * Use `create(EventStatesSchema)` to create a new message.
 */
export const EventStatesSchema: GenMessage<EventStates> = /*@__PURE__*/
  messageDesc(file_common_events, 5);

/**
 * the payload that is used for the communication between the requesting relay
 * and its network
 *
 * @generated from message common.events.EventState
 */
export type EventState = Message<"common.events.EventState"> & {
  /**
   * @generated from field: common.state.RequestState state = 1;
   */
  state?: RequestState;

  /**
   * @generated from field: string event_id = 2;
   */
  eventId: string;

  /**
   * @generated from field: string message = 3;
   */
  message: string;
};

/**
 * Describes the message common.events.EventState.
 * Use `create(EventStateSchema)` to create a new message.
 */
export const EventStateSchema: GenMessage<EventState> = /*@__PURE__*/
  messageDesc(file_common_events, 6);

/**
 * @generated from enum common.events.EventType
 */
export enum EventType {
  /**
   * @generated from enum value: LEDGER_STATE = 0;
   */
  LEDGER_STATE = 0,

  /**
   * @generated from enum value: ASSET_LOCK = 1;
   */
  ASSET_LOCK = 1,

  /**
   * @generated from enum value: ASSET_CLAIM = 2;
   */
  ASSET_CLAIM = 2,
}

/**
 * Describes the enum common.events.EventType.
 */
export const EventTypeSchema: GenEnum<EventType> = /*@__PURE__*/
  enumDesc(file_common_events, 0);

/**
 * @generated from enum common.events.EventSubOperation
 */
export enum EventSubOperation {
  /**
   * @generated from enum value: SUBSCRIBE = 0;
   */
  SUBSCRIBE = 0,

  /**
   * @generated from enum value: UNSUBSCRIBE = 1;
   */
  UNSUBSCRIBE = 1,

  /**
   * @generated from enum value: UPDATE = 2;
   */
  UPDATE = 2,
}

/**
 * Describes the enum common.events.EventSubOperation.
 */
export const EventSubOperationSchema: GenEnum<EventSubOperation> = /*@__PURE__*/
  enumDesc(file_common_events, 1);

