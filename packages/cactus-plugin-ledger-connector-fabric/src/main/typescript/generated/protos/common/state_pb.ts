// Copyright IBM Corp. All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0

// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file common/state.proto (package common.state, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file common/state.proto.
 */
export const file_common_state: GenFile = /*@__PURE__*/
  fileDesc("ChJjb21tb24vc3RhdGUucHJvdG8SDGNvbW1vbi5zdGF0ZSK4AQoETWV0YRItCghwcm90b2NvbBgBIAEoDjIbLmNvbW1vbi5zdGF0ZS5NZXRhLlByb3RvY29sEhEKCXRpbWVzdGFtcBgCIAEoCRISCgpwcm9vZl90eXBlGAMgASgJEhwKFHNlcmlhbGl6YXRpb25fZm9ybWF0GAQgASgJIjwKCFByb3RvY29sEgsKB0JJVENPSU4QABIMCghFVEhFUkVVTRABEgoKBkZBQlJJQxADEgkKBUNPUkRBEAQiNgoEVmlldxIgCgRtZXRhGAEgASgLMhIuY29tbW9uLnN0YXRlLk1ldGESDAoEZGF0YRgCIAEoDCJfCgtWaWV3UGF5bG9hZBISCgpyZXF1ZXN0X2lkGAEgASgJEiIKBHZpZXcYAiABKAsyEi5jb21tb24uc3RhdGUuVmlld0gAEg8KBWVycm9yGAMgASgJSABCBwoFc3RhdGUioQIKDFJlcXVlc3RTdGF0ZRISCgpyZXF1ZXN0X2lkGAEgASgJEjEKBnN0YXR1cxgCIAEoDjIhLmNvbW1vbi5zdGF0ZS5SZXF1ZXN0U3RhdGUuU1RBVFVTEiIKBHZpZXcYAyABKAsyEi5jb21tb24uc3RhdGUuVmlld0gAEg8KBWVycm9yGAQgASgJSAAiiwEKBlNUQVRVUxIPCgtQRU5ESU5HX0FDSxAAEgsKB1BFTkRJTkcQARIJCgVFUlJPUhACEg0KCUNPTVBMRVRFRBADEhIKDkVWRU5UX1JFQ0VJVkVEEAQSEQoNRVZFTlRfV1JJVFRFThAFEhUKEUVWRU5UX1dSSVRFX0VSUk9SEAYSCwoHREVMRVRFRBAHQgcKBXN0YXRlQngKMG9yZy5oeXBlcmxlZGdlci5jYWN0aS53ZWF2ZXIucHJvdG9zLmNvbW1vbi5zdGF0ZVpEZ2l0aHViLmNvbS9oeXBlcmxlZGdlci1jYWN0aS9jYWN0aS93ZWF2ZXIvY29tbW9uL3Byb3Rvcy1nby92Mi9jb21tb25iBnByb3RvMw");

/**
 * Metadata for a View
 *
 * @generated from message common.state.Meta
 */
export type Meta = Message<"common.state.Meta"> & {
  /**
   * Underlying distributed ledger protocol.
   *
   * @generated from field: common.state.Meta.Protocol protocol = 1;
   */
  protocol: Meta_Protocol;

  /**
   * What notion of time? 
   * If the observer and network are synchronizing on a global clock
   * there won't be a need to distinguish between static and dynamic views.
   *
   * @generated from field: string timestamp = 2;
   */
  timestamp: string;

  /**
   * Notorization, SPV, ZKP, etc. Possibly enum
   *
   * @generated from field: string proof_type = 3;
   */
  proofType: string;

  /**
   * The data field's serialization format (e.g. JSON, XML, Protobuf)
   *
   * @generated from field: string serialization_format = 4;
   */
  serializationFormat: string;
};

/**
 * Describes the message common.state.Meta.
 * Use `create(MetaSchema)` to create a new message.
 */
export const MetaSchema: GenMessage<Meta> = /*@__PURE__*/
  messageDesc(file_common_state, 0);

/**
 * @generated from enum common.state.Meta.Protocol
 */
export enum Meta_Protocol {
  /**
   * @generated from enum value: BITCOIN = 0;
   */
  BITCOIN = 0,

  /**
   * @generated from enum value: ETHEREUM = 1;
   */
  ETHEREUM = 1,

  /**
   * @generated from enum value: FABRIC = 3;
   */
  FABRIC = 3,

  /**
   * @generated from enum value: CORDA = 4;
   */
  CORDA = 4,
}

/**
 * Describes the enum common.state.Meta.Protocol.
 */
export const Meta_ProtocolSchema: GenEnum<Meta_Protocol> = /*@__PURE__*/
  enumDesc(file_common_state, 0, 0);

/**
 * @generated from message common.state.View
 */
export type View = Message<"common.state.View"> & {
  /**
   * @generated from field: common.state.Meta meta = 1;
   */
  meta?: Meta;

  /**
   * Represents the data playload of this view. 
   * The representation of Fabric, Corda etc will be captured elsewhere.
   * For some protocols, like Bitcoin, the structure of an SPV proof is well known.
   *
   * @generated from field: bytes data = 2;
   */
  data: Uint8Array;
};

/**
 * Describes the message common.state.View.
 * Use `create(ViewSchema)` to create a new message.
 */
export const ViewSchema: GenMessage<View> = /*@__PURE__*/
  messageDesc(file_common_state, 1);

/**
 * View represents the response from a remote network
 *
 * @generated from message common.state.ViewPayload
 */
export type ViewPayload = Message<"common.state.ViewPayload"> & {
  /**
   * @generated from field: string request_id = 1;
   */
  requestId: string;

  /**
   * @generated from oneof common.state.ViewPayload.state
   */
  state: {
    /**
     * @generated from field: common.state.View view = 2;
     */
    value: View;
    case: "view";
  } | {
    /**
     * @generated from field: string error = 3;
     */
    value: string;
    case: "error";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message common.state.ViewPayload.
 * Use `create(ViewPayloadSchema)` to create a new message.
 */
export const ViewPayloadSchema: GenMessage<ViewPayload> = /*@__PURE__*/
  messageDesc(file_common_state, 2);

/**
 * the payload that is used for the communication between the requesting relay
 * and its network
 *
 * @generated from message common.state.RequestState
 */
export type RequestState = Message<"common.state.RequestState"> & {
  /**
   * @generated from field: string request_id = 1;
   */
  requestId: string;

  /**
   * @generated from field: common.state.RequestState.STATUS status = 2;
   */
  status: RequestState_STATUS;

  /**
   * @generated from oneof common.state.RequestState.state
   */
  state: {
    /**
     * @generated from field: common.state.View view = 3;
     */
    value: View;
    case: "view";
  } | {
    /**
     * @generated from field: string error = 4;
     */
    value: string;
    case: "error";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message common.state.RequestState.
 * Use `create(RequestStateSchema)` to create a new message.
 */
export const RequestStateSchema: GenMessage<RequestState> = /*@__PURE__*/
  messageDesc(file_common_state, 3);

/**
 * @generated from enum common.state.RequestState.STATUS
 */
export enum RequestState_STATUS {
  /**
   * pending ACK from remote relay
   *
   * @generated from enum value: PENDING_ACK = 0;
   */
  PENDING_ACK = 0,

  /**
   * Received ACK, waiting for data to be sent from remote relay
   *
   * @generated from enum value: PENDING = 1;
   */
  PENDING = 1,

  /**
   * View is not there, received error from remote relay
   *
   * @generated from enum value: ERROR = 2;
   */
  ERROR = 2,

  /**
   * Data Sharing completed Successfully
   *
   * @generated from enum value: COMPLETED = 3;
   */
  COMPLETED = 3,

  /**
   * View is there and event is received from remote relay
   *
   * @generated from enum value: EVENT_RECEIVED = 4;
   */
  EVENT_RECEIVED = 4,

  /**
   * Driver Successfully wrote the view to ledger
   *
   * @generated from enum value: EVENT_WRITTEN = 5;
   */
  EVENT_WRITTEN = 5,

  /**
   * View is there but driver failed to write
   *
   * @generated from enum value: EVENT_WRITE_ERROR = 6;
   */
  EVENT_WRITE_ERROR = 6,

  /**
   * Once network fetches this request state, mark it delete for cleanup later on
   *
   * @generated from enum value: DELETED = 7;
   */
  DELETED = 7,
}

/**
 * Describes the enum common.state.RequestState.STATUS.
 */
export const RequestState_STATUSSchema: GenEnum<RequestState_STATUS> = /*@__PURE__*/
  enumDesc(file_common_state, 3, 0);

