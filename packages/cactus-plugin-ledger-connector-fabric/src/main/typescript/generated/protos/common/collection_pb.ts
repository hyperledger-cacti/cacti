// Copyright the Hyperledger Fabric contributors. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0

// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file common/collection.proto (package common, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { ApplicationPolicy, SignaturePolicyEnvelope } from "./policies_pb";
import { file_common_policies } from "./policies_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file common/collection.proto.
 */
export const file_common_collection: GenFile = /*@__PURE__*/
  fileDesc("Chdjb21tb24vY29sbGVjdGlvbi5wcm90bxIGY29tbW9uIkcKF0NvbGxlY3Rpb25Db25maWdQYWNrYWdlEigKBmNvbmZpZxgBIAMoCzIYLmNvbW1vbi5Db2xsZWN0aW9uQ29uZmlnOgIYASJlChBDb2xsZWN0aW9uQ29uZmlnEkIKGHN0YXRpY19jb2xsZWN0aW9uX2NvbmZpZxgBIAEoCzIeLmNvbW1vbi5TdGF0aWNDb2xsZWN0aW9uQ29uZmlnSAA6AhgBQgkKB3BheWxvYWQiogIKFlN0YXRpY0NvbGxlY3Rpb25Db25maWcSDAoEbmFtZRgBIAEoCRI6ChJtZW1iZXJfb3Jnc19wb2xpY3kYAiABKAsyHi5jb21tb24uQ29sbGVjdGlvblBvbGljeUNvbmZpZxIbChNyZXF1aXJlZF9wZWVyX2NvdW50GAMgASgFEhoKEm1heGltdW1fcGVlcl9jb3VudBgEIAEoBRIVCg1ibG9ja190b19saXZlGAUgASgEEhgKEG1lbWJlcl9vbmx5X3JlYWQYBiABKAgSGQoRbWVtYmVyX29ubHlfd3JpdGUYByABKAgSNQoSZW5kb3JzZW1lbnRfcG9saWN5GAggASgLMhkuY29tbW9uLkFwcGxpY2F0aW9uUG9saWN5OgIYASJkChZDb2xsZWN0aW9uUG9saWN5Q29uZmlnEjsKEHNpZ25hdHVyZV9wb2xpY3kYASABKAsyHy5jb21tb24uU2lnbmF0dXJlUG9saWN5RW52ZWxvcGVIADoCGAFCCQoHcGF5bG9hZEJWCiRvcmcuaHlwZXJsZWRnZXIuZmFicmljLnByb3Rvcy5jb21tb25aLmdpdGh1Yi5jb20vaHlwZXJsZWRnZXIvZmFicmljLXByb3Rvcy1nby9jb21tb25iBnByb3RvMw", [file_common_policies]);

/**
 * CollectionConfigPackage represents an array of CollectionConfig
 * messages; the extra struct is required because repeated oneof is
 * forbidden by the protobuf syntax
 *
 * @generated from message common.CollectionConfigPackage
 * @deprecated
 */
export type CollectionConfigPackage = Message<"common.CollectionConfigPackage"> & {
  /**
   * @generated from field: repeated common.CollectionConfig config = 1;
   */
  config: CollectionConfig[];
};

/**
 * Describes the message common.CollectionConfigPackage.
 * Use `create(CollectionConfigPackageSchema)` to create a new message.
 * @deprecated
 */
export const CollectionConfigPackageSchema: GenMessage<CollectionConfigPackage> = /*@__PURE__*/
  messageDesc(file_common_collection, 0);

/**
 * CollectionConfig defines the configuration of a collection object;
 * it currently contains a single, static type.
 * Dynamic collections are deferred.
 *
 * @generated from message common.CollectionConfig
 * @deprecated
 */
export type CollectionConfig = Message<"common.CollectionConfig"> & {
  /**
   * @generated from oneof common.CollectionConfig.payload
   * @deprecated
   */
  payload: {
    /**
     * @generated from field: common.StaticCollectionConfig static_collection_config = 1;
     */
    value: StaticCollectionConfig;
    case: "staticCollectionConfig";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message common.CollectionConfig.
 * Use `create(CollectionConfigSchema)` to create a new message.
 * @deprecated
 */
export const CollectionConfigSchema: GenMessage<CollectionConfig> = /*@__PURE__*/
  messageDesc(file_common_collection, 1);

/**
 * StaticCollectionConfig constitutes the configuration parameters of a
 * static collection object. Static collections are collections that are
 * known at chaincode instantiation time, and that cannot be changed.
 * Dynamic collections are deferred.
 *
 * @generated from message common.StaticCollectionConfig
 * @deprecated
 */
export type StaticCollectionConfig = Message<"common.StaticCollectionConfig"> & {
  /**
   * the name of the collection inside the denoted chaincode
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * a reference to a policy residing / managed in the config block
   * to define which orgs have access to this collectionâ€™s private data
   *
   * @generated from field: common.CollectionPolicyConfig member_orgs_policy = 2;
   */
  memberOrgsPolicy?: CollectionPolicyConfig;

  /**
   * The minimum number of peers private data will be sent to upon
   * endorsement. The endorsement would fail if dissemination to at least
   * this number of peers is not achieved.
   *
   * @generated from field: int32 required_peer_count = 3;
   */
  requiredPeerCount: number;

  /**
   * The maximum number of peers that private data will be sent to
   * upon endorsement. This number has to be bigger than required_peer_count.
   *
   * @generated from field: int32 maximum_peer_count = 4;
   */
  maximumPeerCount: number;

  /**
   * The number of blocks after which the collection data expires.
   * For instance if the value is set to 10, a key last modified by block number 100
   * will be purged at block number 111. A zero value is treated same as MaxUint64
   *
   * @generated from field: uint64 block_to_live = 5;
   */
  blockToLive: bigint;

  /**
   * The member only read access denotes whether only collection member clients
   * can read the private data (if set to true), or even non members can
   * read the data (if set to false, for example if you want to implement more granular
   * access logic in the chaincode)
   *
   * @generated from field: bool member_only_read = 6;
   */
  memberOnlyRead: boolean;

  /**
   * The member only write access denotes whether only collection member clients
   * can write the private data (if set to true), or even non members can
   * write the data (if set to false, for example if you want to implement more granular
   * access logic in the chaincode)
   *
   * @generated from field: bool member_only_write = 7;
   */
  memberOnlyWrite: boolean;

  /**
   * a reference to a policy residing / managed in the config block
   * to define the endorsement policy for this collection
   *
   * @generated from field: common.ApplicationPolicy endorsement_policy = 8;
   */
  endorsementPolicy?: ApplicationPolicy;
};

/**
 * Describes the message common.StaticCollectionConfig.
 * Use `create(StaticCollectionConfigSchema)` to create a new message.
 * @deprecated
 */
export const StaticCollectionConfigSchema: GenMessage<StaticCollectionConfig> = /*@__PURE__*/
  messageDesc(file_common_collection, 2);

/**
 * Collection policy configuration. Initially, the configuration can only
 * contain a SignaturePolicy. In the future, the SignaturePolicy may be a
 * more general Policy. Instead of containing the actual policy, the
 * configuration may in the future contain a string reference to a policy.
 *
 * @generated from message common.CollectionPolicyConfig
 * @deprecated
 */
export type CollectionPolicyConfig = Message<"common.CollectionPolicyConfig"> & {
  /**
   * @generated from oneof common.CollectionPolicyConfig.payload
   * @deprecated
   */
  payload: {
    /**
     * Initially, only a signature policy is supported.
     *
     * Later, the SignaturePolicy will be replaced by a Policy.
     *        Policy policy = 1;
     * A reference to a Policy is planned to be added later.
     *        string reference = 2;
     *
     * @generated from field: common.SignaturePolicyEnvelope signature_policy = 1;
     */
    value: SignaturePolicyEnvelope;
    case: "signaturePolicy";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message common.CollectionPolicyConfig.
 * Use `create(CollectionPolicyConfigSchema)` to create a new message.
 * @deprecated
 */
export const CollectionPolicyConfigSchema: GenMessage<CollectionPolicyConfig> = /*@__PURE__*/
  messageDesc(file_common_collection, 3);

