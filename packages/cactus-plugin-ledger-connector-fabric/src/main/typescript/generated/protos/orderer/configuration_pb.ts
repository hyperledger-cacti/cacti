// Copyright the Hyperledger Fabric contributors. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0

// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file orderer/configuration.proto (package orderer, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file orderer/configuration.proto.
 */
export const file_orderer_configuration: GenFile = /*@__PURE__*/
  fileDesc("ChtvcmRlcmVyL2NvbmZpZ3VyYXRpb24ucHJvdG8SB29yZGVyZXIijgEKDUNvbnNlbnN1c1R5cGUSDAoEdHlwZRgBIAEoCRIQCghtZXRhZGF0YRgCIAEoDBIrCgVzdGF0ZRgDIAEoDjIcLm9yZGVyZXIuQ29uc2Vuc3VzVHlwZS5TdGF0ZSIwCgVTdGF0ZRIQCgxTVEFURV9OT1JNQUwQABIVChFTVEFURV9NQUlOVEVOQU5DRRABIl8KCUJhdGNoU2l6ZRIZChFtYXhfbWVzc2FnZV9jb3VudBgBIAEoDRIaChJhYnNvbHV0ZV9tYXhfYnl0ZXMYAiABKA0SGwoTcHJlZmVycmVkX21heF9ieXRlcxgDIAEoDSIfCgxCYXRjaFRpbWVvdXQSDwoHdGltZW91dBgBIAEoCSIfCgxLYWZrYUJyb2tlcnMSDwoHYnJva2VycxgBIAMoCSIoChNDaGFubmVsUmVzdHJpY3Rpb25zEhEKCW1heF9jb3VudBgBIAEoBEJYCiVvcmcuaHlwZXJsZWRnZXIuZmFicmljLnByb3Rvcy5vcmRlcmVyWi9naXRodWIuY29tL2h5cGVybGVkZ2VyL2ZhYnJpYy1wcm90b3MtZ28vb3JkZXJlcmIGcHJvdG8z");

/**
 * @generated from message orderer.ConsensusType
 */
export type ConsensusType = Message<"orderer.ConsensusType"> & {
  /**
   * The consensus type: "solo", "kafka" or "etcdraft".
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * Opaque metadata, dependent on the consensus type.
   *
   * @generated from field: bytes metadata = 2;
   */
  metadata: Uint8Array;

  /**
   * The state signals the ordering service to go into maintenance mode, typically for consensus-type migration.
   *
   * @generated from field: orderer.ConsensusType.State state = 3;
   */
  state: ConsensusType_State;
};

/**
 * Describes the message orderer.ConsensusType.
 * Use `create(ConsensusTypeSchema)` to create a new message.
 */
export const ConsensusTypeSchema: GenMessage<ConsensusType> = /*@__PURE__*/
  messageDesc(file_orderer_configuration, 0);

/**
 * State defines the orderer mode of operation, typically for consensus-type migration.
 * NORMAL is during normal operation, when consensus-type migration is not, and can not, take place.
 * MAINTENANCE is when the consensus-type can be changed.
 *
 * @generated from enum orderer.ConsensusType.State
 */
export enum ConsensusType_State {
  /**
   * @generated from enum value: STATE_NORMAL = 0;
   */
  NORMAL = 0,

  /**
   * @generated from enum value: STATE_MAINTENANCE = 1;
   */
  MAINTENANCE = 1,
}

/**
 * Describes the enum orderer.ConsensusType.State.
 */
export const ConsensusType_StateSchema: GenEnum<ConsensusType_State> = /*@__PURE__*/
  enumDesc(file_orderer_configuration, 0, 0);

/**
 * @generated from message orderer.BatchSize
 */
export type BatchSize = Message<"orderer.BatchSize"> & {
  /**
   * Simply specified as number of messages for now, in the future
   * we may want to allow this to be specified by size in bytes
   *
   * @generated from field: uint32 max_message_count = 1;
   */
  maxMessageCount: number;

  /**
   * The byte count of the serialized messages in a batch cannot
   * exceed this value.
   *
   * @generated from field: uint32 absolute_max_bytes = 2;
   */
  absoluteMaxBytes: number;

  /**
   * The byte count of the serialized messages in a batch should not
   * exceed this value.
   *
   * @generated from field: uint32 preferred_max_bytes = 3;
   */
  preferredMaxBytes: number;
};

/**
 * Describes the message orderer.BatchSize.
 * Use `create(BatchSizeSchema)` to create a new message.
 */
export const BatchSizeSchema: GenMessage<BatchSize> = /*@__PURE__*/
  messageDesc(file_orderer_configuration, 1);

/**
 * @generated from message orderer.BatchTimeout
 */
export type BatchTimeout = Message<"orderer.BatchTimeout"> & {
  /**
   * Any duration string parseable by ParseDuration():
   * https://golang.org/pkg/time/#ParseDuration
   *
   * @generated from field: string timeout = 1;
   */
  timeout: string;
};

/**
 * Describes the message orderer.BatchTimeout.
 * Use `create(BatchTimeoutSchema)` to create a new message.
 */
export const BatchTimeoutSchema: GenMessage<BatchTimeout> = /*@__PURE__*/
  messageDesc(file_orderer_configuration, 2);

/**
 * Carries a list of bootstrap brokers, i.e. this is not the exclusive set of
 * brokers an ordering service
 *
 * @generated from message orderer.KafkaBrokers
 */
export type KafkaBrokers = Message<"orderer.KafkaBrokers"> & {
  /**
   * Each broker here should be identified using the (IP|host):port notation,
   * e.g. 127.0.0.1:7050, or localhost:7050 are valid entries
   *
   * @generated from field: repeated string brokers = 1;
   */
  brokers: string[];
};

/**
 * Describes the message orderer.KafkaBrokers.
 * Use `create(KafkaBrokersSchema)` to create a new message.
 */
export const KafkaBrokersSchema: GenMessage<KafkaBrokers> = /*@__PURE__*/
  messageDesc(file_orderer_configuration, 3);

/**
 * ChannelRestrictions is the mssage which conveys restrictions on channel creation for an orderer
 *
 * @generated from message orderer.ChannelRestrictions
 */
export type ChannelRestrictions = Message<"orderer.ChannelRestrictions"> & {
  /**
   * The max count of channels to allow to be created, a value of 0 indicates no limit
   *
   * @generated from field: uint64 max_count = 1;
   */
  maxCount: bigint;
};

/**
 * Describes the message orderer.ChannelRestrictions.
 * Use `create(ChannelRestrictionsSchema)` to create a new message.
 */
export const ChannelRestrictionsSchema: GenMessage<ChannelRestrictions> = /*@__PURE__*/
  messageDesc(file_orderer_configuration, 4);

