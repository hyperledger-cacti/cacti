// Copyright the Hyperledger Fabric contributors. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0

// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file orderer/ab.proto (package orderer, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Block, EnvelopeSchema, Status } from "../common/common_pb";
import { file_common_common } from "../common/common_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file orderer/ab.proto.
 */
export const file_orderer_ab: GenFile = /*@__PURE__*/
  fileDesc("ChBvcmRlcmVyL2FiLnByb3RvEgdvcmRlcmVyIkEKEUJyb2FkY2FzdFJlc3BvbnNlEh4KBnN0YXR1cxgBIAEoDjIOLmNvbW1vbi5TdGF0dXMSDAoEaW5mbxgCIAEoCSIMCgpTZWVrTmV3ZXN0IgwKClNlZWtPbGRlc3QiHwoNU2Vla1NwZWNpZmllZBIOCgZudW1iZXIYASABKAQikQEKDFNlZWtQb3NpdGlvbhIlCgZuZXdlc3QYASABKAsyEy5vcmRlcmVyLlNlZWtOZXdlc3RIABIlCgZvbGRlc3QYAiABKAsyEy5vcmRlcmVyLlNlZWtPbGRlc3RIABIrCglzcGVjaWZpZWQYAyABKAsyFi5vcmRlcmVyLlNlZWtTcGVjaWZpZWRIAEIGCgRUeXBlIrQCCghTZWVrSW5mbxIkCgVzdGFydBgBIAEoCzIVLm9yZGVyZXIuU2Vla1Bvc2l0aW9uEiMKBHN0b3AYAiABKAsyFS5vcmRlcmVyLlNlZWtQb3NpdGlvbhIwCghiZWhhdmlvchgDIAEoDjIeLm9yZGVyZXIuU2Vla0luZm8uU2Vla0JlaGF2aW9yEjsKDmVycm9yX3Jlc3BvbnNlGAQgASgOMiMub3JkZXJlci5TZWVrSW5mby5TZWVrRXJyb3JSZXNwb25zZSI8CgxTZWVrQmVoYXZpb3ISFQoRQkxPQ0tfVU5USUxfUkVBRFkQABIVChFGQUlMX0lGX05PVF9SRUFEWRABIjAKEVNlZWtFcnJvclJlc3BvbnNlEgoKBlNUUklDVBAAEg8KC0JFU1RfRUZGT1JUEAEiWwoPRGVsaXZlclJlc3BvbnNlEiAKBnN0YXR1cxgBIAEoDjIOLmNvbW1vbi5TdGF0dXNIABIeCgVibG9jaxgCIAEoCzINLmNvbW1vbi5CbG9ja0gAQgYKBFR5cGUyiwEKD0F0b21pY0Jyb2FkY2FzdBI9CglCcm9hZGNhc3QSEC5jb21tb24uRW52ZWxvcGUaGi5vcmRlcmVyLkJyb2FkY2FzdFJlc3BvbnNlKAEwARI5CgdEZWxpdmVyEhAuY29tbW9uLkVudmVsb3BlGhgub3JkZXJlci5EZWxpdmVyUmVzcG9uc2UoATABQlgKJW9yZy5oeXBlcmxlZGdlci5mYWJyaWMucHJvdG9zLm9yZGVyZXJaL2dpdGh1Yi5jb20vaHlwZXJsZWRnZXIvZmFicmljLXByb3Rvcy1nby9vcmRlcmVyYgZwcm90bzM", [file_common_common]);

/**
 * @generated from message orderer.BroadcastResponse
 */
export type BroadcastResponse = Message<"orderer.BroadcastResponse"> & {
  /**
   * Status code, which may be used to programatically respond to success/failure
   *
   * @generated from field: common.Status status = 1;
   */
  status: Status;

  /**
   * Info string which may contain additional information about the status returned
   *
   * @generated from field: string info = 2;
   */
  info: string;
};

/**
 * Describes the message orderer.BroadcastResponse.
 * Use `create(BroadcastResponseSchema)` to create a new message.
 */
export const BroadcastResponseSchema: GenMessage<BroadcastResponse> = /*@__PURE__*/
  messageDesc(file_orderer_ab, 0);

/**
 * @generated from message orderer.SeekNewest
 */
export type SeekNewest = Message<"orderer.SeekNewest"> & {
};

/**
 * Describes the message orderer.SeekNewest.
 * Use `create(SeekNewestSchema)` to create a new message.
 */
export const SeekNewestSchema: GenMessage<SeekNewest> = /*@__PURE__*/
  messageDesc(file_orderer_ab, 1);

/**
 * @generated from message orderer.SeekOldest
 */
export type SeekOldest = Message<"orderer.SeekOldest"> & {
};

/**
 * Describes the message orderer.SeekOldest.
 * Use `create(SeekOldestSchema)` to create a new message.
 */
export const SeekOldestSchema: GenMessage<SeekOldest> = /*@__PURE__*/
  messageDesc(file_orderer_ab, 2);

/**
 * @generated from message orderer.SeekSpecified
 */
export type SeekSpecified = Message<"orderer.SeekSpecified"> & {
  /**
   * @generated from field: uint64 number = 1;
   */
  number: bigint;
};

/**
 * Describes the message orderer.SeekSpecified.
 * Use `create(SeekSpecifiedSchema)` to create a new message.
 */
export const SeekSpecifiedSchema: GenMessage<SeekSpecified> = /*@__PURE__*/
  messageDesc(file_orderer_ab, 3);

/**
 * @generated from message orderer.SeekPosition
 */
export type SeekPosition = Message<"orderer.SeekPosition"> & {
  /**
   * @generated from oneof orderer.SeekPosition.Type
   */
  Type: {
    /**
     * @generated from field: orderer.SeekNewest newest = 1;
     */
    value: SeekNewest;
    case: "newest";
  } | {
    /**
     * @generated from field: orderer.SeekOldest oldest = 2;
     */
    value: SeekOldest;
    case: "oldest";
  } | {
    /**
     * @generated from field: orderer.SeekSpecified specified = 3;
     */
    value: SeekSpecified;
    case: "specified";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message orderer.SeekPosition.
 * Use `create(SeekPositionSchema)` to create a new message.
 */
export const SeekPositionSchema: GenMessage<SeekPosition> = /*@__PURE__*/
  messageDesc(file_orderer_ab, 4);

/**
 * SeekInfo specifies the range of requested blocks to return
 * If the start position is not found, an error is immediately returned
 * Otherwise, blocks are returned until a missing block is encountered, then behavior is dictated
 * by the SeekBehavior specified.
 *
 * @generated from message orderer.SeekInfo
 */
export type SeekInfo = Message<"orderer.SeekInfo"> & {
  /**
   * The position to start the deliver from
   *
   * @generated from field: orderer.SeekPosition start = 1;
   */
  start?: SeekPosition;

  /**
   * The position to stop the deliver
   *
   * @generated from field: orderer.SeekPosition stop = 2;
   */
  stop?: SeekPosition;

  /**
   * The behavior when a missing block is encountered
   *
   * @generated from field: orderer.SeekInfo.SeekBehavior behavior = 3;
   */
  behavior: SeekInfo_SeekBehavior;

  /**
   * How to respond to errors reported to the deliver service
   *
   * @generated from field: orderer.SeekInfo.SeekErrorResponse error_response = 4;
   */
  errorResponse: SeekInfo_SeekErrorResponse;
};

/**
 * Describes the message orderer.SeekInfo.
 * Use `create(SeekInfoSchema)` to create a new message.
 */
export const SeekInfoSchema: GenMessage<SeekInfo> = /*@__PURE__*/
  messageDesc(file_orderer_ab, 5);

/**
 * If BLOCK_UNTIL_READY is specified, the reply will block until the requested blocks are available,
 * if FAIL_IF_NOT_READY is specified, the reply will return an error indicating that the block is not
 * found.  To request that all blocks be returned indefinitely as they are created, behavior should be
 * set to BLOCK_UNTIL_READY and the stop should be set to specified with a number of MAX_UINT64
 *
 * @generated from enum orderer.SeekInfo.SeekBehavior
 */
export enum SeekInfo_SeekBehavior {
  /**
   * @generated from enum value: BLOCK_UNTIL_READY = 0;
   */
  BLOCK_UNTIL_READY = 0,

  /**
   * @generated from enum value: FAIL_IF_NOT_READY = 1;
   */
  FAIL_IF_NOT_READY = 1,
}

/**
 * Describes the enum orderer.SeekInfo.SeekBehavior.
 */
export const SeekInfo_SeekBehaviorSchema: GenEnum<SeekInfo_SeekBehavior> = /*@__PURE__*/
  enumDesc(file_orderer_ab, 5, 0);

/**
 * SeekErrorTolerance indicates to the server how block provider errors should be tolerated.  By default,
 * if the deliver service detects a problem in the underlying block source (typically, in the orderer,
 * a consenter error), it will begin to reject deliver requests.  This is to prevent a client from waiting
 * for blocks from an orderer which is stuck in an errored state.  This is almost always the desired behavior
 * and clients should stick with the default STRICT checking behavior.  However, in some scenarios, particularly
 * when attempting to recover from a crash or other corruption, it's desirable to force an orderer to respond
 * with blocks on a best effort basis, even if the backing consensus implementation is in an errored state.
 * In this case, set the SeekErrorResponse to BEST_EFFORT to ignore the consenter errors.
 *
 * @generated from enum orderer.SeekInfo.SeekErrorResponse
 */
export enum SeekInfo_SeekErrorResponse {
  /**
   * @generated from enum value: STRICT = 0;
   */
  STRICT = 0,

  /**
   * @generated from enum value: BEST_EFFORT = 1;
   */
  BEST_EFFORT = 1,
}

/**
 * Describes the enum orderer.SeekInfo.SeekErrorResponse.
 */
export const SeekInfo_SeekErrorResponseSchema: GenEnum<SeekInfo_SeekErrorResponse> = /*@__PURE__*/
  enumDesc(file_orderer_ab, 5, 1);

/**
 * @generated from message orderer.DeliverResponse
 */
export type DeliverResponse = Message<"orderer.DeliverResponse"> & {
  /**
   * @generated from oneof orderer.DeliverResponse.Type
   */
  Type: {
    /**
     * @generated from field: common.Status status = 1;
     */
    value: Status;
    case: "status";
  } | {
    /**
     * @generated from field: common.Block block = 2;
     */
    value: Block;
    case: "block";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message orderer.DeliverResponse.
 * Use `create(DeliverResponseSchema)` to create a new message.
 */
export const DeliverResponseSchema: GenMessage<DeliverResponse> = /*@__PURE__*/
  messageDesc(file_orderer_ab, 6);

/**
 * @generated from service orderer.AtomicBroadcast
 */
export const AtomicBroadcast: GenService<{
  /**
   * broadcast receives a reply of Acknowledgement for each common.Envelope in order, indicating success or type of failure
   *
   * @generated from rpc orderer.AtomicBroadcast.Broadcast
   */
  broadcast: {
    methodKind: "bidi_streaming";
    input: typeof EnvelopeSchema;
    output: typeof BroadcastResponseSchema;
  },
  /**
   * deliver first requires an Envelope of type DELIVER_SEEK_INFO with Payload data as a mashaled SeekInfo message, then a stream of block replies is received.
   *
   * @generated from rpc orderer.AtomicBroadcast.Deliver
   */
  deliver: {
    methodKind: "bidi_streaming";
    input: typeof EnvelopeSchema;
    output: typeof DeliverResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_orderer_ab, 0);

