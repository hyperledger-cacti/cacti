// Copyright the Hyperledger Fabric contributors. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0

// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file orderer/etcdraft/configuration.proto (package etcdraft, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file orderer/etcdraft/configuration.proto.
 */
export const file_orderer_etcdraft_configuration: GenFile = /*@__PURE__*/
  fileDesc("CiRvcmRlcmVyL2V0Y2RyYWZ0L2NvbmZpZ3VyYXRpb24ucHJvdG8SCGV0Y2RyYWZ0Il0KDkNvbmZpZ01ldGFkYXRhEicKCmNvbnNlbnRlcnMYASADKAsyEy5ldGNkcmFmdC5Db25zZW50ZXISIgoHb3B0aW9ucxgCIAEoCzIRLmV0Y2RyYWZ0Lk9wdGlvbnMiWQoJQ29uc2VudGVyEgwKBGhvc3QYASABKAkSDAoEcG9ydBgCIAEoDRIXCg9jbGllbnRfdGxzX2NlcnQYAyABKAwSFwoPc2VydmVyX3Rsc19jZXJ0GAQgASgMIowBCgdPcHRpb25zEhUKDXRpY2tfaW50ZXJ2YWwYASABKAkSFQoNZWxlY3Rpb25fdGljaxgCIAEoDRIWCg5oZWFydGJlYXRfdGljaxgDIAEoDRIbChNtYXhfaW5mbGlnaHRfYmxvY2tzGAQgASgNEh4KFnNuYXBzaG90X2ludGVydmFsX3NpemUYBSABKA1Cagoub3JnLmh5cGVybGVkZ2VyLmZhYnJpYy5wcm90b3Mub3JkZXJlci5ldGNkcmFmdFo4Z2l0aHViLmNvbS9oeXBlcmxlZGdlci9mYWJyaWMtcHJvdG9zLWdvL29yZGVyZXIvZXRjZHJhZnRiBnByb3RvMw");

/**
 * ConfigMetadata is serialized and set as the value of ConsensusType.Metadata in
 * a channel configuration when the ConsensusType.Type is set "etcdraft".
 *
 * @generated from message etcdraft.ConfigMetadata
 */
export type ConfigMetadata = Message<"etcdraft.ConfigMetadata"> & {
  /**
   * @generated from field: repeated etcdraft.Consenter consenters = 1;
   */
  consenters: Consenter[];

  /**
   * @generated from field: etcdraft.Options options = 2;
   */
  options?: Options;
};

/**
 * Describes the message etcdraft.ConfigMetadata.
 * Use `create(ConfigMetadataSchema)` to create a new message.
 */
export const ConfigMetadataSchema: GenMessage<ConfigMetadata> = /*@__PURE__*/
  messageDesc(file_orderer_etcdraft_configuration, 0);

/**
 * Consenter represents a consenting node (i.e. replica).
 *
 * @generated from message etcdraft.Consenter
 */
export type Consenter = Message<"etcdraft.Consenter"> & {
  /**
   * @generated from field: string host = 1;
   */
  host: string;

  /**
   * @generated from field: uint32 port = 2;
   */
  port: number;

  /**
   * @generated from field: bytes client_tls_cert = 3;
   */
  clientTlsCert: Uint8Array;

  /**
   * @generated from field: bytes server_tls_cert = 4;
   */
  serverTlsCert: Uint8Array;
};

/**
 * Describes the message etcdraft.Consenter.
 * Use `create(ConsenterSchema)` to create a new message.
 */
export const ConsenterSchema: GenMessage<Consenter> = /*@__PURE__*/
  messageDesc(file_orderer_etcdraft_configuration, 1);

/**
 * Options to be specified for all the etcd/raft nodes. These can be modified on a
 * per-channel basis.
 *
 * @generated from message etcdraft.Options
 */
export type Options = Message<"etcdraft.Options"> & {
  /**
   * time duration format, e.g. 500ms
   *
   * @generated from field: string tick_interval = 1;
   */
  tickInterval: string;

  /**
   * @generated from field: uint32 election_tick = 2;
   */
  electionTick: number;

  /**
   * @generated from field: uint32 heartbeat_tick = 3;
   */
  heartbeatTick: number;

  /**
   * @generated from field: uint32 max_inflight_blocks = 4;
   */
  maxInflightBlocks: number;

  /**
   * Take snapshot when cumulative data exceeds certain size in bytes.
   *
   * @generated from field: uint32 snapshot_interval_size = 5;
   */
  snapshotIntervalSize: number;
};

/**
 * Describes the message etcdraft.Options.
 * Use `create(OptionsSchema)` to create a new message.
 */
export const OptionsSchema: GenMessage<Options> = /*@__PURE__*/
  messageDesc(file_orderer_etcdraft_configuration, 2);

