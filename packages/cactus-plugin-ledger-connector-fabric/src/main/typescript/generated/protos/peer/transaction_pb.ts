// Copyright the Hyperledger Fabric contributors. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0

// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file peer/transaction.proto (package protos, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Endorsement } from "./proposal_response_pb";
import { file_peer_proposal_response } from "./proposal_response_pb";
import type { Envelope } from "../common/common_pb";
import { file_common_common } from "../common/common_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file peer/transaction.proto.
 */
export const file_peer_transaction: GenFile = /*@__PURE__*/
  fileDesc("ChZwZWVyL3RyYW5zYWN0aW9uLnByb3RvEgZwcm90b3MiXQoUUHJvY2Vzc2VkVHJhbnNhY3Rpb24SLQoTdHJhbnNhY3Rpb25FbnZlbG9wZRgBIAEoCzIQLmNvbW1vbi5FbnZlbG9wZRIWCg52YWxpZGF0aW9uQ29kZRgCIAEoBSI5CgtUcmFuc2FjdGlvbhIqCgdhY3Rpb25zGAEgAygLMhkucHJvdG9zLlRyYW5zYWN0aW9uQWN0aW9uIjQKEVRyYW5zYWN0aW9uQWN0aW9uEg4KBmhlYWRlchgBIAEoDBIPCgdwYXlsb2FkGAIgASgMIm0KFkNoYWluY29kZUFjdGlvblBheWxvYWQSIgoaY2hhaW5jb2RlX3Byb3Bvc2FsX3BheWxvYWQYASABKAwSLwoGYWN0aW9uGAIgASgLMh8ucHJvdG9zLkNoYWluY29kZUVuZG9yc2VkQWN0aW9uImcKF0NoYWluY29kZUVuZG9yc2VkQWN0aW9uEiEKGXByb3Bvc2FsX3Jlc3BvbnNlX3BheWxvYWQYASABKAwSKQoMZW5kb3JzZW1lbnRzGAIgAygLMhMucHJvdG9zLkVuZG9yc2VtZW50KqsFChBUeFZhbGlkYXRpb25Db2RlEgkKBVZBTElEEAASEAoMTklMX0VOVkVMT1BFEAESDwoLQkFEX1BBWUxPQUQQAhIVChFCQURfQ09NTU9OX0hFQURFUhADEhkKFUJBRF9DUkVBVE9SX1NJR05BVFVSRRAEEiAKHElOVkFMSURfRU5ET1JTRVJfVFJBTlNBQ1RJT04QBRIeChpJTlZBTElEX0NPTkZJR19UUkFOU0FDVElPThAGEhoKFlVOU1VQUE9SVEVEX1RYX1BBWUxPQUQQBxIVChFCQURfUFJPUE9TQUxfVFhJRBAIEhIKDkRVUExJQ0FURV9UWElEEAkSHgoaRU5ET1JTRU1FTlRfUE9MSUNZX0ZBSUxVUkUQChIWChJNVkNDX1JFQURfQ09ORkxJQ1QQCxIZChVQSEFOVE9NX1JFQURfQ09ORkxJQ1QQDBITCg9VTktOT1dOX1RYX1RZUEUQDRIaChZUQVJHRVRfQ0hBSU5fTk9UX0ZPVU5EEA4SFAoQTUFSU0hBTF9UWF9FUlJPUhAPEhAKDE5JTF9UWEFDVElPThAQEhUKEUVYUElSRURfQ0hBSU5DT0RFEBESHgoaQ0hBSU5DT0RFX1ZFUlNJT05fQ09ORkxJQ1QQEhIYChRCQURfSEVBREVSX0VYVEVOU0lPThATEhYKEkJBRF9DSEFOTkVMX0hFQURFUhAUEhgKFEJBRF9SRVNQT05TRV9QQVlMT0FEEBUSDQoJQkFEX1JXU0VUEBYSFAoQSUxMRUdBTF9XUklURVNFVBAXEhQKEElOVkFMSURfV1JJVEVTRVQQGBIVChFJTlZBTElEX0NIQUlOQ09ERRAZEhIKDU5PVF9WQUxJREFURUQQ/gESGQoUSU5WQUxJRF9PVEhFUl9SRUFTT04Q/wEqRQoMTWV0YURhdGFLZXlzEhgKFFZBTElEQVRJT05fUEFSQU1FVEVSEAASGwoXVkFMSURBVElPTl9QQVJBTUVURVJfVjIQAUJmCiJvcmcuaHlwZXJsZWRnZXIuZmFicmljLnByb3Rvcy5wZWVyQhJUcmFuc2FjdGlvblBhY2thZ2VaLGdpdGh1Yi5jb20vaHlwZXJsZWRnZXIvZmFicmljLXByb3Rvcy1nby9wZWVyYgZwcm90bzM", [file_peer_proposal_response, file_common_common]);

/**
 * ProcessedTransaction wraps an Envelope that includes a transaction along with an indication
 * of whether the transaction was validated or invalidated by committing peer.
 * The use case is that GetTransactionByID API needs to retrieve the transaction Envelope
 * from block storage, and return it to a client, and indicate whether the transaction
 * was validated or invalidated by committing peer. So that the originally submitted
 * transaction Envelope is not modified, the ProcessedTransaction wrapper is returned.
 *
 * @generated from message protos.ProcessedTransaction
 */
export type ProcessedTransaction = Message<"protos.ProcessedTransaction"> & {
  /**
   * An Envelope which includes a processed transaction
   *
   * @generated from field: common.Envelope transactionEnvelope = 1;
   */
  transactionEnvelope?: Envelope;

  /**
   * An indication of whether the transaction was validated or invalidated by committing peer
   *
   * @generated from field: int32 validationCode = 2;
   */
  validationCode: number;
};

/**
 * Describes the message protos.ProcessedTransaction.
 * Use `create(ProcessedTransactionSchema)` to create a new message.
 */
export const ProcessedTransactionSchema: GenMessage<ProcessedTransaction> = /*@__PURE__*/
  messageDesc(file_peer_transaction, 0);

/**
 * The transaction to be sent to the ordering service. A transaction contains
 * one or more TransactionAction. Each TransactionAction binds a proposal to
 * potentially multiple actions. The transaction is atomic meaning that either
 * all actions in the transaction will be committed or none will.  Note that
 * while a Transaction might include more than one Header, the Header.creator
 * field must be the same in each.
 * A single client is free to issue a number of independent Proposal, each with
 * their header (Header) and request payload (ChaincodeProposalPayload).  Each
 * proposal is independently endorsed generating an action
 * (ProposalResponsePayload) with one signature per Endorser. Any number of
 * independent proposals (and their action) might be included in a transaction
 * to ensure that they are treated atomically.
 *
 * @generated from message protos.Transaction
 */
export type Transaction = Message<"protos.Transaction"> & {
  /**
   * The payload is an array of TransactionAction. An array is necessary to
   * accommodate multiple actions per transaction
   *
   * @generated from field: repeated protos.TransactionAction actions = 1;
   */
  actions: TransactionAction[];
};

/**
 * Describes the message protos.Transaction.
 * Use `create(TransactionSchema)` to create a new message.
 */
export const TransactionSchema: GenMessage<Transaction> = /*@__PURE__*/
  messageDesc(file_peer_transaction, 1);

/**
 * TransactionAction binds a proposal to its action.  The type field in the
 * header dictates the type of action to be applied to the ledger.
 *
 * @generated from message protos.TransactionAction
 */
export type TransactionAction = Message<"protos.TransactionAction"> & {
  /**
   * The header of the proposal action, which is the proposal header
   *
   * @generated from field: bytes header = 1;
   */
  header: Uint8Array;

  /**
   * The payload of the action as defined by the type in the header For
   * chaincode, it's the bytes of ChaincodeActionPayload
   *
   * @generated from field: bytes payload = 2;
   */
  payload: Uint8Array;
};

/**
 * Describes the message protos.TransactionAction.
 * Use `create(TransactionActionSchema)` to create a new message.
 */
export const TransactionActionSchema: GenMessage<TransactionAction> = /*@__PURE__*/
  messageDesc(file_peer_transaction, 2);

/**
 * ChaincodeActionPayload is the message to be used for the TransactionAction's
 * payload when the Header's type is set to CHAINCODE.  It carries the
 * chaincodeProposalPayload and an endorsed action to apply to the ledger.
 *
 * @generated from message protos.ChaincodeActionPayload
 */
export type ChaincodeActionPayload = Message<"protos.ChaincodeActionPayload"> & {
  /**
   * This field contains the bytes of the ChaincodeProposalPayload message from
   * the original invocation (essentially the arguments) after the application
   * of the visibility function. The main visibility modes are "full" (the
   * entire ChaincodeProposalPayload message is included here), "hash" (only
   * the hash of the ChaincodeProposalPayload message is included) or
   * "nothing".  This field will be used to check the consistency of
   * ProposalResponsePayload.proposalHash.  For the CHAINCODE type,
   * ProposalResponsePayload.proposalHash is supposed to be H(ProposalHeader ||
   * f(ChaincodeProposalPayload)) where f is the visibility function.
   *
   * @generated from field: bytes chaincode_proposal_payload = 1;
   */
  chaincodeProposalPayload: Uint8Array;

  /**
   * The list of actions to apply to the ledger
   *
   * @generated from field: protos.ChaincodeEndorsedAction action = 2;
   */
  action?: ChaincodeEndorsedAction;
};

/**
 * Describes the message protos.ChaincodeActionPayload.
 * Use `create(ChaincodeActionPayloadSchema)` to create a new message.
 */
export const ChaincodeActionPayloadSchema: GenMessage<ChaincodeActionPayload> = /*@__PURE__*/
  messageDesc(file_peer_transaction, 3);

/**
 * ChaincodeEndorsedAction carries information about the endorsement of a
 * specific proposal
 *
 * @generated from message protos.ChaincodeEndorsedAction
 */
export type ChaincodeEndorsedAction = Message<"protos.ChaincodeEndorsedAction"> & {
  /**
   * This is the bytes of the ProposalResponsePayload message signed by the
   * endorsers.  Recall that for the CHAINCODE type, the
   * ProposalResponsePayload's extenstion field carries a ChaincodeAction
   *
   * @generated from field: bytes proposal_response_payload = 1;
   */
  proposalResponsePayload: Uint8Array;

  /**
   * The endorsement of the proposal, basically the endorser's signature over
   * proposalResponsePayload
   *
   * @generated from field: repeated protos.Endorsement endorsements = 2;
   */
  endorsements: Endorsement[];
};

/**
 * Describes the message protos.ChaincodeEndorsedAction.
 * Use `create(ChaincodeEndorsedActionSchema)` to create a new message.
 */
export const ChaincodeEndorsedActionSchema: GenMessage<ChaincodeEndorsedAction> = /*@__PURE__*/
  messageDesc(file_peer_transaction, 4);

/**
 * @generated from enum protos.TxValidationCode
 */
export enum TxValidationCode {
  /**
   * @generated from enum value: VALID = 0;
   */
  VALID = 0,

  /**
   * @generated from enum value: NIL_ENVELOPE = 1;
   */
  NIL_ENVELOPE = 1,

  /**
   * @generated from enum value: BAD_PAYLOAD = 2;
   */
  BAD_PAYLOAD = 2,

  /**
   * @generated from enum value: BAD_COMMON_HEADER = 3;
   */
  BAD_COMMON_HEADER = 3,

  /**
   * @generated from enum value: BAD_CREATOR_SIGNATURE = 4;
   */
  BAD_CREATOR_SIGNATURE = 4,

  /**
   * @generated from enum value: INVALID_ENDORSER_TRANSACTION = 5;
   */
  INVALID_ENDORSER_TRANSACTION = 5,

  /**
   * @generated from enum value: INVALID_CONFIG_TRANSACTION = 6;
   */
  INVALID_CONFIG_TRANSACTION = 6,

  /**
   * @generated from enum value: UNSUPPORTED_TX_PAYLOAD = 7;
   */
  UNSUPPORTED_TX_PAYLOAD = 7,

  /**
   * @generated from enum value: BAD_PROPOSAL_TXID = 8;
   */
  BAD_PROPOSAL_TXID = 8,

  /**
   * @generated from enum value: DUPLICATE_TXID = 9;
   */
  DUPLICATE_TXID = 9,

  /**
   * @generated from enum value: ENDORSEMENT_POLICY_FAILURE = 10;
   */
  ENDORSEMENT_POLICY_FAILURE = 10,

  /**
   * @generated from enum value: MVCC_READ_CONFLICT = 11;
   */
  MVCC_READ_CONFLICT = 11,

  /**
   * @generated from enum value: PHANTOM_READ_CONFLICT = 12;
   */
  PHANTOM_READ_CONFLICT = 12,

  /**
   * @generated from enum value: UNKNOWN_TX_TYPE = 13;
   */
  UNKNOWN_TX_TYPE = 13,

  /**
   * @generated from enum value: TARGET_CHAIN_NOT_FOUND = 14;
   */
  TARGET_CHAIN_NOT_FOUND = 14,

  /**
   * @generated from enum value: MARSHAL_TX_ERROR = 15;
   */
  MARSHAL_TX_ERROR = 15,

  /**
   * @generated from enum value: NIL_TXACTION = 16;
   */
  NIL_TXACTION = 16,

  /**
   * @generated from enum value: EXPIRED_CHAINCODE = 17;
   */
  EXPIRED_CHAINCODE = 17,

  /**
   * @generated from enum value: CHAINCODE_VERSION_CONFLICT = 18;
   */
  CHAINCODE_VERSION_CONFLICT = 18,

  /**
   * @generated from enum value: BAD_HEADER_EXTENSION = 19;
   */
  BAD_HEADER_EXTENSION = 19,

  /**
   * @generated from enum value: BAD_CHANNEL_HEADER = 20;
   */
  BAD_CHANNEL_HEADER = 20,

  /**
   * @generated from enum value: BAD_RESPONSE_PAYLOAD = 21;
   */
  BAD_RESPONSE_PAYLOAD = 21,

  /**
   * @generated from enum value: BAD_RWSET = 22;
   */
  BAD_RWSET = 22,

  /**
   * @generated from enum value: ILLEGAL_WRITESET = 23;
   */
  ILLEGAL_WRITESET = 23,

  /**
   * @generated from enum value: INVALID_WRITESET = 24;
   */
  INVALID_WRITESET = 24,

  /**
   * @generated from enum value: INVALID_CHAINCODE = 25;
   */
  INVALID_CHAINCODE = 25,

  /**
   * @generated from enum value: NOT_VALIDATED = 254;
   */
  NOT_VALIDATED = 254,

  /**
   * @generated from enum value: INVALID_OTHER_REASON = 255;
   */
  INVALID_OTHER_REASON = 255,
}

/**
 * Describes the enum protos.TxValidationCode.
 */
export const TxValidationCodeSchema: GenEnum<TxValidationCode> = /*@__PURE__*/
  enumDesc(file_peer_transaction, 0);

/**
 * Reserved entries in the key-level metadata map
 *
 * @generated from enum protos.MetaDataKeys
 */
export enum MetaDataKeys {
  /**
   * @generated from enum value: VALIDATION_PARAMETER = 0;
   */
  VALIDATION_PARAMETER = 0,

  /**
   * @generated from enum value: VALIDATION_PARAMETER_V2 = 1;
   */
  VALIDATION_PARAMETER_V2 = 1,
}

/**
 * Describes the enum protos.MetaDataKeys.
 */
export const MetaDataKeysSchema: GenEnum<MetaDataKeys> = /*@__PURE__*/
  enumDesc(file_peer_transaction, 1);

