// Copyright the Hyperledger Fabric contributors. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0

// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file peer/resources.proto (package protos, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Config } from "../common/configtx_pb";
import { file_common_configtx } from "../common/configtx_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file peer/resources.proto.
 */
export const file_peer_resources: GenFile = /*@__PURE__*/
  fileDesc("ChRwZWVyL3Jlc291cmNlcy5wcm90bxIGcHJvdG9zIjQKE0NoYWluY29kZUlkZW50aWZpZXISDAoEaGFzaBgBIAEoDBIPCgd2ZXJzaW9uGAIgASgJIjUKE0NoYWluY29kZVZhbGlkYXRpb24SDAoEbmFtZRgBIAEoCRIQCghhcmd1bWVudBgCIAEoDCIqCghWU0NDQXJncxIeChZlbmRvcnNlbWVudF9wb2xpY3lfcmVmGAEgASgJIiQKFENoYWluY29kZUVuZG9yc2VtZW50EgwKBG5hbWUYASABKAkiXgoKQ29uZmlnVHJlZRImCg5jaGFubmVsX2NvbmZpZxgBIAEoCzIOLmNvbW1vbi5Db25maWcSKAoQcmVzb3VyY2VzX2NvbmZpZxgCIAEoCzIOLmNvbW1vbi5Db25maWdCUgoib3JnLmh5cGVybGVkZ2VyLmZhYnJpYy5wcm90b3MucGVlclosZ2l0aHViLmNvbS9oeXBlcmxlZGdlci9mYWJyaWMtcHJvdG9zLWdvL3BlZXJiBnByb3RvMw", [file_common_configtx]);

/**
 * ChaincodeIdentifier identifies a piece of chaincode.  For a peer to accept invocations of
 * this chaincode, the hash of the installed code must match, as must the version string
 * included with the install command.
 *
 * @generated from message protos.ChaincodeIdentifier
 */
export type ChaincodeIdentifier = Message<"protos.ChaincodeIdentifier"> & {
  /**
   * The hash of the chaincode bytes
   *
   * @generated from field: bytes hash = 1;
   */
  hash: Uint8Array;

  /**
   * A user friendly human readable name corresponding to the ID
   *
   * @generated from field: string version = 2;
   */
  version: string;
};

/**
 * Describes the message protos.ChaincodeIdentifier.
 * Use `create(ChaincodeIdentifierSchema)` to create a new message.
 */
export const ChaincodeIdentifierSchema: GenMessage<ChaincodeIdentifier> = /*@__PURE__*/
  messageDesc(file_peer_resources, 0);

/**
 * ChaincodeValidation instructs the peer how transactions for this chaincode should be
 * validated.  The only validation mechanism which ships with fabric today is the standard
 * 'vscc' validation mechanism.  This built in validation method utilizes an endorsement policy
 * which checks that a sufficient number of signatures have been included.  The 'arguement'
 * field encodes any parameters required by the validation implementation.
 *
 * @generated from message protos.ChaincodeValidation
 */
export type ChaincodeValidation = Message<"protos.ChaincodeValidation"> & {
  /**
   * Specifies which code to run to validate transactions, defaults to 'vscc'
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * When 'vscc' a marshaled VSCCArgs
   *
   * @generated from field: bytes argument = 2;
   */
  argument: Uint8Array;
};

/**
 * Describes the message protos.ChaincodeValidation.
 * Use `create(ChaincodeValidationSchema)` to create a new message.
 */
export const ChaincodeValidationSchema: GenMessage<ChaincodeValidation> = /*@__PURE__*/
  messageDesc(file_peer_resources, 1);

/**
 * VSCCArgs is passed (marshaled) as a parameter to the VSCC imlementation via the
 * argument field of the ChaincodeValidation message.
 *
 * @generated from message protos.VSCCArgs
 */
export type VSCCArgs = Message<"protos.VSCCArgs"> & {
  /**
   * A named reference to an endorsement policy,
   *
   * @generated from field: string endorsement_policy_ref = 1;
   */
  endorsementPolicyRef: string;
};

/**
 * Describes the message protos.VSCCArgs.
 * Use `create(VSCCArgsSchema)` to create a new message.
 */
export const VSCCArgsSchema: GenMessage<VSCCArgs> = /*@__PURE__*/
  messageDesc(file_peer_resources, 2);

/**
 * ChaincodeEndorsement instructs the peer how transactions should be endorsed.  The only
 * endorsement mechanism which ships with the fabric today is the standard 'escc' mechanism.
 * This code simply simulates the proposal to generate a RW set, then signs the result
 * using the peer's local signing identity.
 *
 * @generated from message protos.ChaincodeEndorsement
 */
export type ChaincodeEndorsement = Message<"protos.ChaincodeEndorsement"> & {
  /**
   * Specifies what code to run for endorsements, defaults 'escc'
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message protos.ChaincodeEndorsement.
 * Use `create(ChaincodeEndorsementSchema)` to create a new message.
 */
export const ChaincodeEndorsementSchema: GenMessage<ChaincodeEndorsement> = /*@__PURE__*/
  messageDesc(file_peer_resources, 3);

/**
 * ConfigTree encapsulates channel and resources configuration of a channel.
 * Both configurations are represented as common.Config
 *
 * @generated from message protos.ConfigTree
 */
export type ConfigTree = Message<"protos.ConfigTree"> & {
  /**
   * @generated from field: common.Config channel_config = 1;
   */
  channelConfig?: Config;

  /**
   * @generated from field: common.Config resources_config = 2;
   */
  resourcesConfig?: Config;
};

/**
 * Describes the message protos.ConfigTree.
 * Use `create(ConfigTreeSchema)` to create a new message.
 */
export const ConfigTreeSchema: GenMessage<ConfigTree> = /*@__PURE__*/
  messageDesc(file_peer_resources, 4);

