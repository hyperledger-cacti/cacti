// Copyright the Hyperledger Fabric contributors. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0

// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file peer/chaincode.proto (package protos, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { SignaturePolicyEnvelope } from "../common/policies_pb";
import { file_common_policies } from "../common/policies_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file peer/chaincode.proto.
 */
export const file_peer_chaincode: GenFile = /*@__PURE__*/
  fileDesc("ChRwZWVyL2NoYWluY29kZS5wcm90bxIGcHJvdG9zIjoKC0NoYWluY29kZUlEEgwKBHBhdGgYASABKAkSDAoEbmFtZRgCIAEoCRIPCgd2ZXJzaW9uGAMgASgJIqEBCg5DaGFpbmNvZGVJbnB1dBIMCgRhcmdzGAEgAygMEjwKC2RlY29yYXRpb25zGAIgAygLMicucHJvdG9zLkNoYWluY29kZUlucHV0LkRlY29yYXRpb25zRW50cnkSDwoHaXNfaW5pdBgDIAEoCBoyChBEZWNvcmF0aW9uc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoDDoCOAEi3AEKDUNoYWluY29kZVNwZWMSKAoEdHlwZRgBIAEoDjIaLnByb3Rvcy5DaGFpbmNvZGVTcGVjLlR5cGUSKQoMY2hhaW5jb2RlX2lkGAIgASgLMhMucHJvdG9zLkNoYWluY29kZUlEEiUKBWlucHV0GAMgASgLMhYucHJvdG9zLkNoYWluY29kZUlucHV0Eg8KB3RpbWVvdXQYBCABKAUiPgoEVHlwZRINCglVTkRFRklORUQQABIKCgZHT0xBTkcQARIICgROT0RFEAISBwoDQ0FSEAMSCAoESkFWQRAEIoQBChdDaGFpbmNvZGVEZXBsb3ltZW50U3BlYxItCg5jaGFpbmNvZGVfc3BlYxgBIAEoCzIVLnByb3Rvcy5DaGFpbmNvZGVTcGVjEhQKDGNvZGVfcGFja2FnZRgDIAEoDEoECAIQA0oECAQQBVIOZWZmZWN0aXZlX2RhdGVSCGV4ZWNfZW52ImEKF0NoYWluY29kZUludm9jYXRpb25TcGVjEi0KDmNoYWluY29kZV9zcGVjGAEgASgLMhUucHJvdG9zLkNoYWluY29kZVNwZWNKBAgCEANSEWlkX2dlbmVyYXRpb25fYWxnIigKDkxpZmVjeWNsZUV2ZW50EhYKDmNoYWluY29kZV9uYW1lGAEgASgJIi0KB0NEU0RhdGESDAoEaGFzaBgBIAEoDBIUCgxtZXRhZGF0YWhhc2gYAiABKAwi1AEKDUNoYWluY29kZURhdGESDAoEbmFtZRgBIAEoCRIPCgd2ZXJzaW9uGAIgASgJEgwKBGVzY2MYAyABKAkSDAoEdnNjYxgEIAEoCRIvCgZwb2xpY3kYBSABKAsyHy5jb21tb24uU2lnbmF0dXJlUG9saWN5RW52ZWxvcGUSDAoEZGF0YRgGIAEoDBIKCgJpZBgHIAEoDBI9ChRpbnN0YW50aWF0aW9uX3BvbGljeRgIIAEoCzIfLmNvbW1vbi5TaWduYXR1cmVQb2xpY3lFbnZlbG9wZUJSCiJvcmcuaHlwZXJsZWRnZXIuZmFicmljLnByb3Rvcy5wZWVyWixnaXRodWIuY29tL2h5cGVybGVkZ2VyL2ZhYnJpYy1wcm90b3MtZ28vcGVlcmIGcHJvdG8z", [file_common_policies]);

/**
 * ChaincodeID contains the path as specified by the deploy transaction
 * that created it as well as the hashCode that is generated by the
 * system for the path. From the user level (ie, CLI, REST API and so on)
 * deploy transaction is expected to provide the path and other requests
 * are expected to provide the hashCode. The other value will be ignored.
 * Internally, the structure could contain both values. For instance, the
 * hashCode will be set when first generated using the path
 *
 * @generated from message protos.ChaincodeID
 */
export type ChaincodeID = Message<"protos.ChaincodeID"> & {
  /**
   * deploy transaction will use the path
   *
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * all other requests will use the name (really a hashcode) generated by
   * the deploy transaction
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * user friendly version name for the chaincode
   *
   * @generated from field: string version = 3;
   */
  version: string;
};

/**
 * Describes the message protos.ChaincodeID.
 * Use `create(ChaincodeIDSchema)` to create a new message.
 */
export const ChaincodeIDSchema: GenMessage<ChaincodeID> = /*@__PURE__*/
  messageDesc(file_peer_chaincode, 0);

/**
 * Carries the chaincode function and its arguments.
 * UnmarshalJSON in transaction.go converts the string-based REST/JSON input to
 * the []byte-based current ChaincodeInput structure.
 *
 * @generated from message protos.ChaincodeInput
 */
export type ChaincodeInput = Message<"protos.ChaincodeInput"> & {
  /**
   * @generated from field: repeated bytes args = 1;
   */
  args: Uint8Array[];

  /**
   * @generated from field: map<string, bytes> decorations = 2;
   */
  decorations: { [key: string]: Uint8Array };

  /**
   * is_init is used for the application to signal that an invocation is to be routed
   * to the legacy 'Init' function for compatibility with chaincodes which handled
   * Init in the old way.  New applications should manage their initialized state
   * themselves.
   *
   * @generated from field: bool is_init = 3;
   */
  isInit: boolean;
};

/**
 * Describes the message protos.ChaincodeInput.
 * Use `create(ChaincodeInputSchema)` to create a new message.
 */
export const ChaincodeInputSchema: GenMessage<ChaincodeInput> = /*@__PURE__*/
  messageDesc(file_peer_chaincode, 1);

/**
 * Carries the chaincode specification. This is the actual metadata required for
 * defining a chaincode.
 *
 * @generated from message protos.ChaincodeSpec
 */
export type ChaincodeSpec = Message<"protos.ChaincodeSpec"> & {
  /**
   * @generated from field: protos.ChaincodeSpec.Type type = 1;
   */
  type: ChaincodeSpec_Type;

  /**
   * @generated from field: protos.ChaincodeID chaincode_id = 2;
   */
  chaincodeId?: ChaincodeID;

  /**
   * @generated from field: protos.ChaincodeInput input = 3;
   */
  input?: ChaincodeInput;

  /**
   * @generated from field: int32 timeout = 4;
   */
  timeout: number;
};

/**
 * Describes the message protos.ChaincodeSpec.
 * Use `create(ChaincodeSpecSchema)` to create a new message.
 */
export const ChaincodeSpecSchema: GenMessage<ChaincodeSpec> = /*@__PURE__*/
  messageDesc(file_peer_chaincode, 2);

/**
 * @generated from enum protos.ChaincodeSpec.Type
 */
export enum ChaincodeSpec_Type {
  /**
   * @generated from enum value: UNDEFINED = 0;
   */
  UNDEFINED = 0,

  /**
   * @generated from enum value: GOLANG = 1;
   */
  GOLANG = 1,

  /**
   * @generated from enum value: NODE = 2;
   */
  NODE = 2,

  /**
   * @generated from enum value: CAR = 3;
   */
  CAR = 3,

  /**
   * @generated from enum value: JAVA = 4;
   */
  JAVA = 4,
}

/**
 * Describes the enum protos.ChaincodeSpec.Type.
 */
export const ChaincodeSpec_TypeSchema: GenEnum<ChaincodeSpec_Type> = /*@__PURE__*/
  enumDesc(file_peer_chaincode, 2, 0);

/**
 * Specify the deployment of a chaincode.
 * TODO: Define `codePackage`.
 *
 * @generated from message protos.ChaincodeDeploymentSpec
 */
export type ChaincodeDeploymentSpec = Message<"protos.ChaincodeDeploymentSpec"> & {
  /**
   * @generated from field: protos.ChaincodeSpec chaincode_spec = 1;
   */
  chaincodeSpec?: ChaincodeSpec;

  /**
   * @generated from field: bytes code_package = 3;
   */
  codePackage: Uint8Array;
};

/**
 * Describes the message protos.ChaincodeDeploymentSpec.
 * Use `create(ChaincodeDeploymentSpecSchema)` to create a new message.
 */
export const ChaincodeDeploymentSpecSchema: GenMessage<ChaincodeDeploymentSpec> = /*@__PURE__*/
  messageDesc(file_peer_chaincode, 3);

/**
 * Carries the chaincode function and its arguments.
 *
 * @generated from message protos.ChaincodeInvocationSpec
 */
export type ChaincodeInvocationSpec = Message<"protos.ChaincodeInvocationSpec"> & {
  /**
   * @generated from field: protos.ChaincodeSpec chaincode_spec = 1;
   */
  chaincodeSpec?: ChaincodeSpec;
};

/**
 * Describes the message protos.ChaincodeInvocationSpec.
 * Use `create(ChaincodeInvocationSpecSchema)` to create a new message.
 */
export const ChaincodeInvocationSpecSchema: GenMessage<ChaincodeInvocationSpec> = /*@__PURE__*/
  messageDesc(file_peer_chaincode, 4);

/**
 * LifecycleEvent is used as the payload of the chaincode event emitted by LSCC
 *
 * @generated from message protos.LifecycleEvent
 */
export type LifecycleEvent = Message<"protos.LifecycleEvent"> & {
  /**
   * @generated from field: string chaincode_name = 1;
   */
  chaincodeName: string;
};

/**
 * Describes the message protos.LifecycleEvent.
 * Use `create(LifecycleEventSchema)` to create a new message.
 */
export const LifecycleEventSchema: GenMessage<LifecycleEvent> = /*@__PURE__*/
  messageDesc(file_peer_chaincode, 5);

/**
 * CDSData is data stored in the LSCC on instantiation of a CC
 * for CDSPackage.  This needs to be serialized for ChaincodeData
 * hence the protobuf format
 *
 * @generated from message protos.CDSData
 */
export type CDSData = Message<"protos.CDSData"> & {
  /**
   * hash of ChaincodeDeploymentSpec.code_package
   *
   * @generated from field: bytes hash = 1;
   */
  hash: Uint8Array;

  /**
   * hash of ChaincodeID.name + ChaincodeID.version
   *
   * @generated from field: bytes metadatahash = 2;
   */
  metadatahash: Uint8Array;
};

/**
 * Describes the message protos.CDSData.
 * Use `create(CDSDataSchema)` to create a new message.
 */
export const CDSDataSchema: GenMessage<CDSData> = /*@__PURE__*/
  messageDesc(file_peer_chaincode, 6);

/**
 * ChaincodeData defines the datastructure for chaincodes to be serialized by proto
 * Type provides an additional check by directing to use a specific package after instantiation
 * Data is Type specific (see CDSPackage and SignedCDSPackage)
 *
 * @generated from message protos.ChaincodeData
 */
export type ChaincodeData = Message<"protos.ChaincodeData"> & {
  /**
   * Name of the chaincode
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Version of the chaincode
   *
   * @generated from field: string version = 2;
   */
  version: string;

  /**
   * Escc for the chaincode instance
   *
   * @generated from field: string escc = 3;
   */
  escc: string;

  /**
   * Vscc for the chaincode instance
   *
   * @generated from field: string vscc = 4;
   */
  vscc: string;

  /**
   * Policy endorsement policy for the chaincode instance
   *
   * @generated from field: common.SignaturePolicyEnvelope policy = 5;
   */
  policy?: SignaturePolicyEnvelope;

  /**
   * Data data specific to the package
   *
   * @generated from field: bytes data = 6;
   */
  data: Uint8Array;

  /**
   * Id of the chaincode that's the unique fingerprint for the CC This is not
   * currently used anywhere but serves as a good eyecatcher
   *
   * @generated from field: bytes id = 7;
   */
  id: Uint8Array;

  /**
   * InstantiationPolicy for the chaincode
   *
   * @generated from field: common.SignaturePolicyEnvelope instantiation_policy = 8;
   */
  instantiationPolicy?: SignaturePolicyEnvelope;
};

/**
 * Describes the message protos.ChaincodeData.
 * Use `create(ChaincodeDataSchema)` to create a new message.
 */
export const ChaincodeDataSchema: GenMessage<ChaincodeData> = /*@__PURE__*/
  messageDesc(file_peer_chaincode, 7);

