// Copyright IBM Corp. All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0

// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file fabric/view_data.proto (package fabric.view_data, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Endorsement, ProposalResponsePayload } from "../peer/proposal_response_pb";
import { file_peer_proposal_response } from "../peer/proposal_response_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file fabric/view_data.proto.
 */
export const file_fabric_view_data: GenFile = /*@__PURE__*/
  fileDesc("ChZmYWJyaWMvdmlld19kYXRhLnByb3RvEhBmYWJyaWMudmlld19kYXRhIuABCgpGYWJyaWNWaWV3EloKG2VuZG9yc2VkX3Byb3Bvc2FsX3Jlc3BvbnNlcxgBIAMoCzI1LmZhYnJpYy52aWV3X2RhdGEuRmFicmljVmlldy5FbmRvcnNlZFByb3Bvc2FsUmVzcG9uc2UadgoYRW5kb3JzZWRQcm9wb3NhbFJlc3BvbnNlEjAKB3BheWxvYWQYASABKAsyHy5wcm90b3MuUHJvcG9zYWxSZXNwb25zZVBheWxvYWQSKAoLZW5kb3JzZW1lbnQYAiABKAsyEy5wcm90b3MuRW5kb3JzZW1lbnRCfAo0b3JnLmh5cGVybGVkZ2VyLmNhY3RpLndlYXZlci5wcm90b3MuZmFicmljLnZpZXdfZGF0YVpEZ2l0aHViLmNvbS9oeXBlcmxlZGdlci1jYWN0aS9jYWN0aS93ZWF2ZXIvY29tbW9uL3Byb3Rvcy1nby92Mi9mYWJyaWNiBnByb3RvMw", [file_peer_proposal_response]);

/**
 * @generated from message fabric.view_data.FabricView
 */
export type FabricView = Message<"fabric.view_data.FabricView"> & {
  /**
   * @generated from field: repeated fabric.view_data.FabricView.EndorsedProposalResponse endorsed_proposal_responses = 1;
   */
  endorsedProposalResponses: FabricView_EndorsedProposalResponse[];
};

/**
 * Describes the message fabric.view_data.FabricView.
 * Use `create(FabricViewSchema)` to create a new message.
 */
export const FabricViewSchema: GenMessage<FabricView> = /*@__PURE__*/
  messageDesc(file_fabric_view_data, 0);

/**
 * @generated from message fabric.view_data.FabricView.EndorsedProposalResponse
 */
export type FabricView_EndorsedProposalResponse = Message<"fabric.view_data.FabricView.EndorsedProposalResponse"> & {
  /**
   * `ProposalResponsePayload` is the output produced by each peer and signed as a serialized blob
   * https://github.com/hyperledger/fabric-protos-go/blob/main/peer/proposal_response.pb.go#L176
   * `ProposalResponsePayload` contains an `Extension` field which is of type `ChaincodeAction`
   * https://github.com/hyperledger/fabric-protos-go/blob/main/peer/proposal.pb.go#L280
   * We only need the `ProposalHash`, `ChaincodeId` and `Response` fields.
   *
   * @generated from field: protos.ProposalResponsePayload payload = 1;
   */
  payload?: ProposalResponsePayload;

  /**
   * Each `Endorsement` is an identity coupled with a signature
   * https://github.com/hyperledger/fabric-protos-go/blob/main/peer/proposal_response.pb.go#L242
   *
   * @generated from field: protos.Endorsement endorsement = 2;
   */
  endorsement?: Endorsement;
};

/**
 * Describes the message fabric.view_data.FabricView.EndorsedProposalResponse.
 * Use `create(FabricView_EndorsedProposalResponseSchema)` to create a new message.
 */
export const FabricView_EndorsedProposalResponseSchema: GenMessage<FabricView_EndorsedProposalResponse> = /*@__PURE__*/
  messageDesc(file_fabric_view_data, 0, 0);

