// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file relay/satp.proto (package relay.satp, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { AckSchema } from "../common/ack_pb";
import { file_common_ack } from "../common/ack_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file relay/satp.proto.
 */
export const file_relay_satp: GenFile = /*@__PURE__*/
  fileDesc("ChByZWxheS9zYXRwLnByb3RvEgpyZWxheS5zYXRwIroDCh1UcmFuc2ZlclByb3Bvc2FsQ2xhaW1zUmVxdWVzdBIUCgxtZXNzYWdlX3R5cGUYASABKAkSFgoOYXNzZXRfYXNzZXRfaWQYAiABKAkSGAoQYXNzZXRfcHJvZmlsZV9pZBgDIAEoCRIlCh12ZXJpZmllZF9vcmlnaW5hdG9yX2VudGl0eV9pZBgEIAEoCRImCh52ZXJpZmllZF9iZW5lZmljaWFyeV9lbnRpdHlfaWQYBSABKAkSGQoRb3JpZ2luYXRvcl9wdWJrZXkYBiABKAkSGgoSYmVuZWZpY2lhcnlfcHVia2V5GAcgASgJEiEKGXNlbmRlcl9nYXRld2F5X25ldHdvcmtfaWQYCCABKAkSJAoccmVjaXBpZW50X2dhdGV3YXlfbmV0d29ya19pZBgJIAEoCRIeChZjbGllbnRfaWRlbnRpdHlfcHVia2V5GAogASgJEh4KFnNlcnZlcl9pZGVudGl0eV9wdWJrZXkYCyABKAkSHwoXc2VuZGVyX2dhdGV3YXlfb3duZXJfaWQYDCABKAkSIQoZcmVjZWl2ZXJfZ2F0ZXdheV9vd25lcl9pZBgNIAEoCSK7AwoeVHJhbnNmZXJQcm9wb3NhbFJlY2VpcHRSZXF1ZXN0EhQKDG1lc3NhZ2VfdHlwZRgBIAEoCRIWCg5hc3NldF9hc3NldF9pZBgCIAEoCRIYChBhc3NldF9wcm9maWxlX2lkGAMgASgJEiUKHXZlcmlmaWVkX29yaWdpbmF0b3JfZW50aXR5X2lkGAQgASgJEiYKHnZlcmlmaWVkX2JlbmVmaWNpYXJ5X2VudGl0eV9pZBgFIAEoCRIZChFvcmlnaW5hdG9yX3B1YmtleRgGIAEoCRIaChJiZW5lZmljaWFyeV9wdWJrZXkYByABKAkSIQoZc2VuZGVyX2dhdGV3YXlfbmV0d29ya19pZBgIIAEoCRIkChxyZWNpcGllbnRfZ2F0ZXdheV9uZXR3b3JrX2lkGAkgASgJEh4KFmNsaWVudF9pZGVudGl0eV9wdWJrZXkYCiABKAkSHgoWc2VydmVyX2lkZW50aXR5X3B1YmtleRgLIAEoCRIfChdzZW5kZXJfZ2F0ZXdheV9vd25lcl9pZBgMIAEoCRIhChlyZWNlaXZlcl9nYXRld2F5X293bmVyX2lkGA0gASgJIpgCChdUcmFuc2ZlckNvbW1lbmNlUmVxdWVzdBIUCgxtZXNzYWdlX3R5cGUYASABKAkSEgoKc2Vzc2lvbl9pZBgCIAEoCRIbChN0cmFuc2Zlcl9jb250ZXh0X2lkGAMgASgJEh4KFmNsaWVudF9pZGVudGl0eV9wdWJrZXkYBCABKAkSHgoWc2VydmVyX2lkZW50aXR5X3B1YmtleRgFIAEoCRIhChloYXNoX3RyYW5zZmVyX2luaXRfY2xhaW1zGAYgASgJEhkKEWhhc2hfcHJldl9tZXNzYWdlGAcgASgJEh4KFmNsaWVudF90cmFuc2Zlcl9udW1iZXIYCCABKAkSGAoQY2xpZW50X3NpZ25hdHVyZRgJIAEoCSLwAQoSQWNrQ29tbWVuY2VSZXF1ZXN0EhQKDG1lc3NhZ2VfdHlwZRgBIAEoCRISCgpzZXNzaW9uX2lkGAIgASgJEhsKE3RyYW5zZmVyX2NvbnRleHRfaWQYAyABKAkSHgoWY2xpZW50X2lkZW50aXR5X3B1YmtleRgEIAEoCRIeChZzZXJ2ZXJfaWRlbnRpdHlfcHVia2V5GAUgASgJEhkKEWhhc2hfcHJldl9tZXNzYWdlGAYgASgJEh4KFnNlcnZlcl90cmFuc2Zlcl9udW1iZXIYByABKAkSGAoQc2VydmVyX3NpZ25hdHVyZRgIIAEoCSKEAgoWU2VuZEFzc2V0U3RhdHVzUmVxdWVzdBIUCgxtZXNzYWdlX3R5cGUYASABKAkSEgoKc2Vzc2lvbl9pZBgCIAEoCRIbChN0cmFuc2Zlcl9jb250ZXh0X2lkGAMgASgJEh4KFmNsaWVudF9pZGVudGl0eV9wdWJrZXkYBCABKAkSHgoWc2VydmVyX2lkZW50aXR5X3B1YmtleRgFIAEoCRIZChFoYXNoX3ByZXZfbWVzc2FnZRgGIAEoCRIeChZzZXJ2ZXJfdHJhbnNmZXJfbnVtYmVyGAcgASgJEhgKEHNlcnZlcl9zaWduYXR1cmUYCCABKAkSDgoGc3RhdHVzGAkgASgJItgCChRMb2NrQXNzZXJ0aW9uUmVxdWVzdBIUCgxtZXNzYWdlX3R5cGUYASABKAkSEgoKc2Vzc2lvbl9pZBgCIAEoCRIbChN0cmFuc2Zlcl9jb250ZXh0X2lkGAMgASgJEh4KFmNsaWVudF9pZGVudGl0eV9wdWJrZXkYBCABKAkSHgoWc2VydmVyX2lkZW50aXR5X3B1YmtleRgFIAEoCRIcChRsb2NrX2Fzc2VydGlvbl9jbGFpbRgGIAEoCRIjChtsb2NrX2Fzc2VydGlvbl9jbGFpbV9mb3JtYXQYByABKAkSIQoZbG9ja19hc3NlcnRpb25fZXhwaXJhdGlvbhgIIAEoCRIZChFoYXNoX3ByZXZfbWVzc2FnZRgJIAEoCRIeChZjbGllbnRfdHJhbnNmZXJfbnVtYmVyGAogASgJEhgKEGNsaWVudF9zaWduYXR1cmUYCyABKAki+QEKG0xvY2tBc3NlcnRpb25SZWNlaXB0UmVxdWVzdBIUCgxtZXNzYWdlX3R5cGUYASABKAkSEgoKc2Vzc2lvbl9pZBgCIAEoCRIbChN0cmFuc2Zlcl9jb250ZXh0X2lkGAMgASgJEh4KFmNsaWVudF9pZGVudGl0eV9wdWJrZXkYBCABKAkSHgoWc2VydmVyX2lkZW50aXR5X3B1YmtleRgFIAEoCRIZChFoYXNoX3ByZXZfbWVzc2FnZRgGIAEoCRIeChZzZXJ2ZXJfdHJhbnNmZXJfbnVtYmVyGAcgASgJEhgKEHNlcnZlcl9zaWduYXR1cmUYCCABKAkiXQoUQ29tbWl0UHJlcGFyZVJlcXVlc3QSFAoMbWVzc2FnZV90eXBlGAEgASgJEhIKCnNlc3Npb25faWQYAiABKAkSGwoTdHJhbnNmZXJfY29udGV4dF9pZBgDIAEoCSJbChJDb21taXRSZWFkeVJlcXVlc3QSFAoMbWVzc2FnZV90eXBlGAEgASgJEhIKCnNlc3Npb25faWQYAiABKAkSGwoTdHJhbnNmZXJfY29udGV4dF9pZBgDIAEoCSJkChtDb21taXRGaW5hbEFzc2VydGlvblJlcXVlc3QSFAoMbWVzc2FnZV90eXBlGAEgASgJEhIKCnNlc3Npb25faWQYAiABKAkSGwoTdHJhbnNmZXJfY29udGV4dF9pZBgDIAEoCSJfChZBY2tGaW5hbFJlY2VpcHRSZXF1ZXN0EhQKDG1lc3NhZ2VfdHlwZRgBIAEoCRISCgpzZXNzaW9uX2lkGAIgASgJEhsKE3RyYW5zZmVyX2NvbnRleHRfaWQYAyABKAkiYQoYVHJhbnNmZXJDb21wbGV0ZWRSZXF1ZXN0EhQKDG1lc3NhZ2VfdHlwZRgBIAEoCRISCgpzZXNzaW9uX2lkGAIgASgJEhsKE3RyYW5zZmVyX2NvbnRleHRfaWQYAyABKAkyngcKBFNBVFASVgoWVHJhbnNmZXJQcm9wb3NhbENsYWltcxIpLnJlbGF5LnNhdHAuVHJhbnNmZXJQcm9wb3NhbENsYWltc1JlcXVlc3QaDy5jb21tb24uYWNrLkFjayIAElgKF1RyYW5zZmVyUHJvcG9zYWxSZWNlaXB0EioucmVsYXkuc2F0cC5UcmFuc2ZlclByb3Bvc2FsUmVjZWlwdFJlcXVlc3QaDy5jb21tb24uYWNrLkFjayIAEkoKEFRyYW5zZmVyQ29tbWVuY2USIy5yZWxheS5zYXRwLlRyYW5zZmVyQ29tbWVuY2VSZXF1ZXN0Gg8uY29tbW9uLmFjay5BY2siABJACgtBY2tDb21tZW5jZRIeLnJlbGF5LnNhdHAuQWNrQ29tbWVuY2VSZXF1ZXN0Gg8uY29tbW9uLmFjay5BY2siABJICg9TZW5kQXNzZXRTdGF0dXMSIi5yZWxheS5zYXRwLlNlbmRBc3NldFN0YXR1c1JlcXVlc3QaDy5jb21tb24uYWNrLkFjayIAEkQKDUxvY2tBc3NlcnRpb24SIC5yZWxheS5zYXRwLkxvY2tBc3NlcnRpb25SZXF1ZXN0Gg8uY29tbW9uLmFjay5BY2siABJSChRMb2NrQXNzZXJ0aW9uUmVjZWlwdBInLnJlbGF5LnNhdHAuTG9ja0Fzc2VydGlvblJlY2VpcHRSZXF1ZXN0Gg8uY29tbW9uLmFjay5BY2siABJECg1Db21taXRQcmVwYXJlEiAucmVsYXkuc2F0cC5Db21taXRQcmVwYXJlUmVxdWVzdBoPLmNvbW1vbi5hY2suQWNrIgASQAoLQ29tbWl0UmVhZHkSHi5yZWxheS5zYXRwLkNvbW1pdFJlYWR5UmVxdWVzdBoPLmNvbW1vbi5hY2suQWNrIgASUgoUQ29tbWl0RmluYWxBc3NlcnRpb24SJy5yZWxheS5zYXRwLkNvbW1pdEZpbmFsQXNzZXJ0aW9uUmVxdWVzdBoPLmNvbW1vbi5hY2suQWNrIgASSAoPQWNrRmluYWxSZWNlaXB0EiIucmVsYXkuc2F0cC5BY2tGaW5hbFJlY2VpcHRSZXF1ZXN0Gg8uY29tbW9uLmFjay5BY2siABJMChFUcmFuc2ZlckNvbXBsZXRlZBIkLnJlbGF5LnNhdHAuVHJhbnNmZXJDb21wbGV0ZWRSZXF1ZXN0Gg8uY29tbW9uLmFjay5BY2siAEJ9CjZvcmcuaHlwZXJsZWRnZXIuY2FjdGkud2VhdmVyLnByb3Rvcy5yZWxheS5kYXRhdHJhbnNmZXJaQ2dpdGh1Yi5jb20vaHlwZXJsZWRnZXItY2FjdGkvY2FjdGkvd2VhdmVyL2NvbW1vbi9wcm90b3MtZ28vdjIvcmVsYXliBnByb3RvMw", [file_common_ack]);

/**
 * @generated from message relay.satp.TransferProposalClaimsRequest
 */
export type TransferProposalClaimsRequest = Message<"relay.satp.TransferProposalClaimsRequest"> & {
  /**
   * @generated from field: string message_type = 1;
   */
  messageType: string;

  /**
   * @generated from field: string asset_asset_id = 2;
   */
  assetAssetId: string;

  /**
   * @generated from field: string asset_profile_id = 3;
   */
  assetProfileId: string;

  /**
   * @generated from field: string verified_originator_entity_id = 4;
   */
  verifiedOriginatorEntityId: string;

  /**
   * @generated from field: string verified_beneficiary_entity_id = 5;
   */
  verifiedBeneficiaryEntityId: string;

  /**
   * @generated from field: string originator_pubkey = 6;
   */
  originatorPubkey: string;

  /**
   * @generated from field: string beneficiary_pubkey = 7;
   */
  beneficiaryPubkey: string;

  /**
   * @generated from field: string sender_gateway_network_id = 8;
   */
  senderGatewayNetworkId: string;

  /**
   * @generated from field: string recipient_gateway_network_id = 9;
   */
  recipientGatewayNetworkId: string;

  /**
   * @generated from field: string client_identity_pubkey = 10;
   */
  clientIdentityPubkey: string;

  /**
   * @generated from field: string server_identity_pubkey = 11;
   */
  serverIdentityPubkey: string;

  /**
   * @generated from field: string sender_gateway_owner_id = 12;
   */
  senderGatewayOwnerId: string;

  /**
   * @generated from field: string receiver_gateway_owner_id = 13;
   */
  receiverGatewayOwnerId: string;
};

/**
 * Describes the message relay.satp.TransferProposalClaimsRequest.
 * Use `create(TransferProposalClaimsRequestSchema)` to create a new message.
 */
export const TransferProposalClaimsRequestSchema: GenMessage<TransferProposalClaimsRequest> = /*@__PURE__*/
  messageDesc(file_relay_satp, 0);

/**
 * @generated from message relay.satp.TransferProposalReceiptRequest
 */
export type TransferProposalReceiptRequest = Message<"relay.satp.TransferProposalReceiptRequest"> & {
  /**
   * @generated from field: string message_type = 1;
   */
  messageType: string;

  /**
   * @generated from field: string asset_asset_id = 2;
   */
  assetAssetId: string;

  /**
   * @generated from field: string asset_profile_id = 3;
   */
  assetProfileId: string;

  /**
   * @generated from field: string verified_originator_entity_id = 4;
   */
  verifiedOriginatorEntityId: string;

  /**
   * @generated from field: string verified_beneficiary_entity_id = 5;
   */
  verifiedBeneficiaryEntityId: string;

  /**
   * @generated from field: string originator_pubkey = 6;
   */
  originatorPubkey: string;

  /**
   * @generated from field: string beneficiary_pubkey = 7;
   */
  beneficiaryPubkey: string;

  /**
   * @generated from field: string sender_gateway_network_id = 8;
   */
  senderGatewayNetworkId: string;

  /**
   * @generated from field: string recipient_gateway_network_id = 9;
   */
  recipientGatewayNetworkId: string;

  /**
   * @generated from field: string client_identity_pubkey = 10;
   */
  clientIdentityPubkey: string;

  /**
   * @generated from field: string server_identity_pubkey = 11;
   */
  serverIdentityPubkey: string;

  /**
   * @generated from field: string sender_gateway_owner_id = 12;
   */
  senderGatewayOwnerId: string;

  /**
   * @generated from field: string receiver_gateway_owner_id = 13;
   */
  receiverGatewayOwnerId: string;
};

/**
 * Describes the message relay.satp.TransferProposalReceiptRequest.
 * Use `create(TransferProposalReceiptRequestSchema)` to create a new message.
 */
export const TransferProposalReceiptRequestSchema: GenMessage<TransferProposalReceiptRequest> = /*@__PURE__*/
  messageDesc(file_relay_satp, 1);

/**
 * @generated from message relay.satp.TransferCommenceRequest
 */
export type TransferCommenceRequest = Message<"relay.satp.TransferCommenceRequest"> & {
  /**
   * @generated from field: string message_type = 1;
   */
  messageType: string;

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId: string;

  /**
   * @generated from field: string transfer_context_id = 3;
   */
  transferContextId: string;

  /**
   * @generated from field: string client_identity_pubkey = 4;
   */
  clientIdentityPubkey: string;

  /**
   * @generated from field: string server_identity_pubkey = 5;
   */
  serverIdentityPubkey: string;

  /**
   * @generated from field: string hash_transfer_init_claims = 6;
   */
  hashTransferInitClaims: string;

  /**
   * @generated from field: string hash_prev_message = 7;
   */
  hashPrevMessage: string;

  /**
   * @generated from field: string client_transfer_number = 8;
   */
  clientTransferNumber: string;

  /**
   * @generated from field: string client_signature = 9;
   */
  clientSignature: string;
};

/**
 * Describes the message relay.satp.TransferCommenceRequest.
 * Use `create(TransferCommenceRequestSchema)` to create a new message.
 */
export const TransferCommenceRequestSchema: GenMessage<TransferCommenceRequest> = /*@__PURE__*/
  messageDesc(file_relay_satp, 2);

/**
 * @generated from message relay.satp.AckCommenceRequest
 */
export type AckCommenceRequest = Message<"relay.satp.AckCommenceRequest"> & {
  /**
   * @generated from field: string message_type = 1;
   */
  messageType: string;

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId: string;

  /**
   * @generated from field: string transfer_context_id = 3;
   */
  transferContextId: string;

  /**
   * @generated from field: string client_identity_pubkey = 4;
   */
  clientIdentityPubkey: string;

  /**
   * @generated from field: string server_identity_pubkey = 5;
   */
  serverIdentityPubkey: string;

  /**
   * @generated from field: string hash_prev_message = 6;
   */
  hashPrevMessage: string;

  /**
   * @generated from field: string server_transfer_number = 7;
   */
  serverTransferNumber: string;

  /**
   * @generated from field: string server_signature = 8;
   */
  serverSignature: string;
};

/**
 * Describes the message relay.satp.AckCommenceRequest.
 * Use `create(AckCommenceRequestSchema)` to create a new message.
 */
export const AckCommenceRequestSchema: GenMessage<AckCommenceRequest> = /*@__PURE__*/
  messageDesc(file_relay_satp, 3);

/**
 * @generated from message relay.satp.SendAssetStatusRequest
 */
export type SendAssetStatusRequest = Message<"relay.satp.SendAssetStatusRequest"> & {
  /**
   * @generated from field: string message_type = 1;
   */
  messageType: string;

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId: string;

  /**
   * @generated from field: string transfer_context_id = 3;
   */
  transferContextId: string;

  /**
   * @generated from field: string client_identity_pubkey = 4;
   */
  clientIdentityPubkey: string;

  /**
   * @generated from field: string server_identity_pubkey = 5;
   */
  serverIdentityPubkey: string;

  /**
   * @generated from field: string hash_prev_message = 6;
   */
  hashPrevMessage: string;

  /**
   * @generated from field: string server_transfer_number = 7;
   */
  serverTransferNumber: string;

  /**
   * @generated from field: string server_signature = 8;
   */
  serverSignature: string;

  /**
   * @generated from field: string status = 9;
   */
  status: string;
};

/**
 * Describes the message relay.satp.SendAssetStatusRequest.
 * Use `create(SendAssetStatusRequestSchema)` to create a new message.
 */
export const SendAssetStatusRequestSchema: GenMessage<SendAssetStatusRequest> = /*@__PURE__*/
  messageDesc(file_relay_satp, 4);

/**
 * @generated from message relay.satp.LockAssertionRequest
 */
export type LockAssertionRequest = Message<"relay.satp.LockAssertionRequest"> & {
  /**
   * @generated from field: string message_type = 1;
   */
  messageType: string;

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId: string;

  /**
   * @generated from field: string transfer_context_id = 3;
   */
  transferContextId: string;

  /**
   * @generated from field: string client_identity_pubkey = 4;
   */
  clientIdentityPubkey: string;

  /**
   * @generated from field: string server_identity_pubkey = 5;
   */
  serverIdentityPubkey: string;

  /**
   * @generated from field: string lock_assertion_claim = 6;
   */
  lockAssertionClaim: string;

  /**
   * @generated from field: string lock_assertion_claim_format = 7;
   */
  lockAssertionClaimFormat: string;

  /**
   * @generated from field: string lock_assertion_expiration = 8;
   */
  lockAssertionExpiration: string;

  /**
   * @generated from field: string hash_prev_message = 9;
   */
  hashPrevMessage: string;

  /**
   * @generated from field: string client_transfer_number = 10;
   */
  clientTransferNumber: string;

  /**
   * @generated from field: string client_signature = 11;
   */
  clientSignature: string;
};

/**
 * Describes the message relay.satp.LockAssertionRequest.
 * Use `create(LockAssertionRequestSchema)` to create a new message.
 */
export const LockAssertionRequestSchema: GenMessage<LockAssertionRequest> = /*@__PURE__*/
  messageDesc(file_relay_satp, 5);

/**
 * @generated from message relay.satp.LockAssertionReceiptRequest
 */
export type LockAssertionReceiptRequest = Message<"relay.satp.LockAssertionReceiptRequest"> & {
  /**
   * @generated from field: string message_type = 1;
   */
  messageType: string;

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId: string;

  /**
   * @generated from field: string transfer_context_id = 3;
   */
  transferContextId: string;

  /**
   * @generated from field: string client_identity_pubkey = 4;
   */
  clientIdentityPubkey: string;

  /**
   * @generated from field: string server_identity_pubkey = 5;
   */
  serverIdentityPubkey: string;

  /**
   * @generated from field: string hash_prev_message = 6;
   */
  hashPrevMessage: string;

  /**
   * @generated from field: string server_transfer_number = 7;
   */
  serverTransferNumber: string;

  /**
   * @generated from field: string server_signature = 8;
   */
  serverSignature: string;
};

/**
 * Describes the message relay.satp.LockAssertionReceiptRequest.
 * Use `create(LockAssertionReceiptRequestSchema)` to create a new message.
 */
export const LockAssertionReceiptRequestSchema: GenMessage<LockAssertionReceiptRequest> = /*@__PURE__*/
  messageDesc(file_relay_satp, 6);

/**
 * @generated from message relay.satp.CommitPrepareRequest
 */
export type CommitPrepareRequest = Message<"relay.satp.CommitPrepareRequest"> & {
  /**
   * @generated from field: string message_type = 1;
   */
  messageType: string;

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId: string;

  /**
   * @generated from field: string transfer_context_id = 3;
   */
  transferContextId: string;
};

/**
 * Describes the message relay.satp.CommitPrepareRequest.
 * Use `create(CommitPrepareRequestSchema)` to create a new message.
 */
export const CommitPrepareRequestSchema: GenMessage<CommitPrepareRequest> = /*@__PURE__*/
  messageDesc(file_relay_satp, 7);

/**
 * @generated from message relay.satp.CommitReadyRequest
 */
export type CommitReadyRequest = Message<"relay.satp.CommitReadyRequest"> & {
  /**
   * @generated from field: string message_type = 1;
   */
  messageType: string;

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId: string;

  /**
   * @generated from field: string transfer_context_id = 3;
   */
  transferContextId: string;
};

/**
 * Describes the message relay.satp.CommitReadyRequest.
 * Use `create(CommitReadyRequestSchema)` to create a new message.
 */
export const CommitReadyRequestSchema: GenMessage<CommitReadyRequest> = /*@__PURE__*/
  messageDesc(file_relay_satp, 8);

/**
 * @generated from message relay.satp.CommitFinalAssertionRequest
 */
export type CommitFinalAssertionRequest = Message<"relay.satp.CommitFinalAssertionRequest"> & {
  /**
   * @generated from field: string message_type = 1;
   */
  messageType: string;

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId: string;

  /**
   * @generated from field: string transfer_context_id = 3;
   */
  transferContextId: string;
};

/**
 * Describes the message relay.satp.CommitFinalAssertionRequest.
 * Use `create(CommitFinalAssertionRequestSchema)` to create a new message.
 */
export const CommitFinalAssertionRequestSchema: GenMessage<CommitFinalAssertionRequest> = /*@__PURE__*/
  messageDesc(file_relay_satp, 9);

/**
 * @generated from message relay.satp.AckFinalReceiptRequest
 */
export type AckFinalReceiptRequest = Message<"relay.satp.AckFinalReceiptRequest"> & {
  /**
   * @generated from field: string message_type = 1;
   */
  messageType: string;

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId: string;

  /**
   * @generated from field: string transfer_context_id = 3;
   */
  transferContextId: string;
};

/**
 * Describes the message relay.satp.AckFinalReceiptRequest.
 * Use `create(AckFinalReceiptRequestSchema)` to create a new message.
 */
export const AckFinalReceiptRequestSchema: GenMessage<AckFinalReceiptRequest> = /*@__PURE__*/
  messageDesc(file_relay_satp, 10);

/**
 * @generated from message relay.satp.TransferCompletedRequest
 */
export type TransferCompletedRequest = Message<"relay.satp.TransferCompletedRequest"> & {
  /**
   * @generated from field: string message_type = 1;
   */
  messageType: string;

  /**
   * @generated from field: string session_id = 2;
   */
  sessionId: string;

  /**
   * @generated from field: string transfer_context_id = 3;
   */
  transferContextId: string;
};

/**
 * Describes the message relay.satp.TransferCompletedRequest.
 * Use `create(TransferCompletedRequestSchema)` to create a new message.
 */
export const TransferCompletedRequestSchema: GenMessage<TransferCompletedRequest> = /*@__PURE__*/
  messageDesc(file_relay_satp, 11);

/**
 * Stage 1 endpoints
 *
 * @generated from service relay.satp.SATP
 */
export const SATP: GenService<{
  /**
   * The sender gateway sends a TransferProposalClaims request to initiate an asset transfer. 
   * Depending on the proposal, multiple rounds of communication between the two gateways may happen.
   *
   * @generated from rpc relay.satp.SATP.TransferProposalClaims
   */
  transferProposalClaims: {
    methodKind: "unary";
    input: typeof TransferProposalClaimsRequestSchema;
    output: typeof AckSchema;
  },
  /**
   * The sender gateway sends a TransferProposalClaims request to signal to the receiver gateway 
   * that the it is ready to start the transfer of the digital asset
   *
   * @generated from rpc relay.satp.SATP.TransferProposalReceipt
   */
  transferProposalReceipt: {
    methodKind: "unary";
    input: typeof TransferProposalReceiptRequestSchema;
    output: typeof AckSchema;
  },
  /**
   * The sender gateway sends a TransferCommence request to signal to the receiver gateway 
   * that the it is ready to start the transfer of the digital asset
   *
   * @generated from rpc relay.satp.SATP.TransferCommence
   */
  transferCommence: {
    methodKind: "unary";
    input: typeof TransferCommenceRequestSchema;
    output: typeof AckSchema;
  },
  /**
   * The receiver gateway sends a AckCommence request to the sender gateway to indicate agreement
   * to proceed with the asset transfe
   *
   * @generated from rpc relay.satp.SATP.AckCommence
   */
  ackCommence: {
    methodKind: "unary";
    input: typeof AckCommenceRequestSchema;
    output: typeof AckSchema;
  },
  /**
   * @generated from rpc relay.satp.SATP.SendAssetStatus
   */
  sendAssetStatus: {
    methodKind: "unary";
    input: typeof SendAssetStatusRequestSchema;
    output: typeof AckSchema;
  },
  /**
   * The sender gateway sends a LockAssertion request to convey a signed claim to the receiver gateway 
   * declaring that the asset in question has been locked or escrowed by the sender gateway in
   * the origin network (e.g. to prevent double spending)
   *
   * @generated from rpc relay.satp.SATP.LockAssertion
   */
  lockAssertion: {
    methodKind: "unary";
    input: typeof LockAssertionRequestSchema;
    output: typeof AckSchema;
  },
  /**
   * The receiver gateway sends a LockAssertionReceipt request to the sender gateway to indicate acceptance
   * of the claim(s) delivered by the sender gateway in the previous message
   *
   * @generated from rpc relay.satp.SATP.LockAssertionReceipt
   */
  lockAssertionReceipt: {
    methodKind: "unary";
    input: typeof LockAssertionReceiptRequestSchema;
    output: typeof AckSchema;
  },
  /**
   * @generated from rpc relay.satp.SATP.CommitPrepare
   */
  commitPrepare: {
    methodKind: "unary";
    input: typeof CommitPrepareRequestSchema;
    output: typeof AckSchema;
  },
  /**
   * @generated from rpc relay.satp.SATP.CommitReady
   */
  commitReady: {
    methodKind: "unary";
    input: typeof CommitReadyRequestSchema;
    output: typeof AckSchema;
  },
  /**
   * @generated from rpc relay.satp.SATP.CommitFinalAssertion
   */
  commitFinalAssertion: {
    methodKind: "unary";
    input: typeof CommitFinalAssertionRequestSchema;
    output: typeof AckSchema;
  },
  /**
   * @generated from rpc relay.satp.SATP.AckFinalReceipt
   */
  ackFinalReceipt: {
    methodKind: "unary";
    input: typeof AckFinalReceiptRequestSchema;
    output: typeof AckSchema;
  },
  /**
   * @generated from rpc relay.satp.SATP.TransferCompleted
   */
  transferCompleted: {
    methodKind: "unary";
    input: typeof TransferCompletedRequestSchema;
    output: typeof AckSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_relay_satp, 0);

