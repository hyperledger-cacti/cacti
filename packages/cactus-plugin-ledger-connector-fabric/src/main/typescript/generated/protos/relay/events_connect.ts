// Copyright IBM Corp. All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0

// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts,js_import_style=module"
// @generated from file relay/events.proto (package relay.events, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { EventSubscription } from "../common/events_pb.js";
import { Ack } from "../common/ack_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { ViewPayload } from "../common/state_pb.js";

/**
 * @generated from service relay.events.EventSubscribe
 */
export const EventSubscribe = {
  typeName: "relay.events.EventSubscribe",
  methods: {
    /**
     * the dest-relay forwards the request from client as EventSubscription to the src-relay
     *
     * @generated from rpc relay.events.EventSubscribe.SubscribeEvent
     */
    subscribeEvent: {
      name: "SubscribeEvent",
      I: EventSubscription,
      O: Ack,
      kind: MethodKind.Unary,
    },
    /**
     * Src-relay based upon query (EventSubscription) forwards the same response (Ack) 
     * from driver to the dest-relay by calling a new endpoint in dest-relay
     *
     * @generated from rpc relay.events.EventSubscribe.SendSubscriptionStatus
     */
    sendSubscriptionStatus: {
      name: "SendSubscriptionStatus",
      I: Ack,
      O: Ack,
      kind: MethodKind.Unary,
    },
    /**
     * Src-driver status of event subscription (Ack) 
     * to the src-relay by calling a new endpoint in src-relay
     *
     * @generated from rpc relay.events.EventSubscribe.SendDriverSubscriptionStatus
     */
    sendDriverSubscriptionStatus: {
      name: "SendDriverSubscriptionStatus",
      I: Ack,
      O: Ack,
      kind: MethodKind.Unary,
    },
  }
} as const;

/**
 * @generated from service relay.events.EventPublish
 */
export const EventPublish = {
  typeName: "relay.events.EventPublish",
  methods: {
    /**
     * src-driver forwards the state as part of event subscription to src-relay
     *
     * @generated from rpc relay.events.EventPublish.SendDriverState
     */
    sendDriverState: {
      name: "SendDriverState",
      I: ViewPayload,
      O: Ack,
      kind: MethodKind.Unary,
    },
    /**
     * src-relay will forward the state as part of event subscription to dest-relay
     *
     * @generated from rpc relay.events.EventPublish.SendState
     */
    sendState: {
      name: "SendState",
      I: ViewPayload,
      O: Ack,
      kind: MethodKind.Unary,
    },
  }
} as const;

