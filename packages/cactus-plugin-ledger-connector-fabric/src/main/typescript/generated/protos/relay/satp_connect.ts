// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts,js_import_style=module"
// @generated from file relay/satp.proto (package relay.satp, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AckCommenceRequest, AckFinalReceiptRequest, CommitFinalAssertionRequest, CommitPrepareRequest, CommitReadyRequest, LockAssertionReceiptRequest, LockAssertionRequest, SendAssetStatusRequest, TransferCommenceRequest, TransferCompletedRequest, TransferProposalClaimsRequest, TransferProposalReceiptRequest } from "./satp_pb.js";
import { Ack } from "../common/ack_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * Stage 1 endpoints
 *
 * @generated from service relay.satp.SATP
 */
export const SATP = {
  typeName: "relay.satp.SATP",
  methods: {
    /**
     * The sender gateway sends a TransferProposalClaims request to initiate an asset transfer. 
     * Depending on the proposal, multiple rounds of communication between the two gateways may happen.
     *
     * @generated from rpc relay.satp.SATP.TransferProposalClaims
     */
    transferProposalClaims: {
      name: "TransferProposalClaims",
      I: TransferProposalClaimsRequest,
      O: Ack,
      kind: MethodKind.Unary,
    },
    /**
     * The sender gateway sends a TransferProposalClaims request to signal to the receiver gateway 
     * that the it is ready to start the transfer of the digital asset
     *
     * @generated from rpc relay.satp.SATP.TransferProposalReceipt
     */
    transferProposalReceipt: {
      name: "TransferProposalReceipt",
      I: TransferProposalReceiptRequest,
      O: Ack,
      kind: MethodKind.Unary,
    },
    /**
     * The sender gateway sends a TransferCommence request to signal to the receiver gateway 
     * that the it is ready to start the transfer of the digital asset
     *
     * @generated from rpc relay.satp.SATP.TransferCommence
     */
    transferCommence: {
      name: "TransferCommence",
      I: TransferCommenceRequest,
      O: Ack,
      kind: MethodKind.Unary,
    },
    /**
     * The receiver gateway sends a AckCommence request to the sender gateway to indicate agreement
     * to proceed with the asset transfe
     *
     * @generated from rpc relay.satp.SATP.AckCommence
     */
    ackCommence: {
      name: "AckCommence",
      I: AckCommenceRequest,
      O: Ack,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc relay.satp.SATP.SendAssetStatus
     */
    sendAssetStatus: {
      name: "SendAssetStatus",
      I: SendAssetStatusRequest,
      O: Ack,
      kind: MethodKind.Unary,
    },
    /**
     * The sender gateway sends a LockAssertion request to convey a signed claim to the receiver gateway 
     * declaring that the asset in question has been locked or escrowed by the sender gateway in
     * the origin network (e.g. to prevent double spending)
     *
     * @generated from rpc relay.satp.SATP.LockAssertion
     */
    lockAssertion: {
      name: "LockAssertion",
      I: LockAssertionRequest,
      O: Ack,
      kind: MethodKind.Unary,
    },
    /**
     * The receiver gateway sends a LockAssertionReceipt request to the sender gateway to indicate acceptance
     * of the claim(s) delivered by the sender gateway in the previous message
     *
     * @generated from rpc relay.satp.SATP.LockAssertionReceipt
     */
    lockAssertionReceipt: {
      name: "LockAssertionReceipt",
      I: LockAssertionReceiptRequest,
      O: Ack,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc relay.satp.SATP.CommitPrepare
     */
    commitPrepare: {
      name: "CommitPrepare",
      I: CommitPrepareRequest,
      O: Ack,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc relay.satp.SATP.CommitReady
     */
    commitReady: {
      name: "CommitReady",
      I: CommitReadyRequest,
      O: Ack,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc relay.satp.SATP.CommitFinalAssertion
     */
    commitFinalAssertion: {
      name: "CommitFinalAssertion",
      I: CommitFinalAssertionRequest,
      O: Ack,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc relay.satp.SATP.AckFinalReceipt
     */
    ackFinalReceipt: {
      name: "AckFinalReceipt",
      I: AckFinalReceiptRequest,
      O: Ack,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc relay.satp.SATP.TransferCompleted
     */
    transferCompleted: {
      name: "TransferCompleted",
      I: TransferCompletedRequest,
      O: Ack,
      kind: MethodKind.Unary,
    },
  }
} as const;

