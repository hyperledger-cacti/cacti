// Copyright IBM Corp. All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0

// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file relay/events.proto (package relay.events, syntax proto3)
/* eslint-disable */

import type { GenFile, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { AckSchema } from "../common/ack_pb";
import { file_common_ack } from "../common/ack_pb";
import type { EventSubscriptionSchema } from "../common/events_pb";
import { file_common_events } from "../common/events_pb";
import type { ViewPayloadSchema } from "../common/state_pb";
import { file_common_state } from "../common/state_pb";

/**
 * Describes the file relay/events.proto.
 */
export const file_relay_events: GenFile = /*@__PURE__*/
  fileDesc("ChJyZWxheS9ldmVudHMucHJvdG8SDHJlbGF5LmV2ZW50czLZAQoORXZlbnRTdWJzY3JpYmUSRQoOU3Vic2NyaWJlRXZlbnQSIC5jb21tb24uZXZlbnRzLkV2ZW50U3Vic2NyaXB0aW9uGg8uY29tbW9uLmFjay5BY2siABI8ChZTZW5kU3Vic2NyaXB0aW9uU3RhdHVzEg8uY29tbW9uLmFjay5BY2saDy5jb21tb24uYWNrLkFjayIAEkIKHFNlbmREcml2ZXJTdWJzY3JpcHRpb25TdGF0dXMSDy5jb21tb24uYWNrLkFjaxoPLmNvbW1vbi5hY2suQWNrIgAyigEKDEV2ZW50UHVibGlzaBI/Cg9TZW5kRHJpdmVyU3RhdGUSGS5jb21tb24uc3RhdGUuVmlld1BheWxvYWQaDy5jb21tb24uYWNrLkFjayIAEjkKCVNlbmRTdGF0ZRIZLmNvbW1vbi5zdGF0ZS5WaWV3UGF5bG9hZBoPLmNvbW1vbi5hY2suQWNrIgBCdwowb3JnLmh5cGVybGVkZ2VyLmNhY3RpLndlYXZlci5wcm90b3MucmVsYXkuZXZlbnRzWkNnaXRodWIuY29tL2h5cGVybGVkZ2VyLWNhY3RpL2NhY3RpL3dlYXZlci9jb21tb24vcHJvdG9zLWdvL3YyL3JlbGF5YgZwcm90bzM", [file_common_ack, file_common_events, file_common_state]);

/**
 * @generated from service relay.events.EventSubscribe
 */
export const EventSubscribe: GenService<{
  /**
   * the dest-relay forwards the request from client as EventSubscription to the src-relay
   *
   * @generated from rpc relay.events.EventSubscribe.SubscribeEvent
   */
  subscribeEvent: {
    methodKind: "unary";
    input: typeof EventSubscriptionSchema;
    output: typeof AckSchema;
  },
  /**
   * Src-relay based upon query (EventSubscription) forwards the same response (Ack) 
   * from driver to the dest-relay by calling a new endpoint in dest-relay
   *
   * @generated from rpc relay.events.EventSubscribe.SendSubscriptionStatus
   */
  sendSubscriptionStatus: {
    methodKind: "unary";
    input: typeof AckSchema;
    output: typeof AckSchema;
  },
  /**
   * Src-driver status of event subscription (Ack) 
   * to the src-relay by calling a new endpoint in src-relay
   *
   * @generated from rpc relay.events.EventSubscribe.SendDriverSubscriptionStatus
   */
  sendDriverSubscriptionStatus: {
    methodKind: "unary";
    input: typeof AckSchema;
    output: typeof AckSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_relay_events, 0);

/**
 * @generated from service relay.events.EventPublish
 */
export const EventPublish: GenService<{
  /**
   * src-driver forwards the state as part of event subscription to src-relay
   *
   * @generated from rpc relay.events.EventPublish.SendDriverState
   */
  sendDriverState: {
    methodKind: "unary";
    input: typeof ViewPayloadSchema;
    output: typeof AckSchema;
  },
  /**
   * src-relay will forward the state as part of event subscription to dest-relay
   *
   * @generated from rpc relay.events.EventPublish.SendState
   */
  sendState: {
    methodKind: "unary";
    input: typeof ViewPayloadSchema;
    output: typeof AckSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_relay_events, 1);

