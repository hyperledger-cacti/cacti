// Copyright IBM Corp. All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0

// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file driver/driver.proto (package driver.driver, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { AckSchema } from "../common/ack_pb";
import { file_common_ack } from "../common/ack_pb";
import type { QuerySchema } from "../common/query_pb";
import { file_common_query } from "../common/query_pb";
import type { ContractTransaction, EventSubscriptionSchema } from "../common/events_pb";
import { file_common_events } from "../common/events_pb";
import type { ViewPayload } from "../common/state_pb";
import { file_common_state } from "../common/state_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file driver/driver.proto.
 */
export const file_driver_driver: GenFile = /*@__PURE__*/
  fileDesc("ChNkcml2ZXIvZHJpdmVyLnByb3RvEg1kcml2ZXIuZHJpdmVyIn0KGVdyaXRlRXh0ZXJuYWxTdGF0ZU1lc3NhZ2USLwoMdmlld19wYXlsb2FkGAEgASgLMhkuY29tbW9uLnN0YXRlLlZpZXdQYXlsb2FkEi8KA2N0eBgCIAEoCzIiLmNvbW1vbi5ldmVudHMuQ29udHJhY3RUcmFuc2FjdGlvbiIoChJQZXJmb3JtTG9ja1JlcXVlc3QSEgoKc2Vzc2lvbl9pZBgBIAEoCSIoChJDcmVhdGVBc3NldFJlcXVlc3QSEgoKc2Vzc2lvbl9pZBgBIAEoCSInChFFeHRpbmd1aXNoUmVxdWVzdBISCgpzZXNzaW9uX2lkGAEgASgJIigKEkFzc2lnbkFzc2V0UmVxdWVzdBISCgpzZXNzaW9uX2lkGAEgASgJMt8EChNEcml2ZXJDb21tdW5pY2F0aW9uEjwKElJlcXVlc3REcml2ZXJTdGF0ZRITLmNvbW1vbi5xdWVyeS5RdWVyeRoPLmNvbW1vbi5hY2suQWNrIgASRQoOU3Vic2NyaWJlRXZlbnQSIC5jb21tb24uZXZlbnRzLkV2ZW50U3Vic2NyaXB0aW9uGg8uY29tbW9uLmFjay5BY2siABJeCiNSZXF1ZXN0U2lnbmVkRXZlbnRTdWJzY3JpcHRpb25RdWVyeRIgLmNvbW1vbi5ldmVudHMuRXZlbnRTdWJzY3JpcHRpb24aEy5jb21tb24ucXVlcnkuUXVlcnkiABJRChJXcml0ZUV4dGVybmFsU3RhdGUSKC5kcml2ZXIuZHJpdmVyLldyaXRlRXh0ZXJuYWxTdGF0ZU1lc3NhZ2UaDy5jb21tb24uYWNrLkFjayIAEkMKC1BlcmZvcm1Mb2NrEiEuZHJpdmVyLmRyaXZlci5QZXJmb3JtTG9ja1JlcXVlc3QaDy5jb21tb24uYWNrLkFjayIAEkMKC0NyZWF0ZUFzc2V0EiEuZHJpdmVyLmRyaXZlci5DcmVhdGVBc3NldFJlcXVlc3QaDy5jb21tb24uYWNrLkFjayIAEkEKCkV4dGluZ3Vpc2gSIC5kcml2ZXIuZHJpdmVyLkV4dGluZ3Vpc2hSZXF1ZXN0Gg8uY29tbW9uLmFjay5BY2siABJDCgtBc3NpZ25Bc3NldBIhLmRyaXZlci5kcml2ZXIuQXNzaWduQXNzZXRSZXF1ZXN0Gg8uY29tbW9uLmFjay5BY2siAEJ5CjFvcmcuaHlwZXJsZWRnZXIuY2FjdGkud2VhdmVyLnByb3Rvcy5kcml2ZXIuZHJpdmVyWkRnaXRodWIuY29tL2h5cGVybGVkZ2VyLWNhY3RpL2NhY3RpL3dlYXZlci9jb21tb24vcHJvdG9zLWdvL3YyL2RyaXZlcmIGcHJvdG8z", [file_common_ack, file_common_query, file_common_events, file_common_state]);

/**
 * Data for a View processing by dest-driver
 *
 * @generated from message driver.driver.WriteExternalStateMessage
 */
export type WriteExternalStateMessage = Message<"driver.driver.WriteExternalStateMessage"> & {
  /**
   * @generated from field: common.state.ViewPayload view_payload = 1;
   */
  viewPayload?: ViewPayload;

  /**
   * @generated from field: common.events.ContractTransaction ctx = 2;
   */
  ctx?: ContractTransaction;
};

/**
 * Describes the message driver.driver.WriteExternalStateMessage.
 * Use `create(WriteExternalStateMessageSchema)` to create a new message.
 */
export const WriteExternalStateMessageSchema: GenMessage<WriteExternalStateMessage> = /*@__PURE__*/
  messageDesc(file_driver_driver, 0);

/**
 * @generated from message driver.driver.PerformLockRequest
 */
export type PerformLockRequest = Message<"driver.driver.PerformLockRequest"> & {
  /**
   * @generated from field: string session_id = 1;
   */
  sessionId: string;
};

/**
 * Describes the message driver.driver.PerformLockRequest.
 * Use `create(PerformLockRequestSchema)` to create a new message.
 */
export const PerformLockRequestSchema: GenMessage<PerformLockRequest> = /*@__PURE__*/
  messageDesc(file_driver_driver, 1);

/**
 * @generated from message driver.driver.CreateAssetRequest
 */
export type CreateAssetRequest = Message<"driver.driver.CreateAssetRequest"> & {
  /**
   * @generated from field: string session_id = 1;
   */
  sessionId: string;
};

/**
 * Describes the message driver.driver.CreateAssetRequest.
 * Use `create(CreateAssetRequestSchema)` to create a new message.
 */
export const CreateAssetRequestSchema: GenMessage<CreateAssetRequest> = /*@__PURE__*/
  messageDesc(file_driver_driver, 2);

/**
 * @generated from message driver.driver.ExtinguishRequest
 */
export type ExtinguishRequest = Message<"driver.driver.ExtinguishRequest"> & {
  /**
   * @generated from field: string session_id = 1;
   */
  sessionId: string;
};

/**
 * Describes the message driver.driver.ExtinguishRequest.
 * Use `create(ExtinguishRequestSchema)` to create a new message.
 */
export const ExtinguishRequestSchema: GenMessage<ExtinguishRequest> = /*@__PURE__*/
  messageDesc(file_driver_driver, 3);

/**
 * @generated from message driver.driver.AssignAssetRequest
 */
export type AssignAssetRequest = Message<"driver.driver.AssignAssetRequest"> & {
  /**
   * @generated from field: string session_id = 1;
   */
  sessionId: string;
};

/**
 * Describes the message driver.driver.AssignAssetRequest.
 * Use `create(AssignAssetRequestSchema)` to create a new message.
 */
export const AssignAssetRequestSchema: GenMessage<AssignAssetRequest> = /*@__PURE__*/
  messageDesc(file_driver_driver, 4);

/**
 * @generated from service driver.driver.DriverCommunication
 */
export const DriverCommunication: GenService<{
  /**
   * Data Sharing 
   * the remote relay sends a RequestDriverState request to its driver with a
   * query defining the data it wants to receive
   *
   * @generated from rpc driver.driver.DriverCommunication.RequestDriverState
   */
  requestDriverState: {
    methodKind: "unary";
    input: typeof QuerySchema;
    output: typeof AckSchema;
  },
  /**
   * Events Subscription
   * the src-relay uses this endpoint to forward the event subscription request from dest-relay to driver
   *
   * @generated from rpc driver.driver.DriverCommunication.SubscribeEvent
   */
  subscribeEvent: {
    methodKind: "unary";
    input: typeof EventSubscriptionSchema;
    output: typeof AckSchema;
  },
  /**
   * Recommended to have TLS mode on for this unsafe endpoint
   * Relay uses this to get Query.requestor_signature and 
   * Query.certificate required for event subscription
   *
   * @generated from rpc driver.driver.DriverCommunication.RequestSignedEventSubscriptionQuery
   */
  requestSignedEventSubscriptionQuery: {
    methodKind: "unary";
    input: typeof EventSubscriptionSchema;
    output: typeof QuerySchema;
  },
  /**
   * Events Publication
   * the dest-relay calls the dest-driver on this end point to write the remote network state to the local ledger
   *
   * @generated from rpc driver.driver.DriverCommunication.WriteExternalState
   */
  writeExternalState: {
    methodKind: "unary";
    input: typeof WriteExternalStateMessageSchema;
    output: typeof AckSchema;
  },
  /**
   * As part of SATP, the source reply (sender gateway) sends a PerformLock request to its driver
   * to lock a specific asset
   *
   * @generated from rpc driver.driver.DriverCommunication.PerformLock
   */
  performLock: {
    methodKind: "unary";
    input: typeof PerformLockRequestSchema;
    output: typeof AckSchema;
  },
  /**
   * As part of SATP, the destination reply (receiver gateway) sends a CreateAsset request to its driver
   * to create a specific asset
   *
   * @generated from rpc driver.driver.DriverCommunication.CreateAsset
   */
  createAsset: {
    methodKind: "unary";
    input: typeof CreateAssetRequestSchema;
    output: typeof AckSchema;
  },
  /**
   * As part of SATP, the source reply (sender gateway) sends a Extinguish request to its driver
   * to extinguish a specific asset
   *
   * @generated from rpc driver.driver.DriverCommunication.Extinguish
   */
  extinguish: {
    methodKind: "unary";
    input: typeof ExtinguishRequestSchema;
    output: typeof AckSchema;
  },
  /**
   * As part of SATP, the destination reply (receiver gateway) sends a AssignAsset request to its driver
   * to assign a specific asset
   *
   * @generated from rpc driver.driver.DriverCommunication.AssignAsset
   */
  assignAsset: {
    methodKind: "unary";
    input: typeof AssignAssetRequestSchema;
    output: typeof AckSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_driver_driver, 0);

