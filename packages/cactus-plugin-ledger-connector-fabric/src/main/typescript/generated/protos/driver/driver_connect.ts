// Copyright IBM Corp. All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0

// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts,js_import_style=module"
// @generated from file driver/driver.proto (package driver.driver, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Query } from "../common/query_pb.js";
import { Ack } from "../common/ack_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { EventSubscription } from "../common/events_pb.js";
import { AssignAssetRequest, CreateAssetRequest, ExtinguishRequest, PerformLockRequest, WriteExternalStateMessage } from "./driver_pb.js";

/**
 * @generated from service driver.driver.DriverCommunication
 */
export const DriverCommunication = {
  typeName: "driver.driver.DriverCommunication",
  methods: {
    /**
     * Data Sharing 
     * the remote relay sends a RequestDriverState request to its driver with a
     * query defining the data it wants to receive
     *
     * @generated from rpc driver.driver.DriverCommunication.RequestDriverState
     */
    requestDriverState: {
      name: "RequestDriverState",
      I: Query,
      O: Ack,
      kind: MethodKind.Unary,
    },
    /**
     * Events Subscription
     * the src-relay uses this endpoint to forward the event subscription request from dest-relay to driver
     *
     * @generated from rpc driver.driver.DriverCommunication.SubscribeEvent
     */
    subscribeEvent: {
      name: "SubscribeEvent",
      I: EventSubscription,
      O: Ack,
      kind: MethodKind.Unary,
    },
    /**
     * Recommended to have TLS mode on for this unsafe endpoint
     * Relay uses this to get Query.requestor_signature and 
     * Query.certificate required for event subscription
     *
     * @generated from rpc driver.driver.DriverCommunication.RequestSignedEventSubscriptionQuery
     */
    requestSignedEventSubscriptionQuery: {
      name: "RequestSignedEventSubscriptionQuery",
      I: EventSubscription,
      O: Query,
      kind: MethodKind.Unary,
    },
    /**
     * Events Publication
     * the dest-relay calls the dest-driver on this end point to write the remote network state to the local ledger
     *
     * @generated from rpc driver.driver.DriverCommunication.WriteExternalState
     */
    writeExternalState: {
      name: "WriteExternalState",
      I: WriteExternalStateMessage,
      O: Ack,
      kind: MethodKind.Unary,
    },
    /**
     * As part of SATP, the source reply (sender gateway) sends a PerformLock request to its driver
     * to lock a specific asset
     *
     * @generated from rpc driver.driver.DriverCommunication.PerformLock
     */
    performLock: {
      name: "PerformLock",
      I: PerformLockRequest,
      O: Ack,
      kind: MethodKind.Unary,
    },
    /**
     * As part of SATP, the destination reply (receiver gateway) sends a CreateAsset request to its driver
     * to create a specific asset
     *
     * @generated from rpc driver.driver.DriverCommunication.CreateAsset
     */
    createAsset: {
      name: "CreateAsset",
      I: CreateAssetRequest,
      O: Ack,
      kind: MethodKind.Unary,
    },
    /**
     * As part of SATP, the source reply (sender gateway) sends a Extinguish request to its driver
     * to extinguish a specific asset
     *
     * @generated from rpc driver.driver.DriverCommunication.Extinguish
     */
    extinguish: {
      name: "Extinguish",
      I: ExtinguishRequest,
      O: Ack,
      kind: MethodKind.Unary,
    },
    /**
     * As part of SATP, the destination reply (receiver gateway) sends a AssignAsset request to its driver
     * to assign a specific asset
     *
     * @generated from rpc driver.driver.DriverCommunication.AssignAsset
     */
    assignAsset: {
      name: "AssignAsset",
      I: AssignAssetRequest,
      O: Ack,
      kind: MethodKind.Unary,
    },
  }
} as const;

