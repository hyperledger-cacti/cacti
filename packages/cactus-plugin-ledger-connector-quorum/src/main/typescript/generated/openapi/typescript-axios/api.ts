/* tslint:disable */
/* eslint-disable */
/**
 * Hyperledger Cactus Plugin - Connector Quorum
 * Can perform basic tasks on a Quorum ledger
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ContractJSON
 */
export interface ContractJSON {
    [key: string]: object | any;

    /**
     * 
     * @type {string}
     * @memberof ContractJSON
     */
    contractName: string;
    /**
     * See https://ethereum.stackexchange.com/a/47556 regarding the maximum length of the bytecode
     * @type {string}
     * @memberof ContractJSON
     */
    bytecode: string;
    /**
     * The application binary interface of the solidity contract, optional parameter
     * @type {Array<any>}
     * @memberof ContractJSON
     */
    abi?: Array<any>;
    /**
     * 
     * @type {string}
     * @memberof ContractJSON
     */
    metadata?: string;
    /**
     * 
     * @type {string}
     * @memberof ContractJSON
     */
    deployedBytecode?: string;
    /**
     * 
     * @type {string}
     * @memberof ContractJSON
     */
    sourceMap?: string;
    /**
     * 
     * @type {string}
     * @memberof ContractJSON
     */
    deployedSourceMap?: string;
    /**
     * 
     * @type {string}
     * @memberof ContractJSON
     */
    sourcePath?: string;
    /**
     * 
     * @type {object}
     * @memberof ContractJSON
     */
    compiler?: object;
    /**
     * 
     * @type {object}
     * @memberof ContractJSON
     */
    networks?: object;
    /**
     * 
     * @type {object}
     * @memberof ContractJSON
     */
    ast?: object;
    /**
     * 
     * @type {object}
     * @memberof ContractJSON
     */
    functionHashes?: object;
    /**
     * 
     * @type {object}
     * @memberof ContractJSON
     */
    gasEstimates?: object;
}
/**
 * 
 * @export
 * @interface DeployContractSolidityBytecodeJsonObjectV1Request
 */
export interface DeployContractSolidityBytecodeJsonObjectV1Request {
    /**
     * 
     * @type {Web3SigningCredential}
     * @memberof DeployContractSolidityBytecodeJsonObjectV1Request
     */
    web3SigningCredential: Web3SigningCredential;
    /**
     * 
     * @type {number}
     * @memberof DeployContractSolidityBytecodeJsonObjectV1Request
     */
    gas?: number;
    /**
     * 
     * @type {string}
     * @memberof DeployContractSolidityBytecodeJsonObjectV1Request
     */
    gasPrice?: string;
    /**
     * The amount of milliseconds to wait for a transaction receipt with theaddress of the contract(which indicates successful deployment) beforegiving up and crashing.
     * @type {number}
     * @memberof DeployContractSolidityBytecodeJsonObjectV1Request
     */
    timeoutMs?: number;
    /**
     * 
     * @type {ContractJSON}
     * @memberof DeployContractSolidityBytecodeJsonObjectV1Request
     */
    contractJSON: ContractJSON;
    /**
     * The list of arguments to pass in to the constructor of the contract being deployed.
     * @type {Array<any>}
     * @memberof DeployContractSolidityBytecodeJsonObjectV1Request
     */
    constructorArgs?: Array<any>;
}
/**
 * 
 * @export
 * @interface DeployContractSolidityBytecodeV1Request
 */
export interface DeployContractSolidityBytecodeV1Request {
    /**
     * The contract name for retrieve the contracts json on the keychain.
     * @type {string}
     * @memberof DeployContractSolidityBytecodeV1Request
     */
    contractName: string;
    /**
     * 
     * @type {Web3SigningCredential}
     * @memberof DeployContractSolidityBytecodeV1Request
     */
    web3SigningCredential: Web3SigningCredential;
    /**
     * The keychainId for retrieve the contracts json.
     * @type {string}
     * @memberof DeployContractSolidityBytecodeV1Request
     */
    keychainId: string;
    /**
     * 
     * @type {number}
     * @memberof DeployContractSolidityBytecodeV1Request
     */
    gas?: number;
    /**
     * 
     * @type {string}
     * @memberof DeployContractSolidityBytecodeV1Request
     */
    gasPrice?: string;
    /**
     * The amount of milliseconds to wait for a transaction receipt with theaddress of the contract(which indicates successful deployment) beforegiving up and crashing.
     * @type {number}
     * @memberof DeployContractSolidityBytecodeV1Request
     */
    timeoutMs?: number;
    /**
     * For use when not using keychain, pass the contract in as this variable
     * @type {object}
     * @memberof DeployContractSolidityBytecodeV1Request
     */
    contractJSON?: object;
    /**
     * The list of arguments to pass in to the constructor of the contract being deployed.
     * @type {Array<any>}
     * @memberof DeployContractSolidityBytecodeV1Request
     */
    constructorArgs?: Array<any>;
}
/**
 * 
 * @export
 * @interface DeployContractSolidityBytecodeV1Response
 */
export interface DeployContractSolidityBytecodeV1Response {
    /**
     * 
     * @type {Web3TransactionReceipt}
     * @memberof DeployContractSolidityBytecodeV1Response
     */
    transactionReceipt: Web3TransactionReceipt;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum EthContractInvocationType {
    Send = 'SEND',
    Call = 'CALL'
}

/**
 * 
 * @export
 * @enum {string}
 */

export enum EthContractInvocationWeb3Method {
    Send = 'send',
    Call = 'call',
    EncodeAbi = 'encodeABI',
    EstimateGas = 'estimateGas'
}

/**
 * 
 * @export
 * @interface InvokeContractJsonObjectV1Request
 */
export interface InvokeContractJsonObjectV1Request {
    /**
     * 
     * @type {Web3SigningCredential}
     * @memberof InvokeContractJsonObjectV1Request
     */
    web3SigningCredential: Web3SigningCredential;
    /**
     * 
     * @type {EthContractInvocationType}
     * @memberof InvokeContractJsonObjectV1Request
     */
    invocationType: EthContractInvocationType;
    /**
     * The name of the contract method to invoke.
     * @type {string}
     * @memberof InvokeContractJsonObjectV1Request
     */
    methodName: string;
    /**
     * The list of arguments to pass in to the contract method being invoked.
     * @type {Array<any>}
     * @memberof InvokeContractJsonObjectV1Request
     */
    params: Array<any>;
    /**
     * Address of the solidity contract
     * @type {string}
     * @memberof InvokeContractJsonObjectV1Request
     */
    contractAddress: string;
    /**
     * 
     * @type {string | number}
     * @memberof InvokeContractJsonObjectV1Request
     */
    value?: string | number;
    /**
     * 
     * @type {string | number}
     * @memberof InvokeContractJsonObjectV1Request
     */
    gas?: string | number;
    /**
     * 
     * @type {string | number}
     * @memberof InvokeContractJsonObjectV1Request
     */
    gasPrice?: string | number;
    /**
     * 
     * @type {number}
     * @memberof InvokeContractJsonObjectV1Request
     */
    nonce?: number;
    /**
     * The amount of milliseconds to wait for a transaction receipt beforegiving up and crashing. Only has any effect if the invocation type is SEND
     * @type {number}
     * @memberof InvokeContractJsonObjectV1Request
     */
    timeoutMs?: number;
    /**
     * 
     * @type {ContractJSON}
     * @memberof InvokeContractJsonObjectV1Request
     */
    contractJSON: ContractJSON;
}
/**
 * 
 * @export
 * @interface InvokeContractV1Request
 */
export interface InvokeContractV1Request {
    /**
     * The contract name to find it in the keychain plugin
     * @type {string}
     * @memberof InvokeContractV1Request
     */
    contractName: string;
    /**
     * 
     * @type {Web3SigningCredential}
     * @memberof InvokeContractV1Request
     */
    web3SigningCredential: Web3SigningCredential;
    /**
     * 
     * @type {EthContractInvocationType}
     * @memberof InvokeContractV1Request
     */
    invocationType: EthContractInvocationType;
    /**
     * The name of the contract method to invoke.
     * @type {string}
     * @memberof InvokeContractV1Request
     */
    methodName: string;
    /**
     * The list of arguments to pass in to the contract method being invoked.
     * @type {Array<any>}
     * @memberof InvokeContractV1Request
     */
    params: Array<any>;
    /**
     * 
     * @type {string | number}
     * @memberof InvokeContractV1Request
     */
    value?: string | number;
    /**
     * 
     * @type {string | number}
     * @memberof InvokeContractV1Request
     */
    gas?: string | number;
    /**
     * 
     * @type {string | number}
     * @memberof InvokeContractV1Request
     */
    gasPrice?: string | number;
    /**
     * 
     * @type {number}
     * @memberof InvokeContractV1Request
     */
    nonce?: number;
    /**
     * The amount of milliseconds to wait for a transaction receipt beforegiving up and crashing. Only has any effect if the invocation type is SEND
     * @type {number}
     * @memberof InvokeContractV1Request
     */
    timeoutMs?: number;
    /**
     * The keychainId for retrieve the contracts json.
     * @type {string}
     * @memberof InvokeContractV1Request
     */
    keychainId: string;
}
/**
 * 
 * @export
 * @interface InvokeContractV1Response
 */
export interface InvokeContractV1Response {
    /**
     * 
     * @type {Web3TransactionReceipt}
     * @memberof InvokeContractV1Response
     */
    transactionReceipt?: Web3TransactionReceipt;
    /**
     * 
     * @type {any}
     * @memberof InvokeContractV1Response
     */
    callOutput?: any | null;
    /**
     * 
     * @type {boolean}
     * @memberof InvokeContractV1Response
     */
    success: boolean;
}
/**
 * 
 * @export
 * @interface InvokeRawWeb3EthContractV1Request
 */
export interface InvokeRawWeb3EthContractV1Request {
    /**
     * The application binary interface of the solidity contract
     * @type {Array<any>}
     * @memberof InvokeRawWeb3EthContractV1Request
     */
    abi: Array<any>;
    /**
     * Deployed solidity contract address
     * @type {string}
     * @memberof InvokeRawWeb3EthContractV1Request
     */
    address: string;
    /**
     * 
     * @type {EthContractInvocationWeb3Method}
     * @memberof InvokeRawWeb3EthContractV1Request
     */
    invocationType: EthContractInvocationWeb3Method;
    /**
     * The list of arguments for contract invocation method (send, call, etc...)
     * @type {object}
     * @memberof InvokeRawWeb3EthContractV1Request
     */
    invocationParams?: object;
    /**
     * Method of deployed solidity contract to execute
     * @type {string}
     * @memberof InvokeRawWeb3EthContractV1Request
     */
    contractMethod: string;
    /**
     * The list of arguments for deployed solidity contract method
     * @type {Array<any>}
     * @memberof InvokeRawWeb3EthContractV1Request
     */
    contractMethodArgs?: Array<any>;
}
/**
 * 
 * @export
 * @interface InvokeRawWeb3EthContractV1Response
 */
export interface InvokeRawWeb3EthContractV1Response {
    /**
     * Status code of the operation
     * @type {number}
     * @memberof InvokeRawWeb3EthContractV1Response
     */
    status: number;
    /**
     * Output of contract invocation method
     * @type {any}
     * @memberof InvokeRawWeb3EthContractV1Response
     */
    data?: any | null;
    /**
     * Error details
     * @type {string}
     * @memberof InvokeRawWeb3EthContractV1Response
     */
    errorDetail?: string;
}
/**
 * 
 * @export
 * @interface InvokeRawWeb3EthMethodV1Request
 */
export interface InvokeRawWeb3EthMethodV1Request {
    /**
     * The name of the web3.eth method to invoke
     * @type {string}
     * @memberof InvokeRawWeb3EthMethodV1Request
     */
    methodName: string;
    /**
     * The list of arguments to pass to web3.eth method specified in methodName
     * @type {Array<any>}
     * @memberof InvokeRawWeb3EthMethodV1Request
     */
    params?: Array<any>;
}
/**
 * 
 * @export
 * @interface InvokeRawWeb3EthMethodV1Response
 */
export interface InvokeRawWeb3EthMethodV1Response {
    /**
     * Status code of the operation
     * @type {number}
     * @memberof InvokeRawWeb3EthMethodV1Response
     */
    status: number;
    /**
     * Output of requested web3.eth method
     * @type {any}
     * @memberof InvokeRawWeb3EthMethodV1Response
     */
    data?: any | null;
    /**
     * Error details
     * @type {string}
     * @memberof InvokeRawWeb3EthMethodV1Response
     */
    errorDetail?: string;
}
/**
 * 
 * @export
 * @interface QuorumTransactionConfig
 */
export interface QuorumTransactionConfig {
    [key: string]: object | any;

    /**
     * 
     * @type {string}
     * @memberof QuorumTransactionConfig
     */
    rawTransaction?: string;
    /**
     * 
     * @type {string | number}
     * @memberof QuorumTransactionConfig
     */
    from?: string | number;
    /**
     * 
     * @type {string}
     * @memberof QuorumTransactionConfig
     */
    to?: string;
    /**
     * 
     * @type {string | number}
     * @memberof QuorumTransactionConfig
     */
    value?: string | number;
    /**
     * 
     * @type {string | number}
     * @memberof QuorumTransactionConfig
     */
    gas?: string | number;
    /**
     * 
     * @type {string | number}
     * @memberof QuorumTransactionConfig
     */
    gasPrice?: string | number;
    /**
     * 
     * @type {number}
     * @memberof QuorumTransactionConfig
     */
    nonce?: number;
    /**
     * 
     * @type {string}
     * @memberof QuorumTransactionConfig
     */
    data?: string;
}
/**
 * 
 * @export
 * @interface RunTransactionRequest
 */
export interface RunTransactionRequest {
    /**
     * 
     * @type {Web3SigningCredential}
     * @memberof RunTransactionRequest
     */
    web3SigningCredential: Web3SigningCredential;
    /**
     * 
     * @type {QuorumTransactionConfig}
     * @memberof RunTransactionRequest
     */
    transactionConfig: QuorumTransactionConfig;
    /**
     * The amount of milliseconds to wait for a transaction receipt with thehash of the transaction(which indicates successful execution) beforegiving up and crashing.
     * @type {number}
     * @memberof RunTransactionRequest
     */
    timeoutMs?: number;
}
/**
 * 
 * @export
 * @interface RunTransactionResponse
 */
export interface RunTransactionResponse {
    /**
     * 
     * @type {Web3TransactionReceipt}
     * @memberof RunTransactionResponse
     */
    transactionReceipt: Web3TransactionReceipt;
}
/**
 * 
 * @export
 * @interface SolidityContractJsonArtifact
 */
export interface SolidityContractJsonArtifact {
    /**
     * 
     * @type {string}
     * @memberof SolidityContractJsonArtifact
     */
    contractName: string;
    /**
     * 
     * @type {string}
     * @memberof SolidityContractJsonArtifact
     */
    metadata?: string;
    /**
     * 
     * @type {string}
     * @memberof SolidityContractJsonArtifact
     */
    bytecode?: string;
    /**
     * 
     * @type {string}
     * @memberof SolidityContractJsonArtifact
     */
    deployedBytecode?: string;
    /**
     * 
     * @type {string}
     * @memberof SolidityContractJsonArtifact
     */
    sourceMap?: string;
    /**
     * 
     * @type {string}
     * @memberof SolidityContractJsonArtifact
     */
    deployedSourceMap?: string;
    /**
     * 
     * @type {string}
     * @memberof SolidityContractJsonArtifact
     */
    sourcePath?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof SolidityContractJsonArtifact
     */
    compiler?: { [key: string]: object; };
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof SolidityContractJsonArtifact
     */
    functionHashes?: { [key: string]: object; };
    /**
     * 
     * @type {object}
     * @memberof SolidityContractJsonArtifact
     */
    gasEstimates?: object;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum WatchBlocksV1 {
    Subscribe = 'org.hyperledger.cactus.api.async.quorum.WatchBlocksV1.Subscribe',
    Next = 'org.hyperledger.cactus.api.async.quorum.WatchBlocksV1.Next',
    Unsubscribe = 'org.hyperledger.cactus.api.async.quorum.WatchBlocksV1.Unsubscribe',
    Error = 'org.hyperledger.cactus.api.async.quorum.WatchBlocksV1.Error',
    Complete = 'org.hyperledger.cactus.api.async.quorum.WatchBlocksV1.Complete'
}

/**
 * 
 * @export
 * @interface WatchBlocksV1BlockData
 */
export interface WatchBlocksV1BlockData {
    /**
     * 
     * @type {number}
     * @memberof WatchBlocksV1BlockData
     */
    number: number;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    hash: string;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    parentHash: string;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    nonce: string;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    sha3Uncles: string;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    logsBloom: string;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    transactionsRoot?: string;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    stateRoot: string;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    receiptsRoot?: string;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    difficulty?: string;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    mixHash?: string;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    miner: string;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    extraData: string;
    /**
     * 
     * @type {number}
     * @memberof WatchBlocksV1BlockData
     */
    gasLimit: number;
    /**
     * 
     * @type {number}
     * @memberof WatchBlocksV1BlockData
     */
    gasUsed: number;
    /**
     * 
     * @type {string | number}
     * @memberof WatchBlocksV1BlockData
     */
    timestamp: string | number;
    /**
     * 
     * @type {number}
     * @memberof WatchBlocksV1BlockData
     */
    size: number;
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1BlockData
     */
    totalDifficulty: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof WatchBlocksV1BlockData
     */
    uncles: Array<string>;
    /**
     * 
     * @type {Array<Web3Transaction>}
     * @memberof WatchBlocksV1BlockData
     */
    transactions: Array<Web3Transaction>;
}
/**
 * 
 * @export
 * @interface WatchBlocksV1Options
 */
export interface WatchBlocksV1Options {
    /**
     * 
     * @type {boolean}
     * @memberof WatchBlocksV1Options
     */
    getBlockData?: boolean;
}
/**
 * 
 * @export
 * @interface WatchBlocksV1Progress
 */
export interface WatchBlocksV1Progress {
    /**
     * 
     * @type {Web3BlockHeader}
     * @memberof WatchBlocksV1Progress
     */
    blockHeader?: Web3BlockHeader;
    /**
     * 
     * @type {WatchBlocksV1BlockData}
     * @memberof WatchBlocksV1Progress
     */
    blockData?: WatchBlocksV1BlockData;
}
/**
 * 
 * @export
 * @interface Web3BlockHeader
 */
export interface Web3BlockHeader {
    /**
     * 
     * @type {number}
     * @memberof Web3BlockHeader
     */
    number: number;
    /**
     * 
     * @type {string}
     * @memberof Web3BlockHeader
     */
    hash: string;
    /**
     * 
     * @type {string}
     * @memberof Web3BlockHeader
     */
    parentHash: string;
    /**
     * 
     * @type {string}
     * @memberof Web3BlockHeader
     */
    nonce: string;
    /**
     * 
     * @type {string}
     * @memberof Web3BlockHeader
     */
    sha3Uncles: string;
    /**
     * 
     * @type {string}
     * @memberof Web3BlockHeader
     */
    logsBloom: string;
    /**
     * 
     * @type {string}
     * @memberof Web3BlockHeader
     */
    transactionsRoot?: string;
    /**
     * 
     * @type {string}
     * @memberof Web3BlockHeader
     */
    stateRoot: string;
    /**
     * 
     * @type {string}
     * @memberof Web3BlockHeader
     */
    receiptsRoot?: string;
    /**
     * 
     * @type {string}
     * @memberof Web3BlockHeader
     */
    difficulty?: string;
    /**
     * 
     * @type {string}
     * @memberof Web3BlockHeader
     */
    mixHash?: string;
    /**
     * 
     * @type {string}
     * @memberof Web3BlockHeader
     */
    miner: string;
    /**
     * 
     * @type {string}
     * @memberof Web3BlockHeader
     */
    extraData: string;
    /**
     * 
     * @type {number}
     * @memberof Web3BlockHeader
     */
    gasLimit: number;
    /**
     * 
     * @type {number}
     * @memberof Web3BlockHeader
     */
    gasUsed: number;
    /**
     * 
     * @type {string | number}
     * @memberof Web3BlockHeader
     */
    timestamp: string | number;
}
/**
 * @type Web3SigningCredential
 * @export
 */
export type Web3SigningCredential = Web3SigningCredentialCactusKeychainRef | Web3SigningCredentialGethKeychainPassword | Web3SigningCredentialNone | Web3SigningCredentialPrivateKeyHex;

/**
 * 
 * @export
 * @interface Web3SigningCredentialCactusKeychainRef
 */
export interface Web3SigningCredentialCactusKeychainRef {
    /**
     * 
     * @type {Web3SigningCredentialType}
     * @memberof Web3SigningCredentialCactusKeychainRef
     */
    type: Web3SigningCredentialType;
    /**
     * The ethereum account (public key) that the credential  belongs to. Basically the username in the traditional  terminology of authentication.
     * @type {string}
     * @memberof Web3SigningCredentialCactusKeychainRef
     */
    ethAccount: string;
    /**
     * The key to use when looking up the the keychain entry holding the secret pointed to by the  keychainEntryKey parameter.
     * @type {string}
     * @memberof Web3SigningCredentialCactusKeychainRef
     */
    keychainEntryKey: string;
    /**
     * The keychain ID to use when looking up the the keychain plugin instance that will be used to retrieve the secret pointed to by the keychainEntryKey parameter.
     * @type {string}
     * @memberof Web3SigningCredentialCactusKeychainRef
     */
    keychainId?: string;
}
/**
 * 
 * @export
 * @interface Web3SigningCredentialGethKeychainPassword
 */
export interface Web3SigningCredentialGethKeychainPassword {
    /**
     * 
     * @type {Web3SigningCredentialType}
     * @memberof Web3SigningCredentialGethKeychainPassword
     */
    type: Web3SigningCredentialType;
    /**
     * The ethereum account (public key) that the credential  belongs to. Basically the username in the traditional terminology of authentication.
     * @type {string}
     * @memberof Web3SigningCredentialGethKeychainPassword
     */
    ethAccount: string;
    /**
     * A geth keychain unlock password.
     * @type {string}
     * @memberof Web3SigningCredentialGethKeychainPassword
     */
    secret: string;
}
/**
 * Using this denotes that there is no signing required because the transaction is pre-signed.
 * @export
 * @interface Web3SigningCredentialNone
 */
export interface Web3SigningCredentialNone {
    /**
     * 
     * @type {Web3SigningCredentialType}
     * @memberof Web3SigningCredentialNone
     */
    type: Web3SigningCredentialType;
}
/**
 * 
 * @export
 * @interface Web3SigningCredentialPrivateKeyHex
 */
export interface Web3SigningCredentialPrivateKeyHex {
    /**
     * 
     * @type {Web3SigningCredentialType}
     * @memberof Web3SigningCredentialPrivateKeyHex
     */
    type: Web3SigningCredentialType;
    /**
     * The ethereum account (public key) that the credential belongs to. Basically the username in the traditional terminology of authentication.
     * @type {string}
     * @memberof Web3SigningCredentialPrivateKeyHex
     */
    ethAccount: string;
    /**
     * The HEX encoded private key of an eth account.
     * @type {string}
     * @memberof Web3SigningCredentialPrivateKeyHex
     */
    secret: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum Web3SigningCredentialType {
    CactusKeychainRef = 'CACTUS_KEYCHAIN_REF',
    GethKeychainPassword = 'GETH_KEYCHAIN_PASSWORD',
    PrivateKeyHex = 'PRIVATE_KEY_HEX',
    None = 'NONE'
}

/**
 * 
 * @export
 * @interface Web3Transaction
 */
export interface Web3Transaction {
    /**
     * 
     * @type {string}
     * @memberof Web3Transaction
     */
    hash: string;
    /**
     * 
     * @type {number}
     * @memberof Web3Transaction
     */
    nonce: number;
    /**
     * 
     * @type {string}
     * @memberof Web3Transaction
     */
    blockHash: string | null;
    /**
     * 
     * @type {number}
     * @memberof Web3Transaction
     */
    blockNumber: number | null;
    /**
     * 
     * @type {number}
     * @memberof Web3Transaction
     */
    transactionIndex: number | null;
    /**
     * 
     * @type {string}
     * @memberof Web3Transaction
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof Web3Transaction
     */
    to: string | null;
    /**
     * 
     * @type {string}
     * @memberof Web3Transaction
     */
    value: string;
    /**
     * 
     * @type {string}
     * @memberof Web3Transaction
     */
    gasPrice: string;
    /**
     * 
     * @type {number}
     * @memberof Web3Transaction
     */
    gas: number;
    /**
     * 
     * @type {string}
     * @memberof Web3Transaction
     */
    input: string;
    /**
     * 
     * @type {string}
     * @memberof Web3Transaction
     */
    v?: string;
    /**
     * 
     * @type {string}
     * @memberof Web3Transaction
     */
    r?: string;
    /**
     * 
     * @type {string}
     * @memberof Web3Transaction
     */
    s?: string;
}
/**
 * 
 * @export
 * @interface Web3TransactionReceipt
 */
export interface Web3TransactionReceipt {
    [key: string]: object | any;

    /**
     * 
     * @type {boolean}
     * @memberof Web3TransactionReceipt
     */
    status: boolean;
    /**
     * 
     * @type {string}
     * @memberof Web3TransactionReceipt
     */
    transactionHash: string;
    /**
     * 
     * @type {number}
     * @memberof Web3TransactionReceipt
     */
    transactionIndex: number;
    /**
     * 
     * @type {string}
     * @memberof Web3TransactionReceipt
     */
    blockHash: string;
    /**
     * 
     * @type {number}
     * @memberof Web3TransactionReceipt
     */
    blockNumber: number;
    /**
     * 
     * @type {number}
     * @memberof Web3TransactionReceipt
     */
    gasUsed: number;
    /**
     * 
     * @type {string}
     * @memberof Web3TransactionReceipt
     */
    contractAddress?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Web3TransactionReceipt
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof Web3TransactionReceipt
     */
    to: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deploys the bytecode of a Solidity contract.
         * @param {DeployContractSolidityBytecodeJsonObjectV1Request} [deployContractSolidityBytecodeJsonObjectV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployContractSolBytecodeJsonObjectV1: async (deployContractSolidityBytecodeJsonObjectV1Request?: DeployContractSolidityBytecodeJsonObjectV1Request, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-quorum/deploy-contract-solidity-bytecode-json-object`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deployContractSolidityBytecodeJsonObjectV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deploys the bytecode of a Solidity contract.
         * @param {DeployContractSolidityBytecodeV1Request} [deployContractSolidityBytecodeV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployContractSolBytecodeV1: async (deployContractSolidityBytecodeV1Request?: DeployContractSolidityBytecodeV1Request, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-quorum/deploy-contract-solidity-bytecode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deployContractSolidityBytecodeV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the Prometheus Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrometheusMetricsV1: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-quorum/get-prometheus-exporter-metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Invokes a contract on a besu ledger
         * @param {InvokeContractV1Request} [invokeContractV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeContractV1: async (invokeContractV1Request?: InvokeContractV1Request, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-quorum/invoke-contract`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(invokeContractV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Invokes a contract on a besu ledger
         * @param {InvokeContractJsonObjectV1Request} [invokeContractJsonObjectV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeContractV1NoKeychain: async (invokeContractJsonObjectV1Request?: InvokeContractJsonObjectV1Request, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-quorum/invoke-contract-json-object`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(invokeContractJsonObjectV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Low-level endpoint to invoke a method on deployed contract.
         * @param {InvokeRawWeb3EthContractV1Request} [invokeRawWeb3EthContractV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeRawWeb3EthContractV1: async (invokeRawWeb3EthContractV1Request?: InvokeRawWeb3EthContractV1Request, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-quorum/invoke-raw-web3eth-contract`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(invokeRawWeb3EthContractV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Invoke any method from web3.eth (low-level)
         * @param {InvokeRawWeb3EthMethodV1Request} [invokeRawWeb3EthMethodV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeWeb3EthMethodV1: async (invokeRawWeb3EthMethodV1Request?: InvokeRawWeb3EthMethodV1Request, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-quorum/invoke-raw-web3eth-method`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(invokeRawWeb3EthMethodV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Executes a transaction on a quorum ledger
         * @param {RunTransactionRequest} [runTransactionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runTransactionV1: async (runTransactionRequest?: RunTransactionRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-quorum/run-transaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(runTransactionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Deploys the bytecode of a Solidity contract.
         * @param {DeployContractSolidityBytecodeJsonObjectV1Request} [deployContractSolidityBytecodeJsonObjectV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deployContractSolBytecodeJsonObjectV1(deployContractSolidityBytecodeJsonObjectV1Request?: DeployContractSolidityBytecodeJsonObjectV1Request, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeployContractSolidityBytecodeV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deployContractSolBytecodeJsonObjectV1(deployContractSolidityBytecodeJsonObjectV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deploys the bytecode of a Solidity contract.
         * @param {DeployContractSolidityBytecodeV1Request} [deployContractSolidityBytecodeV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deployContractSolBytecodeV1(deployContractSolidityBytecodeV1Request?: DeployContractSolidityBytecodeV1Request, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeployContractSolidityBytecodeV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deployContractSolBytecodeV1(deployContractSolidityBytecodeV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the Prometheus Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrometheusMetricsV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrometheusMetricsV1(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Invokes a contract on a besu ledger
         * @param {InvokeContractV1Request} [invokeContractV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invokeContractV1(invokeContractV1Request?: InvokeContractV1Request, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvokeContractV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invokeContractV1(invokeContractV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Invokes a contract on a besu ledger
         * @param {InvokeContractJsonObjectV1Request} [invokeContractJsonObjectV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invokeContractV1NoKeychain(invokeContractJsonObjectV1Request?: InvokeContractJsonObjectV1Request, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvokeContractV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invokeContractV1NoKeychain(invokeContractJsonObjectV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Low-level endpoint to invoke a method on deployed contract.
         * @param {InvokeRawWeb3EthContractV1Request} [invokeRawWeb3EthContractV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invokeRawWeb3EthContractV1(invokeRawWeb3EthContractV1Request?: InvokeRawWeb3EthContractV1Request, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvokeRawWeb3EthContractV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invokeRawWeb3EthContractV1(invokeRawWeb3EthContractV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Invoke any method from web3.eth (low-level)
         * @param {InvokeRawWeb3EthMethodV1Request} [invokeRawWeb3EthMethodV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invokeWeb3EthMethodV1(invokeRawWeb3EthMethodV1Request?: InvokeRawWeb3EthMethodV1Request, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvokeRawWeb3EthMethodV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invokeWeb3EthMethodV1(invokeRawWeb3EthMethodV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Executes a transaction on a quorum ledger
         * @param {RunTransactionRequest} [runTransactionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runTransactionV1(runTransactionRequest?: RunTransactionRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunTransactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runTransactionV1(runTransactionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Deploys the bytecode of a Solidity contract.
         * @param {DeployContractSolidityBytecodeJsonObjectV1Request} [deployContractSolidityBytecodeJsonObjectV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployContractSolBytecodeJsonObjectV1(deployContractSolidityBytecodeJsonObjectV1Request?: DeployContractSolidityBytecodeJsonObjectV1Request, options?: any): AxiosPromise<DeployContractSolidityBytecodeV1Response> {
            return localVarFp.deployContractSolBytecodeJsonObjectV1(deployContractSolidityBytecodeJsonObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deploys the bytecode of a Solidity contract.
         * @param {DeployContractSolidityBytecodeV1Request} [deployContractSolidityBytecodeV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployContractSolBytecodeV1(deployContractSolidityBytecodeV1Request?: DeployContractSolidityBytecodeV1Request, options?: any): AxiosPromise<DeployContractSolidityBytecodeV1Response> {
            return localVarFp.deployContractSolBytecodeV1(deployContractSolidityBytecodeV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the Prometheus Metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrometheusMetricsV1(options?: any): AxiosPromise<string> {
            return localVarFp.getPrometheusMetricsV1(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Invokes a contract on a besu ledger
         * @param {InvokeContractV1Request} [invokeContractV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeContractV1(invokeContractV1Request?: InvokeContractV1Request, options?: any): AxiosPromise<InvokeContractV1Response> {
            return localVarFp.invokeContractV1(invokeContractV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Invokes a contract on a besu ledger
         * @param {InvokeContractJsonObjectV1Request} [invokeContractJsonObjectV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeContractV1NoKeychain(invokeContractJsonObjectV1Request?: InvokeContractJsonObjectV1Request, options?: any): AxiosPromise<InvokeContractV1Response> {
            return localVarFp.invokeContractV1NoKeychain(invokeContractJsonObjectV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Low-level endpoint to invoke a method on deployed contract.
         * @param {InvokeRawWeb3EthContractV1Request} [invokeRawWeb3EthContractV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeRawWeb3EthContractV1(invokeRawWeb3EthContractV1Request?: InvokeRawWeb3EthContractV1Request, options?: any): AxiosPromise<InvokeRawWeb3EthContractV1Response> {
            return localVarFp.invokeRawWeb3EthContractV1(invokeRawWeb3EthContractV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Invoke any method from web3.eth (low-level)
         * @param {InvokeRawWeb3EthMethodV1Request} [invokeRawWeb3EthMethodV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeWeb3EthMethodV1(invokeRawWeb3EthMethodV1Request?: InvokeRawWeb3EthMethodV1Request, options?: any): AxiosPromise<InvokeRawWeb3EthMethodV1Response> {
            return localVarFp.invokeWeb3EthMethodV1(invokeRawWeb3EthMethodV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Executes a transaction on a quorum ledger
         * @param {RunTransactionRequest} [runTransactionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runTransactionV1(runTransactionRequest?: RunTransactionRequest, options?: any): AxiosPromise<RunTransactionResponse> {
            return localVarFp.runTransactionV1(runTransactionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Deploys the bytecode of a Solidity contract.
     * @param {DeployContractSolidityBytecodeJsonObjectV1Request} [deployContractSolidityBytecodeJsonObjectV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deployContractSolBytecodeJsonObjectV1(deployContractSolidityBytecodeJsonObjectV1Request?: DeployContractSolidityBytecodeJsonObjectV1Request, options?: any) {
        return DefaultApiFp(this.configuration).deployContractSolBytecodeJsonObjectV1(deployContractSolidityBytecodeJsonObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deploys the bytecode of a Solidity contract.
     * @param {DeployContractSolidityBytecodeV1Request} [deployContractSolidityBytecodeV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deployContractSolBytecodeV1(deployContractSolidityBytecodeV1Request?: DeployContractSolidityBytecodeV1Request, options?: any) {
        return DefaultApiFp(this.configuration).deployContractSolBytecodeV1(deployContractSolidityBytecodeV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the Prometheus Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPrometheusMetricsV1(options?: any) {
        return DefaultApiFp(this.configuration).getPrometheusMetricsV1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Invokes a contract on a besu ledger
     * @param {InvokeContractV1Request} [invokeContractV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public invokeContractV1(invokeContractV1Request?: InvokeContractV1Request, options?: any) {
        return DefaultApiFp(this.configuration).invokeContractV1(invokeContractV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Invokes a contract on a besu ledger
     * @param {InvokeContractJsonObjectV1Request} [invokeContractJsonObjectV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public invokeContractV1NoKeychain(invokeContractJsonObjectV1Request?: InvokeContractJsonObjectV1Request, options?: any) {
        return DefaultApiFp(this.configuration).invokeContractV1NoKeychain(invokeContractJsonObjectV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Low-level endpoint to invoke a method on deployed contract.
     * @param {InvokeRawWeb3EthContractV1Request} [invokeRawWeb3EthContractV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public invokeRawWeb3EthContractV1(invokeRawWeb3EthContractV1Request?: InvokeRawWeb3EthContractV1Request, options?: any) {
        return DefaultApiFp(this.configuration).invokeRawWeb3EthContractV1(invokeRawWeb3EthContractV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Invoke any method from web3.eth (low-level)
     * @param {InvokeRawWeb3EthMethodV1Request} [invokeRawWeb3EthMethodV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public invokeWeb3EthMethodV1(invokeRawWeb3EthMethodV1Request?: InvokeRawWeb3EthMethodV1Request, options?: any) {
        return DefaultApiFp(this.configuration).invokeWeb3EthMethodV1(invokeRawWeb3EthMethodV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Executes a transaction on a quorum ledger
     * @param {RunTransactionRequest} [runTransactionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public runTransactionV1(runTransactionRequest?: RunTransactionRequest, options?: any) {
        return DefaultApiFp(this.configuration).runTransactionV1(runTransactionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


