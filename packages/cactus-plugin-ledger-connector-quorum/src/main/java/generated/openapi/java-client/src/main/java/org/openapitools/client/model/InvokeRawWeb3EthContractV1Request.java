/*
 * Hyperledger Cactus Plugin - Connector Quorum
 * Can perform basic tasks on a Quorum ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.EthContractInvocationWeb3Method;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InvokeRawWeb3EthContractV1Request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InvokeRawWeb3EthContractV1Request {
  public static final String SERIALIZED_NAME_ABI = "abi";
  @SerializedName(SERIALIZED_NAME_ABI)
  private List<Object> abi = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_INVOCATION_TYPE = "invocationType";
  @SerializedName(SERIALIZED_NAME_INVOCATION_TYPE)
  private EthContractInvocationWeb3Method invocationType;

  public static final String SERIALIZED_NAME_INVOCATION_PARAMS = "invocationParams";
  @SerializedName(SERIALIZED_NAME_INVOCATION_PARAMS)
  private Object invocationParams = {};

  public static final String SERIALIZED_NAME_CONTRACT_METHOD = "contractMethod";
  @SerializedName(SERIALIZED_NAME_CONTRACT_METHOD)
  private String contractMethod;

  public static final String SERIALIZED_NAME_CONTRACT_METHOD_ARGS = "contractMethodArgs";
  @SerializedName(SERIALIZED_NAME_CONTRACT_METHOD_ARGS)
  private List<Object> contractMethodArgs = null;

  public InvokeRawWeb3EthContractV1Request() {
  }

  public InvokeRawWeb3EthContractV1Request abi(List<Object> abi) {
    
    this.abi = abi;
    return this;
  }

  public InvokeRawWeb3EthContractV1Request addAbiItem(Object abiItem) {
    if (this.abi == null) {
      this.abi = new ArrayList<>();
    }
    this.abi.add(abiItem);
    return this;
  }

   /**
   * The application binary interface of the solidity contract
   * @return abi
  **/
  @javax.annotation.Nonnull
  public List<Object> getAbi() {
    return abi;
  }


  public void setAbi(List<Object> abi) {
    this.abi = abi;
  }


  public InvokeRawWeb3EthContractV1Request address(String address) {
    
    this.address = address;
    return this;
  }

   /**
   * Deployed solidity contract address
   * @return address
  **/
  @javax.annotation.Nonnull
  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    this.address = address;
  }


  public InvokeRawWeb3EthContractV1Request invocationType(EthContractInvocationWeb3Method invocationType) {
    
    this.invocationType = invocationType;
    return this;
  }

   /**
   * Get invocationType
   * @return invocationType
  **/
  @javax.annotation.Nonnull
  public EthContractInvocationWeb3Method getInvocationType() {
    return invocationType;
  }


  public void setInvocationType(EthContractInvocationWeb3Method invocationType) {
    this.invocationType = invocationType;
  }


  public InvokeRawWeb3EthContractV1Request invocationParams(Object invocationParams) {
    
    this.invocationParams = invocationParams;
    return this;
  }

   /**
   * The list of arguments for contract invocation method (send, call, etc...)
   * @return invocationParams
  **/
  @javax.annotation.Nullable
  public Object getInvocationParams() {
    return invocationParams;
  }


  public void setInvocationParams(Object invocationParams) {
    this.invocationParams = invocationParams;
  }


  public InvokeRawWeb3EthContractV1Request contractMethod(String contractMethod) {
    
    this.contractMethod = contractMethod;
    return this;
  }

   /**
   * Method of deployed solidity contract to execute
   * @return contractMethod
  **/
  @javax.annotation.Nonnull
  public String getContractMethod() {
    return contractMethod;
  }


  public void setContractMethod(String contractMethod) {
    this.contractMethod = contractMethod;
  }


  public InvokeRawWeb3EthContractV1Request contractMethodArgs(List<Object> contractMethodArgs) {
    
    this.contractMethodArgs = contractMethodArgs;
    return this;
  }

  public InvokeRawWeb3EthContractV1Request addContractMethodArgsItem(Object contractMethodArgsItem) {
    if (this.contractMethodArgs == null) {
      this.contractMethodArgs = null;
    }
    this.contractMethodArgs.add(contractMethodArgsItem);
    return this;
  }

   /**
   * The list of arguments for deployed solidity contract method
   * @return contractMethodArgs
  **/
  @javax.annotation.Nullable
  public List<Object> getContractMethodArgs() {
    return contractMethodArgs;
  }


  public void setContractMethodArgs(List<Object> contractMethodArgs) {
    this.contractMethodArgs = contractMethodArgs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvokeRawWeb3EthContractV1Request invokeRawWeb3EthContractV1Request = (InvokeRawWeb3EthContractV1Request) o;
    return Objects.equals(this.abi, invokeRawWeb3EthContractV1Request.abi) &&
        Objects.equals(this.address, invokeRawWeb3EthContractV1Request.address) &&
        Objects.equals(this.invocationType, invokeRawWeb3EthContractV1Request.invocationType) &&
        Objects.equals(this.invocationParams, invokeRawWeb3EthContractV1Request.invocationParams) &&
        Objects.equals(this.contractMethod, invokeRawWeb3EthContractV1Request.contractMethod) &&
        Objects.equals(this.contractMethodArgs, invokeRawWeb3EthContractV1Request.contractMethodArgs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abi, address, invocationType, invocationParams, contractMethod, contractMethodArgs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvokeRawWeb3EthContractV1Request {\n");
    sb.append("    abi: ").append(toIndentedString(abi)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    invocationType: ").append(toIndentedString(invocationType)).append("\n");
    sb.append("    invocationParams: ").append(toIndentedString(invocationParams)).append("\n");
    sb.append("    contractMethod: ").append(toIndentedString(contractMethod)).append("\n");
    sb.append("    contractMethodArgs: ").append(toIndentedString(contractMethodArgs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("abi");
    openapiFields.add("address");
    openapiFields.add("invocationType");
    openapiFields.add("invocationParams");
    openapiFields.add("contractMethod");
    openapiFields.add("contractMethodArgs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("abi");
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("invocationType");
    openapiRequiredFields.add("contractMethod");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InvokeRawWeb3EthContractV1Request
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!InvokeRawWeb3EthContractV1Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvokeRawWeb3EthContractV1Request is not found in the empty JSON string", InvokeRawWeb3EthContractV1Request.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!InvokeRawWeb3EthContractV1Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvokeRawWeb3EthContractV1Request` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InvokeRawWeb3EthContractV1Request.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("abi") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("abi").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `abi` to be an array in the JSON string but got `%s`", jsonObj.get("abi").toString()));
      }
      if (!jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if (!jsonObj.get("contractMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractMethod").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("contractMethodArgs") != null && !jsonObj.get("contractMethodArgs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractMethodArgs` to be an array in the JSON string but got `%s`", jsonObj.get("contractMethodArgs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvokeRawWeb3EthContractV1Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvokeRawWeb3EthContractV1Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvokeRawWeb3EthContractV1Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvokeRawWeb3EthContractV1Request.class));

       return (TypeAdapter<T>) new TypeAdapter<InvokeRawWeb3EthContractV1Request>() {
           @Override
           public void write(JsonWriter out, InvokeRawWeb3EthContractV1Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvokeRawWeb3EthContractV1Request read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InvokeRawWeb3EthContractV1Request given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InvokeRawWeb3EthContractV1Request
  * @throws IOException if the JSON string is invalid with respect to InvokeRawWeb3EthContractV1Request
  */
  public static InvokeRawWeb3EthContractV1Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvokeRawWeb3EthContractV1Request.class);
  }

 /**
  * Convert an instance of InvokeRawWeb3EthContractV1Request to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

