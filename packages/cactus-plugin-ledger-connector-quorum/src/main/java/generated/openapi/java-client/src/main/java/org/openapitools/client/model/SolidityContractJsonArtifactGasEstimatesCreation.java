/*
 * Hyperledger Cactus Plugin - Connector Quorum
 * Can perform basic tasks on a Quorum ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SolidityContractJsonArtifactGasEstimatesCreation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SolidityContractJsonArtifactGasEstimatesCreation {
  public static final String SERIALIZED_NAME_CODE_DEPOSIT_COST = "codeDepositCost";
  @SerializedName(SERIALIZED_NAME_CODE_DEPOSIT_COST)
  private String codeDepositCost;

  public static final String SERIALIZED_NAME_EXECUTION_COST = "executionCost";
  @SerializedName(SERIALIZED_NAME_EXECUTION_COST)
  private String executionCost;

  public static final String SERIALIZED_NAME_TOTAL_COST = "totalCost";
  @SerializedName(SERIALIZED_NAME_TOTAL_COST)
  private String totalCost;

  public SolidityContractJsonArtifactGasEstimatesCreation() {
  }

  public SolidityContractJsonArtifactGasEstimatesCreation codeDepositCost(String codeDepositCost) {
    
    this.codeDepositCost = codeDepositCost;
    return this;
  }

   /**
   * Get codeDepositCost
   * @return codeDepositCost
  **/
  @javax.annotation.Nullable
  public String getCodeDepositCost() {
    return codeDepositCost;
  }


  public void setCodeDepositCost(String codeDepositCost) {
    this.codeDepositCost = codeDepositCost;
  }


  public SolidityContractJsonArtifactGasEstimatesCreation executionCost(String executionCost) {
    
    this.executionCost = executionCost;
    return this;
  }

   /**
   * Get executionCost
   * @return executionCost
  **/
  @javax.annotation.Nullable
  public String getExecutionCost() {
    return executionCost;
  }


  public void setExecutionCost(String executionCost) {
    this.executionCost = executionCost;
  }


  public SolidityContractJsonArtifactGasEstimatesCreation totalCost(String totalCost) {
    
    this.totalCost = totalCost;
    return this;
  }

   /**
   * Get totalCost
   * @return totalCost
  **/
  @javax.annotation.Nullable
  public String getTotalCost() {
    return totalCost;
  }


  public void setTotalCost(String totalCost) {
    this.totalCost = totalCost;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SolidityContractJsonArtifactGasEstimatesCreation solidityContractJsonArtifactGasEstimatesCreation = (SolidityContractJsonArtifactGasEstimatesCreation) o;
    return Objects.equals(this.codeDepositCost, solidityContractJsonArtifactGasEstimatesCreation.codeDepositCost) &&
        Objects.equals(this.executionCost, solidityContractJsonArtifactGasEstimatesCreation.executionCost) &&
        Objects.equals(this.totalCost, solidityContractJsonArtifactGasEstimatesCreation.totalCost);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codeDepositCost, executionCost, totalCost);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SolidityContractJsonArtifactGasEstimatesCreation {\n");
    sb.append("    codeDepositCost: ").append(toIndentedString(codeDepositCost)).append("\n");
    sb.append("    executionCost: ").append(toIndentedString(executionCost)).append("\n");
    sb.append("    totalCost: ").append(toIndentedString(totalCost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("codeDepositCost");
    openapiFields.add("executionCost");
    openapiFields.add("totalCost");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SolidityContractJsonArtifactGasEstimatesCreation
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SolidityContractJsonArtifactGasEstimatesCreation.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SolidityContractJsonArtifactGasEstimatesCreation is not found in the empty JSON string", SolidityContractJsonArtifactGasEstimatesCreation.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SolidityContractJsonArtifactGasEstimatesCreation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SolidityContractJsonArtifactGasEstimatesCreation` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("codeDepositCost") != null && !jsonObj.get("codeDepositCost").isJsonNull()) && !jsonObj.get("codeDepositCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codeDepositCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codeDepositCost").toString()));
      }
      if ((jsonObj.get("executionCost") != null && !jsonObj.get("executionCost").isJsonNull()) && !jsonObj.get("executionCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `executionCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("executionCost").toString()));
      }
      if ((jsonObj.get("totalCost") != null && !jsonObj.get("totalCost").isJsonNull()) && !jsonObj.get("totalCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalCost").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SolidityContractJsonArtifactGasEstimatesCreation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SolidityContractJsonArtifactGasEstimatesCreation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SolidityContractJsonArtifactGasEstimatesCreation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SolidityContractJsonArtifactGasEstimatesCreation.class));

       return (TypeAdapter<T>) new TypeAdapter<SolidityContractJsonArtifactGasEstimatesCreation>() {
           @Override
           public void write(JsonWriter out, SolidityContractJsonArtifactGasEstimatesCreation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SolidityContractJsonArtifactGasEstimatesCreation read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SolidityContractJsonArtifactGasEstimatesCreation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SolidityContractJsonArtifactGasEstimatesCreation
  * @throws IOException if the JSON string is invalid with respect to SolidityContractJsonArtifactGasEstimatesCreation
  */
  public static SolidityContractJsonArtifactGasEstimatesCreation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SolidityContractJsonArtifactGasEstimatesCreation.class);
  }

 /**
  * Convert an instance of SolidityContractJsonArtifactGasEstimatesCreation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

