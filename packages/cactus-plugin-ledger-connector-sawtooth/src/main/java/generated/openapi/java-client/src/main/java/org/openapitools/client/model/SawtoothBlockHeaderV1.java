/*
 * Hyperledger Cacti Plugin - Connector Sawtooth
 * Can perform basic tasks on a Sawtooth ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SawtoothBlockHeaderV1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SawtoothBlockHeaderV1 {
  public static final String SERIALIZED_NAME_BLOCK_NUM = "block_num";
  @SerializedName(SERIALIZED_NAME_BLOCK_NUM)
  private Integer blockNum;

  public static final String SERIALIZED_NAME_PREVIOUS_BLOCK_ID = "previous_block_id";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_BLOCK_ID)
  private String previousBlockId;

  public static final String SERIALIZED_NAME_SIGNER_PUBLIC_KEY = "signer_public_key";
  @SerializedName(SERIALIZED_NAME_SIGNER_PUBLIC_KEY)
  private String signerPublicKey;

  public static final String SERIALIZED_NAME_BATCH_IDS = "batch_ids";
  @SerializedName(SERIALIZED_NAME_BATCH_IDS)
  private List<String> batchIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONSENSUS = "consensus";
  @SerializedName(SERIALIZED_NAME_CONSENSUS)
  private String consensus;

  public static final String SERIALIZED_NAME_STATE_ROOT_HASH = "state_root_hash";
  @SerializedName(SERIALIZED_NAME_STATE_ROOT_HASH)
  private String stateRootHash;

  public SawtoothBlockHeaderV1() {
  }

  public SawtoothBlockHeaderV1 blockNum(Integer blockNum) {
    
    this.blockNum = blockNum;
    return this;
  }

   /**
   * Get blockNum
   * @return blockNum
  **/
  @javax.annotation.Nonnull

  public Integer getBlockNum() {
    return blockNum;
  }


  public void setBlockNum(Integer blockNum) {
    this.blockNum = blockNum;
  }


  public SawtoothBlockHeaderV1 previousBlockId(String previousBlockId) {
    
    this.previousBlockId = previousBlockId;
    return this;
  }

   /**
   * Get previousBlockId
   * @return previousBlockId
  **/
  @javax.annotation.Nonnull

  public String getPreviousBlockId() {
    return previousBlockId;
  }


  public void setPreviousBlockId(String previousBlockId) {
    this.previousBlockId = previousBlockId;
  }


  public SawtoothBlockHeaderV1 signerPublicKey(String signerPublicKey) {
    
    this.signerPublicKey = signerPublicKey;
    return this;
  }

   /**
   * Get signerPublicKey
   * @return signerPublicKey
  **/
  @javax.annotation.Nonnull

  public String getSignerPublicKey() {
    return signerPublicKey;
  }


  public void setSignerPublicKey(String signerPublicKey) {
    this.signerPublicKey = signerPublicKey;
  }


  public SawtoothBlockHeaderV1 batchIds(List<String> batchIds) {
    
    this.batchIds = batchIds;
    return this;
  }

  public SawtoothBlockHeaderV1 addBatchIdsItem(String batchIdsItem) {
    this.batchIds.add(batchIdsItem);
    return this;
  }

   /**
   * Get batchIds
   * @return batchIds
  **/
  @javax.annotation.Nonnull

  public List<String> getBatchIds() {
    return batchIds;
  }


  public void setBatchIds(List<String> batchIds) {
    this.batchIds = batchIds;
  }


  public SawtoothBlockHeaderV1 consensus(String consensus) {
    
    this.consensus = consensus;
    return this;
  }

   /**
   * Get consensus
   * @return consensus
  **/
  @javax.annotation.Nonnull

  public String getConsensus() {
    return consensus;
  }


  public void setConsensus(String consensus) {
    this.consensus = consensus;
  }


  public SawtoothBlockHeaderV1 stateRootHash(String stateRootHash) {
    
    this.stateRootHash = stateRootHash;
    return this;
  }

   /**
   * Get stateRootHash
   * @return stateRootHash
  **/
  @javax.annotation.Nonnull

  public String getStateRootHash() {
    return stateRootHash;
  }


  public void setStateRootHash(String stateRootHash) {
    this.stateRootHash = stateRootHash;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SawtoothBlockHeaderV1 sawtoothBlockHeaderV1 = (SawtoothBlockHeaderV1) o;
    return Objects.equals(this.blockNum, sawtoothBlockHeaderV1.blockNum) &&
        Objects.equals(this.previousBlockId, sawtoothBlockHeaderV1.previousBlockId) &&
        Objects.equals(this.signerPublicKey, sawtoothBlockHeaderV1.signerPublicKey) &&
        Objects.equals(this.batchIds, sawtoothBlockHeaderV1.batchIds) &&
        Objects.equals(this.consensus, sawtoothBlockHeaderV1.consensus) &&
        Objects.equals(this.stateRootHash, sawtoothBlockHeaderV1.stateRootHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockNum, previousBlockId, signerPublicKey, batchIds, consensus, stateRootHash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SawtoothBlockHeaderV1 {\n");
    sb.append("    blockNum: ").append(toIndentedString(blockNum)).append("\n");
    sb.append("    previousBlockId: ").append(toIndentedString(previousBlockId)).append("\n");
    sb.append("    signerPublicKey: ").append(toIndentedString(signerPublicKey)).append("\n");
    sb.append("    batchIds: ").append(toIndentedString(batchIds)).append("\n");
    sb.append("    consensus: ").append(toIndentedString(consensus)).append("\n");
    sb.append("    stateRootHash: ").append(toIndentedString(stateRootHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("block_num");
    openapiFields.add("previous_block_id");
    openapiFields.add("signer_public_key");
    openapiFields.add("batch_ids");
    openapiFields.add("consensus");
    openapiFields.add("state_root_hash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("block_num");
    openapiRequiredFields.add("previous_block_id");
    openapiRequiredFields.add("signer_public_key");
    openapiRequiredFields.add("batch_ids");
    openapiRequiredFields.add("consensus");
    openapiRequiredFields.add("state_root_hash");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SawtoothBlockHeaderV1
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SawtoothBlockHeaderV1.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SawtoothBlockHeaderV1 is not found in the empty JSON string", SawtoothBlockHeaderV1.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SawtoothBlockHeaderV1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SawtoothBlockHeaderV1` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SawtoothBlockHeaderV1.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("previous_block_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previous_block_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previous_block_id").toString()));
      }
      if (!jsonObj.get("signer_public_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signer_public_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signer_public_key").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("batch_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("batch_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `batch_ids` to be an array in the JSON string but got `%s`", jsonObj.get("batch_ids").toString()));
      }
      if (!jsonObj.get("consensus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consensus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consensus").toString()));
      }
      if (!jsonObj.get("state_root_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_root_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_root_hash").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SawtoothBlockHeaderV1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SawtoothBlockHeaderV1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SawtoothBlockHeaderV1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SawtoothBlockHeaderV1.class));

       return (TypeAdapter<T>) new TypeAdapter<SawtoothBlockHeaderV1>() {
           @Override
           public void write(JsonWriter out, SawtoothBlockHeaderV1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SawtoothBlockHeaderV1 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SawtoothBlockHeaderV1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SawtoothBlockHeaderV1
  * @throws IOException if the JSON string is invalid with respect to SawtoothBlockHeaderV1
  */
  public static SawtoothBlockHeaderV1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SawtoothBlockHeaderV1.class);
  }

 /**
  * Convert an instance of SawtoothBlockHeaderV1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

