/*
 * Hyperledger Cacti Plugin - Connector Sawtooth
 * Can perform basic tasks on a Sawtooth ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SawtoothTransactionHeaderV1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SawtoothTransactionHeaderV1 {
  public static final String SERIALIZED_NAME_BATCHER_PUBLIC_KEY = "batcher_public_key";
  @SerializedName(SERIALIZED_NAME_BATCHER_PUBLIC_KEY)
  private String batcherPublicKey;

  public static final String SERIALIZED_NAME_DEPENDENCIES = "dependencies";
  @SerializedName(SERIALIZED_NAME_DEPENDENCIES)
  private List<String> dependencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_FAMILY_NAME = "family_name";
  @SerializedName(SERIALIZED_NAME_FAMILY_NAME)
  private String familyName;

  public static final String SERIALIZED_NAME_FAMILY_VERSION = "family_version";
  @SerializedName(SERIALIZED_NAME_FAMILY_VERSION)
  private String familyVersion;

  public static final String SERIALIZED_NAME_INPUTS = "inputs";
  @SerializedName(SERIALIZED_NAME_INPUTS)
  private List<String> inputs = new ArrayList<>();

  public static final String SERIALIZED_NAME_NONCE = "nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private String nonce;

  public static final String SERIALIZED_NAME_OUTPUTS = "outputs";
  @SerializedName(SERIALIZED_NAME_OUTPUTS)
  private List<String> outputs = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYLOAD_SHA512 = "payload_sha512";
  @SerializedName(SERIALIZED_NAME_PAYLOAD_SHA512)
  private String payloadSha512;

  public static final String SERIALIZED_NAME_SIGNER_PUBLIC_KEY = "signer_public_key";
  @SerializedName(SERIALIZED_NAME_SIGNER_PUBLIC_KEY)
  private String signerPublicKey;

  public SawtoothTransactionHeaderV1() {
  }

  public SawtoothTransactionHeaderV1 batcherPublicKey(String batcherPublicKey) {
    
    this.batcherPublicKey = batcherPublicKey;
    return this;
  }

   /**
   * Get batcherPublicKey
   * @return batcherPublicKey
  **/
  @javax.annotation.Nonnull

  public String getBatcherPublicKey() {
    return batcherPublicKey;
  }


  public void setBatcherPublicKey(String batcherPublicKey) {
    this.batcherPublicKey = batcherPublicKey;
  }


  public SawtoothTransactionHeaderV1 dependencies(List<String> dependencies) {
    
    this.dependencies = dependencies;
    return this;
  }

  public SawtoothTransactionHeaderV1 addDependenciesItem(String dependenciesItem) {
    this.dependencies.add(dependenciesItem);
    return this;
  }

   /**
   * Get dependencies
   * @return dependencies
  **/
  @javax.annotation.Nonnull

  public List<String> getDependencies() {
    return dependencies;
  }


  public void setDependencies(List<String> dependencies) {
    this.dependencies = dependencies;
  }


  public SawtoothTransactionHeaderV1 familyName(String familyName) {
    
    this.familyName = familyName;
    return this;
  }

   /**
   * Get familyName
   * @return familyName
  **/
  @javax.annotation.Nonnull

  public String getFamilyName() {
    return familyName;
  }


  public void setFamilyName(String familyName) {
    this.familyName = familyName;
  }


  public SawtoothTransactionHeaderV1 familyVersion(String familyVersion) {
    
    this.familyVersion = familyVersion;
    return this;
  }

   /**
   * Get familyVersion
   * @return familyVersion
  **/
  @javax.annotation.Nonnull

  public String getFamilyVersion() {
    return familyVersion;
  }


  public void setFamilyVersion(String familyVersion) {
    this.familyVersion = familyVersion;
  }


  public SawtoothTransactionHeaderV1 inputs(List<String> inputs) {
    
    this.inputs = inputs;
    return this;
  }

  public SawtoothTransactionHeaderV1 addInputsItem(String inputsItem) {
    this.inputs.add(inputsItem);
    return this;
  }

   /**
   * Get inputs
   * @return inputs
  **/
  @javax.annotation.Nonnull

  public List<String> getInputs() {
    return inputs;
  }


  public void setInputs(List<String> inputs) {
    this.inputs = inputs;
  }


  public SawtoothTransactionHeaderV1 nonce(String nonce) {
    
    this.nonce = nonce;
    return this;
  }

   /**
   * Get nonce
   * @return nonce
  **/
  @javax.annotation.Nonnull

  public String getNonce() {
    return nonce;
  }


  public void setNonce(String nonce) {
    this.nonce = nonce;
  }


  public SawtoothTransactionHeaderV1 outputs(List<String> outputs) {
    
    this.outputs = outputs;
    return this;
  }

  public SawtoothTransactionHeaderV1 addOutputsItem(String outputsItem) {
    this.outputs.add(outputsItem);
    return this;
  }

   /**
   * Get outputs
   * @return outputs
  **/
  @javax.annotation.Nonnull

  public List<String> getOutputs() {
    return outputs;
  }


  public void setOutputs(List<String> outputs) {
    this.outputs = outputs;
  }


  public SawtoothTransactionHeaderV1 payloadSha512(String payloadSha512) {
    
    this.payloadSha512 = payloadSha512;
    return this;
  }

   /**
   * Get payloadSha512
   * @return payloadSha512
  **/
  @javax.annotation.Nonnull

  public String getPayloadSha512() {
    return payloadSha512;
  }


  public void setPayloadSha512(String payloadSha512) {
    this.payloadSha512 = payloadSha512;
  }


  public SawtoothTransactionHeaderV1 signerPublicKey(String signerPublicKey) {
    
    this.signerPublicKey = signerPublicKey;
    return this;
  }

   /**
   * Get signerPublicKey
   * @return signerPublicKey
  **/
  @javax.annotation.Nonnull

  public String getSignerPublicKey() {
    return signerPublicKey;
  }


  public void setSignerPublicKey(String signerPublicKey) {
    this.signerPublicKey = signerPublicKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SawtoothTransactionHeaderV1 sawtoothTransactionHeaderV1 = (SawtoothTransactionHeaderV1) o;
    return Objects.equals(this.batcherPublicKey, sawtoothTransactionHeaderV1.batcherPublicKey) &&
        Objects.equals(this.dependencies, sawtoothTransactionHeaderV1.dependencies) &&
        Objects.equals(this.familyName, sawtoothTransactionHeaderV1.familyName) &&
        Objects.equals(this.familyVersion, sawtoothTransactionHeaderV1.familyVersion) &&
        Objects.equals(this.inputs, sawtoothTransactionHeaderV1.inputs) &&
        Objects.equals(this.nonce, sawtoothTransactionHeaderV1.nonce) &&
        Objects.equals(this.outputs, sawtoothTransactionHeaderV1.outputs) &&
        Objects.equals(this.payloadSha512, sawtoothTransactionHeaderV1.payloadSha512) &&
        Objects.equals(this.signerPublicKey, sawtoothTransactionHeaderV1.signerPublicKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batcherPublicKey, dependencies, familyName, familyVersion, inputs, nonce, outputs, payloadSha512, signerPublicKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SawtoothTransactionHeaderV1 {\n");
    sb.append("    batcherPublicKey: ").append(toIndentedString(batcherPublicKey)).append("\n");
    sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
    sb.append("    familyName: ").append(toIndentedString(familyName)).append("\n");
    sb.append("    familyVersion: ").append(toIndentedString(familyVersion)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    payloadSha512: ").append(toIndentedString(payloadSha512)).append("\n");
    sb.append("    signerPublicKey: ").append(toIndentedString(signerPublicKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("batcher_public_key");
    openapiFields.add("dependencies");
    openapiFields.add("family_name");
    openapiFields.add("family_version");
    openapiFields.add("inputs");
    openapiFields.add("nonce");
    openapiFields.add("outputs");
    openapiFields.add("payload_sha512");
    openapiFields.add("signer_public_key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("batcher_public_key");
    openapiRequiredFields.add("dependencies");
    openapiRequiredFields.add("family_name");
    openapiRequiredFields.add("family_version");
    openapiRequiredFields.add("inputs");
    openapiRequiredFields.add("nonce");
    openapiRequiredFields.add("outputs");
    openapiRequiredFields.add("payload_sha512");
    openapiRequiredFields.add("signer_public_key");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SawtoothTransactionHeaderV1
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SawtoothTransactionHeaderV1.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SawtoothTransactionHeaderV1 is not found in the empty JSON string", SawtoothTransactionHeaderV1.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SawtoothTransactionHeaderV1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SawtoothTransactionHeaderV1` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SawtoothTransactionHeaderV1.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("batcher_public_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batcher_public_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batcher_public_key").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("dependencies") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("dependencies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dependencies` to be an array in the JSON string but got `%s`", jsonObj.get("dependencies").toString()));
      }
      if (!jsonObj.get("family_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `family_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("family_name").toString()));
      }
      if (!jsonObj.get("family_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `family_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("family_version").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("inputs") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("inputs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputs` to be an array in the JSON string but got `%s`", jsonObj.get("inputs").toString()));
      }
      if (!jsonObj.get("nonce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nonce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nonce").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("outputs") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("outputs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputs` to be an array in the JSON string but got `%s`", jsonObj.get("outputs").toString()));
      }
      if (!jsonObj.get("payload_sha512").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payload_sha512` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payload_sha512").toString()));
      }
      if (!jsonObj.get("signer_public_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signer_public_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signer_public_key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SawtoothTransactionHeaderV1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SawtoothTransactionHeaderV1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SawtoothTransactionHeaderV1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SawtoothTransactionHeaderV1.class));

       return (TypeAdapter<T>) new TypeAdapter<SawtoothTransactionHeaderV1>() {
           @Override
           public void write(JsonWriter out, SawtoothTransactionHeaderV1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SawtoothTransactionHeaderV1 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SawtoothTransactionHeaderV1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SawtoothTransactionHeaderV1
  * @throws IOException if the JSON string is invalid with respect to SawtoothTransactionHeaderV1
  */
  public static SawtoothTransactionHeaderV1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SawtoothTransactionHeaderV1.class);
  }

 /**
  * Convert an instance of SawtoothTransactionHeaderV1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

