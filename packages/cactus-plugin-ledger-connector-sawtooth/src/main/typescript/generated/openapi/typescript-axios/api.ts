/* tslint:disable */
/* eslint-disable */
/**
 * Hyperledger Cacti Plugin - Connector Sawtooth
 * Can perform basic tasks on a Sawtooth ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * Sawtooth transaction with additional fields filled by Cacti connector.
 * @export
 * @interface CactiTransactionV1
 */
export interface CactiTransactionV1 {
    /**
     * 
     * @type {SawtoothTransactionHeaderV1}
     * @memberof CactiTransactionV1
     */
    'header': SawtoothTransactionHeaderV1;
    /**
     * 
     * @type {string}
     * @memberof CactiTransactionV1
     */
    'header_signature': string;
    /**
     * 
     * @type {string}
     * @memberof CactiTransactionV1
     */
    'payload': string;
    /**
     * Decoded payload of sawtooth transaction.
     * @type {any}
     * @memberof CactiTransactionV1
     */
    'payload_decoded': any;
}
/**
 * 
 * @export
 * @interface CactiTransactionV1AllOf
 */
export interface CactiTransactionV1AllOf {
    /**
     * Decoded payload of sawtooth transaction.
     * @type {any}
     * @memberof CactiTransactionV1AllOf
     */
    'payload_decoded': any;
}
/**
 * 
 * @export
 * @interface ErrorExceptionResponseV1
 */
export interface ErrorExceptionResponseV1 {
    /**
     * 
     * @type {string}
     * @memberof ErrorExceptionResponseV1
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof ErrorExceptionResponseV1
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface SawtoothBatchHeaderV1
 */
export interface SawtoothBatchHeaderV1 {
    /**
     * 
     * @type {string}
     * @memberof SawtoothBatchHeaderV1
     */
    'signer_public_key': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SawtoothBatchHeaderV1
     */
    'transaction_ids': Array<string>;
}
/**
 * 
 * @export
 * @interface SawtoothBatchV1
 */
export interface SawtoothBatchV1 {
    /**
     * 
     * @type {SawtoothBatchHeaderV1}
     * @memberof SawtoothBatchV1
     */
    'header': SawtoothBatchHeaderV1;
    /**
     * 
     * @type {string}
     * @memberof SawtoothBatchV1
     */
    'header_signature': string;
    /**
     * 
     * @type {Array<SawtoothTransactionV1>}
     * @memberof SawtoothBatchV1
     */
    'transactions': Array<SawtoothTransactionV1>;
}
/**
 * 
 * @export
 * @interface SawtoothBlockHeaderV1
 */
export interface SawtoothBlockHeaderV1 {
    /**
     * 
     * @type {number}
     * @memberof SawtoothBlockHeaderV1
     */
    'block_num': number;
    /**
     * 
     * @type {string}
     * @memberof SawtoothBlockHeaderV1
     */
    'previous_block_id': string;
    /**
     * 
     * @type {string}
     * @memberof SawtoothBlockHeaderV1
     */
    'signer_public_key': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SawtoothBlockHeaderV1
     */
    'batch_ids': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SawtoothBlockHeaderV1
     */
    'consensus': string;
    /**
     * 
     * @type {string}
     * @memberof SawtoothBlockHeaderV1
     */
    'state_root_hash': string;
}
/**
 * 
 * @export
 * @interface SawtoothBlockV1
 */
export interface SawtoothBlockV1 {
    /**
     * 
     * @type {SawtoothBlockHeaderV1}
     * @memberof SawtoothBlockV1
     */
    'header': SawtoothBlockHeaderV1;
    /**
     * 
     * @type {string}
     * @memberof SawtoothBlockV1
     */
    'header_signature': string;
    /**
     * 
     * @type {Array<SawtoothBatchV1>}
     * @memberof SawtoothBlockV1
     */
    'batches': Array<SawtoothBatchV1>;
}
/**
 * 
 * @export
 * @interface SawtoothTransactionHeaderV1
 */
export interface SawtoothTransactionHeaderV1 {
    /**
     * 
     * @type {string}
     * @memberof SawtoothTransactionHeaderV1
     */
    'batcher_public_key': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SawtoothTransactionHeaderV1
     */
    'dependencies': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SawtoothTransactionHeaderV1
     */
    'family_name': string;
    /**
     * 
     * @type {string}
     * @memberof SawtoothTransactionHeaderV1
     */
    'family_version': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SawtoothTransactionHeaderV1
     */
    'inputs': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SawtoothTransactionHeaderV1
     */
    'nonce': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SawtoothTransactionHeaderV1
     */
    'outputs': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SawtoothTransactionHeaderV1
     */
    'payload_sha512': string;
    /**
     * 
     * @type {string}
     * @memberof SawtoothTransactionHeaderV1
     */
    'signer_public_key': string;
}
/**
 * 
 * @export
 * @interface SawtoothTransactionV1
 */
export interface SawtoothTransactionV1 {
    /**
     * 
     * @type {SawtoothTransactionHeaderV1}
     * @memberof SawtoothTransactionV1
     */
    'header': SawtoothTransactionHeaderV1;
    /**
     * 
     * @type {string}
     * @memberof SawtoothTransactionV1
     */
    'header_signature': string;
    /**
     * 
     * @type {string}
     * @memberof SawtoothTransactionV1
     */
    'payload': string;
}
/**
 * Response with plugin and validator status report.
 * @export
 * @interface StatusResponseV1
 */
export interface StatusResponseV1 {
    /**
     * Plugin instance id.
     * @type {string}
     * @memberof StatusResponseV1
     */
    'instanceId': string;
    /**
     * Version of connectors Open API Spec.
     * @type {string}
     * @memberof StatusResponseV1
     */
    'openApiSpecVersion'?: string;
    /**
     * True if endpoints were created, false otherwise
     * @type {boolean}
     * @memberof StatusResponseV1
     */
    'initialized'?: boolean;
    /**
     * Response from sawtooth Rest API status endpoint
     * @type {any}
     * @memberof StatusResponseV1
     */
    'sawtoothStatus'?: any;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const WatchBlocksV1 = {
    Subscribe: 'org.hyperledger.cacti.api.async.sawtooth.WatchBlocksV1.Subscribe',
    Next: 'org.hyperledger.cacti.api.async.sawtooth.WatchBlocksV1.Next',
    Unsubscribe: 'org.hyperledger.cacti.api.async.sawtooth.WatchBlocksV1.Unsubscribe',
    Error: 'org.hyperledger.cacti.api.async.sawtooth.WatchBlocksV1.Error',
    Complete: 'org.hyperledger.cacti.api.async.sawtooth.WatchBlocksV1.Complete'
} as const;

export type WatchBlocksV1 = typeof WatchBlocksV1[keyof typeof WatchBlocksV1];


/**
 * Custom response containing block transactions summary.
 * @export
 * @interface WatchBlocksV1CactiTransactionsResponse
 */
export interface WatchBlocksV1CactiTransactionsResponse {
    /**
     * List of sawtooth transactions matching specifid (optional) filter
     * @type {Array<CactiTransactionV1>}
     * @memberof WatchBlocksV1CactiTransactionsResponse
     */
    'cactiTransactionsEvents': Array<CactiTransactionV1>;
}
/**
 * Response that returns entire sawtooth block.
 * @export
 * @interface WatchBlocksV1FullResponse
 */
export interface WatchBlocksV1FullResponse {
    /**
     * 
     * @type {SawtoothBlockV1}
     * @memberof WatchBlocksV1FullResponse
     */
    'fullBlock': SawtoothBlockV1;
}
/**
 * Response type from WatchBlocks. \'Cacti*\' are custom views, others correspond to plain sawtooth data.
 * @export
 * @enum {string}
 */

export const WatchBlocksV1ListenerType = {
    Full: 'full',
    CactiTransactions: 'cacti:transactions'
} as const;

export type WatchBlocksV1ListenerType = typeof WatchBlocksV1ListenerType[keyof typeof WatchBlocksV1ListenerType];


/**
 * 
 * @export
 * @interface WatchBlocksV1Options
 */
export interface WatchBlocksV1Options {
    /**
     * 
     * @type {WatchBlocksV1ListenerType}
     * @memberof WatchBlocksV1Options
     */
    'type'?: WatchBlocksV1ListenerType;
    /**
     * 
     * @type {WatchBlocksV1TransactionFilter}
     * @memberof WatchBlocksV1Options
     */
    'txFilterBy'?: WatchBlocksV1TransactionFilter;
}


/**
 * @type WatchBlocksV1Progress
 * Response block from WatchBlocks endpoint. Depends on \'type\' passed in subscription options.
 * @export
 */
export type WatchBlocksV1Progress = WatchBlocksV1CactiTransactionsResponse | WatchBlocksV1FullResponse;

/**
 * 
 * @export
 * @interface WatchBlocksV1TransactionFilter
 */
export interface WatchBlocksV1TransactionFilter {
    /**
     * 
     * @type {string}
     * @memberof WatchBlocksV1TransactionFilter
     */
    'family_name'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the status of the connector and the sawtooth validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatusV1: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-sawtooth/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the status of the connector and the sawtooth validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatusV1(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusResponseV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatusV1(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the status of the connector and the sawtooth validator
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatusV1(options?: any): AxiosPromise<StatusResponseV1> {
            return localVarFp.getStatusV1(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get the status of the connector and the sawtooth validator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStatusV1(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getStatusV1(options).then((request) => request(this.axios, this.basePath));
    }
}


