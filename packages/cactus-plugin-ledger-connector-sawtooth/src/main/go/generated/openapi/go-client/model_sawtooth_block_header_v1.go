/*
Hyperledger Cacti Plugin - Connector Sawtooth

Can perform basic tasks on a Sawtooth ledger

API version: 2.0.0-rc.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-sawtooth

import (
	"encoding/json"
)

// checks if the SawtoothBlockHeaderV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SawtoothBlockHeaderV1{}

// SawtoothBlockHeaderV1 struct for SawtoothBlockHeaderV1
type SawtoothBlockHeaderV1 struct {
	BlockNum int32 `json:"block_num"`
	PreviousBlockId string `json:"previous_block_id"`
	SignerPublicKey string `json:"signer_public_key"`
	BatchIds []string `json:"batch_ids"`
	Consensus string `json:"consensus"`
	StateRootHash string `json:"state_root_hash"`
}

// NewSawtoothBlockHeaderV1 instantiates a new SawtoothBlockHeaderV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSawtoothBlockHeaderV1(blockNum int32, previousBlockId string, signerPublicKey string, batchIds []string, consensus string, stateRootHash string) *SawtoothBlockHeaderV1 {
	this := SawtoothBlockHeaderV1{}
	this.BlockNum = blockNum
	this.PreviousBlockId = previousBlockId
	this.SignerPublicKey = signerPublicKey
	this.BatchIds = batchIds
	this.Consensus = consensus
	this.StateRootHash = stateRootHash
	return &this
}

// NewSawtoothBlockHeaderV1WithDefaults instantiates a new SawtoothBlockHeaderV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSawtoothBlockHeaderV1WithDefaults() *SawtoothBlockHeaderV1 {
	this := SawtoothBlockHeaderV1{}
	return &this
}

// GetBlockNum returns the BlockNum field value
func (o *SawtoothBlockHeaderV1) GetBlockNum() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BlockNum
}

// GetBlockNumOk returns a tuple with the BlockNum field value
// and a boolean to check if the value has been set.
func (o *SawtoothBlockHeaderV1) GetBlockNumOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlockNum, true
}

// SetBlockNum sets field value
func (o *SawtoothBlockHeaderV1) SetBlockNum(v int32) {
	o.BlockNum = v
}

// GetPreviousBlockId returns the PreviousBlockId field value
func (o *SawtoothBlockHeaderV1) GetPreviousBlockId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PreviousBlockId
}

// GetPreviousBlockIdOk returns a tuple with the PreviousBlockId field value
// and a boolean to check if the value has been set.
func (o *SawtoothBlockHeaderV1) GetPreviousBlockIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PreviousBlockId, true
}

// SetPreviousBlockId sets field value
func (o *SawtoothBlockHeaderV1) SetPreviousBlockId(v string) {
	o.PreviousBlockId = v
}

// GetSignerPublicKey returns the SignerPublicKey field value
func (o *SawtoothBlockHeaderV1) GetSignerPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignerPublicKey
}

// GetSignerPublicKeyOk returns a tuple with the SignerPublicKey field value
// and a boolean to check if the value has been set.
func (o *SawtoothBlockHeaderV1) GetSignerPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignerPublicKey, true
}

// SetSignerPublicKey sets field value
func (o *SawtoothBlockHeaderV1) SetSignerPublicKey(v string) {
	o.SignerPublicKey = v
}

// GetBatchIds returns the BatchIds field value
func (o *SawtoothBlockHeaderV1) GetBatchIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.BatchIds
}

// GetBatchIdsOk returns a tuple with the BatchIds field value
// and a boolean to check if the value has been set.
func (o *SawtoothBlockHeaderV1) GetBatchIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BatchIds, true
}

// SetBatchIds sets field value
func (o *SawtoothBlockHeaderV1) SetBatchIds(v []string) {
	o.BatchIds = v
}

// GetConsensus returns the Consensus field value
func (o *SawtoothBlockHeaderV1) GetConsensus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Consensus
}

// GetConsensusOk returns a tuple with the Consensus field value
// and a boolean to check if the value has been set.
func (o *SawtoothBlockHeaderV1) GetConsensusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Consensus, true
}

// SetConsensus sets field value
func (o *SawtoothBlockHeaderV1) SetConsensus(v string) {
	o.Consensus = v
}

// GetStateRootHash returns the StateRootHash field value
func (o *SawtoothBlockHeaderV1) GetStateRootHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StateRootHash
}

// GetStateRootHashOk returns a tuple with the StateRootHash field value
// and a boolean to check if the value has been set.
func (o *SawtoothBlockHeaderV1) GetStateRootHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StateRootHash, true
}

// SetStateRootHash sets field value
func (o *SawtoothBlockHeaderV1) SetStateRootHash(v string) {
	o.StateRootHash = v
}

func (o SawtoothBlockHeaderV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SawtoothBlockHeaderV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["block_num"] = o.BlockNum
	toSerialize["previous_block_id"] = o.PreviousBlockId
	toSerialize["signer_public_key"] = o.SignerPublicKey
	toSerialize["batch_ids"] = o.BatchIds
	toSerialize["consensus"] = o.Consensus
	toSerialize["state_root_hash"] = o.StateRootHash
	return toSerialize, nil
}

type NullableSawtoothBlockHeaderV1 struct {
	value *SawtoothBlockHeaderV1
	isSet bool
}

func (v NullableSawtoothBlockHeaderV1) Get() *SawtoothBlockHeaderV1 {
	return v.value
}

func (v *NullableSawtoothBlockHeaderV1) Set(val *SawtoothBlockHeaderV1) {
	v.value = val
	v.isSet = true
}

func (v NullableSawtoothBlockHeaderV1) IsSet() bool {
	return v.isSet
}

func (v *NullableSawtoothBlockHeaderV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSawtoothBlockHeaderV1(val *SawtoothBlockHeaderV1) *NullableSawtoothBlockHeaderV1 {
	return &NullableSawtoothBlockHeaderV1{value: val, isSet: true}
}

func (v NullableSawtoothBlockHeaderV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSawtoothBlockHeaderV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


