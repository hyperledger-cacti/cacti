/*
Hyperledger Cacti Plugin - Connector Sawtooth

Can perform basic tasks on a Sawtooth ledger

API version: 2.0.0-rc.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-sawtooth

import (
	"encoding/json"
)

// checks if the SawtoothTransactionV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SawtoothTransactionV1{}

// SawtoothTransactionV1 struct for SawtoothTransactionV1
type SawtoothTransactionV1 struct {
	Header SawtoothTransactionHeaderV1 `json:"header"`
	HeaderSignature string `json:"header_signature"`
	Payload string `json:"payload"`
}

// NewSawtoothTransactionV1 instantiates a new SawtoothTransactionV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSawtoothTransactionV1(header SawtoothTransactionHeaderV1, headerSignature string, payload string) *SawtoothTransactionV1 {
	this := SawtoothTransactionV1{}
	this.Header = header
	this.HeaderSignature = headerSignature
	this.Payload = payload
	return &this
}

// NewSawtoothTransactionV1WithDefaults instantiates a new SawtoothTransactionV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSawtoothTransactionV1WithDefaults() *SawtoothTransactionV1 {
	this := SawtoothTransactionV1{}
	return &this
}

// GetHeader returns the Header field value
func (o *SawtoothTransactionV1) GetHeader() SawtoothTransactionHeaderV1 {
	if o == nil {
		var ret SawtoothTransactionHeaderV1
		return ret
	}

	return o.Header
}

// GetHeaderOk returns a tuple with the Header field value
// and a boolean to check if the value has been set.
func (o *SawtoothTransactionV1) GetHeaderOk() (*SawtoothTransactionHeaderV1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Header, true
}

// SetHeader sets field value
func (o *SawtoothTransactionV1) SetHeader(v SawtoothTransactionHeaderV1) {
	o.Header = v
}

// GetHeaderSignature returns the HeaderSignature field value
func (o *SawtoothTransactionV1) GetHeaderSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HeaderSignature
}

// GetHeaderSignatureOk returns a tuple with the HeaderSignature field value
// and a boolean to check if the value has been set.
func (o *SawtoothTransactionV1) GetHeaderSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HeaderSignature, true
}

// SetHeaderSignature sets field value
func (o *SawtoothTransactionV1) SetHeaderSignature(v string) {
	o.HeaderSignature = v
}

// GetPayload returns the Payload field value
func (o *SawtoothTransactionV1) GetPayload() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value
// and a boolean to check if the value has been set.
func (o *SawtoothTransactionV1) GetPayloadOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Payload, true
}

// SetPayload sets field value
func (o *SawtoothTransactionV1) SetPayload(v string) {
	o.Payload = v
}

func (o SawtoothTransactionV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SawtoothTransactionV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["header"] = o.Header
	toSerialize["header_signature"] = o.HeaderSignature
	toSerialize["payload"] = o.Payload
	return toSerialize, nil
}

type NullableSawtoothTransactionV1 struct {
	value *SawtoothTransactionV1
	isSet bool
}

func (v NullableSawtoothTransactionV1) Get() *SawtoothTransactionV1 {
	return v.value
}

func (v *NullableSawtoothTransactionV1) Set(val *SawtoothTransactionV1) {
	v.value = val
	v.isSet = true
}

func (v NullableSawtoothTransactionV1) IsSet() bool {
	return v.isSet
}

func (v *NullableSawtoothTransactionV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSawtoothTransactionV1(val *SawtoothTransactionV1) *NullableSawtoothTransactionV1 {
	return &NullableSawtoothTransactionV1{value: val, isSet: true}
}

func (v NullableSawtoothTransactionV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSawtoothTransactionV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


