/*
Hyperledger Cacti Plugin - Connector Sawtooth

Can perform basic tasks on a Sawtooth ledger

API version: 2.0.0-rc.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-sawtooth

import (
	"encoding/json"
	"fmt"
)

// WatchBlocksV1Progress - Response block from WatchBlocks endpoint. Depends on 'type' passed in subscription options.
type WatchBlocksV1Progress struct {
	WatchBlocksV1CactiTransactionsResponse *WatchBlocksV1CactiTransactionsResponse
	WatchBlocksV1FullResponse *WatchBlocksV1FullResponse
}

// WatchBlocksV1CactiTransactionsResponseAsWatchBlocksV1Progress is a convenience function that returns WatchBlocksV1CactiTransactionsResponse wrapped in WatchBlocksV1Progress
func WatchBlocksV1CactiTransactionsResponseAsWatchBlocksV1Progress(v *WatchBlocksV1CactiTransactionsResponse) WatchBlocksV1Progress {
	return WatchBlocksV1Progress{
		WatchBlocksV1CactiTransactionsResponse: v,
	}
}

// WatchBlocksV1FullResponseAsWatchBlocksV1Progress is a convenience function that returns WatchBlocksV1FullResponse wrapped in WatchBlocksV1Progress
func WatchBlocksV1FullResponseAsWatchBlocksV1Progress(v *WatchBlocksV1FullResponse) WatchBlocksV1Progress {
	return WatchBlocksV1Progress{
		WatchBlocksV1FullResponse: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *WatchBlocksV1Progress) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into WatchBlocksV1CactiTransactionsResponse
	err = newStrictDecoder(data).Decode(&dst.WatchBlocksV1CactiTransactionsResponse)
	if err == nil {
		jsonWatchBlocksV1CactiTransactionsResponse, _ := json.Marshal(dst.WatchBlocksV1CactiTransactionsResponse)
		if string(jsonWatchBlocksV1CactiTransactionsResponse) == "{}" { // empty struct
			dst.WatchBlocksV1CactiTransactionsResponse = nil
		} else {
			match++
		}
	} else {
		dst.WatchBlocksV1CactiTransactionsResponse = nil
	}

	// try to unmarshal data into WatchBlocksV1FullResponse
	err = newStrictDecoder(data).Decode(&dst.WatchBlocksV1FullResponse)
	if err == nil {
		jsonWatchBlocksV1FullResponse, _ := json.Marshal(dst.WatchBlocksV1FullResponse)
		if string(jsonWatchBlocksV1FullResponse) == "{}" { // empty struct
			dst.WatchBlocksV1FullResponse = nil
		} else {
			match++
		}
	} else {
		dst.WatchBlocksV1FullResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.WatchBlocksV1CactiTransactionsResponse = nil
		dst.WatchBlocksV1FullResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(WatchBlocksV1Progress)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(WatchBlocksV1Progress)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src WatchBlocksV1Progress) MarshalJSON() ([]byte, error) {
	if src.WatchBlocksV1CactiTransactionsResponse != nil {
		return json.Marshal(&src.WatchBlocksV1CactiTransactionsResponse)
	}

	if src.WatchBlocksV1FullResponse != nil {
		return json.Marshal(&src.WatchBlocksV1FullResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *WatchBlocksV1Progress) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.WatchBlocksV1CactiTransactionsResponse != nil {
		return obj.WatchBlocksV1CactiTransactionsResponse
	}

	if obj.WatchBlocksV1FullResponse != nil {
		return obj.WatchBlocksV1FullResponse
	}

	// all schemas are nil
	return nil
}

type NullableWatchBlocksV1Progress struct {
	value *WatchBlocksV1Progress
	isSet bool
}

func (v NullableWatchBlocksV1Progress) Get() *WatchBlocksV1Progress {
	return v.value
}

func (v *NullableWatchBlocksV1Progress) Set(val *WatchBlocksV1Progress) {
	v.value = val
	v.isSet = true
}

func (v NullableWatchBlocksV1Progress) IsSet() bool {
	return v.isSet
}

func (v *NullableWatchBlocksV1Progress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWatchBlocksV1Progress(val *WatchBlocksV1Progress) *NullableWatchBlocksV1Progress {
	return &NullableWatchBlocksV1Progress{value: val, isSet: true}
}

func (v NullableWatchBlocksV1Progress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWatchBlocksV1Progress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


