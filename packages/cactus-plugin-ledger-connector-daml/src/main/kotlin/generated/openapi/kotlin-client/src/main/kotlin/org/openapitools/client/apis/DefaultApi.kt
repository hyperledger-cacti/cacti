/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.CreateIOUEndpointRequest
import org.openapitools.client.models.CreateIOUEndpointResponse
import org.openapitools.client.models.ExerciseIOUEndpointRequest
import org.openapitools.client.models.ExerciseIOUEndpointResponse
import org.openapitools.client.models.GetPartiesInvolvedEndpointRequest
import org.openapitools.client.models.QueryIOUEndpointRequest
import org.openapitools.client.models.QueryIOUEndpointResponse
import org.openapitools.client.models.QueryRawIOUEndpointRequest

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class DefaultApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * This method creates a simple iou countract
     * 
     * @param createIOUEndpointRequest Request body for creation of iou
     * @return CreateIOUEndpointResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createIou(createIOUEndpointRequest: CreateIOUEndpointRequest) : CreateIOUEndpointResponse {
        val localVarResponse = createIouWithHttpInfo(createIOUEndpointRequest = createIOUEndpointRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CreateIOUEndpointResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * This method creates a simple iou countract
     * 
     * @param createIOUEndpointRequest Request body for creation of iou
     * @return ApiResponse<CreateIOUEndpointResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createIouWithHttpInfo(createIOUEndpointRequest: CreateIOUEndpointRequest) : ApiResponse<CreateIOUEndpointResponse?> {
        val localVariableConfig = createIouRequestConfig(createIOUEndpointRequest = createIOUEndpointRequest)

        return request<CreateIOUEndpointRequest, CreateIOUEndpointResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createIou
     *
     * @param createIOUEndpointRequest Request body for creation of iou
     * @return RequestConfig
     */
    fun createIouRequestConfig(createIOUEndpointRequest: CreateIOUEndpointRequest) : RequestConfig<CreateIOUEndpointRequest> {
        val localVariableBody = createIOUEndpointRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-daml/create-iou-endpoint",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * This method exercise choices(DAML term for function on contracts) for iou countract
     * 
     * @param exerciseIOUEndpointRequest Request body for exercising choice(DAML term for function on contracts) of iou
     * @return ExerciseIOUEndpointResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun exerciseChoice(exerciseIOUEndpointRequest: ExerciseIOUEndpointRequest) : ExerciseIOUEndpointResponse {
        val localVarResponse = exerciseChoiceWithHttpInfo(exerciseIOUEndpointRequest = exerciseIOUEndpointRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ExerciseIOUEndpointResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * This method exercise choices(DAML term for function on contracts) for iou countract
     * 
     * @param exerciseIOUEndpointRequest Request body for exercising choice(DAML term for function on contracts) of iou
     * @return ApiResponse<ExerciseIOUEndpointResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun exerciseChoiceWithHttpInfo(exerciseIOUEndpointRequest: ExerciseIOUEndpointRequest) : ApiResponse<ExerciseIOUEndpointResponse?> {
        val localVariableConfig = exerciseChoiceRequestConfig(exerciseIOUEndpointRequest = exerciseIOUEndpointRequest)

        return request<ExerciseIOUEndpointRequest, ExerciseIOUEndpointResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation exerciseChoice
     *
     * @param exerciseIOUEndpointRequest Request body for exercising choice(DAML term for function on contracts) of iou
     * @return RequestConfig
     */
    fun exerciseChoiceRequestConfig(exerciseIOUEndpointRequest: ExerciseIOUEndpointRequest) : RequestConfig<ExerciseIOUEndpointRequest> {
        val localVariableBody = exerciseIOUEndpointRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-daml/exercise-iou-endpoint",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * This method queries all the parties that is included on IOU contract
     * 
     * @param getPartiesInvolvedEndpointRequest Request body for getting the parties involved in daml instance
     * @return QueryIOUEndpointResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getPartiesInvolved(getPartiesInvolvedEndpointRequest: GetPartiesInvolvedEndpointRequest) : QueryIOUEndpointResponse {
        val localVarResponse = getPartiesInvolvedWithHttpInfo(getPartiesInvolvedEndpointRequest = getPartiesInvolvedEndpointRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as QueryIOUEndpointResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * This method queries all the parties that is included on IOU contract
     * 
     * @param getPartiesInvolvedEndpointRequest Request body for getting the parties involved in daml instance
     * @return ApiResponse<QueryIOUEndpointResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getPartiesInvolvedWithHttpInfo(getPartiesInvolvedEndpointRequest: GetPartiesInvolvedEndpointRequest) : ApiResponse<QueryIOUEndpointResponse?> {
        val localVariableConfig = getPartiesInvolvedRequestConfig(getPartiesInvolvedEndpointRequest = getPartiesInvolvedEndpointRequest)

        return request<GetPartiesInvolvedEndpointRequest, QueryIOUEndpointResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getPartiesInvolved
     *
     * @param getPartiesInvolvedEndpointRequest Request body for getting the parties involved in daml instance
     * @return RequestConfig
     */
    fun getPartiesInvolvedRequestConfig(getPartiesInvolvedEndpointRequest: GetPartiesInvolvedEndpointRequest) : RequestConfig<GetPartiesInvolvedEndpointRequest> {
        val localVariableBody = getPartiesInvolvedEndpointRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-daml/get-parties-involved-endpoint",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * This method queries DAML contracts
     * 
     * @param queryIOUEndpointRequest Request body for creation of iou
     * @return QueryIOUEndpointResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun queryContract(queryIOUEndpointRequest: QueryIOUEndpointRequest) : QueryIOUEndpointResponse {
        val localVarResponse = queryContractWithHttpInfo(queryIOUEndpointRequest = queryIOUEndpointRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as QueryIOUEndpointResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * This method queries DAML contracts
     * 
     * @param queryIOUEndpointRequest Request body for creation of iou
     * @return ApiResponse<QueryIOUEndpointResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun queryContractWithHttpInfo(queryIOUEndpointRequest: QueryIOUEndpointRequest) : ApiResponse<QueryIOUEndpointResponse?> {
        val localVariableConfig = queryContractRequestConfig(queryIOUEndpointRequest = queryIOUEndpointRequest)

        return request<QueryIOUEndpointRequest, QueryIOUEndpointResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation queryContract
     *
     * @param queryIOUEndpointRequest Request body for creation of iou
     * @return RequestConfig
     */
    fun queryContractRequestConfig(queryIOUEndpointRequest: QueryIOUEndpointRequest) : RequestConfig<QueryIOUEndpointRequest> {
        val localVariableBody = queryIOUEndpointRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-daml/query-iou-endpoint",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * This method queries DAML contracts that does not include request body
     * 
     * @param queryRawIOUEndpointRequest Request for querying IOU contracts
     * @return QueryIOUEndpointResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun queryRawContract(queryRawIOUEndpointRequest: QueryRawIOUEndpointRequest) : QueryIOUEndpointResponse {
        val localVarResponse = queryRawContractWithHttpInfo(queryRawIOUEndpointRequest = queryRawIOUEndpointRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as QueryIOUEndpointResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * This method queries DAML contracts that does not include request body
     * 
     * @param queryRawIOUEndpointRequest Request for querying IOU contracts
     * @return ApiResponse<QueryIOUEndpointResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun queryRawContractWithHttpInfo(queryRawIOUEndpointRequest: QueryRawIOUEndpointRequest) : ApiResponse<QueryIOUEndpointResponse?> {
        val localVariableConfig = queryRawContractRequestConfig(queryRawIOUEndpointRequest = queryRawIOUEndpointRequest)

        return request<QueryRawIOUEndpointRequest, QueryIOUEndpointResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation queryRawContract
     *
     * @param queryRawIOUEndpointRequest Request for querying IOU contracts
     * @return RequestConfig
     */
    fun queryRawContractRequestConfig(queryRawIOUEndpointRequest: QueryRawIOUEndpointRequest) : RequestConfig<QueryRawIOUEndpointRequest> {
        val localVariableBody = queryRawIOUEndpointRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-daml/query-raw-iou-endpoint",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
