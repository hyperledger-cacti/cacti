/*
Hyperledger Cacti Plugin - Connector DAML

Can perform basic tasks on a DAML ledger

API version: 2.0.0-rc.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-daml

import (
	"encoding/json"
)

// checks if the GetPartiesInvolvedResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetPartiesInvolvedResponse{}

// GetPartiesInvolvedResponse struct for GetPartiesInvolvedResponse
type GetPartiesInvolvedResponse struct {
	DisplayName NullableString `json:"displayName,omitempty"`
	Identifier *string `json:"identifier,omitempty"`
	// 
	IsLocal *bool `json:"isLocal,omitempty"`
}

// NewGetPartiesInvolvedResponse instantiates a new GetPartiesInvolvedResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetPartiesInvolvedResponse() *GetPartiesInvolvedResponse {
	this := GetPartiesInvolvedResponse{}
	return &this
}

// NewGetPartiesInvolvedResponseWithDefaults instantiates a new GetPartiesInvolvedResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetPartiesInvolvedResponseWithDefaults() *GetPartiesInvolvedResponse {
	this := GetPartiesInvolvedResponse{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetPartiesInvolvedResponse) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName.Get()) {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetPartiesInvolvedResponse) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *GetPartiesInvolvedResponse) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *GetPartiesInvolvedResponse) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *GetPartiesInvolvedResponse) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *GetPartiesInvolvedResponse) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *GetPartiesInvolvedResponse) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPartiesInvolvedResponse) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *GetPartiesInvolvedResponse) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *GetPartiesInvolvedResponse) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetIsLocal returns the IsLocal field value if set, zero value otherwise.
func (o *GetPartiesInvolvedResponse) GetIsLocal() bool {
	if o == nil || IsNil(o.IsLocal) {
		var ret bool
		return ret
	}
	return *o.IsLocal
}

// GetIsLocalOk returns a tuple with the IsLocal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPartiesInvolvedResponse) GetIsLocalOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLocal) {
		return nil, false
	}
	return o.IsLocal, true
}

// HasIsLocal returns a boolean if a field has been set.
func (o *GetPartiesInvolvedResponse) HasIsLocal() bool {
	if o != nil && !IsNil(o.IsLocal) {
		return true
	}

	return false
}

// SetIsLocal gets a reference to the given bool and assigns it to the IsLocal field.
func (o *GetPartiesInvolvedResponse) SetIsLocal(v bool) {
	o.IsLocal = &v
}

func (o GetPartiesInvolvedResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetPartiesInvolvedResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.IsLocal) {
		toSerialize["isLocal"] = o.IsLocal
	}
	return toSerialize, nil
}

type NullableGetPartiesInvolvedResponse struct {
	value *GetPartiesInvolvedResponse
	isSet bool
}

func (v NullableGetPartiesInvolvedResponse) Get() *GetPartiesInvolvedResponse {
	return v.value
}

func (v *NullableGetPartiesInvolvedResponse) Set(val *GetPartiesInvolvedResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetPartiesInvolvedResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetPartiesInvolvedResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetPartiesInvolvedResponse(val *GetPartiesInvolvedResponse) *NullableGetPartiesInvolvedResponse {
	return &NullableGetPartiesInvolvedResponse{value: val, isSet: true}
}

func (v NullableGetPartiesInvolvedResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetPartiesInvolvedResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


