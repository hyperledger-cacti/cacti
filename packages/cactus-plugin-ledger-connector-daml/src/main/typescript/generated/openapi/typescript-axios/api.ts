/* tslint:disable */
/* eslint-disable */
/**
 * Hyperledger Cacti Plugin - Connector DAML
 * Can perform basic tasks on a DAML ledger
 *
 * The version of the OpenAPI document: 2.0.0-rc.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * This method is the request for creating a simple IOU contract.
 * @export
 * @interface CreateIOUEndpointRequest
 */
export interface CreateIOUEndpointRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateIOUEndpointRequest
     */
    'templateId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateIOUEndpointRequest
     */
    'participantToken'?: string;
    /**
     * 
     * @type {CreateIOUEndpointRequestPayload}
     * @memberof CreateIOUEndpointRequest
     */
    'payload'?: CreateIOUEndpointRequestPayload;
}
/**
 * 
 * @export
 * @interface CreateIOUEndpointRequestPayload
 */
export interface CreateIOUEndpointRequestPayload {
    /**
     * 
     * @type {string}
     * @memberof CreateIOUEndpointRequestPayload
     */
    'issuer'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateIOUEndpointRequestPayload
     */
    'owner'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateIOUEndpointRequestPayload
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateIOUEndpointRequestPayload
     */
    'amount'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateIOUEndpointRequestPayload
     */
    'observers'?: Array<string>;
}
/**
 * This method is the response for creating a simple IOU contract.
 * @export
 * @interface CreateIOUEndpointResponse
 */
export interface CreateIOUEndpointResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateIOUEndpointResponse
     */
    'agreementText'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateIOUEndpointResponse
     */
    'completionOffset'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateIOUEndpointResponse
     */
    'contractId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateIOUEndpointResponse
     */
    'observers'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CreateIOUEndpointResponse
     */
    'templateId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateIOUEndpointResponse
     */
    'signatories'?: Array<string>;
    /**
     * 
     * @type {CreateIOUEndpointRequestPayload}
     * @memberof CreateIOUEndpointResponse
     */
    'payload'?: CreateIOUEndpointRequestPayload;
}
/**
 * This method is the request for creating a simple IOU contract.
 * @export
 * @interface ExerciseIOUEndpointRequest
 */
export interface ExerciseIOUEndpointRequest {
    /**
     * 
     * @type {string}
     * @memberof ExerciseIOUEndpointRequest
     */
    'previousParticipantToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseIOUEndpointRequest
     */
    'templateId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseIOUEndpointRequest
     */
    'contractId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExerciseIOUEndpointRequest
     */
    'choice'?: string;
    /**
     * 
     * @type {ExerciseIOUEndpointRequestArgument}
     * @memberof ExerciseIOUEndpointRequest
     */
    'argument'?: ExerciseIOUEndpointRequestArgument;
}
/**
 * 
 * @export
 * @interface ExerciseIOUEndpointRequestArgument
 */
export interface ExerciseIOUEndpointRequestArgument {
    /**
     * 
     * @type {string}
     * @memberof ExerciseIOUEndpointRequestArgument
     */
    'newOwner'?: string;
}
/**
 * This method is the request for creating a simple IOU contract.
 * @export
 * @interface ExerciseIOUEndpointResponse
 */
export interface ExerciseIOUEndpointResponse {
    /**
     * 
     * @type {string}
     * @memberof ExerciseIOUEndpointResponse
     */
    'completionOffset'?: string;
    /**
     * 
     * @type {Array<QueryIOUEndpointResponseEventsInner>}
     * @memberof ExerciseIOUEndpointResponse
     */
    'events'?: Array<QueryIOUEndpointResponseEventsInner>;
}
/**
 * This method is the request for getting all of the parties involved upon starting daml.
 * @export
 * @interface GetPartiesInvolvedEndpointRequest
 */
export interface GetPartiesInvolvedEndpointRequest {
    /**
     * 
     * @type {string}
     * @memberof GetPartiesInvolvedEndpointRequest
     */
    'participantToken'?: string;
}
/**
 * This method is the request for querying a simple IOU contract.
 * @export
 * @interface QueryIOUEndpointRequest
 */
export interface QueryIOUEndpointRequest {
    /**
     * 
     * @type {string}
     * @memberof QueryIOUEndpointRequest
     */
    'participantToken'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof QueryIOUEndpointRequest
     */
    'templateIds'?: Array<string>;
    /**
     * 
     * @type {QueryIOUEndpointRequestQuery}
     * @memberof QueryIOUEndpointRequest
     */
    'query'?: QueryIOUEndpointRequestQuery;
    /**
     * 
     * @type {Array<string>}
     * @memberof QueryIOUEndpointRequest
     */
    'readers'?: Array<string>;
}
/**
 * 
 * @export
 * @interface QueryIOUEndpointRequestQuery
 */
export interface QueryIOUEndpointRequestQuery {
    /**
     * 
     * @type {number}
     * @memberof QueryIOUEndpointRequestQuery
     */
    'amount'?: number;
}
/**
 * This method is the response for querying a simple IOU contract.
 * @export
 * @interface QueryIOUEndpointResponse
 */
export interface QueryIOUEndpointResponse {
    /**
     * 
     * @type {string}
     * @memberof QueryIOUEndpointResponse
     */
    'completionOffset'?: string;
    /**
     * 
     * @type {Array<QueryIOUEndpointResponseEventsInner>}
     * @memberof QueryIOUEndpointResponse
     */
    'events'?: Array<QueryIOUEndpointResponseEventsInner>;
}
/**
 * 
 * @export
 * @interface QueryIOUEndpointResponseEventsInner
 */
export interface QueryIOUEndpointResponseEventsInner {
    /**
     * 
     * @type {QueryIOUEndpointResponseEventsInnerArchived}
     * @memberof QueryIOUEndpointResponseEventsInner
     */
    'archived'?: QueryIOUEndpointResponseEventsInnerArchived;
}
/**
 * 
 * @export
 * @interface QueryIOUEndpointResponseEventsInnerArchived
 */
export interface QueryIOUEndpointResponseEventsInnerArchived {
    /**
     * 
     * @type {string}
     * @memberof QueryIOUEndpointResponseEventsInnerArchived
     */
    'contractId'?: string;
    /**
     * 
     * @type {string}
     * @memberof QueryIOUEndpointResponseEventsInnerArchived
     */
    'templateId'?: string;
}
/**
 * This method is the request for querying a simple IOU contract.
 * @export
 * @interface QueryRawIOUEndpointRequest
 */
export interface QueryRawIOUEndpointRequest {
    /**
     * 
     * @type {string}
     * @memberof QueryRawIOUEndpointRequest
     */
    'participantToken'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary This method creates a simple iou countract
         * @param {CreateIOUEndpointRequest} createIOUEndpointRequest Request body for creation of iou
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIou: async (createIOUEndpointRequest: CreateIOUEndpointRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createIOUEndpointRequest' is not null or undefined
            assertParamExists('createIou', 'createIOUEndpointRequest', createIOUEndpointRequest)
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-daml/create-iou-endpoint`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createIOUEndpointRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary This method exercise choices(DAML term for function on contracts) for iou countract
         * @param {ExerciseIOUEndpointRequest} exerciseIOUEndpointRequest Request body for exercising choice(DAML term for function on contracts) of iou
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exerciseChoice: async (exerciseIOUEndpointRequest: ExerciseIOUEndpointRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exerciseIOUEndpointRequest' is not null or undefined
            assertParamExists('exerciseChoice', 'exerciseIOUEndpointRequest', exerciseIOUEndpointRequest)
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-daml/exercise-iou-endpoint`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exerciseIOUEndpointRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary This method queries all the parties that is included on IOU contract
         * @param {GetPartiesInvolvedEndpointRequest} getPartiesInvolvedEndpointRequest Request body for getting the parties involved in daml instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartiesInvolved: async (getPartiesInvolvedEndpointRequest: GetPartiesInvolvedEndpointRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getPartiesInvolvedEndpointRequest' is not null or undefined
            assertParamExists('getPartiesInvolved', 'getPartiesInvolvedEndpointRequest', getPartiesInvolvedEndpointRequest)
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-daml/get-parties-involved-endpoint`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getPartiesInvolvedEndpointRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary This method queries DAML contracts
         * @param {QueryIOUEndpointRequest} queryIOUEndpointRequest Request body for creation of iou
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryContract: async (queryIOUEndpointRequest: QueryIOUEndpointRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'queryIOUEndpointRequest' is not null or undefined
            assertParamExists('queryContract', 'queryIOUEndpointRequest', queryIOUEndpointRequest)
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-daml/query-iou-endpoint`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryIOUEndpointRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary This method queries DAML contracts that does not include request body
         * @param {QueryRawIOUEndpointRequest} queryRawIOUEndpointRequest Request for querying IOU contracts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryRawContract: async (queryRawIOUEndpointRequest: QueryRawIOUEndpointRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'queryRawIOUEndpointRequest' is not null or undefined
            assertParamExists('queryRawContract', 'queryRawIOUEndpointRequest', queryRawIOUEndpointRequest)
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-daml/query-raw-iou-endpoint`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryRawIOUEndpointRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary This method creates a simple iou countract
         * @param {CreateIOUEndpointRequest} createIOUEndpointRequest Request body for creation of iou
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIou(createIOUEndpointRequest: CreateIOUEndpointRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateIOUEndpointResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIou(createIOUEndpointRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary This method exercise choices(DAML term for function on contracts) for iou countract
         * @param {ExerciseIOUEndpointRequest} exerciseIOUEndpointRequest Request body for exercising choice(DAML term for function on contracts) of iou
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exerciseChoice(exerciseIOUEndpointRequest: ExerciseIOUEndpointRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExerciseIOUEndpointResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exerciseChoice(exerciseIOUEndpointRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary This method queries all the parties that is included on IOU contract
         * @param {GetPartiesInvolvedEndpointRequest} getPartiesInvolvedEndpointRequest Request body for getting the parties involved in daml instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPartiesInvolved(getPartiesInvolvedEndpointRequest: GetPartiesInvolvedEndpointRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryIOUEndpointResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPartiesInvolved(getPartiesInvolvedEndpointRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary This method queries DAML contracts
         * @param {QueryIOUEndpointRequest} queryIOUEndpointRequest Request body for creation of iou
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryContract(queryIOUEndpointRequest: QueryIOUEndpointRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryIOUEndpointResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryContract(queryIOUEndpointRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary This method queries DAML contracts that does not include request body
         * @param {QueryRawIOUEndpointRequest} queryRawIOUEndpointRequest Request for querying IOU contracts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryRawContract(queryRawIOUEndpointRequest: QueryRawIOUEndpointRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryIOUEndpointResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryRawContract(queryRawIOUEndpointRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary This method creates a simple iou countract
         * @param {CreateIOUEndpointRequest} createIOUEndpointRequest Request body for creation of iou
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIou(createIOUEndpointRequest: CreateIOUEndpointRequest, options?: any): AxiosPromise<CreateIOUEndpointResponse> {
            return localVarFp.createIou(createIOUEndpointRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary This method exercise choices(DAML term for function on contracts) for iou countract
         * @param {ExerciseIOUEndpointRequest} exerciseIOUEndpointRequest Request body for exercising choice(DAML term for function on contracts) of iou
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exerciseChoice(exerciseIOUEndpointRequest: ExerciseIOUEndpointRequest, options?: any): AxiosPromise<ExerciseIOUEndpointResponse> {
            return localVarFp.exerciseChoice(exerciseIOUEndpointRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary This method queries all the parties that is included on IOU contract
         * @param {GetPartiesInvolvedEndpointRequest} getPartiesInvolvedEndpointRequest Request body for getting the parties involved in daml instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartiesInvolved(getPartiesInvolvedEndpointRequest: GetPartiesInvolvedEndpointRequest, options?: any): AxiosPromise<QueryIOUEndpointResponse> {
            return localVarFp.getPartiesInvolved(getPartiesInvolvedEndpointRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary This method queries DAML contracts
         * @param {QueryIOUEndpointRequest} queryIOUEndpointRequest Request body for creation of iou
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryContract(queryIOUEndpointRequest: QueryIOUEndpointRequest, options?: any): AxiosPromise<QueryIOUEndpointResponse> {
            return localVarFp.queryContract(queryIOUEndpointRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary This method queries DAML contracts that does not include request body
         * @param {QueryRawIOUEndpointRequest} queryRawIOUEndpointRequest Request for querying IOU contracts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryRawContract(queryRawIOUEndpointRequest: QueryRawIOUEndpointRequest, options?: any): AxiosPromise<QueryIOUEndpointResponse> {
            return localVarFp.queryRawContract(queryRawIOUEndpointRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary This method creates a simple iou countract
     * @param {CreateIOUEndpointRequest} createIOUEndpointRequest Request body for creation of iou
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createIou(createIOUEndpointRequest: CreateIOUEndpointRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createIou(createIOUEndpointRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary This method exercise choices(DAML term for function on contracts) for iou countract
     * @param {ExerciseIOUEndpointRequest} exerciseIOUEndpointRequest Request body for exercising choice(DAML term for function on contracts) of iou
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exerciseChoice(exerciseIOUEndpointRequest: ExerciseIOUEndpointRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).exerciseChoice(exerciseIOUEndpointRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary This method queries all the parties that is included on IOU contract
     * @param {GetPartiesInvolvedEndpointRequest} getPartiesInvolvedEndpointRequest Request body for getting the parties involved in daml instance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPartiesInvolved(getPartiesInvolvedEndpointRequest: GetPartiesInvolvedEndpointRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPartiesInvolved(getPartiesInvolvedEndpointRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary This method queries DAML contracts
     * @param {QueryIOUEndpointRequest} queryIOUEndpointRequest Request body for creation of iou
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public queryContract(queryIOUEndpointRequest: QueryIOUEndpointRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).queryContract(queryIOUEndpointRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary This method queries DAML contracts that does not include request body
     * @param {QueryRawIOUEndpointRequest} queryRawIOUEndpointRequest Request for querying IOU contracts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public queryRawContract(queryRawIOUEndpointRequest: QueryRawIOUEndpointRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).queryRawContract(queryRawIOUEndpointRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


