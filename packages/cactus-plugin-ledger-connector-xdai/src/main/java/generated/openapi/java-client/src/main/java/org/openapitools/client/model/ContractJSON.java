/*
 * Hyperledger Cactus Plugin - Connector Xdai
 * Can perform basic tasks on a Xdai ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContractJSON
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ContractJSON {
  public static final String SERIALIZED_NAME_CONTRACT_NAME = "contractName";
  @SerializedName(SERIALIZED_NAME_CONTRACT_NAME)
  private String contractName;

  public static final String SERIALIZED_NAME_BYTECODE = "bytecode";
  @SerializedName(SERIALIZED_NAME_BYTECODE)
  private String bytecode;

  public static final String SERIALIZED_NAME_ABI = "abi";
  @SerializedName(SERIALIZED_NAME_ABI)
  private List<Object> abi = new ArrayList<>();

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public static final String SERIALIZED_NAME_DEPLOYED_BYTECODE = "deployedBytecode";
  @SerializedName(SERIALIZED_NAME_DEPLOYED_BYTECODE)
  private String deployedBytecode;

  public static final String SERIALIZED_NAME_SOURCE_MAP = "sourceMap";
  @SerializedName(SERIALIZED_NAME_SOURCE_MAP)
  private String sourceMap;

  public static final String SERIALIZED_NAME_DEPLOYED_SOURCE_MAP = "deployedSourceMap";
  @SerializedName(SERIALIZED_NAME_DEPLOYED_SOURCE_MAP)
  private String deployedSourceMap;

  public static final String SERIALIZED_NAME_SOURCE_PATH = "sourcePath";
  @SerializedName(SERIALIZED_NAME_SOURCE_PATH)
  private String sourcePath;

  public static final String SERIALIZED_NAME_COMPILER = "compiler";
  @SerializedName(SERIALIZED_NAME_COMPILER)
  private Object compiler;

  public static final String SERIALIZED_NAME_NETWORKS = "networks";
  @SerializedName(SERIALIZED_NAME_NETWORKS)
  private Object networks;

  public static final String SERIALIZED_NAME_AST = "ast";
  @SerializedName(SERIALIZED_NAME_AST)
  private Object ast;

  public static final String SERIALIZED_NAME_FUNCTION_HASHES = "functionHashes";
  @SerializedName(SERIALIZED_NAME_FUNCTION_HASHES)
  private Object functionHashes;

  public static final String SERIALIZED_NAME_GAS_ESTIMATES = "gasEstimates";
  @SerializedName(SERIALIZED_NAME_GAS_ESTIMATES)
  private Object gasEstimates;

  public ContractJSON() {
  }

  public ContractJSON contractName(String contractName) {
    
    this.contractName = contractName;
    return this;
  }

   /**
   * Get contractName
   * @return contractName
  **/
  @javax.annotation.Nonnull
  public String getContractName() {
    return contractName;
  }


  public void setContractName(String contractName) {
    this.contractName = contractName;
  }


  public ContractJSON bytecode(String bytecode) {
    
    this.bytecode = bytecode;
    return this;
  }

   /**
   * See https://ethereum.stackexchange.com/a/47556 regarding the maximum length of the bytecode
   * @return bytecode
  **/
  @javax.annotation.Nonnull
  public String getBytecode() {
    return bytecode;
  }


  public void setBytecode(String bytecode) {
    this.bytecode = bytecode;
  }


  public ContractJSON abi(List<Object> abi) {
    
    this.abi = abi;
    return this;
  }

  public ContractJSON addAbiItem(Object abiItem) {
    if (this.abi == null) {
      this.abi = new ArrayList<>();
    }
    this.abi.add(abiItem);
    return this;
  }

   /**
   * The application binary interface of the solidity contract, optional parameter
   * @return abi
  **/
  @javax.annotation.Nonnull
  public List<Object> getAbi() {
    return abi;
  }


  public void setAbi(List<Object> abi) {
    this.abi = abi;
  }


  public ContractJSON metadata(String metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  public String getMetadata() {
    return metadata;
  }


  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }


  public ContractJSON deployedBytecode(String deployedBytecode) {
    
    this.deployedBytecode = deployedBytecode;
    return this;
  }

   /**
   * Get deployedBytecode
   * @return deployedBytecode
  **/
  @javax.annotation.Nullable
  public String getDeployedBytecode() {
    return deployedBytecode;
  }


  public void setDeployedBytecode(String deployedBytecode) {
    this.deployedBytecode = deployedBytecode;
  }


  public ContractJSON sourceMap(String sourceMap) {
    
    this.sourceMap = sourceMap;
    return this;
  }

   /**
   * Get sourceMap
   * @return sourceMap
  **/
  @javax.annotation.Nullable
  public String getSourceMap() {
    return sourceMap;
  }


  public void setSourceMap(String sourceMap) {
    this.sourceMap = sourceMap;
  }


  public ContractJSON deployedSourceMap(String deployedSourceMap) {
    
    this.deployedSourceMap = deployedSourceMap;
    return this;
  }

   /**
   * Get deployedSourceMap
   * @return deployedSourceMap
  **/
  @javax.annotation.Nullable
  public String getDeployedSourceMap() {
    return deployedSourceMap;
  }


  public void setDeployedSourceMap(String deployedSourceMap) {
    this.deployedSourceMap = deployedSourceMap;
  }


  public ContractJSON sourcePath(String sourcePath) {
    
    this.sourcePath = sourcePath;
    return this;
  }

   /**
   * Get sourcePath
   * @return sourcePath
  **/
  @javax.annotation.Nullable
  public String getSourcePath() {
    return sourcePath;
  }


  public void setSourcePath(String sourcePath) {
    this.sourcePath = sourcePath;
  }


  public ContractJSON compiler(Object compiler) {
    
    this.compiler = compiler;
    return this;
  }

   /**
   * Get compiler
   * @return compiler
  **/
  @javax.annotation.Nullable
  public Object getCompiler() {
    return compiler;
  }


  public void setCompiler(Object compiler) {
    this.compiler = compiler;
  }


  public ContractJSON networks(Object networks) {
    
    this.networks = networks;
    return this;
  }

   /**
   * Get networks
   * @return networks
  **/
  @javax.annotation.Nullable
  public Object getNetworks() {
    return networks;
  }


  public void setNetworks(Object networks) {
    this.networks = networks;
  }


  public ContractJSON ast(Object ast) {
    
    this.ast = ast;
    return this;
  }

   /**
   * Get ast
   * @return ast
  **/
  @javax.annotation.Nullable
  public Object getAst() {
    return ast;
  }


  public void setAst(Object ast) {
    this.ast = ast;
  }


  public ContractJSON functionHashes(Object functionHashes) {
    
    this.functionHashes = functionHashes;
    return this;
  }

   /**
   * Get functionHashes
   * @return functionHashes
  **/
  @javax.annotation.Nullable
  public Object getFunctionHashes() {
    return functionHashes;
  }


  public void setFunctionHashes(Object functionHashes) {
    this.functionHashes = functionHashes;
  }


  public ContractJSON gasEstimates(Object gasEstimates) {
    
    this.gasEstimates = gasEstimates;
    return this;
  }

   /**
   * Get gasEstimates
   * @return gasEstimates
  **/
  @javax.annotation.Nullable
  public Object getGasEstimates() {
    return gasEstimates;
  }


  public void setGasEstimates(Object gasEstimates) {
    this.gasEstimates = gasEstimates;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ContractJSON instance itself
   */
  public ContractJSON putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContractJSON contractJSON = (ContractJSON) o;
    return Objects.equals(this.contractName, contractJSON.contractName) &&
        Objects.equals(this.bytecode, contractJSON.bytecode) &&
        Objects.equals(this.abi, contractJSON.abi) &&
        Objects.equals(this.metadata, contractJSON.metadata) &&
        Objects.equals(this.deployedBytecode, contractJSON.deployedBytecode) &&
        Objects.equals(this.sourceMap, contractJSON.sourceMap) &&
        Objects.equals(this.deployedSourceMap, contractJSON.deployedSourceMap) &&
        Objects.equals(this.sourcePath, contractJSON.sourcePath) &&
        Objects.equals(this.compiler, contractJSON.compiler) &&
        Objects.equals(this.networks, contractJSON.networks) &&
        Objects.equals(this.ast, contractJSON.ast) &&
        Objects.equals(this.functionHashes, contractJSON.functionHashes) &&
        Objects.equals(this.gasEstimates, contractJSON.gasEstimates)&&
        Objects.equals(this.additionalProperties, contractJSON.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contractName, bytecode, abi, metadata, deployedBytecode, sourceMap, deployedSourceMap, sourcePath, compiler, networks, ast, functionHashes, gasEstimates, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContractJSON {\n");
    sb.append("    contractName: ").append(toIndentedString(contractName)).append("\n");
    sb.append("    bytecode: ").append(toIndentedString(bytecode)).append("\n");
    sb.append("    abi: ").append(toIndentedString(abi)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    deployedBytecode: ").append(toIndentedString(deployedBytecode)).append("\n");
    sb.append("    sourceMap: ").append(toIndentedString(sourceMap)).append("\n");
    sb.append("    deployedSourceMap: ").append(toIndentedString(deployedSourceMap)).append("\n");
    sb.append("    sourcePath: ").append(toIndentedString(sourcePath)).append("\n");
    sb.append("    compiler: ").append(toIndentedString(compiler)).append("\n");
    sb.append("    networks: ").append(toIndentedString(networks)).append("\n");
    sb.append("    ast: ").append(toIndentedString(ast)).append("\n");
    sb.append("    functionHashes: ").append(toIndentedString(functionHashes)).append("\n");
    sb.append("    gasEstimates: ").append(toIndentedString(gasEstimates)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contractName");
    openapiFields.add("bytecode");
    openapiFields.add("abi");
    openapiFields.add("metadata");
    openapiFields.add("deployedBytecode");
    openapiFields.add("sourceMap");
    openapiFields.add("deployedSourceMap");
    openapiFields.add("sourcePath");
    openapiFields.add("compiler");
    openapiFields.add("networks");
    openapiFields.add("ast");
    openapiFields.add("functionHashes");
    openapiFields.add("gasEstimates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contractName");
    openapiRequiredFields.add("bytecode");
    openapiRequiredFields.add("abi");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ContractJSON
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ContractJSON.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContractJSON is not found in the empty JSON string", ContractJSON.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContractJSON.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("contractName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractName").toString()));
      }
      if (!jsonObj.get("bytecode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bytecode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bytecode").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("abi") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("abi").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `abi` to be an array in the JSON string but got `%s`", jsonObj.get("abi").toString()));
      }
      if ((jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) && !jsonObj.get("metadata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
      }
      if ((jsonObj.get("deployedBytecode") != null && !jsonObj.get("deployedBytecode").isJsonNull()) && !jsonObj.get("deployedBytecode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deployedBytecode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deployedBytecode").toString()));
      }
      if ((jsonObj.get("sourceMap") != null && !jsonObj.get("sourceMap").isJsonNull()) && !jsonObj.get("sourceMap").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceMap` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceMap").toString()));
      }
      if ((jsonObj.get("deployedSourceMap") != null && !jsonObj.get("deployedSourceMap").isJsonNull()) && !jsonObj.get("deployedSourceMap").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deployedSourceMap` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deployedSourceMap").toString()));
      }
      if ((jsonObj.get("sourcePath") != null && !jsonObj.get("sourcePath").isJsonNull()) && !jsonObj.get("sourcePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourcePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourcePath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContractJSON.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContractJSON' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContractJSON> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContractJSON.class));

       return (TypeAdapter<T>) new TypeAdapter<ContractJSON>() {
           @Override
           public void write(JsonWriter out, ContractJSON value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ContractJSON read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ContractJSON instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContractJSON given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContractJSON
  * @throws IOException if the JSON string is invalid with respect to ContractJSON
  */
  public static ContractJSON fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContractJSON.class);
  }

 /**
  * Convert an instance of ContractJSON to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

