openapi: 3.0.3
info:
  description: Can perform basic tasks on a Xdai ledger
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Hyperledger Cactus Plugin - Connector Xdai
  version: 2.0.0-rc.3
servers:
- url: /
paths:
  /api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-xdai/deploy-contract-solidity-bytecode:
    post:
      operationId: deployContractV1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeployContractV1Request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeployContractV1Response'
          description: OK
      summary: Deploys the bytecode of a Solidity contract.
      x-hyperledger-cacti:
        http:
          verbLowerCase: post
          path: /api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-xdai/deploy-contract-solidity-bytecode
  /api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-xdai/deploy-contract-solidity-bytecode-json-object:
    post:
      operationId: deployContractJsonObjectV1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeployContractJsonObjectV1Request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeployContractV1Response'
          description: OK
      summary: Deploys the bytecode of a Solidity contract.
      x-hyperledger-cacti:
        http:
          verbLowerCase: post
          path: /api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-xdai/deploy-contract-solidity-bytecode-json-object
  /api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-xdai/run-transaction:
    post:
      operationId: runTransactionV1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunTransactionV1Request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunTransactionV1Response'
          description: OK
      summary: Executes a transaction on a xdai ledger
      x-hyperledger-cacti:
        http:
          verbLowerCase: post
          path: /api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-xdai/run-transaction
  /api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-xdai/invoke-contract:
    post:
      operationId: invokeContractV1
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvokeContractV1Request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvokeContractV1Response'
          description: OK
      summary: Invokes a contract on a xdai ledger
      x-hyperledger-cacti:
        http:
          verbLowerCase: post
          path: /api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-xdai/invoke-contract
  /api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-xdai/invoke-contract-json-object:
    post:
      operationId: invokeContractJsonObject
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvokeContractJsonObjectV1Request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvokeContractV1Response'
          description: OK
      summary: Invokes a contract on a besu ledger
      x-hyperledger-cacti:
        http:
          verbLowerCase: post
          path: /api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-xdai/invoke-contract-json-object
  /api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-xdai/get-prometheus-exporter-metrics:
    get:
      operationId: getPrometheusMetricsV1
      parameters: []
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PrometheusExporterMetricsResponse'
          description: OK
      summary: Get the Prometheus Metrics
      x-hyperledger-cacti:
        http:
          verbLowerCase: get
          path: /api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-xdai/get-prometheus-exporter-metrics
components:
  schemas:
    ReceiptType:
      description: Enumerates the possible types of receipts that can be waited for
        by someone or something that has requested the execution of a transaction
        on a ledger.
      enum:
      - NODE_TX_POOL_ACK
      - LEDGER_BLOCK_ACK
      type: string
    ConsistencyStrategy:
      example:
        blockConfirmations: 2931
        receiptType: null
        timeoutMs: 0
        pollIntervalMs: 0
      properties:
        receiptType:
          $ref: '#/components/schemas/ReceiptType'
        timeoutMs:
          description: "The amount of milliseconds to wait for the receipt to arrive\
            \ to the connector. Defaults to 0 which means to wait for an unlimited\
            \ amount of time. Note that this wait may be interrupted still by other\
            \ parts of the infrastructure such as load balancers cutting of HTTP requests\
            \ after some time even if they are the type that is supposed to be kept\
            \ alive. The question of re-entrance is a broader topic not in scope to\
            \ discuss here, but it is important to mention it."
          minimum: 0
          type: integer
        blockConfirmations:
          description: "The number of blocks to wait to be confirmed in addition to\
            \ the block containing the transaction in question. Note that if the receipt\
            \ type is set to only wait for node transaction pool ACK and this parameter\
            \ is set to anything, but zero then the API will not accept the request\
            \ due to conflicting parameters."
          maximum: 20000
          minimum: 0
          type: integer
        pollIntervalMs:
          description: The amount of time (in milliseconds) connector will wait before
            making another confiramtion request to the network in case of previous
            confiramtion request fails
          minimum: 0
          type: integer
      required:
      - blockConfirmations
      - receiptType
      type: object
    Web3SigningCredential:
      discriminator:
        propertyName: type
      example:
        type: null
      oneOf:
      - $ref: '#/components/schemas/Web3SigningCredentialCactusKeychainRef'
      - $ref: '#/components/schemas/Web3SigningCredentialPrivateKeyHex'
      - $ref: '#/components/schemas/Web3SigningCredentialNone'
      properties:
        type:
          $ref: '#/components/schemas/Web3SigningCredentialType'
      required:
      - type
      type: object
    Web3SigningCredentialCactusKeychainRef:
      properties:
        type:
          $ref: '#/components/schemas/Web3SigningCredentialType'
        ethAccount:
          description: The ethereum account (public key) that the credential  belongs
            to. Basically the username in the traditional  terminology of authentication.
          maxLength: 64
          minLength: 64
          nullable: false
          type: string
        keychainEntryKey:
          description: The key to use when looking up the the keychain entry holding
            the secret pointed to by the  keychainEntryKey parameter.
          maxLength: 1024
          minLength: 0
          type: string
        keychainId:
          description: The keychain ID to use when looking up the the keychain plugin
            instance that will be used to retrieve the secret pointed to by the keychainEntryKey
            parameter.
          maxLength: 1024
          minLength: 0
          type: string
      required:
      - ethAccount
      - keychainEntryKey
      - keychainId
      - type
      type: object
    Web3SigningCredentialPrivateKeyHex:
      properties:
        type:
          $ref: '#/components/schemas/Web3SigningCredentialType'
        ethAccount:
          description: The ethereum account (public key) that the credential belongs
            to. Basically the username in the traditional terminology of authentication.
          maxLength: 64
          minLength: 64
          nullable: false
          type: string
        secret:
          description: The HEX encoded private key of an eth account.
          maxLength: 65535
          minLength: 0
          type: string
      required:
      - ethAccount
      - secret
      - type
      type: object
    Web3SigningCredentialNone:
      description: Using this denotes that there is no signing required because the
        transaction is pre-signed.
      properties:
        type:
          $ref: '#/components/schemas/Web3SigningCredentialType'
      required:
      - type
      type: object
    Web3SigningCredentialType:
      enum:
      - CACTUS_KEYCHAIN_REF
      - GETH_KEYCHAIN_PASSWORD
      - PRIVATE_KEY_HEX
      - NONE
      type: string
    EthContractInvocationType:
      enum:
      - SEND
      - CALL
      type: string
    SolidityContractJsonArtifact:
      properties:
        contractName:
          nullable: false
          type: string
        metadata:
          nullable: false
          type: string
        bytecode:
          nullable: false
          type: string
        deployedBytecode:
          nullable: false
          type: string
        sourceMap:
          nullable: false
          type: string
        deployedSourceMap:
          nullable: false
          type: string
        sourcePath:
          type: string
        compiler:
          $ref: '#/components/schemas/SolidityContractJsonArtifact_compiler'
        functionHashes:
          additionalProperties: true
          type: object
        gasEstimates:
          $ref: '#/components/schemas/SolidityContractJsonArtifact_gasEstimates'
      required:
      - contractName
      type: object
    XdaiTransactionConfig:
      additionalProperties: true
      example:
        rawTransaction: rawTransaction
        data: null
        gas: null
        from: null
        to: null
        value: null
        nonce: 0.8008281904610115
        gasPrice: null
      properties:
        rawTransaction:
          nullable: false
          type: string
        from:
          $ref: '#/components/schemas/XdaiTransactionConfig_from'
        to:
          $ref: '#/components/schemas/XdaiTransactionConfig_to'
        value:
          $ref: '#/components/schemas/XdaiTransactionConfig_from'
        gas:
          $ref: '#/components/schemas/XdaiTransactionConfig_from'
        gasPrice:
          $ref: '#/components/schemas/XdaiTransactionConfig_from'
        nonce:
          type: number
        data:
          $ref: '#/components/schemas/XdaiTransactionConfig_to'
      type: object
    Web3TransactionReceipt:
      additionalProperties: true
      example:
        blockHash: blockHash
        gasUsed: 1.4658129805029452
        blockNumber: 6.027456183070403
        contractAddress: contractAddress
        transactionIndex: 0.8008281904610115
        from: from
        to: to
        transactionHash: transactionHash
        status: true
      properties:
        status:
          nullable: false
          type: boolean
        transactionHash:
          maxLength: 66
          minLength: 66
          pattern: "^0x([A-Fa-f0-9]{64})$"
          type: string
        transactionIndex:
          nullable: false
          type: number
        blockHash:
          maxLength: 66
          minLength: 66
          pattern: "^0x([A-Fa-f0-9]{64})$"
          type: string
        blockNumber:
          nullable: false
          type: number
        gasUsed:
          nullable: false
          type: number
        contractAddress:
          nullable: true
          type: string
        from:
          nullable: false
          type: string
        to:
          nullable: false
          type: string
      required:
      - blockHash
      - blockNumber
      - from
      - gasUsed
      - status
      - to
      - transactionHash
      - transactionIndex
      type: object
    ContractJSON:
      additionalProperties: true
      example:
        bytecode: bytecode
        metadata: metadata
        ast: "{}"
        deployedBytecode: deployedBytecode
        sourceMap: sourceMap
        deployedSourceMap: deployedSourceMap
        abi:
        - ""
        - ""
        networks: "{}"
        functionHashes: "{}"
        gasEstimates: "{}"
        contractName: contractName
        compiler: "{}"
        sourcePath: sourcePath
      properties:
        contractName:
          nullable: false
          type: string
        bytecode:
          description: See https://ethereum.stackexchange.com/a/47556 regarding the
            maximum length of the bytecode
          maxLength: 24576
          minLength: 1
          nullable: false
          type: string
        abi:
          description: "The application binary interface of the solidity contract,\
            \ optional parameter"
          items: {}
          nullable: false
          type: array
        metadata:
          type: string
        deployedBytecode:
          type: string
        sourceMap:
          type: string
        deployedSourceMap:
          type: string
        sourcePath:
          type: string
        compiler:
          type: object
        networks:
          type: object
        ast:
          type: object
        functionHashes:
          type: object
        gasEstimates:
          type: object
      required:
      - abi
      - bytecode
      - contractName
      type: object
    RunTransactionV1Request:
      additionalProperties: false
      example:
        transactionConfig:
          rawTransaction: rawTransaction
          data: null
          gas: null
          from: null
          to: null
          value: null
          nonce: 0.8008281904610115
          gasPrice: null
        consistencyStrategy:
          blockConfirmations: 2931
          receiptType: null
          timeoutMs: 0
          pollIntervalMs: 0
        web3SigningCredential:
          type: null
      properties:
        web3SigningCredential:
          $ref: '#/components/schemas/Web3SigningCredential'
        transactionConfig:
          $ref: '#/components/schemas/XdaiTransactionConfig'
        consistencyStrategy:
          $ref: '#/components/schemas/ConsistencyStrategy'
      required:
      - consistencyStrategy
      - transactionConfig
      - web3SigningCredential
      type: object
    RunTransactionV1Response:
      example:
        transactionReceipt:
          blockHash: blockHash
          gasUsed: 1.4658129805029452
          blockNumber: 6.027456183070403
          contractAddress: contractAddress
          transactionIndex: 0.8008281904610115
          from: from
          to: to
          transactionHash: transactionHash
          status: true
      properties:
        transactionReceipt:
          $ref: '#/components/schemas/Web3TransactionReceipt'
      required:
      - transactionReceipt
      type: object
    DeployContractV1Request:
      additionalProperties: false
      example:
        keychainId: keychainId
        constructorArgs:
        - ""
        - ""
        timeoutMs: 0.6027456183070403
        gas: 0.8008281904610115
        web3SigningCredential:
          type: null
        contractName: contractName
        gasPrice: gasPrice
      properties:
        contractName:
          description: The contract name for retrieve the contracts json on the keychain.
          maxLength: 100
          minLength: 1
          nullable: false
          type: string
        constructorArgs:
          default: []
          items: {}
          type: array
        web3SigningCredential:
          $ref: '#/components/schemas/Web3SigningCredential'
        keychainId:
          description: The keychainId for retrieve the contracts json.
          maxLength: 100
          minLength: 1
          nullable: false
          type: string
        gas:
          nullable: false
          type: number
        gasPrice:
          nullable: false
          type: string
        timeoutMs:
          default: 60000
          description: The amount of milliseconds to wait for a transaction receipt
            with theaddress of the contract(which indicates successful deployment)
            beforegiving up and crashing.
          minimum: 0
          nullable: false
          type: number
      required:
      - contractName
      - keychainId
      - web3SigningCredential
      type: object
    DeployContractJsonObjectV1Request:
      additionalProperties: false
      example:
        timeoutMs: 0.6027456183070403
        constructorArgs:
        - ""
        - ""
        gas: 0.8008281904610115
        web3SigningCredential:
          type: null
        gasPrice: gasPrice
        contractJSON:
          bytecode: bytecode
          metadata: metadata
          ast: "{}"
          deployedBytecode: deployedBytecode
          sourceMap: sourceMap
          deployedSourceMap: deployedSourceMap
          abi:
          - ""
          - ""
          networks: "{}"
          functionHashes: "{}"
          gasEstimates: "{}"
          contractName: contractName
          compiler: "{}"
          sourcePath: sourcePath
      properties:
        web3SigningCredential:
          $ref: '#/components/schemas/Web3SigningCredential'
        gas:
          nullable: false
          type: number
        gasPrice:
          nullable: false
          type: string
        timeoutMs:
          default: 60000
          description: The amount of milliseconds to wait for a transaction receipt
            with theaddress of the contract(which indicates successful deployment)
            beforegiving up and crashing.
          minimum: 0
          nullable: false
          type: number
        contractJSON:
          $ref: '#/components/schemas/ContractJSON'
        constructorArgs:
          default: []
          description: The list of arguments to pass in to the constructor of the
            contract being deployed.
          items: {}
          type: array
      required:
      - contractJSON
      - web3SigningCredential
      type: object
    DeployContractV1Response:
      example:
        transactionReceipt:
          blockHash: blockHash
          gasUsed: 1.4658129805029452
          blockNumber: 6.027456183070403
          contractAddress: contractAddress
          transactionIndex: 0.8008281904610115
          from: from
          to: to
          transactionHash: transactionHash
          status: true
      properties:
        transactionReceipt:
          $ref: '#/components/schemas/Web3TransactionReceipt'
      required:
      - transactionReceipt
      type: object
    InvokeContractV1Request:
      additionalProperties: false
      example:
        invocationType: null
        keychainId: keychainId
        timeoutMs: 0.6027456183070403
        gas: null
        web3SigningCredential:
          type: null
        methodName: methodName
        contractName: contractName
        params:
        - ""
        - ""
        value: null
        nonce: 0.8008281904610115
        gasPrice: null
      properties:
        contractName:
          description: The contract name to find it in the keychain plugin
          nullable: false
          type: string
        web3SigningCredential:
          $ref: '#/components/schemas/Web3SigningCredential'
        invocationType:
          $ref: '#/components/schemas/EthContractInvocationType'
        methodName:
          description: The name of the contract method to invoke.
          maxLength: 2048
          minLength: 1
          nullable: false
          type: string
        params:
          default: []
          description: The list of arguments to pass in to the contract method being
            invoked.
          items: {}
          type: array
        value:
          $ref: '#/components/schemas/XdaiTransactionConfig_from'
        gas:
          $ref: '#/components/schemas/XdaiTransactionConfig_from'
        gasPrice:
          $ref: '#/components/schemas/XdaiTransactionConfig_from'
        nonce:
          type: number
        timeoutMs:
          default: 60000
          description: The amount of milliseconds to wait for a transaction receipt
            beforegiving up and crashing. Only has any effect if the invocation type
            is SEND
          minimum: 0
          nullable: false
          type: number
        keychainId:
          description: The keychainId for retrieve the contracts json.
          maxLength: 100
          minLength: 1
          type: string
      required:
      - contractName
      - invocationType
      - keychainId
      - methodName
      - params
      - web3SigningCredential
      type: object
    InvokeContractJsonObjectV1Request:
      additionalProperties: false
      example:
        invocationType: null
        timeoutMs: 0.6027456183070403
        gas: null
        web3SigningCredential:
          type: null
        methodName: methodName
        contractAddress: contractAddress
        params:
        - ""
        - ""
        value: null
        nonce: 0.8008281904610115
        gasPrice: null
        contractJSON:
          bytecode: bytecode
          metadata: metadata
          ast: "{}"
          deployedBytecode: deployedBytecode
          sourceMap: sourceMap
          deployedSourceMap: deployedSourceMap
          abi:
          - ""
          - ""
          networks: "{}"
          functionHashes: "{}"
          gasEstimates: "{}"
          contractName: contractName
          compiler: "{}"
          sourcePath: sourcePath
      properties:
        web3SigningCredential:
          $ref: '#/components/schemas/Web3SigningCredential'
        invocationType:
          $ref: '#/components/schemas/EthContractInvocationType'
        methodName:
          description: The name of the contract method to invoke.
          maxLength: 2048
          minLength: 1
          nullable: false
          type: string
        params:
          default: []
          description: The list of arguments to pass in to the contract method being
            invoked.
          items: {}
          type: array
        contractAddress:
          description: Address of the solidity contract
          nullable: false
          type: string
        value:
          $ref: '#/components/schemas/XdaiTransactionConfig_from'
        gas:
          $ref: '#/components/schemas/XdaiTransactionConfig_from'
        gasPrice:
          $ref: '#/components/schemas/XdaiTransactionConfig_from'
        nonce:
          type: number
        timeoutMs:
          default: 60000
          description: The amount of milliseconds to wait for a transaction receipt
            beforegiving up and crashing. Only has any effect if the invocation type
            is SEND
          minimum: 0
          nullable: false
          type: number
        contractJSON:
          $ref: '#/components/schemas/ContractJSON'
      required:
      - contractAddress
      - contractJSON
      - invocationType
      - methodName
      - params
      - web3SigningCredential
      type: object
    InvokeContractV1Response:
      example:
        transactionReceipt:
          blockHash: blockHash
          gasUsed: 1.4658129805029452
          blockNumber: 6.027456183070403
          contractAddress: contractAddress
          transactionIndex: 0.8008281904610115
          from: from
          to: to
          transactionHash: transactionHash
          status: true
        callOutput: ""
        success: true
      properties:
        transactionReceipt:
          $ref: '#/components/schemas/Web3TransactionReceipt'
        callOutput: {}
        success:
          nullable: false
          type: boolean
      required:
      - success
      type: object
    PrometheusExporterMetricsResponse:
      nullable: false
      type: string
    DeployRequestBaseV1:
      properties:
        contractJSON:
          $ref: '#/components/schemas/ContractJSON'
        constructorArgs:
          default: []
          items: {}
          type: array
        web3SigningCredential:
          $ref: '#/components/schemas/Web3SigningCredential'
        gas:
          $ref: '#/components/schemas/XdaiTransactionConfig_from'
        gasPrice:
          $ref: '#/components/schemas/XdaiTransactionConfig_from'
        timeoutMs:
          default: 60000
          description: The amount of milliseconds to wait for a transaction receipt
            with theaddress of the contract(which indicates successful deployment)
            beforegiving up and crashing.
          minimum: 0
          nullable: false
          type: number
      required:
      - contractJSON
      - web3SigningCredential
      type: object
    InvokeRequestBaseV1:
      additionalProperties: false
      properties:
        contractAddress:
          description: Address of the solidity contract
          nullable: false
          type: string
        web3SigningCredential:
          $ref: '#/components/schemas/Web3SigningCredential'
        invocationType:
          $ref: '#/components/schemas/EthContractInvocationType'
        methodName:
          description: The name of the contract method to invoke.
          maxLength: 2048
          minLength: 1
          nullable: false
          type: string
        params:
          default: []
          description: The list of arguments to pass in to the contract method being
            invoked.
          items: {}
          type: array
        value:
          $ref: '#/components/schemas/XdaiTransactionConfig_from'
        gas:
          $ref: '#/components/schemas/XdaiTransactionConfig_from'
        gasPrice:
          $ref: '#/components/schemas/XdaiTransactionConfig_from'
        nonce:
          type: number
        timeoutMs:
          default: 60000
          description: The amount of milliseconds to wait for a transaction receipt
            beforegiving up and crashing. Only has any effect if the invocation type
            is SEND
          minimum: 0
          nullable: false
          type: number
        contractJSON:
          $ref: '#/components/schemas/ContractJSON'
      required:
      - contractAddress
      - contractJSON
      - invocationType
      - methodName
      - params
      - web3SigningCredential
      type: object
    SolidityContractJsonArtifact_compiler:
      additionalProperties: true
      properties:
        name:
          type: string
        version:
          type: string
      type: object
    SolidityContractJsonArtifact_gasEstimates_creation:
      properties:
        codeDepositCost:
          type: string
        executionCost:
          type: string
        totalCost:
          type: string
      type: object
    SolidityContractJsonArtifact_gasEstimates:
      properties:
        creation:
          $ref: '#/components/schemas/SolidityContractJsonArtifact_gasEstimates_creation'
        external:
          additionalProperties: true
          type: object
    XdaiTransactionConfig_from:
      oneOf:
      - type: string
      - type: number
    XdaiTransactionConfig_to:
      oneOf:
      - type: string
