/*
Hyperledger Cactus Plugin - Consortium Web Service

Manage a Cactus consortium through the APIs. Needs administrative privileges.

API version: 2.0.0-rc.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-consortium-manual

import (
	"encoding/json"
)

// checks if the GetNodeJwsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetNodeJwsResponse{}

// GetNodeJwsResponse struct for GetNodeJwsResponse
type GetNodeJwsResponse struct {
	Jws JWSGeneral `json:"jws"`
}

// NewGetNodeJwsResponse instantiates a new GetNodeJwsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetNodeJwsResponse(jws JWSGeneral) *GetNodeJwsResponse {
	this := GetNodeJwsResponse{}
	this.Jws = jws
	return &this
}

// NewGetNodeJwsResponseWithDefaults instantiates a new GetNodeJwsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetNodeJwsResponseWithDefaults() *GetNodeJwsResponse {
	this := GetNodeJwsResponse{}
	return &this
}

// GetJws returns the Jws field value
func (o *GetNodeJwsResponse) GetJws() JWSGeneral {
	if o == nil {
		var ret JWSGeneral
		return ret
	}

	return o.Jws
}

// GetJwsOk returns a tuple with the Jws field value
// and a boolean to check if the value has been set.
func (o *GetNodeJwsResponse) GetJwsOk() (*JWSGeneral, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Jws, true
}

// SetJws sets field value
func (o *GetNodeJwsResponse) SetJws(v JWSGeneral) {
	o.Jws = v
}

func (o GetNodeJwsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetNodeJwsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["jws"] = o.Jws
	return toSerialize, nil
}

type NullableGetNodeJwsResponse struct {
	value *GetNodeJwsResponse
	isSet bool
}

func (v NullableGetNodeJwsResponse) Get() *GetNodeJwsResponse {
	return v.value
}

func (v *NullableGetNodeJwsResponse) Set(val *GetNodeJwsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetNodeJwsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetNodeJwsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetNodeJwsResponse(val *GetNodeJwsResponse) *NullableGetNodeJwsResponse {
	return &NullableGetNodeJwsResponse{value: val, isSet: true}
}

func (v NullableGetNodeJwsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetNodeJwsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


