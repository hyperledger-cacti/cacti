/* tslint:disable */
/* eslint-disable */
/**
 * Hyperledger Cactus Plugin - Consortium Web Service
 * Manage a Cactus consortium through the APIs. Needs administrative priviliges.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GetConsortiumJwsResponse
 */
export interface GetConsortiumJwsResponse {
    /**
     * 
     * @type {JWSGeneral}
     * @memberof GetConsortiumJwsResponse
     */
    jws: JWSGeneral;
}
/**
 * 
 * @export
 * @interface GetNodeJwsResponse
 */
export interface GetNodeJwsResponse {
    /**
     * 
     * @type {JWSGeneral}
     * @memberof GetNodeJwsResponse
     */
    jws: JWSGeneral;
}
/**
 * 
 * @export
 * @interface JWSGeneral
 */
export interface JWSGeneral {
    /**
     * 
     * @type {string}
     * @memberof JWSGeneral
     */
    payload: string;
    /**
     * 
     * @type {Array<JWSRecipient>}
     * @memberof JWSGeneral
     */
    signatures: Array<JWSRecipient>;
}
/**
 * A JSON Web Signature. See: https://tools.ietf.org/html/rfc7515 for info about standard.
 * @export
 * @interface JWSRecipient
 */
export interface JWSRecipient {
    /**
     * 
     * @type {string}
     * @memberof JWSRecipient
     */
    signature: string;
    /**
     * 
     * @type {string}
     * @memberof JWSRecipient
     */
    protected?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof JWSRecipient
     */
    header?: { [key: string]: object; };
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The JWS asserting the consortium metadata (pub keys and hosts of nodes)
         * @summary Retrieves a consortium JWS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PluginsHyperledgerCactusPluginConsortiumManualConsortiumJwsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-consortium-manual/consortium/jws`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves the JWT of a Cactus Node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PluginsHyperledgerCactusPluginConsortiumManualNodeJwsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-consortium-manual/node/jws`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * The JWS asserting the consortium metadata (pub keys and hosts of nodes)
         * @summary Retrieves a consortium JWS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PluginsHyperledgerCactusPluginConsortiumManualConsortiumJwsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetConsortiumJwsResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiV1PluginsHyperledgerCactusPluginConsortiumManualConsortiumJwsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves the JWT of a Cactus Node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PluginsHyperledgerCactusPluginConsortiumManualNodeJwsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNodeJwsResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiV1PluginsHyperledgerCactusPluginConsortiumManualNodeJwsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * The JWS asserting the consortium metadata (pub keys and hosts of nodes)
         * @summary Retrieves a consortium JWS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PluginsHyperledgerCactusPluginConsortiumManualConsortiumJwsGet(options?: any): AxiosPromise<GetConsortiumJwsResponse> {
            return DefaultApiFp(configuration).apiV1PluginsHyperledgerCactusPluginConsortiumManualConsortiumJwsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieves the JWT of a Cactus Node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PluginsHyperledgerCactusPluginConsortiumManualNodeJwsGet(options?: any): AxiosPromise<GetNodeJwsResponse> {
            return DefaultApiFp(configuration).apiV1PluginsHyperledgerCactusPluginConsortiumManualNodeJwsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * The JWS asserting the consortium metadata (pub keys and hosts of nodes)
     * @summary Retrieves a consortium JWS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PluginsHyperledgerCactusPluginConsortiumManualConsortiumJwsGet(options?: any) {
        return DefaultApiFp(this.configuration).apiV1PluginsHyperledgerCactusPluginConsortiumManualConsortiumJwsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieves the JWT of a Cactus Node
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PluginsHyperledgerCactusPluginConsortiumManualNodeJwsGet(options?: any) {
        return DefaultApiFp(this.configuration).apiV1PluginsHyperledgerCactusPluginConsortiumManualNodeJwsGet(options).then((request) => request(this.axios, this.basePath));
    }
}


