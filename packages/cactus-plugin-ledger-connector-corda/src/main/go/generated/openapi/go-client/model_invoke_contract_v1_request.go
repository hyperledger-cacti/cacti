/*
Hyperledger Cacti Plugin - Connector Corda

Can perform basic tasks on a Corda ledger

API version: 2.0.0-rc.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-corda

import (
	"encoding/json"
)

// checks if the InvokeContractV1Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvokeContractV1Request{}

// InvokeContractV1Request struct for InvokeContractV1Request
type InvokeContractV1Request struct {
	// The fully qualified name of the Corda flow to invoke
	FlowFullClassName string `json:"flowFullClassName"`
	FlowInvocationType FlowInvocationType `json:"flowInvocationType"`
	// The list of arguments to pass in to the contract method being invoked.
	Params []JvmObject `json:"params"`
	// The amount of milliseconds to wait for a transaction receipt beforegiving up and crashing.
	TimeoutMs *int32 `json:"timeoutMs,omitempty"`
}

// NewInvokeContractV1Request instantiates a new InvokeContractV1Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvokeContractV1Request(flowFullClassName string, flowInvocationType FlowInvocationType, params []JvmObject) *InvokeContractV1Request {
	this := InvokeContractV1Request{}
	this.FlowFullClassName = flowFullClassName
	this.FlowInvocationType = flowInvocationType
	this.Params = params
	var timeoutMs int32 = 60000
	this.TimeoutMs = &timeoutMs
	return &this
}

// NewInvokeContractV1RequestWithDefaults instantiates a new InvokeContractV1Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvokeContractV1RequestWithDefaults() *InvokeContractV1Request {
	this := InvokeContractV1Request{}
	var timeoutMs int32 = 60000
	this.TimeoutMs = &timeoutMs
	return &this
}

// GetFlowFullClassName returns the FlowFullClassName field value
func (o *InvokeContractV1Request) GetFlowFullClassName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FlowFullClassName
}

// GetFlowFullClassNameOk returns a tuple with the FlowFullClassName field value
// and a boolean to check if the value has been set.
func (o *InvokeContractV1Request) GetFlowFullClassNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlowFullClassName, true
}

// SetFlowFullClassName sets field value
func (o *InvokeContractV1Request) SetFlowFullClassName(v string) {
	o.FlowFullClassName = v
}

// GetFlowInvocationType returns the FlowInvocationType field value
func (o *InvokeContractV1Request) GetFlowInvocationType() FlowInvocationType {
	if o == nil {
		var ret FlowInvocationType
		return ret
	}

	return o.FlowInvocationType
}

// GetFlowInvocationTypeOk returns a tuple with the FlowInvocationType field value
// and a boolean to check if the value has been set.
func (o *InvokeContractV1Request) GetFlowInvocationTypeOk() (*FlowInvocationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlowInvocationType, true
}

// SetFlowInvocationType sets field value
func (o *InvokeContractV1Request) SetFlowInvocationType(v FlowInvocationType) {
	o.FlowInvocationType = v
}

// GetParams returns the Params field value
func (o *InvokeContractV1Request) GetParams() []JvmObject {
	if o == nil {
		var ret []JvmObject
		return ret
	}

	return o.Params
}

// GetParamsOk returns a tuple with the Params field value
// and a boolean to check if the value has been set.
func (o *InvokeContractV1Request) GetParamsOk() ([]JvmObject, bool) {
	if o == nil {
		return nil, false
	}
	return o.Params, true
}

// SetParams sets field value
func (o *InvokeContractV1Request) SetParams(v []JvmObject) {
	o.Params = v
}

// GetTimeoutMs returns the TimeoutMs field value if set, zero value otherwise.
func (o *InvokeContractV1Request) GetTimeoutMs() int32 {
	if o == nil || IsNil(o.TimeoutMs) {
		var ret int32
		return ret
	}
	return *o.TimeoutMs
}

// GetTimeoutMsOk returns a tuple with the TimeoutMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvokeContractV1Request) GetTimeoutMsOk() (*int32, bool) {
	if o == nil || IsNil(o.TimeoutMs) {
		return nil, false
	}
	return o.TimeoutMs, true
}

// HasTimeoutMs returns a boolean if a field has been set.
func (o *InvokeContractV1Request) HasTimeoutMs() bool {
	if o != nil && !IsNil(o.TimeoutMs) {
		return true
	}

	return false
}

// SetTimeoutMs gets a reference to the given int32 and assigns it to the TimeoutMs field.
func (o *InvokeContractV1Request) SetTimeoutMs(v int32) {
	o.TimeoutMs = &v
}

func (o InvokeContractV1Request) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvokeContractV1Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["flowFullClassName"] = o.FlowFullClassName
	toSerialize["flowInvocationType"] = o.FlowInvocationType
	toSerialize["params"] = o.Params
	if !IsNil(o.TimeoutMs) {
		toSerialize["timeoutMs"] = o.TimeoutMs
	}
	return toSerialize, nil
}

type NullableInvokeContractV1Request struct {
	value *InvokeContractV1Request
	isSet bool
}

func (v NullableInvokeContractV1Request) Get() *InvokeContractV1Request {
	return v.value
}

func (v *NullableInvokeContractV1Request) Set(val *InvokeContractV1Request) {
	v.value = val
	v.isSet = true
}

func (v NullableInvokeContractV1Request) IsSet() bool {
	return v.isSet
}

func (v *NullableInvokeContractV1Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvokeContractV1Request(val *InvokeContractV1Request) *NullableInvokeContractV1Request {
	return &NullableInvokeContractV1Request{value: val, isSet: true}
}

func (v NullableInvokeContractV1Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvokeContractV1Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


