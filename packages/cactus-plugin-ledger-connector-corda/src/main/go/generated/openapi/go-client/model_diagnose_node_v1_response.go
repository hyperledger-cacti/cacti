/*
Hyperledger Cacti Plugin - Connector Corda

Can perform basic tasks on a Corda ledger

API version: 2.0.0-rc.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-corda

import (
	"encoding/json"
)

// checks if the DiagnoseNodeV1Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiagnoseNodeV1Response{}

// DiagnoseNodeV1Response struct for DiagnoseNodeV1Response
type DiagnoseNodeV1Response struct {
	NodeDiagnosticInfo NodeDiagnosticInfo `json:"nodeDiagnosticInfo"`
}

// NewDiagnoseNodeV1Response instantiates a new DiagnoseNodeV1Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiagnoseNodeV1Response(nodeDiagnosticInfo NodeDiagnosticInfo) *DiagnoseNodeV1Response {
	this := DiagnoseNodeV1Response{}
	this.NodeDiagnosticInfo = nodeDiagnosticInfo
	return &this
}

// NewDiagnoseNodeV1ResponseWithDefaults instantiates a new DiagnoseNodeV1Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiagnoseNodeV1ResponseWithDefaults() *DiagnoseNodeV1Response {
	this := DiagnoseNodeV1Response{}
	return &this
}

// GetNodeDiagnosticInfo returns the NodeDiagnosticInfo field value
func (o *DiagnoseNodeV1Response) GetNodeDiagnosticInfo() NodeDiagnosticInfo {
	if o == nil {
		var ret NodeDiagnosticInfo
		return ret
	}

	return o.NodeDiagnosticInfo
}

// GetNodeDiagnosticInfoOk returns a tuple with the NodeDiagnosticInfo field value
// and a boolean to check if the value has been set.
func (o *DiagnoseNodeV1Response) GetNodeDiagnosticInfoOk() (*NodeDiagnosticInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeDiagnosticInfo, true
}

// SetNodeDiagnosticInfo sets field value
func (o *DiagnoseNodeV1Response) SetNodeDiagnosticInfo(v NodeDiagnosticInfo) {
	o.NodeDiagnosticInfo = v
}

func (o DiagnoseNodeV1Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiagnoseNodeV1Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nodeDiagnosticInfo"] = o.NodeDiagnosticInfo
	return toSerialize, nil
}

type NullableDiagnoseNodeV1Response struct {
	value *DiagnoseNodeV1Response
	isSet bool
}

func (v NullableDiagnoseNodeV1Response) Get() *DiagnoseNodeV1Response {
	return v.value
}

func (v *NullableDiagnoseNodeV1Response) Set(val *DiagnoseNodeV1Response) {
	v.value = val
	v.isSet = true
}

func (v NullableDiagnoseNodeV1Response) IsSet() bool {
	return v.isSet
}

func (v *NullableDiagnoseNodeV1Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiagnoseNodeV1Response(val *DiagnoseNodeV1Response) *NullableDiagnoseNodeV1Response {
	return &NullableDiagnoseNodeV1Response{value: val, isSet: true}
}

func (v NullableDiagnoseNodeV1Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiagnoseNodeV1Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


