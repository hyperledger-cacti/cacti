/*
Hyperledger Cacti Plugin - Connector Corda

Can perform basic tasks on a Corda ledger

API version: 2.0.0-rc.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-corda

import (
	"encoding/json"
)

// checks if the ListCpiV1Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListCpiV1Request{}

// ListCpiV1Request struct for ListCpiV1Request
type ListCpiV1Request struct {
	Username string `json:"username"`
	Password string `json:"password"`
	RejectUnauthorized bool `json:"rejectUnauthorized"`
}

// NewListCpiV1Request instantiates a new ListCpiV1Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListCpiV1Request(username string, password string, rejectUnauthorized bool) *ListCpiV1Request {
	this := ListCpiV1Request{}
	this.Username = username
	this.Password = password
	this.RejectUnauthorized = rejectUnauthorized
	return &this
}

// NewListCpiV1RequestWithDefaults instantiates a new ListCpiV1Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListCpiV1RequestWithDefaults() *ListCpiV1Request {
	this := ListCpiV1Request{}
	return &this
}

// GetUsername returns the Username field value
func (o *ListCpiV1Request) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *ListCpiV1Request) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *ListCpiV1Request) SetUsername(v string) {
	o.Username = v
}

// GetPassword returns the Password field value
func (o *ListCpiV1Request) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *ListCpiV1Request) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *ListCpiV1Request) SetPassword(v string) {
	o.Password = v
}

// GetRejectUnauthorized returns the RejectUnauthorized field value
func (o *ListCpiV1Request) GetRejectUnauthorized() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RejectUnauthorized
}

// GetRejectUnauthorizedOk returns a tuple with the RejectUnauthorized field value
// and a boolean to check if the value has been set.
func (o *ListCpiV1Request) GetRejectUnauthorizedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RejectUnauthorized, true
}

// SetRejectUnauthorized sets field value
func (o *ListCpiV1Request) SetRejectUnauthorized(v bool) {
	o.RejectUnauthorized = v
}

func (o ListCpiV1Request) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListCpiV1Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	toSerialize["password"] = o.Password
	toSerialize["rejectUnauthorized"] = o.RejectUnauthorized
	return toSerialize, nil
}

type NullableListCpiV1Request struct {
	value *ListCpiV1Request
	isSet bool
}

func (v NullableListCpiV1Request) Get() *ListCpiV1Request {
	return v.value
}

func (v *NullableListCpiV1Request) Set(val *ListCpiV1Request) {
	v.value = val
	v.isSet = true
}

func (v NullableListCpiV1Request) IsSet() bool {
	return v.isSet
}

func (v *NullableListCpiV1Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListCpiV1Request(val *ListCpiV1Request) *NullableListCpiV1Request {
	return &NullableListCpiV1Request{value: val, isSet: true}
}

func (v NullableListCpiV1Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListCpiV1Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


