/*
Hyperledger Cacti Plugin - Connector Corda

Can perform basic tasks on a Corda ledger

API version: 2.0.0-rc.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-corda

import (
	"encoding/json"
)

// checks if the ListFlowsV1Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListFlowsV1Response{}

// ListFlowsV1Response struct for ListFlowsV1Response
type ListFlowsV1Response struct {
	// An array of strings storing the names of the flows as returned by the flowList Corda RPC.
	FlowNames []string `json:"flowNames"`
}

// NewListFlowsV1Response instantiates a new ListFlowsV1Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListFlowsV1Response(flowNames []string) *ListFlowsV1Response {
	this := ListFlowsV1Response{}
	this.FlowNames = flowNames
	return &this
}

// NewListFlowsV1ResponseWithDefaults instantiates a new ListFlowsV1Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListFlowsV1ResponseWithDefaults() *ListFlowsV1Response {
	this := ListFlowsV1Response{}
	return &this
}

// GetFlowNames returns the FlowNames field value
func (o *ListFlowsV1Response) GetFlowNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.FlowNames
}

// GetFlowNamesOk returns a tuple with the FlowNames field value
// and a boolean to check if the value has been set.
func (o *ListFlowsV1Response) GetFlowNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FlowNames, true
}

// SetFlowNames sets field value
func (o *ListFlowsV1Response) SetFlowNames(v []string) {
	o.FlowNames = v
}

func (o ListFlowsV1Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListFlowsV1Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["flowNames"] = o.FlowNames
	return toSerialize, nil
}

type NullableListFlowsV1Response struct {
	value *ListFlowsV1Response
	isSet bool
}

func (v NullableListFlowsV1Response) Get() *ListFlowsV1Response {
	return v.value
}

func (v *NullableListFlowsV1Response) Set(val *ListFlowsV1Response) {
	v.value = val
	v.isSet = true
}

func (v NullableListFlowsV1Response) IsSet() bool {
	return v.isSet
}

func (v *NullableListFlowsV1Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListFlowsV1Response(val *ListFlowsV1Response) *NullableListFlowsV1Response {
	return &NullableListFlowsV1Response{value: val, isSet: true}
}

func (v NullableListFlowsV1Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListFlowsV1Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


