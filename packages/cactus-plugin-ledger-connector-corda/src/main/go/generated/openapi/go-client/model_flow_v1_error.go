/*
Hyperledger Cacti Plugin - Connector Corda

Can perform basic tasks on a Corda ledger

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-corda

import (
	"encoding/json"
)

// checks if the FlowV1Error type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlowV1Error{}

// FlowV1Error struct for FlowV1Error
type FlowV1Error struct {
	Message string `json:"message"`
	Type string `json:"type"`
}

// NewFlowV1Error instantiates a new FlowV1Error object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlowV1Error(message string, type_ string) *FlowV1Error {
	this := FlowV1Error{}
	this.Message = message
	this.Type = type_
	return &this
}

// NewFlowV1ErrorWithDefaults instantiates a new FlowV1Error object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlowV1ErrorWithDefaults() *FlowV1Error {
	this := FlowV1Error{}
	return &this
}

// GetMessage returns the Message field value
func (o *FlowV1Error) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *FlowV1Error) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *FlowV1Error) SetMessage(v string) {
	o.Message = v
}

// GetType returns the Type field value
func (o *FlowV1Error) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FlowV1Error) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FlowV1Error) SetType(v string) {
	o.Type = v
}

func (o FlowV1Error) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlowV1Error) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableFlowV1Error struct {
	value *FlowV1Error
	isSet bool
}

func (v NullableFlowV1Error) Get() *FlowV1Error {
	return v.value
}

func (v *NullableFlowV1Error) Set(val *FlowV1Error) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowV1Error) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowV1Error) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowV1Error(val *FlowV1Error) *NullableFlowV1Error {
	return &NullableFlowV1Error{value: val, isSet: true}
}

func (v NullableFlowV1Error) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowV1Error) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


