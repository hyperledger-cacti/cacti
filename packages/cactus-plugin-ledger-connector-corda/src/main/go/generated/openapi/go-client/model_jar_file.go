/*
Hyperledger Cacti Plugin - Connector Corda

Can perform basic tasks on a Corda ledger

API version: 2.0.0-rc.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-corda

import (
	"encoding/json"
)

// checks if the JarFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JarFile{}

// JarFile struct for JarFile
type JarFile struct {
	Filename string `json:"filename"`
	// Indicates whether the cordapp jar in question contains any embedded migrations that Cactus can/should execute between copying the jar into the cordapp directory and starting the node back up.
	HasDbMigrations bool `json:"hasDbMigrations"`
	ContentBase64 string `json:"contentBase64"`
	AdditionalProperties map[string]interface{}
}

type _JarFile JarFile

// NewJarFile instantiates a new JarFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJarFile(filename string, hasDbMigrations bool, contentBase64 string) *JarFile {
	this := JarFile{}
	this.Filename = filename
	this.HasDbMigrations = hasDbMigrations
	this.ContentBase64 = contentBase64
	return &this
}

// NewJarFileWithDefaults instantiates a new JarFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJarFileWithDefaults() *JarFile {
	this := JarFile{}
	return &this
}

// GetFilename returns the Filename field value
func (o *JarFile) GetFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *JarFile) GetFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *JarFile) SetFilename(v string) {
	o.Filename = v
}

// GetHasDbMigrations returns the HasDbMigrations field value
func (o *JarFile) GetHasDbMigrations() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasDbMigrations
}

// GetHasDbMigrationsOk returns a tuple with the HasDbMigrations field value
// and a boolean to check if the value has been set.
func (o *JarFile) GetHasDbMigrationsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasDbMigrations, true
}

// SetHasDbMigrations sets field value
func (o *JarFile) SetHasDbMigrations(v bool) {
	o.HasDbMigrations = v
}

// GetContentBase64 returns the ContentBase64 field value
func (o *JarFile) GetContentBase64() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentBase64
}

// GetContentBase64Ok returns a tuple with the ContentBase64 field value
// and a boolean to check if the value has been set.
func (o *JarFile) GetContentBase64Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentBase64, true
}

// SetContentBase64 sets field value
func (o *JarFile) SetContentBase64(v string) {
	o.ContentBase64 = v
}

func (o JarFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JarFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filename"] = o.Filename
	toSerialize["hasDbMigrations"] = o.HasDbMigrations
	toSerialize["contentBase64"] = o.ContentBase64

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JarFile) UnmarshalJSON(bytes []byte) (err error) {
	varJarFile := _JarFile{}

	if err = json.Unmarshal(bytes, &varJarFile); err == nil {
		*o = JarFile(varJarFile)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "filename")
		delete(additionalProperties, "hasDbMigrations")
		delete(additionalProperties, "contentBase64")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJarFile struct {
	value *JarFile
	isSet bool
}

func (v NullableJarFile) Get() *JarFile {
	return v.value
}

func (v *NullableJarFile) Set(val *JarFile) {
	v.value = val
	v.isSet = true
}

func (v NullableJarFile) IsSet() bool {
	return v.isSet
}

func (v *NullableJarFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJarFile(val *JarFile) *NullableJarFile {
	return &NullableJarFile{value: val, isSet: true}
}

func (v NullableJarFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJarFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


