/*
Hyperledger Cacti Plugin - Connector Corda

Can perform basic tasks on a Corda ledger

API version: 2.0.0-rc.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-corda

import (
	"encoding/json"
)

// checks if the JvmType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JvmType{}

// JvmType Represents a reference to a JVM type (such as a Java class)
type JvmType struct {
	FqClassName string `json:"fqClassName"`
	// This parameter is used to specify that the function used to construct this JvmType is not a constructor function but instead is a factory function. Setting this parameter will cause the plugin to look up methods of the class denoted by fqClassName instead of its constructors.
	ConstructorName *string `json:"constructorName,omitempty"`
	InvocationTarget *JvmObject `json:"invocationTarget,omitempty"`
}

// NewJvmType instantiates a new JvmType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJvmType(fqClassName string) *JvmType {
	this := JvmType{}
	this.FqClassName = fqClassName
	return &this
}

// NewJvmTypeWithDefaults instantiates a new JvmType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJvmTypeWithDefaults() *JvmType {
	this := JvmType{}
	return &this
}

// GetFqClassName returns the FqClassName field value
func (o *JvmType) GetFqClassName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FqClassName
}

// GetFqClassNameOk returns a tuple with the FqClassName field value
// and a boolean to check if the value has been set.
func (o *JvmType) GetFqClassNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FqClassName, true
}

// SetFqClassName sets field value
func (o *JvmType) SetFqClassName(v string) {
	o.FqClassName = v
}

// GetConstructorName returns the ConstructorName field value if set, zero value otherwise.
func (o *JvmType) GetConstructorName() string {
	if o == nil || IsNil(o.ConstructorName) {
		var ret string
		return ret
	}
	return *o.ConstructorName
}

// GetConstructorNameOk returns a tuple with the ConstructorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JvmType) GetConstructorNameOk() (*string, bool) {
	if o == nil || IsNil(o.ConstructorName) {
		return nil, false
	}
	return o.ConstructorName, true
}

// HasConstructorName returns a boolean if a field has been set.
func (o *JvmType) HasConstructorName() bool {
	if o != nil && !IsNil(o.ConstructorName) {
		return true
	}

	return false
}

// SetConstructorName gets a reference to the given string and assigns it to the ConstructorName field.
func (o *JvmType) SetConstructorName(v string) {
	o.ConstructorName = &v
}

// GetInvocationTarget returns the InvocationTarget field value if set, zero value otherwise.
func (o *JvmType) GetInvocationTarget() JvmObject {
	if o == nil || IsNil(o.InvocationTarget) {
		var ret JvmObject
		return ret
	}
	return *o.InvocationTarget
}

// GetInvocationTargetOk returns a tuple with the InvocationTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JvmType) GetInvocationTargetOk() (*JvmObject, bool) {
	if o == nil || IsNil(o.InvocationTarget) {
		return nil, false
	}
	return o.InvocationTarget, true
}

// HasInvocationTarget returns a boolean if a field has been set.
func (o *JvmType) HasInvocationTarget() bool {
	if o != nil && !IsNil(o.InvocationTarget) {
		return true
	}

	return false
}

// SetInvocationTarget gets a reference to the given JvmObject and assigns it to the InvocationTarget field.
func (o *JvmType) SetInvocationTarget(v JvmObject) {
	o.InvocationTarget = &v
}

func (o JvmType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JvmType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fqClassName"] = o.FqClassName
	if !IsNil(o.ConstructorName) {
		toSerialize["constructorName"] = o.ConstructorName
	}
	if !IsNil(o.InvocationTarget) {
		toSerialize["invocationTarget"] = o.InvocationTarget
	}
	return toSerialize, nil
}

type NullableJvmType struct {
	value *JvmType
	isSet bool
}

func (v NullableJvmType) Get() *JvmType {
	return v.value
}

func (v *NullableJvmType) Set(val *JvmType) {
	v.value = val
	v.isSet = true
}

func (v NullableJvmType) IsSet() bool {
	return v.isSet
}

func (v *NullableJvmType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJvmType(val *JvmType) *NullableJvmType {
	return &NullableJvmType{value: val, isSet: true}
}

func (v NullableJvmType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJvmType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


