/*
Hyperledger Cacti Plugin - Connector Corda

Can perform basic tasks on a Corda ledger

API version: 2.0.0-rc.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-corda

import (
	"encoding/json"
	"fmt"
)

// FlowInvocationType Determines which flow starting method will be used on the back-end when invoking the flow. Based on the value here the plugin back-end might invoke the rpc.startFlowDynamic() method or the rpc.startTrackedFlowDynamic() method. Streamed responses are aggregated and returned in a single response to HTTP callers who are not equipped to handle streams like WebSocket/gRPC/etc. do.
type FlowInvocationType string

// List of FlowInvocationType
const (
	TRACKED_FLOW_DYNAMIC FlowInvocationType = "TRACKED_FLOW_DYNAMIC"
	FLOW_DYNAMIC FlowInvocationType = "FLOW_DYNAMIC"
)

// All allowed values of FlowInvocationType enum
var AllowedFlowInvocationTypeEnumValues = []FlowInvocationType{
	"TRACKED_FLOW_DYNAMIC",
	"FLOW_DYNAMIC",
}

func (v *FlowInvocationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FlowInvocationType(value)
	for _, existing := range AllowedFlowInvocationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FlowInvocationType", value)
}

// NewFlowInvocationTypeFromValue returns a pointer to a valid FlowInvocationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFlowInvocationTypeFromValue(v string) (*FlowInvocationType, error) {
	ev := FlowInvocationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FlowInvocationType: valid values are %v", v, AllowedFlowInvocationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FlowInvocationType) IsValid() bool {
	for _, existing := range AllowedFlowInvocationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FlowInvocationType value
func (v FlowInvocationType) Ptr() *FlowInvocationType {
	return &v
}

type NullableFlowInvocationType struct {
	value *FlowInvocationType
	isSet bool
}

func (v NullableFlowInvocationType) Get() *FlowInvocationType {
	return v.value
}

func (v *NullableFlowInvocationType) Set(val *FlowInvocationType) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowInvocationType) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowInvocationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowInvocationType(val *FlowInvocationType) *NullableFlowInvocationType {
	return &NullableFlowInvocationType{value: val, isSet: true}
}

func (v NullableFlowInvocationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowInvocationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

