/*
Hyperledger Cacti Plugin - Connector Corda

Can perform basic tasks on a Corda ledger

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-ledger-connector-corda

import (
	"encoding/json"
)

// checks if the VaultQueryV1Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VaultQueryV1Request{}

// VaultQueryV1Request struct for VaultQueryV1Request
type VaultQueryV1Request struct {
	// Valid, fully qualified JVM class name which will be fed into Class.forName(...)
	ContractStateType *string `json:"contractStateType,omitempty"`
}

// NewVaultQueryV1Request instantiates a new VaultQueryV1Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVaultQueryV1Request() *VaultQueryV1Request {
	this := VaultQueryV1Request{}
	return &this
}

// NewVaultQueryV1RequestWithDefaults instantiates a new VaultQueryV1Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVaultQueryV1RequestWithDefaults() *VaultQueryV1Request {
	this := VaultQueryV1Request{}
	return &this
}

// GetContractStateType returns the ContractStateType field value if set, zero value otherwise.
func (o *VaultQueryV1Request) GetContractStateType() string {
	if o == nil || IsNil(o.ContractStateType) {
		var ret string
		return ret
	}
	return *o.ContractStateType
}

// GetContractStateTypeOk returns a tuple with the ContractStateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultQueryV1Request) GetContractStateTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContractStateType) {
		return nil, false
	}
	return o.ContractStateType, true
}

// HasContractStateType returns a boolean if a field has been set.
func (o *VaultQueryV1Request) HasContractStateType() bool {
	if o != nil && !IsNil(o.ContractStateType) {
		return true
	}

	return false
}

// SetContractStateType gets a reference to the given string and assigns it to the ContractStateType field.
func (o *VaultQueryV1Request) SetContractStateType(v string) {
	o.ContractStateType = &v
}

func (o VaultQueryV1Request) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VaultQueryV1Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContractStateType) {
		toSerialize["contractStateType"] = o.ContractStateType
	}
	return toSerialize, nil
}

type NullableVaultQueryV1Request struct {
	value *VaultQueryV1Request
	isSet bool
}

func (v NullableVaultQueryV1Request) Get() *VaultQueryV1Request {
	return v.value
}

func (v *NullableVaultQueryV1Request) Set(val *VaultQueryV1Request) {
	v.value = val
	v.isSet = true
}

func (v NullableVaultQueryV1Request) IsSet() bool {
	return v.isSet
}

func (v *NullableVaultQueryV1Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVaultQueryV1Request(val *VaultQueryV1Request) *NullableVaultQueryV1Request {
	return &NullableVaultQueryV1Request{value: val, isSet: true}
}

func (v NullableVaultQueryV1Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVaultQueryV1Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


