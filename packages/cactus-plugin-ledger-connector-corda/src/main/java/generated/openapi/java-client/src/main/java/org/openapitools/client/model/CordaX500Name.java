/*
 * Hyperledger Cactus Plugin - Connector Corda
 * Can perform basic tasks on a Corda ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.X500Principal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CordaX500Name
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CordaX500Name {
  public static final String SERIALIZED_NAME_COMMON_NAME = "commonName";
  @SerializedName(SERIALIZED_NAME_COMMON_NAME)
  private String commonName;

  public static final String SERIALIZED_NAME_ORGANISATION_UNIT = "organisationUnit";
  @SerializedName(SERIALIZED_NAME_ORGANISATION_UNIT)
  private String organisationUnit;

  public static final String SERIALIZED_NAME_ORGANISATION = "organisation";
  @SerializedName(SERIALIZED_NAME_ORGANISATION)
  private String organisation;

  public static final String SERIALIZED_NAME_LOCALITY = "locality";
  @SerializedName(SERIALIZED_NAME_LOCALITY)
  private String locality;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_X500_PRINCIPAL = "x500Principal";
  @SerializedName(SERIALIZED_NAME_X500_PRINCIPAL)
  private X500Principal x500Principal;

  public CordaX500Name() {
  }

  public CordaX500Name commonName(String commonName) {
    
    this.commonName = commonName;
    return this;
  }

   /**
   * Get commonName
   * @return commonName
  **/
  @javax.annotation.Nullable
  public String getCommonName() {
    return commonName;
  }


  public void setCommonName(String commonName) {
    this.commonName = commonName;
  }


  public CordaX500Name organisationUnit(String organisationUnit) {
    
    this.organisationUnit = organisationUnit;
    return this;
  }

   /**
   * Get organisationUnit
   * @return organisationUnit
  **/
  @javax.annotation.Nullable
  public String getOrganisationUnit() {
    return organisationUnit;
  }


  public void setOrganisationUnit(String organisationUnit) {
    this.organisationUnit = organisationUnit;
  }


  public CordaX500Name organisation(String organisation) {
    
    this.organisation = organisation;
    return this;
  }

   /**
   * Get organisation
   * @return organisation
  **/
  @javax.annotation.Nonnull
  public String getOrganisation() {
    return organisation;
  }


  public void setOrganisation(String organisation) {
    this.organisation = organisation;
  }


  public CordaX500Name locality(String locality) {
    
    this.locality = locality;
    return this;
  }

   /**
   * Get locality
   * @return locality
  **/
  @javax.annotation.Nonnull
  public String getLocality() {
    return locality;
  }


  public void setLocality(String locality) {
    this.locality = locality;
  }


  public CordaX500Name state(String state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }


  public void setState(String state) {
    this.state = state;
  }


  public CordaX500Name country(String country) {
    
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nonnull
  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    this.country = country;
  }


  public CordaX500Name x500Principal(X500Principal x500Principal) {
    
    this.x500Principal = x500Principal;
    return this;
  }

   /**
   * Get x500Principal
   * @return x500Principal
  **/
  @javax.annotation.Nonnull
  public X500Principal getX500Principal() {
    return x500Principal;
  }


  public void setX500Principal(X500Principal x500Principal) {
    this.x500Principal = x500Principal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CordaX500Name cordaX500Name = (CordaX500Name) o;
    return Objects.equals(this.commonName, cordaX500Name.commonName) &&
        Objects.equals(this.organisationUnit, cordaX500Name.organisationUnit) &&
        Objects.equals(this.organisation, cordaX500Name.organisation) &&
        Objects.equals(this.locality, cordaX500Name.locality) &&
        Objects.equals(this.state, cordaX500Name.state) &&
        Objects.equals(this.country, cordaX500Name.country) &&
        Objects.equals(this.x500Principal, cordaX500Name.x500Principal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commonName, organisationUnit, organisation, locality, state, country, x500Principal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CordaX500Name {\n");
    sb.append("    commonName: ").append(toIndentedString(commonName)).append("\n");
    sb.append("    organisationUnit: ").append(toIndentedString(organisationUnit)).append("\n");
    sb.append("    organisation: ").append(toIndentedString(organisation)).append("\n");
    sb.append("    locality: ").append(toIndentedString(locality)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    x500Principal: ").append(toIndentedString(x500Principal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commonName");
    openapiFields.add("organisationUnit");
    openapiFields.add("organisation");
    openapiFields.add("locality");
    openapiFields.add("state");
    openapiFields.add("country");
    openapiFields.add("x500Principal");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("organisation");
    openapiRequiredFields.add("locality");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("x500Principal");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CordaX500Name
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CordaX500Name.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CordaX500Name is not found in the empty JSON string", CordaX500Name.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CordaX500Name.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CordaX500Name` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CordaX500Name.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("commonName") != null && !jsonObj.get("commonName").isJsonNull()) && !jsonObj.get("commonName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commonName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commonName").toString()));
      }
      if ((jsonObj.get("organisationUnit") != null && !jsonObj.get("organisationUnit").isJsonNull()) && !jsonObj.get("organisationUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organisationUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organisationUnit").toString()));
      }
      if (!jsonObj.get("organisation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organisation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organisation").toString()));
      }
      if (!jsonObj.get("locality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locality").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      // validate the required field `x500Principal`
      X500Principal.validateJsonObject(jsonObj.getAsJsonObject("x500Principal"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CordaX500Name.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CordaX500Name' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CordaX500Name> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CordaX500Name.class));

       return (TypeAdapter<T>) new TypeAdapter<CordaX500Name>() {
           @Override
           public void write(JsonWriter out, CordaX500Name value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CordaX500Name read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CordaX500Name given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CordaX500Name
  * @throws IOException if the JSON string is invalid with respect to CordaX500Name
  */
  public static CordaX500Name fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CordaX500Name.class);
  }

 /**
  * Convert an instance of CordaX500Name to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

