/*
 * Hyperledger Cactus Plugin - Connector Corda
 * Can perform basic tasks on a Corda ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.NetworkHostAndPort;
import org.openapitools.client.model.Party;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NodeInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NodeInfo {
  public static final String SERIALIZED_NAME_ADDRESSES = "addresses";
  @SerializedName(SERIALIZED_NAME_ADDRESSES)
  private List<NetworkHostAndPort> addresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLATFORM_VERSION = "platformVersion";
  @SerializedName(SERIALIZED_NAME_PLATFORM_VERSION)
  private Integer platformVersion;

  public static final String SERIALIZED_NAME_SERIAL = "serial";
  @SerializedName(SERIALIZED_NAME_SERIAL)
  private BigDecimal serial;

  public static final String SERIALIZED_NAME_LEGAL_IDENTITIES = "legalIdentities";
  @SerializedName(SERIALIZED_NAME_LEGAL_IDENTITIES)
  private List<Party> legalIdentities = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEGAL_IDENTITIES_AND_CERTS = "legalIdentitiesAndCerts";
  @SerializedName(SERIALIZED_NAME_LEGAL_IDENTITIES_AND_CERTS)
  private List<Object> legalIdentitiesAndCerts = new ArrayList<>();

  public NodeInfo() {
  }

  public NodeInfo addresses(List<NetworkHostAndPort> addresses) {
    
    this.addresses = addresses;
    return this;
  }

  public NodeInfo addAddressesItem(NetworkHostAndPort addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

   /**
   * Get addresses
   * @return addresses
  **/
  @javax.annotation.Nonnull
  public List<NetworkHostAndPort> getAddresses() {
    return addresses;
  }


  public void setAddresses(List<NetworkHostAndPort> addresses) {
    this.addresses = addresses;
  }


  public NodeInfo platformVersion(Integer platformVersion) {
    
    this.platformVersion = platformVersion;
    return this;
  }

   /**
   * Get platformVersion
   * @return platformVersion
  **/
  @javax.annotation.Nonnull
  public Integer getPlatformVersion() {
    return platformVersion;
  }


  public void setPlatformVersion(Integer platformVersion) {
    this.platformVersion = platformVersion;
  }


  public NodeInfo serial(BigDecimal serial) {
    
    this.serial = serial;
    return this;
  }

   /**
   * Get serial
   * @return serial
  **/
  @javax.annotation.Nonnull
  public BigDecimal getSerial() {
    return serial;
  }


  public void setSerial(BigDecimal serial) {
    this.serial = serial;
  }


  public NodeInfo legalIdentities(List<Party> legalIdentities) {
    
    this.legalIdentities = legalIdentities;
    return this;
  }

  public NodeInfo addLegalIdentitiesItem(Party legalIdentitiesItem) {
    if (this.legalIdentities == null) {
      this.legalIdentities = new ArrayList<>();
    }
    this.legalIdentities.add(legalIdentitiesItem);
    return this;
  }

   /**
   * Get legalIdentities
   * @return legalIdentities
  **/
  @javax.annotation.Nonnull
  public List<Party> getLegalIdentities() {
    return legalIdentities;
  }


  public void setLegalIdentities(List<Party> legalIdentities) {
    this.legalIdentities = legalIdentities;
  }


  public NodeInfo legalIdentitiesAndCerts(List<Object> legalIdentitiesAndCerts) {
    
    this.legalIdentitiesAndCerts = legalIdentitiesAndCerts;
    return this;
  }

  public NodeInfo addLegalIdentitiesAndCertsItem(Object legalIdentitiesAndCertsItem) {
    if (this.legalIdentitiesAndCerts == null) {
      this.legalIdentitiesAndCerts = new ArrayList<>();
    }
    this.legalIdentitiesAndCerts.add(legalIdentitiesAndCertsItem);
    return this;
  }

   /**
   * Get legalIdentitiesAndCerts
   * @return legalIdentitiesAndCerts
  **/
  @javax.annotation.Nonnull
  public List<Object> getLegalIdentitiesAndCerts() {
    return legalIdentitiesAndCerts;
  }


  public void setLegalIdentitiesAndCerts(List<Object> legalIdentitiesAndCerts) {
    this.legalIdentitiesAndCerts = legalIdentitiesAndCerts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeInfo nodeInfo = (NodeInfo) o;
    return Objects.equals(this.addresses, nodeInfo.addresses) &&
        Objects.equals(this.platformVersion, nodeInfo.platformVersion) &&
        Objects.equals(this.serial, nodeInfo.serial) &&
        Objects.equals(this.legalIdentities, nodeInfo.legalIdentities) &&
        Objects.equals(this.legalIdentitiesAndCerts, nodeInfo.legalIdentitiesAndCerts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addresses, platformVersion, serial, legalIdentities, legalIdentitiesAndCerts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeInfo {\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    platformVersion: ").append(toIndentedString(platformVersion)).append("\n");
    sb.append("    serial: ").append(toIndentedString(serial)).append("\n");
    sb.append("    legalIdentities: ").append(toIndentedString(legalIdentities)).append("\n");
    sb.append("    legalIdentitiesAndCerts: ").append(toIndentedString(legalIdentitiesAndCerts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addresses");
    openapiFields.add("platformVersion");
    openapiFields.add("serial");
    openapiFields.add("legalIdentities");
    openapiFields.add("legalIdentitiesAndCerts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("addresses");
    openapiRequiredFields.add("platformVersion");
    openapiRequiredFields.add("serial");
    openapiRequiredFields.add("legalIdentities");
    openapiRequiredFields.add("legalIdentitiesAndCerts");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NodeInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NodeInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NodeInfo is not found in the empty JSON string", NodeInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!NodeInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NodeInfo` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NodeInfo.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("addresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `addresses` to be an array in the JSON string but got `%s`", jsonObj.get("addresses").toString()));
      }

      JsonArray jsonArrayaddresses = jsonObj.getAsJsonArray("addresses");
      // validate the required field `addresses` (array)
      for (int i = 0; i < jsonArrayaddresses.size(); i++) {
        NetworkHostAndPort.validateJsonObject(jsonArrayaddresses.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("legalIdentities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalIdentities` to be an array in the JSON string but got `%s`", jsonObj.get("legalIdentities").toString()));
      }

      JsonArray jsonArraylegalIdentities = jsonObj.getAsJsonArray("legalIdentities");
      // validate the required field `legalIdentities` (array)
      for (int i = 0; i < jsonArraylegalIdentities.size(); i++) {
        Party.validateJsonObject(jsonArraylegalIdentities.get(i).getAsJsonObject());
      };
      // ensure the required json array is present
      if (jsonObj.get("legalIdentitiesAndCerts") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("legalIdentitiesAndCerts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalIdentitiesAndCerts` to be an array in the JSON string but got `%s`", jsonObj.get("legalIdentitiesAndCerts").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NodeInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NodeInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NodeInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NodeInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<NodeInfo>() {
           @Override
           public void write(JsonWriter out, NodeInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NodeInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NodeInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NodeInfo
  * @throws IOException if the JSON string is invalid with respect to NodeInfo
  */
  public static NodeInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NodeInfo.class);
  }

 /**
  * Convert an instance of NodeInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

