/*
 * Hyperledger Cactus Plugin - Connector Corda
 * Can perform basic tasks on a Corda ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.SHA256;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A CordappInfo describes a single CorDapp currently installed on the node
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CordappInfo {
  public static final String SERIALIZED_NAME_JAR_HASH = "jarHash";
  @SerializedName(SERIALIZED_NAME_JAR_HASH)
  private SHA256 jarHash;

  public static final String SERIALIZED_NAME_LICENCE = "licence";
  @SerializedName(SERIALIZED_NAME_LICENCE)
  private String licence;

  public static final String SERIALIZED_NAME_MINIMUM_PLATFORM_VERSION = "minimumPlatformVersion";
  @SerializedName(SERIALIZED_NAME_MINIMUM_PLATFORM_VERSION)
  private Integer minimumPlatformVersion;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SHORT_NAME = "shortName";
  @SerializedName(SERIALIZED_NAME_SHORT_NAME)
  private String shortName;

  public static final String SERIALIZED_NAME_TARGET_PLATFORM_VERSION = "targetPlatformVersion";
  @SerializedName(SERIALIZED_NAME_TARGET_PLATFORM_VERSION)
  private Integer targetPlatformVersion;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VENDOR = "vendor";
  @SerializedName(SERIALIZED_NAME_VENDOR)
  private String vendor;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public CordappInfo() {
  }

  public CordappInfo jarHash(SHA256 jarHash) {
    
    this.jarHash = jarHash;
    return this;
  }

   /**
   * Get jarHash
   * @return jarHash
  **/
  @javax.annotation.Nonnull
  public SHA256 getJarHash() {
    return jarHash;
  }


  public void setJarHash(SHA256 jarHash) {
    this.jarHash = jarHash;
  }


  public CordappInfo licence(String licence) {
    
    this.licence = licence;
    return this;
  }

   /**
   * The name of the licence this CorDapp is released under
   * @return licence
  **/
  @javax.annotation.Nonnull
  public String getLicence() {
    return licence;
  }


  public void setLicence(String licence) {
    this.licence = licence;
  }


  public CordappInfo minimumPlatformVersion(Integer minimumPlatformVersion) {
    
    this.minimumPlatformVersion = minimumPlatformVersion;
    return this;
  }

   /**
   * The minimum platform version the node must be at for the CorDapp to run
   * @return minimumPlatformVersion
  **/
  @javax.annotation.Nonnull
  public Integer getMinimumPlatformVersion() {
    return minimumPlatformVersion;
  }


  public void setMinimumPlatformVersion(Integer minimumPlatformVersion) {
    this.minimumPlatformVersion = minimumPlatformVersion;
  }


  public CordappInfo name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the JAR file that defines the CorDapp
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CordappInfo shortName(String shortName) {
    
    this.shortName = shortName;
    return this;
  }

   /**
   * The name of the CorDapp
   * @return shortName
  **/
  @javax.annotation.Nonnull
  public String getShortName() {
    return shortName;
  }


  public void setShortName(String shortName) {
    this.shortName = shortName;
  }


  public CordappInfo targetPlatformVersion(Integer targetPlatformVersion) {
    
    this.targetPlatformVersion = targetPlatformVersion;
    return this;
  }

   /**
   * The target platform version this CorDapp has been tested against
   * @return targetPlatformVersion
  **/
  @javax.annotation.Nonnull
  public Integer getTargetPlatformVersion() {
    return targetPlatformVersion;
  }


  public void setTargetPlatformVersion(Integer targetPlatformVersion) {
    this.targetPlatformVersion = targetPlatformVersion;
  }


  public CordappInfo type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * A description of what sort of CorDapp this is - either a contract, workflow, or a combination.
   * @return type
  **/
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public CordappInfo vendor(String vendor) {
    
    this.vendor = vendor;
    return this;
  }

   /**
   * The vendor of this CorDapp
   * @return vendor
  **/
  @javax.annotation.Nonnull
  public String getVendor() {
    return vendor;
  }


  public void setVendor(String vendor) {
    this.vendor = vendor;
  }


  public CordappInfo version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * The version of this CorDapp
   * @return version
  **/
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CordappInfo cordappInfo = (CordappInfo) o;
    return Objects.equals(this.jarHash, cordappInfo.jarHash) &&
        Objects.equals(this.licence, cordappInfo.licence) &&
        Objects.equals(this.minimumPlatformVersion, cordappInfo.minimumPlatformVersion) &&
        Objects.equals(this.name, cordappInfo.name) &&
        Objects.equals(this.shortName, cordappInfo.shortName) &&
        Objects.equals(this.targetPlatformVersion, cordappInfo.targetPlatformVersion) &&
        Objects.equals(this.type, cordappInfo.type) &&
        Objects.equals(this.vendor, cordappInfo.vendor) &&
        Objects.equals(this.version, cordappInfo.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jarHash, licence, minimumPlatformVersion, name, shortName, targetPlatformVersion, type, vendor, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CordappInfo {\n");
    sb.append("    jarHash: ").append(toIndentedString(jarHash)).append("\n");
    sb.append("    licence: ").append(toIndentedString(licence)).append("\n");
    sb.append("    minimumPlatformVersion: ").append(toIndentedString(minimumPlatformVersion)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    shortName: ").append(toIndentedString(shortName)).append("\n");
    sb.append("    targetPlatformVersion: ").append(toIndentedString(targetPlatformVersion)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jarHash");
    openapiFields.add("licence");
    openapiFields.add("minimumPlatformVersion");
    openapiFields.add("name");
    openapiFields.add("shortName");
    openapiFields.add("targetPlatformVersion");
    openapiFields.add("type");
    openapiFields.add("vendor");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("jarHash");
    openapiRequiredFields.add("licence");
    openapiRequiredFields.add("minimumPlatformVersion");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("shortName");
    openapiRequiredFields.add("targetPlatformVersion");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("vendor");
    openapiRequiredFields.add("version");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CordappInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CordappInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CordappInfo is not found in the empty JSON string", CordappInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CordappInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CordappInfo` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CordappInfo.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("licence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licence").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("shortName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortName").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("vendor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor").toString()));
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CordappInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CordappInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CordappInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CordappInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<CordappInfo>() {
           @Override
           public void write(JsonWriter out, CordappInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CordappInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CordappInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CordappInfo
  * @throws IOException if the JSON string is invalid with respect to CordappInfo
  */
  public static CordappInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CordappInfo.class);
  }

 /**
  * Convert an instance of CordappInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

