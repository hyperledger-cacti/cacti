/*
 * Hyperledger Cactus Plugin - Connector Corda
 * Can perform basic tasks on a Corda ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CordaNodeSshCredentials
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CordaNodeSshCredentials {
  public static final String SERIALIZED_NAME_HOST_KEY_ENTRY = "hostKeyEntry";
  @SerializedName(SERIALIZED_NAME_HOST_KEY_ENTRY)
  private String hostKeyEntry;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public CordaNodeSshCredentials() {
  }

  public CordaNodeSshCredentials hostKeyEntry(String hostKeyEntry) {
    
    this.hostKeyEntry = hostKeyEntry;
    return this;
  }

   /**
   * Get hostKeyEntry
   * @return hostKeyEntry
  **/
  @javax.annotation.Nonnull
  public String getHostKeyEntry() {
    return hostKeyEntry;
  }


  public void setHostKeyEntry(String hostKeyEntry) {
    this.hostKeyEntry = hostKeyEntry;
  }


  public CordaNodeSshCredentials username(String username) {
    
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @javax.annotation.Nonnull
  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    this.username = username;
  }


  public CordaNodeSshCredentials password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/
  @javax.annotation.Nonnull
  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    this.password = password;
  }


  public CordaNodeSshCredentials hostname(String hostname) {
    
    this.hostname = hostname;
    return this;
  }

   /**
   * Get hostname
   * @return hostname
  **/
  @javax.annotation.Nonnull
  public String getHostname() {
    return hostname;
  }


  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public CordaNodeSshCredentials port(Integer port) {
    
    this.port = port;
    return this;
  }

   /**
   * Get port
   * minimum: 1
   * maximum: 65535
   * @return port
  **/
  @javax.annotation.Nonnull
  public Integer getPort() {
    return port;
  }


  public void setPort(Integer port) {
    this.port = port;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CordaNodeSshCredentials cordaNodeSshCredentials = (CordaNodeSshCredentials) o;
    return Objects.equals(this.hostKeyEntry, cordaNodeSshCredentials.hostKeyEntry) &&
        Objects.equals(this.username, cordaNodeSshCredentials.username) &&
        Objects.equals(this.password, cordaNodeSshCredentials.password) &&
        Objects.equals(this.hostname, cordaNodeSshCredentials.hostname) &&
        Objects.equals(this.port, cordaNodeSshCredentials.port);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostKeyEntry, username, password, hostname, port);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CordaNodeSshCredentials {\n");
    sb.append("    hostKeyEntry: ").append(toIndentedString(hostKeyEntry)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hostKeyEntry");
    openapiFields.add("username");
    openapiFields.add("password");
    openapiFields.add("hostname");
    openapiFields.add("port");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("hostKeyEntry");
    openapiRequiredFields.add("username");
    openapiRequiredFields.add("password");
    openapiRequiredFields.add("hostname");
    openapiRequiredFields.add("port");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CordaNodeSshCredentials
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CordaNodeSshCredentials.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CordaNodeSshCredentials is not found in the empty JSON string", CordaNodeSshCredentials.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CordaNodeSshCredentials.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CordaNodeSshCredentials` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CordaNodeSshCredentials.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("hostKeyEntry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostKeyEntry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostKeyEntry").toString()));
      }
      if (!jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if (!jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if (!jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CordaNodeSshCredentials.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CordaNodeSshCredentials' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CordaNodeSshCredentials> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CordaNodeSshCredentials.class));

       return (TypeAdapter<T>) new TypeAdapter<CordaNodeSshCredentials>() {
           @Override
           public void write(JsonWriter out, CordaNodeSshCredentials value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CordaNodeSshCredentials read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CordaNodeSshCredentials given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CordaNodeSshCredentials
  * @throws IOException if the JSON string is invalid with respect to CordaNodeSshCredentials
  */
  public static CordaNodeSshCredentials fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CordaNodeSshCredentials.class);
  }

 /**
  * Convert an instance of CordaNodeSshCredentials to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

