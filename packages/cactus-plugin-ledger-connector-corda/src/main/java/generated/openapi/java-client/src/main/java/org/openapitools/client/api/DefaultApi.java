/*
 * Hyperledger Cactus Plugin - Connector Corda
 * Can perform basic tasks on a Corda ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ClearMonitorTransactionsV1Request;
import org.openapitools.client.model.ClearMonitorTransactionsV1Response;
import org.openapitools.client.model.DeployContractJarsBadRequestV1Response;
import org.openapitools.client.model.DeployContractJarsSuccessV1Response;
import org.openapitools.client.model.DeployContractJarsV1Request;
import org.openapitools.client.model.DiagnoseNodeV1Request;
import org.openapitools.client.model.DiagnoseNodeV1Response;
import org.openapitools.client.model.GetMonitorTransactionsV1Request;
import org.openapitools.client.model.GetMonitorTransactionsV1Response;
import org.openapitools.client.model.InvokeContractV1Request;
import org.openapitools.client.model.InvokeContractV1Response;
import org.openapitools.client.model.ListFlowsV1Request;
import org.openapitools.client.model.ListFlowsV1Response;
import org.openapitools.client.model.NodeInfo;
import org.openapitools.client.model.StartMonitorV1Request;
import org.openapitools.client.model.StartMonitorV1Response;
import org.openapitools.client.model.StopMonitorV1Request;
import org.openapitools.client.model.StopMonitorV1Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for clearMonitorTransactionsV1
     * @param clearMonitorTransactionsV1Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearMonitorTransactionsV1Call(ClearMonitorTransactionsV1Request clearMonitorTransactionsV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = clearMonitorTransactionsV1Request;

        // create path and map variables
        String localVarPath = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/clear-monitor-transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clearMonitorTransactionsV1ValidateBeforeCall(ClearMonitorTransactionsV1Request clearMonitorTransactionsV1Request, final ApiCallback _callback) throws ApiException {
        return clearMonitorTransactionsV1Call(clearMonitorTransactionsV1Request, _callback);

    }

    /**
     * Clear transactions from internal store so they&#39;ll not be available by GetMonitorTransactionsV1 anymore.
     * 
     * @param clearMonitorTransactionsV1Request  (optional)
     * @return ClearMonitorTransactionsV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ClearMonitorTransactionsV1Response clearMonitorTransactionsV1(ClearMonitorTransactionsV1Request clearMonitorTransactionsV1Request) throws ApiException {
        ApiResponse<ClearMonitorTransactionsV1Response> localVarResp = clearMonitorTransactionsV1WithHttpInfo(clearMonitorTransactionsV1Request);
        return localVarResp.getData();
    }

    /**
     * Clear transactions from internal store so they&#39;ll not be available by GetMonitorTransactionsV1 anymore.
     * 
     * @param clearMonitorTransactionsV1Request  (optional)
     * @return ApiResponse&lt;ClearMonitorTransactionsV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClearMonitorTransactionsV1Response> clearMonitorTransactionsV1WithHttpInfo(ClearMonitorTransactionsV1Request clearMonitorTransactionsV1Request) throws ApiException {
        okhttp3.Call localVarCall = clearMonitorTransactionsV1ValidateBeforeCall(clearMonitorTransactionsV1Request, null);
        Type localVarReturnType = new TypeToken<ClearMonitorTransactionsV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clear transactions from internal store so they&#39;ll not be available by GetMonitorTransactionsV1 anymore. (asynchronously)
     * 
     * @param clearMonitorTransactionsV1Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearMonitorTransactionsV1Async(ClearMonitorTransactionsV1Request clearMonitorTransactionsV1Request, final ApiCallback<ClearMonitorTransactionsV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = clearMonitorTransactionsV1ValidateBeforeCall(clearMonitorTransactionsV1Request, _callback);
        Type localVarReturnType = new TypeToken<ClearMonitorTransactionsV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployContractJarsV1
     * @param deployContractJarsV1Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployContractJarsV1Call(DeployContractJarsV1Request deployContractJarsV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deployContractJarsV1Request;

        // create path and map variables
        String localVarPath = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/deploy-contract-jars";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployContractJarsV1ValidateBeforeCall(DeployContractJarsV1Request deployContractJarsV1Request, final ApiCallback _callback) throws ApiException {
        return deployContractJarsV1Call(deployContractJarsV1Request, _callback);

    }

    /**
     * Deploys a set of jar files (Cordapps, e.g. the contracts in Corda speak).
     * 
     * @param deployContractJarsV1Request  (optional)
     * @return DeployContractJarsSuccessV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public DeployContractJarsSuccessV1Response deployContractJarsV1(DeployContractJarsV1Request deployContractJarsV1Request) throws ApiException {
        ApiResponse<DeployContractJarsSuccessV1Response> localVarResp = deployContractJarsV1WithHttpInfo(deployContractJarsV1Request);
        return localVarResp.getData();
    }

    /**
     * Deploys a set of jar files (Cordapps, e.g. the contracts in Corda speak).
     * 
     * @param deployContractJarsV1Request  (optional)
     * @return ApiResponse&lt;DeployContractJarsSuccessV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeployContractJarsSuccessV1Response> deployContractJarsV1WithHttpInfo(DeployContractJarsV1Request deployContractJarsV1Request) throws ApiException {
        okhttp3.Call localVarCall = deployContractJarsV1ValidateBeforeCall(deployContractJarsV1Request, null);
        Type localVarReturnType = new TypeToken<DeployContractJarsSuccessV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deploys a set of jar files (Cordapps, e.g. the contracts in Corda speak). (asynchronously)
     * 
     * @param deployContractJarsV1Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployContractJarsV1Async(DeployContractJarsV1Request deployContractJarsV1Request, final ApiCallback<DeployContractJarsSuccessV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployContractJarsV1ValidateBeforeCall(deployContractJarsV1Request, _callback);
        Type localVarReturnType = new TypeToken<DeployContractJarsSuccessV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diagnoseNodeV1
     * @param diagnoseNodeV1Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnoseNodeV1Call(DiagnoseNodeV1Request diagnoseNodeV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = diagnoseNodeV1Request;

        // create path and map variables
        String localVarPath = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/diagnose-node";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnoseNodeV1ValidateBeforeCall(DiagnoseNodeV1Request diagnoseNodeV1Request, final ApiCallback _callback) throws ApiException {
        return diagnoseNodeV1Call(diagnoseNodeV1Request, _callback);

    }

    /**
     * 
     * Responds with diagnostic information about the Corda node
     * @param diagnoseNodeV1Request  (optional)
     * @return DiagnoseNodeV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DiagnoseNodeV1Response diagnoseNodeV1(DiagnoseNodeV1Request diagnoseNodeV1Request) throws ApiException {
        ApiResponse<DiagnoseNodeV1Response> localVarResp = diagnoseNodeV1WithHttpInfo(diagnoseNodeV1Request);
        return localVarResp.getData();
    }

    /**
     * 
     * Responds with diagnostic information about the Corda node
     * @param diagnoseNodeV1Request  (optional)
     * @return ApiResponse&lt;DiagnoseNodeV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiagnoseNodeV1Response> diagnoseNodeV1WithHttpInfo(DiagnoseNodeV1Request diagnoseNodeV1Request) throws ApiException {
        okhttp3.Call localVarCall = diagnoseNodeV1ValidateBeforeCall(diagnoseNodeV1Request, null);
        Type localVarReturnType = new TypeToken<DiagnoseNodeV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Responds with diagnostic information about the Corda node
     * @param diagnoseNodeV1Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnoseNodeV1Async(DiagnoseNodeV1Request diagnoseNodeV1Request, final ApiCallback<DiagnoseNodeV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnoseNodeV1ValidateBeforeCall(diagnoseNodeV1Request, _callback);
        Type localVarReturnType = new TypeToken<DiagnoseNodeV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMonitorTransactionsV1
     * @param getMonitorTransactionsV1Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMonitorTransactionsV1Call(GetMonitorTransactionsV1Request getMonitorTransactionsV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getMonitorTransactionsV1Request;

        // create path and map variables
        String localVarPath = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/get-monitor-transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMonitorTransactionsV1ValidateBeforeCall(GetMonitorTransactionsV1Request getMonitorTransactionsV1Request, final ApiCallback _callback) throws ApiException {
        return getMonitorTransactionsV1Call(getMonitorTransactionsV1Request, _callback);

    }

    /**
     * Get transactions for monitored state classes.
     * 
     * @param getMonitorTransactionsV1Request  (optional)
     * @return GetMonitorTransactionsV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetMonitorTransactionsV1Response getMonitorTransactionsV1(GetMonitorTransactionsV1Request getMonitorTransactionsV1Request) throws ApiException {
        ApiResponse<GetMonitorTransactionsV1Response> localVarResp = getMonitorTransactionsV1WithHttpInfo(getMonitorTransactionsV1Request);
        return localVarResp.getData();
    }

    /**
     * Get transactions for monitored state classes.
     * 
     * @param getMonitorTransactionsV1Request  (optional)
     * @return ApiResponse&lt;GetMonitorTransactionsV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMonitorTransactionsV1Response> getMonitorTransactionsV1WithHttpInfo(GetMonitorTransactionsV1Request getMonitorTransactionsV1Request) throws ApiException {
        okhttp3.Call localVarCall = getMonitorTransactionsV1ValidateBeforeCall(getMonitorTransactionsV1Request, null);
        Type localVarReturnType = new TypeToken<GetMonitorTransactionsV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get transactions for monitored state classes. (asynchronously)
     * 
     * @param getMonitorTransactionsV1Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMonitorTransactionsV1Async(GetMonitorTransactionsV1Request getMonitorTransactionsV1Request, final ApiCallback<GetMonitorTransactionsV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMonitorTransactionsV1ValidateBeforeCall(getMonitorTransactionsV1Request, _callback);
        Type localVarReturnType = new TypeToken<GetMonitorTransactionsV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPrometheusMetricsV1
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPrometheusMetricsV1Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/get-prometheus-exporter-metrics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPrometheusMetricsV1ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getPrometheusMetricsV1Call(_callback);

    }

    /**
     * Get the Prometheus Metrics
     * 
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public String getPrometheusMetricsV1() throws ApiException {
        ApiResponse<String> localVarResp = getPrometheusMetricsV1WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the Prometheus Metrics
     * 
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getPrometheusMetricsV1WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPrometheusMetricsV1ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the Prometheus Metrics (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPrometheusMetricsV1Async(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPrometheusMetricsV1ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invokeContractV1
     * @param invokeContractV1Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invokeContractV1Call(InvokeContractV1Request invokeContractV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invokeContractV1Request;

        // create path and map variables
        String localVarPath = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/invoke-contract";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invokeContractV1ValidateBeforeCall(InvokeContractV1Request invokeContractV1Request, final ApiCallback _callback) throws ApiException {
        return invokeContractV1Call(invokeContractV1Request, _callback);

    }

    /**
     * Invokes a contract on a Corda ledger (e.g. a flow)
     * 
     * @param invokeContractV1Request  (optional)
     * @return InvokeContractV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InvokeContractV1Response invokeContractV1(InvokeContractV1Request invokeContractV1Request) throws ApiException {
        ApiResponse<InvokeContractV1Response> localVarResp = invokeContractV1WithHttpInfo(invokeContractV1Request);
        return localVarResp.getData();
    }

    /**
     * Invokes a contract on a Corda ledger (e.g. a flow)
     * 
     * @param invokeContractV1Request  (optional)
     * @return ApiResponse&lt;InvokeContractV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvokeContractV1Response> invokeContractV1WithHttpInfo(InvokeContractV1Request invokeContractV1Request) throws ApiException {
        okhttp3.Call localVarCall = invokeContractV1ValidateBeforeCall(invokeContractV1Request, null);
        Type localVarReturnType = new TypeToken<InvokeContractV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Invokes a contract on a Corda ledger (e.g. a flow) (asynchronously)
     * 
     * @param invokeContractV1Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invokeContractV1Async(InvokeContractV1Request invokeContractV1Request, final ApiCallback<InvokeContractV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = invokeContractV1ValidateBeforeCall(invokeContractV1Request, _callback);
        Type localVarReturnType = new TypeToken<InvokeContractV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listFlowsV1
     * @param listFlowsV1Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFlowsV1Call(ListFlowsV1Request listFlowsV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listFlowsV1Request;

        // create path and map variables
        String localVarPath = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/list-flows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFlowsV1ValidateBeforeCall(ListFlowsV1Request listFlowsV1Request, final ApiCallback _callback) throws ApiException {
        return listFlowsV1Call(listFlowsV1Request, _callback);

    }

    /**
     * 
     * Responds with a list of the flows on the Corda node.
     * @param listFlowsV1Request  (optional)
     * @return ListFlowsV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListFlowsV1Response listFlowsV1(ListFlowsV1Request listFlowsV1Request) throws ApiException {
        ApiResponse<ListFlowsV1Response> localVarResp = listFlowsV1WithHttpInfo(listFlowsV1Request);
        return localVarResp.getData();
    }

    /**
     * 
     * Responds with a list of the flows on the Corda node.
     * @param listFlowsV1Request  (optional)
     * @return ApiResponse&lt;ListFlowsV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListFlowsV1Response> listFlowsV1WithHttpInfo(ListFlowsV1Request listFlowsV1Request) throws ApiException {
        okhttp3.Call localVarCall = listFlowsV1ValidateBeforeCall(listFlowsV1Request, null);
        Type localVarReturnType = new TypeToken<ListFlowsV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Responds with a list of the flows on the Corda node.
     * @param listFlowsV1Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFlowsV1Async(ListFlowsV1Request listFlowsV1Request, final ApiCallback<ListFlowsV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFlowsV1ValidateBeforeCall(listFlowsV1Request, _callback);
        Type localVarReturnType = new TypeToken<ListFlowsV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for networkMapV1
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkMapV1Call(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/network-map";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call networkMapV1ValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        return networkMapV1Call(body, _callback);

    }

    /**
     * 
     * Responds with a snapshot of the network map as provided by the Corda RPC call: net.corda.core.messaging.CordaRPCOps public abstract fun networkMapSnapshot(): List&lt;NodeInfo&gt;
     * @param body  (optional)
     * @return List&lt;NodeInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<NodeInfo> networkMapV1(Object body) throws ApiException {
        ApiResponse<List<NodeInfo>> localVarResp = networkMapV1WithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * Responds with a snapshot of the network map as provided by the Corda RPC call: net.corda.core.messaging.CordaRPCOps public abstract fun networkMapSnapshot(): List&lt;NodeInfo&gt;
     * @param body  (optional)
     * @return ApiResponse&lt;List&lt;NodeInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NodeInfo>> networkMapV1WithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = networkMapV1ValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<List<NodeInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Responds with a snapshot of the network map as provided by the Corda RPC call: net.corda.core.messaging.CordaRPCOps public abstract fun networkMapSnapshot(): List&lt;NodeInfo&gt;
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call networkMapV1Async(Object body, final ApiCallback<List<NodeInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = networkMapV1ValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<List<NodeInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startMonitorV1
     * @param startMonitorV1Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startMonitorV1Call(StartMonitorV1Request startMonitorV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startMonitorV1Request;

        // create path and map variables
        String localVarPath = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/start-monitor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startMonitorV1ValidateBeforeCall(StartMonitorV1Request startMonitorV1Request, final ApiCallback _callback) throws ApiException {
        return startMonitorV1Call(startMonitorV1Request, _callback);

    }

    /**
     * Start monitoring corda changes (transactions) of given state class
     * 
     * @param startMonitorV1Request  (optional)
     * @return StartMonitorV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public StartMonitorV1Response startMonitorV1(StartMonitorV1Request startMonitorV1Request) throws ApiException {
        ApiResponse<StartMonitorV1Response> localVarResp = startMonitorV1WithHttpInfo(startMonitorV1Request);
        return localVarResp.getData();
    }

    /**
     * Start monitoring corda changes (transactions) of given state class
     * 
     * @param startMonitorV1Request  (optional)
     * @return ApiResponse&lt;StartMonitorV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartMonitorV1Response> startMonitorV1WithHttpInfo(StartMonitorV1Request startMonitorV1Request) throws ApiException {
        okhttp3.Call localVarCall = startMonitorV1ValidateBeforeCall(startMonitorV1Request, null);
        Type localVarReturnType = new TypeToken<StartMonitorV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Start monitoring corda changes (transactions) of given state class (asynchronously)
     * 
     * @param startMonitorV1Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startMonitorV1Async(StartMonitorV1Request startMonitorV1Request, final ApiCallback<StartMonitorV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = startMonitorV1ValidateBeforeCall(startMonitorV1Request, _callback);
        Type localVarReturnType = new TypeToken<StartMonitorV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stopMonitorV1
     * @param stopMonitorV1Request  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopMonitorV1Call(StopMonitorV1Request stopMonitorV1Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stopMonitorV1Request;

        // create path and map variables
        String localVarPath = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-corda/stop-monitor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopMonitorV1ValidateBeforeCall(StopMonitorV1Request stopMonitorV1Request, final ApiCallback _callback) throws ApiException {
        return stopMonitorV1Call(stopMonitorV1Request, _callback);

    }

    /**
     * Stop monitoring corda changes (transactions) of given state class
     * 
     * @param stopMonitorV1Request  (optional)
     * @return StopMonitorV1Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public StopMonitorV1Response stopMonitorV1(StopMonitorV1Request stopMonitorV1Request) throws ApiException {
        ApiResponse<StopMonitorV1Response> localVarResp = stopMonitorV1WithHttpInfo(stopMonitorV1Request);
        return localVarResp.getData();
    }

    /**
     * Stop monitoring corda changes (transactions) of given state class
     * 
     * @param stopMonitorV1Request  (optional)
     * @return ApiResponse&lt;StopMonitorV1Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StopMonitorV1Response> stopMonitorV1WithHttpInfo(StopMonitorV1Request stopMonitorV1Request) throws ApiException {
        okhttp3.Call localVarCall = stopMonitorV1ValidateBeforeCall(stopMonitorV1Request, null);
        Type localVarReturnType = new TypeToken<StopMonitorV1Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stop monitoring corda changes (transactions) of given state class (asynchronously)
     * 
     * @param stopMonitorV1Request  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call stopMonitorV1Async(StopMonitorV1Request stopMonitorV1Request, final ApiCallback<StopMonitorV1Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopMonitorV1ValidateBeforeCall(stopMonitorV1Request, _callback);
        Type localVarReturnType = new TypeToken<StopMonitorV1Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
