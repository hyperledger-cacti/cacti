/*
 * Hyperledger Cactus Plugin - Connector Corda
 * Can perform basic tasks on a Corda ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ClearMonitorTransactionsV1Request;
import org.openapitools.client.model.ClearMonitorTransactionsV1Response;
import org.openapitools.client.model.DeployContractJarsBadRequestV1Response;
import org.openapitools.client.model.DeployContractJarsSuccessV1Response;
import org.openapitools.client.model.DeployContractJarsV1Request;
import org.openapitools.client.model.DiagnoseNodeV1Request;
import org.openapitools.client.model.DiagnoseNodeV1Response;
import org.openapitools.client.model.GetMonitorTransactionsV1Request;
import org.openapitools.client.model.GetMonitorTransactionsV1Response;
import org.openapitools.client.model.InvokeContractV1Request;
import org.openapitools.client.model.InvokeContractV1Response;
import org.openapitools.client.model.ListFlowsV1Request;
import org.openapitools.client.model.ListFlowsV1Response;
import org.openapitools.client.model.NodeInfo;
import org.openapitools.client.model.StartMonitorV1Request;
import org.openapitools.client.model.StartMonitorV1Response;
import org.openapitools.client.model.StopMonitorV1Request;
import org.openapitools.client.model.StopMonitorV1Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Clear transactions from internal store so they&#39;ll not be available by GetMonitorTransactionsV1 anymore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clearMonitorTransactionsV1Test() throws ApiException {
        ClearMonitorTransactionsV1Request clearMonitorTransactionsV1Request = null;
        ClearMonitorTransactionsV1Response response = api.clearMonitorTransactionsV1(clearMonitorTransactionsV1Request);
        // TODO: test validations
    }

    /**
     * Deploys a set of jar files (Cordapps, e.g. the contracts in Corda speak).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deployContractJarsV1Test() throws ApiException {
        DeployContractJarsV1Request deployContractJarsV1Request = null;
        DeployContractJarsSuccessV1Response response = api.deployContractJarsV1(deployContractJarsV1Request);
        // TODO: test validations
    }

    /**
     * Responds with diagnostic information about the Corda node
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnoseNodeV1Test() throws ApiException {
        DiagnoseNodeV1Request diagnoseNodeV1Request = null;
        DiagnoseNodeV1Response response = api.diagnoseNodeV1(diagnoseNodeV1Request);
        // TODO: test validations
    }

    /**
     * Get transactions for monitored state classes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMonitorTransactionsV1Test() throws ApiException {
        GetMonitorTransactionsV1Request getMonitorTransactionsV1Request = null;
        GetMonitorTransactionsV1Response response = api.getMonitorTransactionsV1(getMonitorTransactionsV1Request);
        // TODO: test validations
    }

    /**
     * Get the Prometheus Metrics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPrometheusMetricsV1Test() throws ApiException {
        String response = api.getPrometheusMetricsV1();
        // TODO: test validations
    }

    /**
     * Invokes a contract on a Corda ledger (e.g. a flow)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void invokeContractV1Test() throws ApiException {
        InvokeContractV1Request invokeContractV1Request = null;
        InvokeContractV1Response response = api.invokeContractV1(invokeContractV1Request);
        // TODO: test validations
    }

    /**
     * Responds with a list of the flows on the Corda node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFlowsV1Test() throws ApiException {
        ListFlowsV1Request listFlowsV1Request = null;
        ListFlowsV1Response response = api.listFlowsV1(listFlowsV1Request);
        // TODO: test validations
    }

    /**
     * Responds with a snapshot of the network map as provided by the Corda RPC call: net.corda.core.messaging.CordaRPCOps public abstract fun networkMapSnapshot(): List&lt;NodeInfo&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkMapV1Test() throws ApiException {
        Object body = null;
        List<NodeInfo> response = api.networkMapV1(body);
        // TODO: test validations
    }

    /**
     * Start monitoring corda changes (transactions) of given state class
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startMonitorV1Test() throws ApiException {
        StartMonitorV1Request startMonitorV1Request = null;
        StartMonitorV1Response response = api.startMonitorV1(startMonitorV1Request);
        // TODO: test validations
    }

    /**
     * Stop monitoring corda changes (transactions) of given state class
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopMonitorV1Test() throws ApiException {
        StopMonitorV1Request stopMonitorV1Request = null;
        StopMonitorV1Response response = api.stopMonitorV1(stopMonitorV1Request);
        // TODO: test validations
    }

}
