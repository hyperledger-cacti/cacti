/*
 * Hyperledger Cactus Plugin - Connector Corda
 * Can perform basic tasks on a Corda ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.JvmType;
import org.openapitools.client.model.JvmTypeKind;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Can represent JVM primitive and reference types as well. The jvmTypeKind field indicates which one is being stored. If the jvmTypeKind field is set to REFERENCE then the jvmCtorArgs array is expected to be filled, otherwise (e.g. PRIMITIVE jvmTypeKind) it is expected that the primitiveValue property is filled with a primitive data type supported by the JSON standard such as strings, booleans, numbers, etc.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class JvmObject {
  public static final String SERIALIZED_NAME_JVM_TYPE_KIND = "jvmTypeKind";
  @SerializedName(SERIALIZED_NAME_JVM_TYPE_KIND)
  private JvmTypeKind jvmTypeKind;

  public static final String SERIALIZED_NAME_PRIMITIVE_VALUE = "primitiveValue";
  @SerializedName(SERIALIZED_NAME_PRIMITIVE_VALUE)
  private Object primitiveValue;

  public static final String SERIALIZED_NAME_JVM_CTOR_ARGS = "jvmCtorArgs";
  @SerializedName(SERIALIZED_NAME_JVM_CTOR_ARGS)
  private List<JvmObject> jvmCtorArgs = null;

  public static final String SERIALIZED_NAME_JVM_TYPE = "jvmType";
  @SerializedName(SERIALIZED_NAME_JVM_TYPE)
  private JvmType jvmType;

  public JvmObject() {
  }

  public JvmObject jvmTypeKind(JvmTypeKind jvmTypeKind) {
    
    this.jvmTypeKind = jvmTypeKind;
    return this;
  }

   /**
   * Get jvmTypeKind
   * @return jvmTypeKind
  **/
  @javax.annotation.Nonnull
  public JvmTypeKind getJvmTypeKind() {
    return jvmTypeKind;
  }


  public void setJvmTypeKind(JvmTypeKind jvmTypeKind) {
    this.jvmTypeKind = jvmTypeKind;
  }


  public JvmObject primitiveValue(Object primitiveValue) {
    
    this.primitiveValue = primitiveValue;
    return this;
  }

   /**
   * Get primitiveValue
   * @return primitiveValue
  **/
  @javax.annotation.Nullable
  public Object getPrimitiveValue() {
    return primitiveValue;
  }


  public void setPrimitiveValue(Object primitiveValue) {
    this.primitiveValue = primitiveValue;
  }


  public JvmObject jvmCtorArgs(List<JvmObject> jvmCtorArgs) {
    
    this.jvmCtorArgs = jvmCtorArgs;
    return this;
  }

  public JvmObject addJvmCtorArgsItem(JvmObject jvmCtorArgsItem) {
    if (this.jvmCtorArgs == null) {
      this.jvmCtorArgs = null;
    }
    this.jvmCtorArgs.add(jvmCtorArgsItem);
    return this;
  }

   /**
   * Get jvmCtorArgs
   * @return jvmCtorArgs
  **/
  @javax.annotation.Nullable
  public List<JvmObject> getJvmCtorArgs() {
    return jvmCtorArgs;
  }


  public void setJvmCtorArgs(List<JvmObject> jvmCtorArgs) {
    this.jvmCtorArgs = jvmCtorArgs;
  }


  public JvmObject jvmType(JvmType jvmType) {
    
    this.jvmType = jvmType;
    return this;
  }

   /**
   * Get jvmType
   * @return jvmType
  **/
  @javax.annotation.Nonnull
  public JvmType getJvmType() {
    return jvmType;
  }


  public void setJvmType(JvmType jvmType) {
    this.jvmType = jvmType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JvmObject jvmObject = (JvmObject) o;
    return Objects.equals(this.jvmTypeKind, jvmObject.jvmTypeKind) &&
        Objects.equals(this.primitiveValue, jvmObject.primitiveValue) &&
        Objects.equals(this.jvmCtorArgs, jvmObject.jvmCtorArgs) &&
        Objects.equals(this.jvmType, jvmObject.jvmType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jvmTypeKind, primitiveValue, jvmCtorArgs, jvmType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JvmObject {\n");
    sb.append("    jvmTypeKind: ").append(toIndentedString(jvmTypeKind)).append("\n");
    sb.append("    primitiveValue: ").append(toIndentedString(primitiveValue)).append("\n");
    sb.append("    jvmCtorArgs: ").append(toIndentedString(jvmCtorArgs)).append("\n");
    sb.append("    jvmType: ").append(toIndentedString(jvmType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jvmTypeKind");
    openapiFields.add("primitiveValue");
    openapiFields.add("jvmCtorArgs");
    openapiFields.add("jvmType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("jvmTypeKind");
    openapiRequiredFields.add("jvmType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to JvmObject
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!JvmObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JvmObject is not found in the empty JSON string", JvmObject.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!JvmObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JvmObject` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JvmObject.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("jvmCtorArgs") != null && !jsonObj.get("jvmCtorArgs").isJsonNull()) {
        JsonArray jsonArrayjvmCtorArgs = jsonObj.getAsJsonArray("jvmCtorArgs");
        if (jsonArrayjvmCtorArgs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("jvmCtorArgs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `jvmCtorArgs` to be an array in the JSON string but got `%s`", jsonObj.get("jvmCtorArgs").toString()));
          }

          // validate the optional field `jvmCtorArgs` (array)
          for (int i = 0; i < jsonArrayjvmCtorArgs.size(); i++) {
            JvmObject.validateJsonObject(jsonArrayjvmCtorArgs.get(i).getAsJsonObject());
          };
        }
      }
      // validate the required field `jvmType`
      JvmType.validateJsonObject(jsonObj.getAsJsonObject("jvmType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JvmObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JvmObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JvmObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JvmObject.class));

       return (TypeAdapter<T>) new TypeAdapter<JvmObject>() {
           @Override
           public void write(JsonWriter out, JvmObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JvmObject read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JvmObject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JvmObject
  * @throws IOException if the JSON string is invalid with respect to JvmObject
  */
  public static JvmObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JvmObject.class);
  }

 /**
  * Convert an instance of JvmObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

