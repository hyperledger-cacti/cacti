/*
 * Hyperledger Cactus Plugin - Connector Corda
 * Can perform basic tasks on a Corda ledger
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.CordappInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A NodeDiagnosticInfo holds information about the current node version.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NodeDiagnosticInfo {
  public static final String SERIALIZED_NAME_CORDAPPS = "cordapps";
  @SerializedName(SERIALIZED_NAME_CORDAPPS)
  private List<CordappInfo> cordapps = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLATFORM_VERSION = "platformVersion";
  @SerializedName(SERIALIZED_NAME_PLATFORM_VERSION)
  private Integer platformVersion;

  public static final String SERIALIZED_NAME_REVISION = "revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  private String revision;

  public static final String SERIALIZED_NAME_VENDOR = "vendor";
  @SerializedName(SERIALIZED_NAME_VENDOR)
  private String vendor;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public NodeDiagnosticInfo() {
  }

  public NodeDiagnosticInfo cordapps(List<CordappInfo> cordapps) {
    
    this.cordapps = cordapps;
    return this;
  }

  public NodeDiagnosticInfo addCordappsItem(CordappInfo cordappsItem) {
    if (this.cordapps == null) {
      this.cordapps = new ArrayList<>();
    }
    this.cordapps.add(cordappsItem);
    return this;
  }

   /**
   * A list of CorDapps currently installed on this node
   * @return cordapps
  **/
  @javax.annotation.Nonnull
  public List<CordappInfo> getCordapps() {
    return cordapps;
  }


  public void setCordapps(List<CordappInfo> cordapps) {
    this.cordapps = cordapps;
  }


  public NodeDiagnosticInfo platformVersion(Integer platformVersion) {
    
    this.platformVersion = platformVersion;
    return this;
  }

   /**
   * The platform version of this node. This number represents a released API version, and should be used to make functionality decisions (e.g. enabling an app feature only if an underlying platform feature exists)
   * @return platformVersion
  **/
  @javax.annotation.Nonnull
  public Integer getPlatformVersion() {
    return platformVersion;
  }


  public void setPlatformVersion(Integer platformVersion) {
    this.platformVersion = platformVersion;
  }


  public NodeDiagnosticInfo revision(String revision) {
    
    this.revision = revision;
    return this;
  }

   /**
   * The git commit hash this node was built from
   * @return revision
  **/
  @javax.annotation.Nonnull
  public String getRevision() {
    return revision;
  }


  public void setRevision(String revision) {
    this.revision = revision;
  }


  public NodeDiagnosticInfo vendor(String vendor) {
    
    this.vendor = vendor;
    return this;
  }

   /**
   * The vendor of this node
   * @return vendor
  **/
  @javax.annotation.Nonnull
  public String getVendor() {
    return vendor;
  }


  public void setVendor(String vendor) {
    this.vendor = vendor;
  }


  public NodeDiagnosticInfo version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * The current node version string, e.g. 4.3, 4.4-SNAPSHOT. Note that this string is effectively freeform, and so should only be used for providing diagnostic information. It should not be used to make functionality decisions (the platformVersion is a better fit for this).
   * @return version
  **/
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeDiagnosticInfo nodeDiagnosticInfo = (NodeDiagnosticInfo) o;
    return Objects.equals(this.cordapps, nodeDiagnosticInfo.cordapps) &&
        Objects.equals(this.platformVersion, nodeDiagnosticInfo.platformVersion) &&
        Objects.equals(this.revision, nodeDiagnosticInfo.revision) &&
        Objects.equals(this.vendor, nodeDiagnosticInfo.vendor) &&
        Objects.equals(this.version, nodeDiagnosticInfo.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cordapps, platformVersion, revision, vendor, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeDiagnosticInfo {\n");
    sb.append("    cordapps: ").append(toIndentedString(cordapps)).append("\n");
    sb.append("    platformVersion: ").append(toIndentedString(platformVersion)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cordapps");
    openapiFields.add("platformVersion");
    openapiFields.add("revision");
    openapiFields.add("vendor");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cordapps");
    openapiRequiredFields.add("platformVersion");
    openapiRequiredFields.add("revision");
    openapiRequiredFields.add("vendor");
    openapiRequiredFields.add("version");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NodeDiagnosticInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NodeDiagnosticInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NodeDiagnosticInfo is not found in the empty JSON string", NodeDiagnosticInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!NodeDiagnosticInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NodeDiagnosticInfo` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NodeDiagnosticInfo.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("cordapps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cordapps` to be an array in the JSON string but got `%s`", jsonObj.get("cordapps").toString()));
      }

      JsonArray jsonArraycordapps = jsonObj.getAsJsonArray("cordapps");
      // validate the required field `cordapps` (array)
      for (int i = 0; i < jsonArraycordapps.size(); i++) {
        CordappInfo.validateJsonObject(jsonArraycordapps.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("revision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revision").toString()));
      }
      if (!jsonObj.get("vendor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor").toString()));
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NodeDiagnosticInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NodeDiagnosticInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NodeDiagnosticInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NodeDiagnosticInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<NodeDiagnosticInfo>() {
           @Override
           public void write(JsonWriter out, NodeDiagnosticInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NodeDiagnosticInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NodeDiagnosticInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NodeDiagnosticInfo
  * @throws IOException if the JSON string is invalid with respect to NodeDiagnosticInfo
  */
  public static NodeDiagnosticInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NodeDiagnosticInfo.class);
  }

 /**
  * Convert an instance of NodeDiagnosticInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

