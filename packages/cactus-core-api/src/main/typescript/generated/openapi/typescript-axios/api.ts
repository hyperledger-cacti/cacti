/* tslint:disable */
/* eslint-disable */
/**
 * Hyperledger Core API
 * Contains/describes the core API types for Cactus. Does not describe actual endpoints on its own as this is left to the implementing plugins who can import and re-use commonLy needed type definitions from this specification. One example of said commonly used type definitons would be the types related to consortium management, cactus nodes, ledgers, etc..
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * A Cactus node can be a single server, or a set of servers behind a loand balancer acting as one.
 * @export
 * @interface CactusNode
 */
export interface CactusNode {
    /**
     * 
     * @type {string}
     * @memberof CactusNode
     */
    nodeApiHost: string;
    /**
     * The PEM encoded public key that was used to generate the JWS included in the response (the jws property)
     * @type {string}
     * @memberof CactusNode
     */
    publicKeyPem: string;
    /**
     * The unique identifier of a Cactus node. Recommended to assign a value to this that is guaranteed to be unique in the whole consortium or better yet, globally anywhere.
     * @type {string}
     * @memberof CactusNode
     */
    id: string;
    /**
     * ID of the Cactus Consortium this node is in.
     * @type {string}
     * @memberof CactusNode
     */
    consortiumId: string;
    /**
     * ID of the Cactus Consortium member this node is operated by.
     * @type {string}
     * @memberof CactusNode
     */
    memberId: string;
    /**
     * Stores an array of Ledger entities that are reachable (routable) via this Cactus Node. This information is used by the client side SDK API client to figure out at runtime where to send API requests that are specific to a certain ledger such as requests to execute transactions.
     * @type {Array<Ledger>}
     * @memberof CactusNode
     */
    ledgers: Array<Ledger>;
    /**
     * 
     * @type {Array<CactusPlugin>}
     * @memberof CactusNode
     */
    plugins: Array<CactusPlugin>;
}
/**
 * 
 * @export
 * @interface CactusNodeAllOf
 */
export interface CactusNodeAllOf {
    /**
     * The unique identifier of a Cactus node. Recommended to assign a value to this that is guaranteed to be unique in the whole consortium or better yet, globally anywhere.
     * @type {string}
     * @memberof CactusNodeAllOf
     */
    id: string;
    /**
     * ID of the Cactus Consortium this node is in.
     * @type {string}
     * @memberof CactusNodeAllOf
     */
    consortiumId: string;
    /**
     * ID of the Cactus Consortium member this node is operated by.
     * @type {string}
     * @memberof CactusNodeAllOf
     */
    memberId: string;
    /**
     * Stores an array of Ledger entities that are reachable (routable) via this Cactus Node. This information is used by the client side SDK API client to figure out at runtime where to send API requests that are specific to a certain ledger such as requests to execute transactions.
     * @type {Array<Ledger>}
     * @memberof CactusNodeAllOf
     */
    ledgers: Array<Ledger>;
    /**
     * 
     * @type {Array<CactusPlugin>}
     * @memberof CactusNodeAllOf
     */
    plugins: Array<CactusPlugin>;
}
/**
 * A Cactus node meta information
 * @export
 * @interface CactusNodeMeta
 */
export interface CactusNodeMeta {
    /**
     * 
     * @type {string}
     * @memberof CactusNodeMeta
     */
    nodeApiHost: string;
    /**
     * The PEM encoded public key that was used to generate the JWS included in the response (the jws property)
     * @type {string}
     * @memberof CactusNodeMeta
     */
    publicKeyPem: string;
}
/**
 * 
 * @export
 * @interface CactusPlugin
 */
export interface CactusPlugin {
    /**
     * 
     * @type {string}
     * @memberof CactusPlugin
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof CactusPlugin
     */
    packageName?: string;
}
/**
 * 
 * @export
 * @interface Consortium
 */
export interface Consortium {
    /**
     * 
     * @type {string}
     * @memberof Consortium
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Consortium
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Consortium
     */
    mainApiHost: string;
    /**
     * 
     * @type {Array<ConsortiumMember>}
     * @memberof Consortium
     */
    members: Array<ConsortiumMember>;
}
/**
 * 
 * @export
 * @interface ConsortiumMember
 */
export interface ConsortiumMember {
    /**
     * 
     * @type {string}
     * @memberof ConsortiumMember
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ConsortiumMember
     */
    name: string;
    /**
     * 
     * @type {Array<CactusNode>}
     * @memberof ConsortiumMember
     */
    nodes: Array<CactusNode>;
}
/**
 * 
 * @export
 * @interface JWSGeneral
 */
export interface JWSGeneral {
    /**
     * 
     * @type {string}
     * @memberof JWSGeneral
     */
    payload: string;
    /**
     * 
     * @type {Array<JWSRecipient>}
     * @memberof JWSGeneral
     */
    signatures: Array<JWSRecipient>;
}
/**
 * A JSON Web Signature. See: https://tools.ietf.org/html/rfc7515 for info about standard.
 * @export
 * @interface JWSRecipient
 */
export interface JWSRecipient {
    /**
     * 
     * @type {string}
     * @memberof JWSRecipient
     */
    signature: string;
    /**
     * 
     * @type {string}
     * @memberof JWSRecipient
     */
    protected?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof JWSRecipient
     */
    header?: { [key: string]: object; };
}
/**
 * 
 * @export
 * @interface Ledger
 */
export interface Ledger {
    /**
     * String that uniquely identifies a ledger within a Cactus consortium so that transactions can be routed to the correct ledger.
     * @type {string}
     * @memberof Ledger
     */
    id: string;
    /**
     * 
     * @type {LedgerType}
     * @memberof Ledger
     */
    ledgerType: LedgerType;
    /**
     * 
     * @type {ConsortiumMember}
     * @memberof Ledger
     */
    operator?: ConsortiumMember;
}
/**
 * Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.
 * @export
 * @enum {string}
 */
export enum LedgerType {
    BESU1X = 'BESU_1X',
    BESU2X = 'BESU_2X',
    BURROW0X = 'BURROW_0X',
    CORDA4X = 'CORDA_4X',
    FABRIC14X = 'FABRIC_14X',
    FABRIC2 = 'FABRIC_2',
    QUORUM2X = 'QUORUM_2X',
    SAWTOOTH1X = 'SAWTOOTH_1X'
}


