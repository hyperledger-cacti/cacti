/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.6
 * source: common/access_control.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
import * as pb_1 from "google-protobuf";
export namespace common.access_control {
    export class AccessControlPolicy extends pb_1.Message {
        constructor(data?: any[] | {
            securityDomain?: string;
            rules?: Rule[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("securityDomain" in data && data.securityDomain != undefined) {
                    this.securityDomain = data.securityDomain;
                }
                if ("rules" in data && data.rules != undefined) {
                    this.rules = data.rules;
                }
            }
        }
        get securityDomain() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set securityDomain(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get rules() {
            return pb_1.Message.getRepeatedWrapperField(this, Rule, 2) as Rule[];
        }
        set rules(value: Rule[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            securityDomain?: string;
            rules?: ReturnType<typeof Rule.prototype.toObject>[];
        }) {
            const message = new AccessControlPolicy({});
            if (data.securityDomain != null) {
                message.securityDomain = data.securityDomain;
            }
            if (data.rules != null) {
                message.rules = data.rules.map(item => Rule.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                securityDomain?: string;
                rules?: ReturnType<typeof Rule.prototype.toObject>[];
            } = {};
            if (this.securityDomain != null) {
                data.securityDomain = this.securityDomain;
            }
            if (this.rules != null) {
                data.rules = this.rules.map((item: Rule) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.securityDomain === "string" && this.securityDomain.length)
                writer.writeString(1, this.securityDomain);
            if (this.rules !== undefined)
                writer.writeRepeatedMessage(2, this.rules, (item: Rule) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccessControlPolicy {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccessControlPolicy();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.securityDomain = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.rules, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Rule.deserialize(reader), Rule));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccessControlPolicy {
            return AccessControlPolicy.deserialize(bytes);
        }
    }
    export class Rule extends pb_1.Message {
        constructor(data?: any[] | {
            principal?: string;
            principalType?: string;
            resource?: string;
            read?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("principal" in data && data.principal != undefined) {
                    this.principal = data.principal;
                }
                if ("principalType" in data && data.principalType != undefined) {
                    this.principalType = data.principalType;
                }
                if ("resource" in data && data.resource != undefined) {
                    this.resource = data.resource;
                }
                if ("read" in data && data.read != undefined) {
                    this.read = data.read;
                }
            }
        }
        get principal() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set principal(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get principalType() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set principalType(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get resource() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set resource(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get read() {
            return pb_1.Message.getField(this, 4) as boolean;
        }
        set read(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            principal?: string;
            principalType?: string;
            resource?: string;
            read?: boolean;
        }) {
            const message = new Rule({});
            if (data.principal != null) {
                message.principal = data.principal;
            }
            if (data.principalType != null) {
                message.principalType = data.principalType;
            }
            if (data.resource != null) {
                message.resource = data.resource;
            }
            if (data.read != null) {
                message.read = data.read;
            }
            return message;
        }
        toObject() {
            const data: {
                principal?: string;
                principalType?: string;
                resource?: string;
                read?: boolean;
            } = {};
            if (this.principal != null) {
                data.principal = this.principal;
            }
            if (this.principalType != null) {
                data.principalType = this.principalType;
            }
            if (this.resource != null) {
                data.resource = this.resource;
            }
            if (this.read != null) {
                data.read = this.read;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.principal === "string" && this.principal.length)
                writer.writeString(1, this.principal);
            if (typeof this.principalType === "string" && this.principalType.length)
                writer.writeString(2, this.principalType);
            if (typeof this.resource === "string" && this.resource.length)
                writer.writeString(3, this.resource);
            if (this.read !== undefined)
                writer.writeBool(4, this.read);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Rule {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Rule();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.principal = reader.readString();
                        break;
                    case 2:
                        message.principalType = reader.readString();
                        break;
                    case 3:
                        message.resource = reader.readString();
                        break;
                    case 4:
                        message.read = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Rule {
            return Rule.deserialize(bytes);
        }
    }
}
