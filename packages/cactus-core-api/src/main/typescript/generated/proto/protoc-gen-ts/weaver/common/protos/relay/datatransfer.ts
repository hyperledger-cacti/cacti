/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.6
 * source: relay/datatransfer.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
import * as dependency_1 from "./../common/ack";
import * as dependency_2 from "./../common/state";
import * as dependency_3 from "./../common/query";
import * as grpc_1 from "@grpc/grpc-js";
export namespace relay.datatransfer {
    export abstract class UnimplementedDataTransferService {
        static definition = {
            RequestState: {
                path: "/relay.datatransfer.DataTransfer/RequestState",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.common.query.Query) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.common.query.Query.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.common.ack.Ack) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.common.ack.Ack.deserialize(new Uint8Array(bytes))
            },
            SendState: {
                path: "/relay.datatransfer.DataTransfer/SendState",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.common.state.ViewPayload) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.common.state.ViewPayload.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.common.ack.Ack) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.common.ack.Ack.deserialize(new Uint8Array(bytes))
            },
            SendDriverState: {
                path: "/relay.datatransfer.DataTransfer/SendDriverState",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.common.state.ViewPayload) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.common.state.ViewPayload.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.common.ack.Ack) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.common.ack.Ack.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract RequestState(call: grpc_1.ServerUnaryCall<dependency_3.common.query.Query, dependency_1.common.ack.Ack>, callback: grpc_1.requestCallback<dependency_1.common.ack.Ack>): void;
        abstract SendState(call: grpc_1.ServerUnaryCall<dependency_2.common.state.ViewPayload, dependency_1.common.ack.Ack>, callback: grpc_1.requestCallback<dependency_1.common.ack.Ack>): void;
        abstract SendDriverState(call: grpc_1.ServerUnaryCall<dependency_2.common.state.ViewPayload, dependency_1.common.ack.Ack>, callback: grpc_1.requestCallback<dependency_1.common.ack.Ack>): void;
    }
    export class DataTransferClient extends grpc_1.makeGenericClientConstructor(UnimplementedDataTransferService.definition, "DataTransfer", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options)
        }
        RequestState(message: dependency_3.common.query.Query, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<dependency_1.common.ack.Ack>): grpc_1.ClientUnaryCall;
        RequestState(message: dependency_3.common.query.Query, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<dependency_1.common.ack.Ack>): grpc_1.ClientUnaryCall;
        RequestState(message: dependency_3.common.query.Query, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<dependency_1.common.ack.Ack>): grpc_1.ClientUnaryCall;
        RequestState(message: dependency_3.common.query.Query, callback: grpc_1.requestCallback<dependency_1.common.ack.Ack>): grpc_1.ClientUnaryCall;
        RequestState(message: dependency_3.common.query.Query, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.common.ack.Ack>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.common.ack.Ack>, callback?: grpc_1.requestCallback<dependency_1.common.ack.Ack>): grpc_1.ClientUnaryCall {
            return super.RequestState(message, metadata, options, callback);
        }
        SendState(message: dependency_2.common.state.ViewPayload, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<dependency_1.common.ack.Ack>): grpc_1.ClientUnaryCall;
        SendState(message: dependency_2.common.state.ViewPayload, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<dependency_1.common.ack.Ack>): grpc_1.ClientUnaryCall;
        SendState(message: dependency_2.common.state.ViewPayload, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<dependency_1.common.ack.Ack>): grpc_1.ClientUnaryCall;
        SendState(message: dependency_2.common.state.ViewPayload, callback: grpc_1.requestCallback<dependency_1.common.ack.Ack>): grpc_1.ClientUnaryCall;
        SendState(message: dependency_2.common.state.ViewPayload, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.common.ack.Ack>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.common.ack.Ack>, callback?: grpc_1.requestCallback<dependency_1.common.ack.Ack>): grpc_1.ClientUnaryCall {
            return super.SendState(message, metadata, options, callback);
        }
        SendDriverState(message: dependency_2.common.state.ViewPayload, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<dependency_1.common.ack.Ack>): grpc_1.ClientUnaryCall;
        SendDriverState(message: dependency_2.common.state.ViewPayload, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<dependency_1.common.ack.Ack>): grpc_1.ClientUnaryCall;
        SendDriverState(message: dependency_2.common.state.ViewPayload, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<dependency_1.common.ack.Ack>): grpc_1.ClientUnaryCall;
        SendDriverState(message: dependency_2.common.state.ViewPayload, callback: grpc_1.requestCallback<dependency_1.common.ack.Ack>): grpc_1.ClientUnaryCall;
        SendDriverState(message: dependency_2.common.state.ViewPayload, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.common.ack.Ack>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.common.ack.Ack>, callback?: grpc_1.requestCallback<dependency_1.common.ack.Ack>): grpc_1.ClientUnaryCall {
            return super.SendDriverState(message, metadata, options, callback);
        }
    }
}
