/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.6
 * source: corda/view_data.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
import * as pb_1 from "google-protobuf";
export namespace corda {
    export class ViewData extends pb_1.Message {
        constructor(data?: any[] | {
            notarizations?: ViewData.Notarization[];
            payload?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("notarizations" in data && data.notarizations != undefined) {
                    this.notarizations = data.notarizations;
                }
                if ("payload" in data && data.payload != undefined) {
                    this.payload = data.payload;
                }
            }
        }
        get notarizations() {
            return pb_1.Message.getRepeatedWrapperField(this, ViewData.Notarization, 1) as ViewData.Notarization[];
        }
        set notarizations(value: ViewData.Notarization[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get payload() {
            return pb_1.Message.getField(this, 2) as Uint8Array;
        }
        set payload(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            notarizations?: ReturnType<typeof ViewData.Notarization.prototype.toObject>[];
            payload?: Uint8Array;
        }) {
            const message = new ViewData({});
            if (data.notarizations != null) {
                message.notarizations = data.notarizations.map(item => ViewData.Notarization.fromObject(item));
            }
            if (data.payload != null) {
                message.payload = data.payload;
            }
            return message;
        }
        toObject() {
            const data: {
                notarizations?: ReturnType<typeof ViewData.Notarization.prototype.toObject>[];
                payload?: Uint8Array;
            } = {};
            if (this.notarizations != null) {
                data.notarizations = this.notarizations.map((item: ViewData.Notarization) => item.toObject());
            }
            if (this.payload != null) {
                data.payload = this.payload;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.notarizations !== undefined)
                writer.writeRepeatedMessage(1, this.notarizations, (item: ViewData.Notarization) => item.serialize(writer));
            if (this.payload !== undefined)
                writer.writeBytes(2, this.payload);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ViewData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ViewData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.notarizations, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ViewData.Notarization.deserialize(reader), ViewData.Notarization));
                        break;
                    case 2:
                        message.payload = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ViewData {
            return ViewData.deserialize(bytes);
        }
    }
    export namespace ViewData {
        export class Notarization extends pb_1.Message {
            constructor(data?: any[] | {
                signature?: string;
                certificate?: string;
                id?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("signature" in data && data.signature != undefined) {
                        this.signature = data.signature;
                    }
                    if ("certificate" in data && data.certificate != undefined) {
                        this.certificate = data.certificate;
                    }
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                }
            }
            get signature() {
                return pb_1.Message.getField(this, 1) as string;
            }
            set signature(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get certificate() {
                return pb_1.Message.getField(this, 2) as string;
            }
            set certificate(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get id() {
                return pb_1.Message.getField(this, 3) as string;
            }
            set id(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                signature?: string;
                certificate?: string;
                id?: string;
            }) {
                const message = new Notarization({});
                if (data.signature != null) {
                    message.signature = data.signature;
                }
                if (data.certificate != null) {
                    message.certificate = data.certificate;
                }
                if (data.id != null) {
                    message.id = data.id;
                }
                return message;
            }
            toObject() {
                const data: {
                    signature?: string;
                    certificate?: string;
                    id?: string;
                } = {};
                if (this.signature != null) {
                    data.signature = this.signature;
                }
                if (this.certificate != null) {
                    data.certificate = this.certificate;
                }
                if (this.id != null) {
                    data.id = this.id;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (typeof this.signature === "string" && this.signature.length)
                    writer.writeString(1, this.signature);
                if (typeof this.certificate === "string" && this.certificate.length)
                    writer.writeString(2, this.certificate);
                if (typeof this.id === "string" && this.id.length)
                    writer.writeString(3, this.id);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Notarization {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Notarization();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.signature = reader.readString();
                            break;
                        case 2:
                            message.certificate = reader.readString();
                            break;
                        case 3:
                            message.id = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Notarization {
                return Notarization.deserialize(bytes);
            }
        }
    }
}
