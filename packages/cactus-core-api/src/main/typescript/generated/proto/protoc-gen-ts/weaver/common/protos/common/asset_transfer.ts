/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.6
 * source: common/asset_transfer.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
import * as pb_1 from "google-protobuf";
export namespace common.asset_transfer {
    export class AssetPledge extends pb_1.Message {
        constructor(data?: any[] | {
            assetDetails?: Uint8Array;
            localNetworkID?: string;
            remoteNetworkID?: string;
            recipient?: string;
            expiryTimeSecs?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("assetDetails" in data && data.assetDetails != undefined) {
                    this.assetDetails = data.assetDetails;
                }
                if ("localNetworkID" in data && data.localNetworkID != undefined) {
                    this.localNetworkID = data.localNetworkID;
                }
                if ("remoteNetworkID" in data && data.remoteNetworkID != undefined) {
                    this.remoteNetworkID = data.remoteNetworkID;
                }
                if ("recipient" in data && data.recipient != undefined) {
                    this.recipient = data.recipient;
                }
                if ("expiryTimeSecs" in data && data.expiryTimeSecs != undefined) {
                    this.expiryTimeSecs = data.expiryTimeSecs;
                }
            }
        }
        get assetDetails() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set assetDetails(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get localNetworkID() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set localNetworkID(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get remoteNetworkID() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set remoteNetworkID(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get recipient() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set recipient(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get expiryTimeSecs() {
            return pb_1.Message.getField(this, 5) as number;
        }
        set expiryTimeSecs(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            assetDetails?: Uint8Array;
            localNetworkID?: string;
            remoteNetworkID?: string;
            recipient?: string;
            expiryTimeSecs?: number;
        }) {
            const message = new AssetPledge({});
            if (data.assetDetails != null) {
                message.assetDetails = data.assetDetails;
            }
            if (data.localNetworkID != null) {
                message.localNetworkID = data.localNetworkID;
            }
            if (data.remoteNetworkID != null) {
                message.remoteNetworkID = data.remoteNetworkID;
            }
            if (data.recipient != null) {
                message.recipient = data.recipient;
            }
            if (data.expiryTimeSecs != null) {
                message.expiryTimeSecs = data.expiryTimeSecs;
            }
            return message;
        }
        toObject() {
            const data: {
                assetDetails?: Uint8Array;
                localNetworkID?: string;
                remoteNetworkID?: string;
                recipient?: string;
                expiryTimeSecs?: number;
            } = {};
            if (this.assetDetails != null) {
                data.assetDetails = this.assetDetails;
            }
            if (this.localNetworkID != null) {
                data.localNetworkID = this.localNetworkID;
            }
            if (this.remoteNetworkID != null) {
                data.remoteNetworkID = this.remoteNetworkID;
            }
            if (this.recipient != null) {
                data.recipient = this.recipient;
            }
            if (this.expiryTimeSecs != null) {
                data.expiryTimeSecs = this.expiryTimeSecs;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.assetDetails !== undefined)
                writer.writeBytes(1, this.assetDetails);
            if (typeof this.localNetworkID === "string" && this.localNetworkID.length)
                writer.writeString(2, this.localNetworkID);
            if (typeof this.remoteNetworkID === "string" && this.remoteNetworkID.length)
                writer.writeString(3, this.remoteNetworkID);
            if (typeof this.recipient === "string" && this.recipient.length)
                writer.writeString(4, this.recipient);
            if (this.expiryTimeSecs !== undefined)
                writer.writeUint64(5, this.expiryTimeSecs);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssetPledge {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssetPledge();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.assetDetails = reader.readBytes();
                        break;
                    case 2:
                        message.localNetworkID = reader.readString();
                        break;
                    case 3:
                        message.remoteNetworkID = reader.readString();
                        break;
                    case 4:
                        message.recipient = reader.readString();
                        break;
                    case 5:
                        message.expiryTimeSecs = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssetPledge {
            return AssetPledge.deserialize(bytes);
        }
    }
    export class AssetClaimStatus extends pb_1.Message {
        constructor(data?: any[] | {
            assetDetails?: Uint8Array;
            localNetworkID?: string;
            remoteNetworkID?: string;
            recipient?: string;
            claimStatus?: boolean;
            expiryTimeSecs?: number;
            expirationStatus?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("assetDetails" in data && data.assetDetails != undefined) {
                    this.assetDetails = data.assetDetails;
                }
                if ("localNetworkID" in data && data.localNetworkID != undefined) {
                    this.localNetworkID = data.localNetworkID;
                }
                if ("remoteNetworkID" in data && data.remoteNetworkID != undefined) {
                    this.remoteNetworkID = data.remoteNetworkID;
                }
                if ("recipient" in data && data.recipient != undefined) {
                    this.recipient = data.recipient;
                }
                if ("claimStatus" in data && data.claimStatus != undefined) {
                    this.claimStatus = data.claimStatus;
                }
                if ("expiryTimeSecs" in data && data.expiryTimeSecs != undefined) {
                    this.expiryTimeSecs = data.expiryTimeSecs;
                }
                if ("expirationStatus" in data && data.expirationStatus != undefined) {
                    this.expirationStatus = data.expirationStatus;
                }
            }
        }
        get assetDetails() {
            return pb_1.Message.getField(this, 1) as Uint8Array;
        }
        set assetDetails(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get localNetworkID() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set localNetworkID(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get remoteNetworkID() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set remoteNetworkID(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get recipient() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set recipient(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get claimStatus() {
            return pb_1.Message.getField(this, 5) as boolean;
        }
        set claimStatus(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get expiryTimeSecs() {
            return pb_1.Message.getField(this, 6) as number;
        }
        set expiryTimeSecs(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get expirationStatus() {
            return pb_1.Message.getField(this, 7) as boolean;
        }
        set expirationStatus(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            assetDetails?: Uint8Array;
            localNetworkID?: string;
            remoteNetworkID?: string;
            recipient?: string;
            claimStatus?: boolean;
            expiryTimeSecs?: number;
            expirationStatus?: boolean;
        }) {
            const message = new AssetClaimStatus({});
            if (data.assetDetails != null) {
                message.assetDetails = data.assetDetails;
            }
            if (data.localNetworkID != null) {
                message.localNetworkID = data.localNetworkID;
            }
            if (data.remoteNetworkID != null) {
                message.remoteNetworkID = data.remoteNetworkID;
            }
            if (data.recipient != null) {
                message.recipient = data.recipient;
            }
            if (data.claimStatus != null) {
                message.claimStatus = data.claimStatus;
            }
            if (data.expiryTimeSecs != null) {
                message.expiryTimeSecs = data.expiryTimeSecs;
            }
            if (data.expirationStatus != null) {
                message.expirationStatus = data.expirationStatus;
            }
            return message;
        }
        toObject() {
            const data: {
                assetDetails?: Uint8Array;
                localNetworkID?: string;
                remoteNetworkID?: string;
                recipient?: string;
                claimStatus?: boolean;
                expiryTimeSecs?: number;
                expirationStatus?: boolean;
            } = {};
            if (this.assetDetails != null) {
                data.assetDetails = this.assetDetails;
            }
            if (this.localNetworkID != null) {
                data.localNetworkID = this.localNetworkID;
            }
            if (this.remoteNetworkID != null) {
                data.remoteNetworkID = this.remoteNetworkID;
            }
            if (this.recipient != null) {
                data.recipient = this.recipient;
            }
            if (this.claimStatus != null) {
                data.claimStatus = this.claimStatus;
            }
            if (this.expiryTimeSecs != null) {
                data.expiryTimeSecs = this.expiryTimeSecs;
            }
            if (this.expirationStatus != null) {
                data.expirationStatus = this.expirationStatus;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.assetDetails !== undefined)
                writer.writeBytes(1, this.assetDetails);
            if (typeof this.localNetworkID === "string" && this.localNetworkID.length)
                writer.writeString(2, this.localNetworkID);
            if (typeof this.remoteNetworkID === "string" && this.remoteNetworkID.length)
                writer.writeString(3, this.remoteNetworkID);
            if (typeof this.recipient === "string" && this.recipient.length)
                writer.writeString(4, this.recipient);
            if (this.claimStatus !== undefined)
                writer.writeBool(5, this.claimStatus);
            if (this.expiryTimeSecs !== undefined)
                writer.writeUint64(6, this.expiryTimeSecs);
            if (this.expirationStatus !== undefined)
                writer.writeBool(7, this.expirationStatus);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AssetClaimStatus {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AssetClaimStatus();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.assetDetails = reader.readBytes();
                        break;
                    case 2:
                        message.localNetworkID = reader.readString();
                        break;
                    case 3:
                        message.remoteNetworkID = reader.readString();
                        break;
                    case 4:
                        message.recipient = reader.readString();
                        break;
                    case 5:
                        message.claimStatus = reader.readBool();
                        break;
                    case 6:
                        message.expiryTimeSecs = reader.readUint64();
                        break;
                    case 7:
                        message.expirationStatus = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AssetClaimStatus {
            return AssetClaimStatus.deserialize(bytes);
        }
    }
}
