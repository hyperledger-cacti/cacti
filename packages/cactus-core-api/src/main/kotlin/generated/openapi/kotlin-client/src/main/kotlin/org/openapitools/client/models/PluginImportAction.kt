/**
 * Hyperledger Core API
 *
 * Contains/describes the core API types for Cactus. Does not describe actual endpoints on its own as this is left to the implementing plugins who can import and re-use commonly needed type definitions from this specification. One example of said commonly used type definitions would be the types related to consortium management, cactus nodes, ledgers, etc..
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json

/**
 * 
 *
 * Values: iNSTANTIATE,iNSTALL
 */

enum class PluginImportAction(val value: kotlin.String) {

    @Json(name = "org.hyperledger.cactus.plugin_import_action.INSTANTIATE")
    iNSTANTIATE("org.hyperledger.cactus.plugin_import_action.INSTANTIATE"),

    @Json(name = "org.hyperledger.cactus.plugin_import_action.INSTALL")
    iNSTALL("org.hyperledger.cactus.plugin_import_action.INSTALL");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: Any?): kotlin.String? = if (data is PluginImportAction) "$data" else null

        /**
         * Returns a valid [PluginImportAction] for [data], null otherwise.
         */
        fun decode(data: Any?): PluginImportAction? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

