/**
 * Hyperledger Core API
 *
 * Contains/describes the core API types for Cactus. Does not describe actual endpoints on its own as this is left to the implementing plugins who can import and re-use commonly needed type definitions from this specification. One example of said commonly used type definitions would be the types related to consortium management, cactus nodes, ledgers, etc..
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.CactusNode
import org.openapitools.client.models.Consortium
import org.openapitools.client.models.ConsortiumMember
import org.openapitools.client.models.Ledger
import org.openapitools.client.models.PluginInstance

import com.squareup.moshi.Json

/**
 * 
 *
 * @param consortium A collection of Consortium entities. In practice this should only ever contain a single consortium, but we defined it as an array to keep the convention up with the rest of the collections defined in the Consortium data in general. Also, if we ever decide to somehow have some sort of consortium to consortium integration (which does not make much sense in the current frame of mind of the author in the year 2020) then having this as an array will have proven itself to be an excellent long term compatibility/extensibility decision indeed.
 * @param ledger The complete collection of all ledger entities in existence within the consortium.
 * @param consortiumMember The complete collection of all consortium member entities in existence within the consortium.
 * @param cactusNode The complete collection of all cactus nodes entities in existence within the consortium.
 * @param pluginInstance The complete collection of all plugin instance entities in existence within the consortium.
 */

data class ConsortiumDatabase (

    /* A collection of Consortium entities. In practice this should only ever contain a single consortium, but we defined it as an array to keep the convention up with the rest of the collections defined in the Consortium data in general. Also, if we ever decide to somehow have some sort of consortium to consortium integration (which does not make much sense in the current frame of mind of the author in the year 2020) then having this as an array will have proven itself to be an excellent long term compatibility/extensibility decision indeed. */
    @Json(name = "consortium")
    val consortium: kotlin.collections.List<Consortium> = arrayListOf(),

    /* The complete collection of all ledger entities in existence within the consortium. */
    @Json(name = "ledger")
    val ledger: kotlin.collections.List<Ledger> = arrayListOf(),

    /* The complete collection of all consortium member entities in existence within the consortium. */
    @Json(name = "consortiumMember")
    val consortiumMember: kotlin.collections.List<ConsortiumMember> = arrayListOf(),

    /* The complete collection of all cactus nodes entities in existence within the consortium. */
    @Json(name = "cactusNode")
    val cactusNode: kotlin.collections.List<CactusNode> = arrayListOf(),

    /* The complete collection of all plugin instance entities in existence within the consortium. */
    @Json(name = "pluginInstance")
    val pluginInstance: kotlin.collections.List<PluginInstance> = arrayListOf()

)

