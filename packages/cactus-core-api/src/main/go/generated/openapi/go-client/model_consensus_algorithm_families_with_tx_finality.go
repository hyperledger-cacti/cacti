/*
Hyperledger Core API

Contains/describes the core API types for Cactus. Does not describe actual endpoints on its own as this is left to the implementing plugins who can import and re-use commonly needed type definitions from this specification. One example of said commonly used type definitions would be the types related to consortium management, cactus nodes, ledgers, etc..

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-core-api

import (
	"encoding/json"
	"fmt"
)

// ConsensusAlgorithmFamiliesWithTxFinality Enumerates a list of consensus algorithm families that provide immediate finality
type ConsensusAlgorithmFamiliesWithTxFinality string

// List of ConsensusAlgorithmFamiliesWithTxFinality
const (
	AUTHORITY ConsensusAlgorithmFamiliesWithTxFinality = "org.hyperledger.cactus.consensusalgorithm.PROOF_OF_AUTHORITY"
	STAKE ConsensusAlgorithmFamiliesWithTxFinality = "org.hyperledger.cactus.consensusalgorithm.PROOF_OF_STAKE"
)

// All allowed values of ConsensusAlgorithmFamiliesWithTxFinality enum
var AllowedConsensusAlgorithmFamiliesWithTxFinalityEnumValues = []ConsensusAlgorithmFamiliesWithTxFinality{
	"org.hyperledger.cactus.consensusalgorithm.PROOF_OF_AUTHORITY",
	"org.hyperledger.cactus.consensusalgorithm.PROOF_OF_STAKE",
}

func (v *ConsensusAlgorithmFamiliesWithTxFinality) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConsensusAlgorithmFamiliesWithTxFinality(value)
	for _, existing := range AllowedConsensusAlgorithmFamiliesWithTxFinalityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConsensusAlgorithmFamiliesWithTxFinality", value)
}

// NewConsensusAlgorithmFamiliesWithTxFinalityFromValue returns a pointer to a valid ConsensusAlgorithmFamiliesWithTxFinality
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConsensusAlgorithmFamiliesWithTxFinalityFromValue(v string) (*ConsensusAlgorithmFamiliesWithTxFinality, error) {
	ev := ConsensusAlgorithmFamiliesWithTxFinality(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConsensusAlgorithmFamiliesWithTxFinality: valid values are %v", v, AllowedConsensusAlgorithmFamiliesWithTxFinalityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConsensusAlgorithmFamiliesWithTxFinality) IsValid() bool {
	for _, existing := range AllowedConsensusAlgorithmFamiliesWithTxFinalityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConsensusAlgorithmFamiliesWithTxFinality value
func (v ConsensusAlgorithmFamiliesWithTxFinality) Ptr() *ConsensusAlgorithmFamiliesWithTxFinality {
	return &v
}

type NullableConsensusAlgorithmFamiliesWithTxFinality struct {
	value *ConsensusAlgorithmFamiliesWithTxFinality
	isSet bool
}

func (v NullableConsensusAlgorithmFamiliesWithTxFinality) Get() *ConsensusAlgorithmFamiliesWithTxFinality {
	return v.value
}

func (v *NullableConsensusAlgorithmFamiliesWithTxFinality) Set(val *ConsensusAlgorithmFamiliesWithTxFinality) {
	v.value = val
	v.isSet = true
}

func (v NullableConsensusAlgorithmFamiliesWithTxFinality) IsSet() bool {
	return v.isSet
}

func (v *NullableConsensusAlgorithmFamiliesWithTxFinality) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsensusAlgorithmFamiliesWithTxFinality(val *ConsensusAlgorithmFamiliesWithTxFinality) *NullableConsensusAlgorithmFamiliesWithTxFinality {
	return &NullableConsensusAlgorithmFamiliesWithTxFinality{value: val, isSet: true}
}

func (v NullableConsensusAlgorithmFamiliesWithTxFinality) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsensusAlgorithmFamiliesWithTxFinality) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

