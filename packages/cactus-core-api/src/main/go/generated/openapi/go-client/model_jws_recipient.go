/*
Hyperledger Core API

Contains/describes the core API types for Cactus. Does not describe actual endpoints on its own as this is left to the implementing plugins who can import and re-use commonly needed type definitions from this specification. One example of said commonly used type definitions would be the types related to consortium management, cactus nodes, ledgers, etc..

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-core-api

import (
	"encoding/json"
)

// checks if the JWSRecipient type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JWSRecipient{}

// JWSRecipient A JSON Web Signature. See: https://tools.ietf.org/html/rfc7515 for info about standard.
type JWSRecipient struct {
	Signature string `json:"signature"`
	Protected *string `json:"protected,omitempty"`
	Header map[string]interface{} `json:"header,omitempty"`
}

// NewJWSRecipient instantiates a new JWSRecipient object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJWSRecipient(signature string) *JWSRecipient {
	this := JWSRecipient{}
	this.Signature = signature
	return &this
}

// NewJWSRecipientWithDefaults instantiates a new JWSRecipient object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJWSRecipientWithDefaults() *JWSRecipient {
	this := JWSRecipient{}
	return &this
}

// GetSignature returns the Signature field value
func (o *JWSRecipient) GetSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value
// and a boolean to check if the value has been set.
func (o *JWSRecipient) GetSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Signature, true
}

// SetSignature sets field value
func (o *JWSRecipient) SetSignature(v string) {
	o.Signature = v
}

// GetProtected returns the Protected field value if set, zero value otherwise.
func (o *JWSRecipient) GetProtected() string {
	if o == nil || IsNil(o.Protected) {
		var ret string
		return ret
	}
	return *o.Protected
}

// GetProtectedOk returns a tuple with the Protected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JWSRecipient) GetProtectedOk() (*string, bool) {
	if o == nil || IsNil(o.Protected) {
		return nil, false
	}
	return o.Protected, true
}

// HasProtected returns a boolean if a field has been set.
func (o *JWSRecipient) HasProtected() bool {
	if o != nil && !IsNil(o.Protected) {
		return true
	}

	return false
}

// SetProtected gets a reference to the given string and assigns it to the Protected field.
func (o *JWSRecipient) SetProtected(v string) {
	o.Protected = &v
}

// GetHeader returns the Header field value if set, zero value otherwise.
func (o *JWSRecipient) GetHeader() map[string]interface{} {
	if o == nil || IsNil(o.Header) {
		var ret map[string]interface{}
		return ret
	}
	return o.Header
}

// GetHeaderOk returns a tuple with the Header field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JWSRecipient) GetHeaderOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Header) {
		return map[string]interface{}{}, false
	}
	return o.Header, true
}

// HasHeader returns a boolean if a field has been set.
func (o *JWSRecipient) HasHeader() bool {
	if o != nil && !IsNil(o.Header) {
		return true
	}

	return false
}

// SetHeader gets a reference to the given map[string]interface{} and assigns it to the Header field.
func (o *JWSRecipient) SetHeader(v map[string]interface{}) {
	o.Header = v
}

func (o JWSRecipient) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JWSRecipient) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["signature"] = o.Signature
	if !IsNil(o.Protected) {
		toSerialize["protected"] = o.Protected
	}
	if !IsNil(o.Header) {
		toSerialize["header"] = o.Header
	}
	return toSerialize, nil
}

type NullableJWSRecipient struct {
	value *JWSRecipient
	isSet bool
}

func (v NullableJWSRecipient) Get() *JWSRecipient {
	return v.value
}

func (v *NullableJWSRecipient) Set(val *JWSRecipient) {
	v.value = val
	v.isSet = true
}

func (v NullableJWSRecipient) IsSet() bool {
	return v.isSet
}

func (v *NullableJWSRecipient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJWSRecipient(val *JWSRecipient) *NullableJWSRecipient {
	return &NullableJWSRecipient{value: val, isSet: true}
}

func (v NullableJWSRecipient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJWSRecipient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


