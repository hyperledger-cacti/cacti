/*
Hyperledger Core API

Contains/describes the core API types for Cactus. Does not describe actual endpoints on its own as this is left to the implementing plugins who can import and re-use commonly needed type definitions from this specification. One example of said commonly used type definitions would be the types related to consortium management, cactus nodes, ledgers, etc..

API version: 2.0.0-rc.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-core-api

import (
	"encoding/json"
)

// checks if the Ledger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ledger{}

// Ledger struct for Ledger
type Ledger struct {
	Id string `json:"id"`
	LedgerType LedgerType `json:"ledgerType"`
	ConsortiumMemberId *string `json:"consortiumMemberId,omitempty"`
}

// NewLedger instantiates a new Ledger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLedger(id string, ledgerType LedgerType) *Ledger {
	this := Ledger{}
	this.Id = id
	this.LedgerType = ledgerType
	return &this
}

// NewLedgerWithDefaults instantiates a new Ledger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLedgerWithDefaults() *Ledger {
	this := Ledger{}
	return &this
}

// GetId returns the Id field value
func (o *Ledger) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Ledger) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Ledger) SetId(v string) {
	o.Id = v
}

// GetLedgerType returns the LedgerType field value
func (o *Ledger) GetLedgerType() LedgerType {
	if o == nil {
		var ret LedgerType
		return ret
	}

	return o.LedgerType
}

// GetLedgerTypeOk returns a tuple with the LedgerType field value
// and a boolean to check if the value has been set.
func (o *Ledger) GetLedgerTypeOk() (*LedgerType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LedgerType, true
}

// SetLedgerType sets field value
func (o *Ledger) SetLedgerType(v LedgerType) {
	o.LedgerType = v
}

// GetConsortiumMemberId returns the ConsortiumMemberId field value if set, zero value otherwise.
func (o *Ledger) GetConsortiumMemberId() string {
	if o == nil || IsNil(o.ConsortiumMemberId) {
		var ret string
		return ret
	}
	return *o.ConsortiumMemberId
}

// GetConsortiumMemberIdOk returns a tuple with the ConsortiumMemberId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ledger) GetConsortiumMemberIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConsortiumMemberId) {
		return nil, false
	}
	return o.ConsortiumMemberId, true
}

// HasConsortiumMemberId returns a boolean if a field has been set.
func (o *Ledger) HasConsortiumMemberId() bool {
	if o != nil && !IsNil(o.ConsortiumMemberId) {
		return true
	}

	return false
}

// SetConsortiumMemberId gets a reference to the given string and assigns it to the ConsortiumMemberId field.
func (o *Ledger) SetConsortiumMemberId(v string) {
	o.ConsortiumMemberId = &v
}

func (o Ledger) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ledger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["ledgerType"] = o.LedgerType
	if !IsNil(o.ConsortiumMemberId) {
		toSerialize["consortiumMemberId"] = o.ConsortiumMemberId
	}
	return toSerialize, nil
}

type NullableLedger struct {
	value *Ledger
	isSet bool
}

func (v NullableLedger) Get() *Ledger {
	return v.value
}

func (v *NullableLedger) Set(val *Ledger) {
	v.value = val
	v.isSet = true
}

func (v NullableLedger) IsSet() bool {
	return v.isSet
}

func (v *NullableLedger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLedger(val *Ledger) *NullableLedger {
	return &NullableLedger{value: val, isSet: true}
}

func (v NullableLedger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLedger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


