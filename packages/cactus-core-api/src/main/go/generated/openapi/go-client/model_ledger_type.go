/*
Hyperledger Core API

Contains/describes the core API types for Cactus. Does not describe actual endpoints on its own as this is left to the implementing plugins who can import and re-use commonly needed type definitions from this specification. One example of said commonly used type definitions would be the types related to consortium management, cactus nodes, ledgers, etc..

API version: 2.0.0-rc.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-core-api

import (
	"encoding/json"
	"fmt"
)

// LedgerType Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.
type LedgerType string

// List of LedgerType
const (
	BESU_1_X LedgerType = "BESU_1X"
	BESU_2_X LedgerType = "BESU_2X"
	BURROW_0_X LedgerType = "BURROW_0X"
	CORDA_4_X LedgerType = "CORDA_4X"
	FABRIC_2 LedgerType = "FABRIC_2"
	SAWTOOTH_1_X LedgerType = "SAWTOOTH_1X"
)

// All allowed values of LedgerType enum
var AllowedLedgerTypeEnumValues = []LedgerType{
	"BESU_1X",
	"BESU_2X",
	"BURROW_0X",
	"CORDA_4X",
	"FABRIC_2",
	"SAWTOOTH_1X",
}

func (v *LedgerType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LedgerType(value)
	for _, existing := range AllowedLedgerTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LedgerType", value)
}

// NewLedgerTypeFromValue returns a pointer to a valid LedgerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLedgerTypeFromValue(v string) (*LedgerType, error) {
	ev := LedgerType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LedgerType: valid values are %v", v, AllowedLedgerTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LedgerType) IsValid() bool {
	for _, existing := range AllowedLedgerTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LedgerType value
func (v LedgerType) Ptr() *LedgerType {
	return &v
}

type NullableLedgerType struct {
	value *LedgerType
	isSet bool
}

func (v NullableLedgerType) Get() *LedgerType {
	return v.value
}

func (v *NullableLedgerType) Set(val *LedgerType) {
	v.value = val
	v.isSet = true
}

func (v NullableLedgerType) IsSet() bool {
	return v.isSet
}

func (v *NullableLedgerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLedgerType(val *LedgerType) *NullableLedgerType {
	return &NullableLedgerType{value: val, isSet: true}
}

func (v NullableLedgerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLedgerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

