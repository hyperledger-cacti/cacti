/*
 * Hyperledger Core API
 * Contains/describes the core API types for Cactus. Does not describe actual endpoints on its own as this is left to the implementing plugins who can import and re-use commonly needed type definitions from this specification. One example of said commonly used type definitions would be the types related to consortium management, cactus nodes, ledgers, etc..
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets PluginImportAction
 */
@JsonAdapter(PluginImportAction.Adapter.class)
public enum PluginImportAction {
  
  INSTANTIATE("org.hyperledger.cactus.plugin_import_action.INSTANTIATE"),
  
  INSTALL("org.hyperledger.cactus.plugin_import_action.INSTALL");

  private String value;

  PluginImportAction(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static PluginImportAction fromValue(String value) {
    for (PluginImportAction b : PluginImportAction.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<PluginImportAction> {
    @Override
    public void write(final JsonWriter jsonWriter, final PluginImportAction enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public PluginImportAction read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return PluginImportAction.fromValue(value);
    }
  }
}

