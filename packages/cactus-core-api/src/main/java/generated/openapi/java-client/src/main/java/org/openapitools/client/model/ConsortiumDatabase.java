/*
 * Hyperledger Core API
 * Contains/describes the core API types for Cactus. Does not describe actual endpoints on its own as this is left to the implementing plugins who can import and re-use commonly needed type definitions from this specification. One example of said commonly used type definitions would be the types related to consortium management, cactus nodes, ledgers, etc..
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.CactusNode;
import org.openapitools.client.model.Consortium;
import org.openapitools.client.model.ConsortiumMember;
import org.openapitools.client.model.Ledger;
import org.openapitools.client.model.PluginInstance;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConsortiumDatabase
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ConsortiumDatabase {
  public static final String SERIALIZED_NAME_CONSORTIUM = "consortium";
  @SerializedName(SERIALIZED_NAME_CONSORTIUM)
  private List<Consortium> consortium = null;

  public static final String SERIALIZED_NAME_LEDGER = "ledger";
  @SerializedName(SERIALIZED_NAME_LEDGER)
  private List<Ledger> ledger = null;

  public static final String SERIALIZED_NAME_CONSORTIUM_MEMBER = "consortiumMember";
  @SerializedName(SERIALIZED_NAME_CONSORTIUM_MEMBER)
  private List<ConsortiumMember> consortiumMember = null;

  public static final String SERIALIZED_NAME_CACTUS_NODE = "cactusNode";
  @SerializedName(SERIALIZED_NAME_CACTUS_NODE)
  private List<CactusNode> cactusNode = null;

  public static final String SERIALIZED_NAME_PLUGIN_INSTANCE = "pluginInstance";
  @SerializedName(SERIALIZED_NAME_PLUGIN_INSTANCE)
  private List<PluginInstance> pluginInstance = null;

  public ConsortiumDatabase() {
  }

  public ConsortiumDatabase consortium(List<Consortium> consortium) {
    
    this.consortium = consortium;
    return this;
  }

  public ConsortiumDatabase addConsortiumItem(Consortium consortiumItem) {
    if (this.consortium == null) {
      this.consortium = null;
    }
    this.consortium.add(consortiumItem);
    return this;
  }

   /**
   * A collection of Consortium entities. In practice this should only ever contain a single consortium, but we defined it as an array to keep the convention up with the rest of the collections defined in the Consortium data in general. Also, if we ever decide to somehow have some sort of consortium to consortium integration (which does not make much sense in the current frame of mind of the author in the year 2020) then having this as an array will have proven itself to be an excellent long term compatibility/extensibility decision indeed.
   * @return consortium
  **/
  @javax.annotation.Nonnull
  public List<Consortium> getConsortium() {
    return consortium;
  }


  public void setConsortium(List<Consortium> consortium) {
    this.consortium = consortium;
  }


  public ConsortiumDatabase ledger(List<Ledger> ledger) {
    
    this.ledger = ledger;
    return this;
  }

  public ConsortiumDatabase addLedgerItem(Ledger ledgerItem) {
    if (this.ledger == null) {
      this.ledger = null;
    }
    this.ledger.add(ledgerItem);
    return this;
  }

   /**
   * The complete collection of all ledger entities in existence within the consortium.
   * @return ledger
  **/
  @javax.annotation.Nonnull
  public List<Ledger> getLedger() {
    return ledger;
  }


  public void setLedger(List<Ledger> ledger) {
    this.ledger = ledger;
  }


  public ConsortiumDatabase consortiumMember(List<ConsortiumMember> consortiumMember) {
    
    this.consortiumMember = consortiumMember;
    return this;
  }

  public ConsortiumDatabase addConsortiumMemberItem(ConsortiumMember consortiumMemberItem) {
    if (this.consortiumMember == null) {
      this.consortiumMember = null;
    }
    this.consortiumMember.add(consortiumMemberItem);
    return this;
  }

   /**
   * The complete collection of all consortium member entities in existence within the consortium.
   * @return consortiumMember
  **/
  @javax.annotation.Nonnull
  public List<ConsortiumMember> getConsortiumMember() {
    return consortiumMember;
  }


  public void setConsortiumMember(List<ConsortiumMember> consortiumMember) {
    this.consortiumMember = consortiumMember;
  }


  public ConsortiumDatabase cactusNode(List<CactusNode> cactusNode) {
    
    this.cactusNode = cactusNode;
    return this;
  }

  public ConsortiumDatabase addCactusNodeItem(CactusNode cactusNodeItem) {
    if (this.cactusNode == null) {
      this.cactusNode = null;
    }
    this.cactusNode.add(cactusNodeItem);
    return this;
  }

   /**
   * The complete collection of all cactus nodes entities in existence within the consortium.
   * @return cactusNode
  **/
  @javax.annotation.Nonnull
  public List<CactusNode> getCactusNode() {
    return cactusNode;
  }


  public void setCactusNode(List<CactusNode> cactusNode) {
    this.cactusNode = cactusNode;
  }


  public ConsortiumDatabase pluginInstance(List<PluginInstance> pluginInstance) {
    
    this.pluginInstance = pluginInstance;
    return this;
  }

  public ConsortiumDatabase addPluginInstanceItem(PluginInstance pluginInstanceItem) {
    if (this.pluginInstance == null) {
      this.pluginInstance = null;
    }
    this.pluginInstance.add(pluginInstanceItem);
    return this;
  }

   /**
   * The complete collection of all plugin instance entities in existence within the consortium.
   * @return pluginInstance
  **/
  @javax.annotation.Nonnull
  public List<PluginInstance> getPluginInstance() {
    return pluginInstance;
  }


  public void setPluginInstance(List<PluginInstance> pluginInstance) {
    this.pluginInstance = pluginInstance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsortiumDatabase consortiumDatabase = (ConsortiumDatabase) o;
    return Objects.equals(this.consortium, consortiumDatabase.consortium) &&
        Objects.equals(this.ledger, consortiumDatabase.ledger) &&
        Objects.equals(this.consortiumMember, consortiumDatabase.consortiumMember) &&
        Objects.equals(this.cactusNode, consortiumDatabase.cactusNode) &&
        Objects.equals(this.pluginInstance, consortiumDatabase.pluginInstance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consortium, ledger, consortiumMember, cactusNode, pluginInstance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsortiumDatabase {\n");
    sb.append("    consortium: ").append(toIndentedString(consortium)).append("\n");
    sb.append("    ledger: ").append(toIndentedString(ledger)).append("\n");
    sb.append("    consortiumMember: ").append(toIndentedString(consortiumMember)).append("\n");
    sb.append("    cactusNode: ").append(toIndentedString(cactusNode)).append("\n");
    sb.append("    pluginInstance: ").append(toIndentedString(pluginInstance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consortium");
    openapiFields.add("ledger");
    openapiFields.add("consortiumMember");
    openapiFields.add("cactusNode");
    openapiFields.add("pluginInstance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("consortium");
    openapiRequiredFields.add("ledger");
    openapiRequiredFields.add("consortiumMember");
    openapiRequiredFields.add("cactusNode");
    openapiRequiredFields.add("pluginInstance");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConsortiumDatabase
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ConsortiumDatabase.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConsortiumDatabase is not found in the empty JSON string", ConsortiumDatabase.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConsortiumDatabase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConsortiumDatabase` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConsortiumDatabase.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("consortium").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `consortium` to be an array in the JSON string but got `%s`", jsonObj.get("consortium").toString()));
      }

      JsonArray jsonArrayconsortium = jsonObj.getAsJsonArray("consortium");
      // validate the required field `consortium` (array)
      for (int i = 0; i < jsonArrayconsortium.size(); i++) {
        Consortium.validateJsonObject(jsonArrayconsortium.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("ledger").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ledger` to be an array in the JSON string but got `%s`", jsonObj.get("ledger").toString()));
      }

      JsonArray jsonArrayledger = jsonObj.getAsJsonArray("ledger");
      // validate the required field `ledger` (array)
      for (int i = 0; i < jsonArrayledger.size(); i++) {
        Ledger.validateJsonObject(jsonArrayledger.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("consortiumMember").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `consortiumMember` to be an array in the JSON string but got `%s`", jsonObj.get("consortiumMember").toString()));
      }

      JsonArray jsonArrayconsortiumMember = jsonObj.getAsJsonArray("consortiumMember");
      // validate the required field `consortiumMember` (array)
      for (int i = 0; i < jsonArrayconsortiumMember.size(); i++) {
        ConsortiumMember.validateJsonObject(jsonArrayconsortiumMember.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("cactusNode").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cactusNode` to be an array in the JSON string but got `%s`", jsonObj.get("cactusNode").toString()));
      }

      JsonArray jsonArraycactusNode = jsonObj.getAsJsonArray("cactusNode");
      // validate the required field `cactusNode` (array)
      for (int i = 0; i < jsonArraycactusNode.size(); i++) {
        CactusNode.validateJsonObject(jsonArraycactusNode.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("pluginInstance").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pluginInstance` to be an array in the JSON string but got `%s`", jsonObj.get("pluginInstance").toString()));
      }

      JsonArray jsonArraypluginInstance = jsonObj.getAsJsonArray("pluginInstance");
      // validate the required field `pluginInstance` (array)
      for (int i = 0; i < jsonArraypluginInstance.size(); i++) {
        PluginInstance.validateJsonObject(jsonArraypluginInstance.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConsortiumDatabase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConsortiumDatabase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConsortiumDatabase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConsortiumDatabase.class));

       return (TypeAdapter<T>) new TypeAdapter<ConsortiumDatabase>() {
           @Override
           public void write(JsonWriter out, ConsortiumDatabase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConsortiumDatabase read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConsortiumDatabase given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConsortiumDatabase
  * @throws IOException if the JSON string is invalid with respect to ConsortiumDatabase
  */
  public static ConsortiumDatabase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConsortiumDatabase.class);
  }

 /**
  * Convert an instance of ConsortiumDatabase to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

