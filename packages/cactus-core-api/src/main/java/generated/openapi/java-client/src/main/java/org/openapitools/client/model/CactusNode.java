/*
 * Hyperledger Core API
 * Contains/describes the core API types for Cactus. Does not describe actual endpoints on its own as this is left to the implementing plugins who can import and re-use commonly needed type definitions from this specification. One example of said commonly used type definitions would be the types related to consortium management, cactus nodes, ledgers, etc..
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Cactus node can be a single server, or a set of servers behind a load balancer acting as one.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CactusNode {
  public static final String SERIALIZED_NAME_NODE_API_HOST = "nodeApiHost";
  @SerializedName(SERIALIZED_NAME_NODE_API_HOST)
  private String nodeApiHost;

  public static final String SERIALIZED_NAME_PUBLIC_KEY_PEM = "publicKeyPem";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY_PEM)
  private String publicKeyPem;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CONSORTIUM_ID = "consortiumId";
  @SerializedName(SERIALIZED_NAME_CONSORTIUM_ID)
  private String consortiumId;

  public static final String SERIALIZED_NAME_MEMBER_ID = "memberId";
  @SerializedName(SERIALIZED_NAME_MEMBER_ID)
  private String memberId;

  public static final String SERIALIZED_NAME_LEDGER_IDS = "ledgerIds";
  @SerializedName(SERIALIZED_NAME_LEDGER_IDS)
  private List<String> ledgerIds = null;

  public static final String SERIALIZED_NAME_PLUGIN_INSTANCE_IDS = "pluginInstanceIds";
  @SerializedName(SERIALIZED_NAME_PLUGIN_INSTANCE_IDS)
  private List<String> pluginInstanceIds = null;

  public CactusNode() {
  }

  public CactusNode nodeApiHost(String nodeApiHost) {
    
    this.nodeApiHost = nodeApiHost;
    return this;
  }

   /**
   * Get nodeApiHost
   * @return nodeApiHost
  **/
  @javax.annotation.Nonnull
  public String getNodeApiHost() {
    return nodeApiHost;
  }


  public void setNodeApiHost(String nodeApiHost) {
    this.nodeApiHost = nodeApiHost;
  }


  public CactusNode publicKeyPem(String publicKeyPem) {
    
    this.publicKeyPem = publicKeyPem;
    return this;
  }

   /**
   * The PEM encoded public key that was used to generate the JWS included in the response (the jws property)
   * @return publicKeyPem
  **/
  @javax.annotation.Nonnull
  public String getPublicKeyPem() {
    return publicKeyPem;
  }


  public void setPublicKeyPem(String publicKeyPem) {
    this.publicKeyPem = publicKeyPem;
  }


  public CactusNode id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public CactusNode consortiumId(String consortiumId) {
    
    this.consortiumId = consortiumId;
    return this;
  }

   /**
   * Get consortiumId
   * @return consortiumId
  **/
  @javax.annotation.Nonnull
  public String getConsortiumId() {
    return consortiumId;
  }


  public void setConsortiumId(String consortiumId) {
    this.consortiumId = consortiumId;
  }


  public CactusNode memberId(String memberId) {
    
    this.memberId = memberId;
    return this;
  }

   /**
   * Get memberId
   * @return memberId
  **/
  @javax.annotation.Nonnull
  public String getMemberId() {
    return memberId;
  }


  public void setMemberId(String memberId) {
    this.memberId = memberId;
  }


  public CactusNode ledgerIds(List<String> ledgerIds) {
    
    this.ledgerIds = ledgerIds;
    return this;
  }

  public CactusNode addLedgerIdsItem(String ledgerIdsItem) {
    if (this.ledgerIds == null) {
      this.ledgerIds = null;
    }
    this.ledgerIds.add(ledgerIdsItem);
    return this;
  }

   /**
   * Stores an array of Ledger entity IDs that are reachable (routable) via this Cactus Node. This information is used by the client side SDK API client to figure out at runtime where to send API requests that are specific to a certain ledger such as requests to execute transactions.
   * @return ledgerIds
  **/
  @javax.annotation.Nonnull
  public List<String> getLedgerIds() {
    return ledgerIds;
  }


  public void setLedgerIds(List<String> ledgerIds) {
    this.ledgerIds = ledgerIds;
  }


  public CactusNode pluginInstanceIds(List<String> pluginInstanceIds) {
    
    this.pluginInstanceIds = pluginInstanceIds;
    return this;
  }

  public CactusNode addPluginInstanceIdsItem(String pluginInstanceIdsItem) {
    if (this.pluginInstanceIds == null) {
      this.pluginInstanceIds = null;
    }
    this.pluginInstanceIds.add(pluginInstanceIdsItem);
    return this;
  }

   /**
   * Get pluginInstanceIds
   * @return pluginInstanceIds
  **/
  @javax.annotation.Nonnull
  public List<String> getPluginInstanceIds() {
    return pluginInstanceIds;
  }


  public void setPluginInstanceIds(List<String> pluginInstanceIds) {
    this.pluginInstanceIds = pluginInstanceIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CactusNode cactusNode = (CactusNode) o;
    return Objects.equals(this.nodeApiHost, cactusNode.nodeApiHost) &&
        Objects.equals(this.publicKeyPem, cactusNode.publicKeyPem) &&
        Objects.equals(this.id, cactusNode.id) &&
        Objects.equals(this.consortiumId, cactusNode.consortiumId) &&
        Objects.equals(this.memberId, cactusNode.memberId) &&
        Objects.equals(this.ledgerIds, cactusNode.ledgerIds) &&
        Objects.equals(this.pluginInstanceIds, cactusNode.pluginInstanceIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nodeApiHost, publicKeyPem, id, consortiumId, memberId, ledgerIds, pluginInstanceIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CactusNode {\n");
    sb.append("    nodeApiHost: ").append(toIndentedString(nodeApiHost)).append("\n");
    sb.append("    publicKeyPem: ").append(toIndentedString(publicKeyPem)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    consortiumId: ").append(toIndentedString(consortiumId)).append("\n");
    sb.append("    memberId: ").append(toIndentedString(memberId)).append("\n");
    sb.append("    ledgerIds: ").append(toIndentedString(ledgerIds)).append("\n");
    sb.append("    pluginInstanceIds: ").append(toIndentedString(pluginInstanceIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nodeApiHost");
    openapiFields.add("publicKeyPem");
    openapiFields.add("id");
    openapiFields.add("consortiumId");
    openapiFields.add("memberId");
    openapiFields.add("ledgerIds");
    openapiFields.add("pluginInstanceIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("nodeApiHost");
    openapiRequiredFields.add("publicKeyPem");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("consortiumId");
    openapiRequiredFields.add("memberId");
    openapiRequiredFields.add("ledgerIds");
    openapiRequiredFields.add("pluginInstanceIds");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CactusNode
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CactusNode.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CactusNode is not found in the empty JSON string", CactusNode.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CactusNode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CactusNode` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CactusNode.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("nodeApiHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeApiHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeApiHost").toString()));
      }
      if (!jsonObj.get("publicKeyPem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicKeyPem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicKeyPem").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("consortiumId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consortiumId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consortiumId").toString()));
      }
      if (!jsonObj.get("memberId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `memberId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("memberId").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("ledgerIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("ledgerIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ledgerIds` to be an array in the JSON string but got `%s`", jsonObj.get("ledgerIds").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("pluginInstanceIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("pluginInstanceIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pluginInstanceIds` to be an array in the JSON string but got `%s`", jsonObj.get("pluginInstanceIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CactusNode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CactusNode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CactusNode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CactusNode.class));

       return (TypeAdapter<T>) new TypeAdapter<CactusNode>() {
           @Override
           public void write(JsonWriter out, CactusNode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CactusNode read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CactusNode given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CactusNode
  * @throws IOException if the JSON string is invalid with respect to CactusNode
  */
  public static CactusNode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CactusNode.class);
  }

 /**
  * Convert an instance of CactusNode to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

