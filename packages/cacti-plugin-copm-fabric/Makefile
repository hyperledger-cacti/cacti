WORKSPACE ?= $(shell realpath `pwd`/../../)
DOCKER_IMAGES=hyperledger/fabric-orderer hyperledger/fabric-peer hyperledger/fabric-ca ghcr.io/hyperledger/cacti-weaver-iin-agent ghcr.io/hyperledger/cacti-weaver-relay-server ghcr.io/hyperledger/cacti-weaver-driver-fabric

pledge%: chaincode = simpleassettransfer
lock%: chaincode = simpleasset

.fabric-network:
	export GO111MODULE=auto
	cd $(WORKSPACE)/weaver/tests/network-setups/fabric/dev && \
	make start-interop-local CHAINCODE_NAME=$(chaincode) PROFILE='2-nodes'

drivers: 
	cd $(WORKSPACE)/weaver/core/drivers/fabric-driver && \
	sed -i "s#<PATH-TO-WEAVER>#$(WORKSPACE)/weaver#g" docker-testnet-envs/.env.n1 &&\
	sed -i "s#<PATH-TO-WEAVER>#$(WORKSPACE)/weaver#g" docker-testnet-envs/.env.n2 && \
	make deploy COMPOSE_ARG='--env-file docker-testnet-envs/.env.n1' NETWORK_NAME=network1 && \
	make deploy COMPOSE_ARG='--env-file docker-testnet-envs/.env.n2' NETWORK_NAME=network2

relays:
	cd $(WORKSPACE)/weaver/core/relay && \
	make convert-compose-method2 && \
	make start-server COMPOSE_ARG='--env-file docker/testnet-envs/.env.n1' && \
	make start-server COMPOSE_ARG='--env-file docker/testnet-envs/.env.n2' 

iin:
	cd $(WORKSPACE)/weaver/core/identity-management/iin-agent && \
	sed -i "s#<PATH-TO-WEAVER>#$(WORKSPACE)/weaver#g" docker-testnet/envs/.env.n1.org1 && \
	sed -i "s#^AUTO_SYNC=true#AUTO_SYNC=false#g" docker-testnet/envs/.env.n1.org1 && \
	sed -i "s#^DNS_CONFIG_PATH=.*#DNS_CONFIG_PATH=./docker-testnet/configs/dnsconfig-2-nodes.json#g" docker-testnet/envs/.env.n1.org1 && \
	sed -i "s#<PATH-TO-WEAVER>#$(WORKSPACE)/weaver#g" docker-testnet/envs/.env.n1.org2 && \
	sed -i "s#^AUTO_SYNC=true#AUTO_SYNC=false#g" docker-testnet/envs/.env.n1.org2 && \
	sed -i "s#^DNS_CONFIG_PATH=.*#DNS_CONFIG_PATH=./docker-testnet/configs/dnsconfig-2-nodes.json#g" docker-testnet/envs/.env.n1.org2 && \
	sed -i "s#<PATH-TO-WEAVER>#$(WORKSPACE)/weaver#g" docker-testnet/envs/.env.n2.org1 && \
	sed -i "s#^AUTO_SYNC=true#AUTO_SYNC=false#g" docker-testnet/envs/.env.n2.org1 && \
	sed -i "s#^DNS_CONFIG_PATH=.*#DNS_CONFIG_PATH=./docker-testnet/configs/dnsconfig-2-nodes.json#g" docker-testnet/envs/.env.n2.org1 && \
	sed -i "s#<PATH-TO-WEAVER>#$(WORKSPACE)/weaver#g" docker-testnet/envs/.env.n2.org2 && \
	sed -i "s#^AUTO_SYNC=true#AUTO_SYNC=false#g" docker-testnet/envs/.env.n2.org2 && \
	sed -i "s#^DNS_CONFIG_PATH=.*#DNS_CONFIG_PATH=./docker-testnet/configs/dnsconfig-2-nodes.json#g" docker-testnet/envs/.env.n2.org2 && \
	make build-image-local && \
	make deploy COMPOSE_ARG='--env-file docker-testnet/envs/.env.n1.org1' DLT_SPECIFIC_DIR=$(WORKSPACE)/weaver/tests/network-setups/fabric/shared/network1/peerOrganizations/org1.network1.com && \
	make deploy COMPOSE_ARG='--env-file docker-testnet/envs/.env.n1.org2' DLT_SPECIFIC_DIR=$(WORKSPACE)/weaver/tests/network-setups/fabric/shared/network1/peerOrganizations/org2.network1.com && \
	make deploy COMPOSE_ARG='--env-file docker-testnet/envs/.env.n2.org1' DLT_SPECIFIC_DIR=$(WORKSPACE)/weaver/tests/network-setups/fabric/shared/network2/peerOrganizations/org1.network2.com && \
	make deploy COMPOSE_ARG='--env-file docker-testnet/envs/.env.n2.org2' DLT_SPECIFIC_DIR=$(WORKSPACE)/weaver/tests/network-setups/fabric/shared/network2/peerOrganizations/org2.network2.com 


.fabric-config:
	cd $(WORKSPACE)/weaver/samples/fabric/fabric-cli && \
	./bin/fabric-cli env set MEMBER_CREDENTIAL_FOLDER $(WORKSPACE)/weaver/samples/fabric/fabric-cli/src/data/credentials_docker && \
	./bin/fabric-cli env set CONFIG_PATH $(WORKSPACE)/weaver/samples/fabric/fabric-cli/config.json && \
	./bin/fabric-cli env set DEFAULT_APPLICATION_CHAINCODE $(chaincode) && \
	./bin/fabric-cli env set REMOTE_CONFIG_PATH $(WORKSPACE)/weaver/samples/fabric/fabric-cli/remote-network-config.json && \
	./bin/fabric-cli env set CHAINCODE_PATH $(WORKSPACE)/weaver/samples/fabric/fabric-cli/chaincode.json && \
	cat .env && \
	cp config.template.json config.json && \
	sed -i "s#<PATH-TO-WEAVER>#$(WORKSPACE)/weaver#g" config.json && \
	./bin/fabric-cli config set network2 aclPolicyPrincipalType ca && \
	./bin/fabric-cli config set network1 chaincode $(chaincode) && \
	./bin/fabric-cli config set network2 chaincode $(chaincode) && \
	cp chaincode.json.template chaincode.json && \
	cp remote-network-config.json.template remote-network-config.json && \
	sed -i "s#localhost:9080#relay-network1:9080#g" remote-network-config.json && \
	sed -i "s#localhost:9081#relay-corda:9081#g" remote-network-config.json && \
	sed -i "s#localhost:9082#relay-corda2:9082#g" remote-network-config.json && \
	sed -i "s#localhost:9083#relay-network2:9083#g" remote-network-config.json && \
	sed -i "s#localhost:10006#corda_partya_1:10003#g" remote-network-config.json && \
	sed -i "s#localhost:30006#corda_network2_partya_1:10003#g" remote-network-config.json && \
	./bin/fabric-cli configure create all --local-network=network1 && \
	./bin/fabric-cli configure create all --local-network=network2 && \
	./bin/fabric-cli configure network --local-network=network1 --num-orgs=2 && \
	./bin/fabric-cli configure network --local-network=network2 --num-orgs=2 && \
	./bin/fabric-cli configure membership --local-network=network1 --target-network=network2 --iin-agent-endpoint=localhost:9500 && \
	sleep 30 && \
	docker logs iin-agent-Org1MSP-network1 && \
	docker logs iin-agent-Org1MSP-network2 && \
	./bin/fabric-cli configure membership --local-network=network2 --target-network=network1 --iin-agent-endpoint=localhost:9501 && \
	sleep 30 && \
	docker logs iin-agent-Org1MSP-network1 && \
	docker logs iin-agent-Org1MSP-network2 

PATH := $(PATH):$(WORKSPACE)/protoc/bin

setup:
	cd $(WORKSPACE)/weaver/common/protos-js && make build
	cd $(WORKSPACE)/weaver/core/network/fabric-interop-cc && make build
	rm -Rf $(WORKSPACE)/weaver/sdks/fabric/interoperation-node-sdk/build
	cd $(WORKSPACE)/weaver/sdks/fabric/interoperation-node-sdk && make build-local
	cd $(WORKSPACE)/weaver/core/identity-management/iin-agent && make build-local
	cd $(WORKSPACE)/weaver/samples/fabric/fabric-cli && npm install --global yarn && make build-local 

.test-network: .fabric-network relays drivers iin .fabric-config

pledge-network: .test-network 

lock-network: .test-network

define stop_docker
echo "removing $(1)"
docker stop `docker container ls -a -q -f ancestor=$(1) | xargs` || true
docker rm `docker container ls -a -q -f ancestor=$(1) | xargs` || true
endef

clean-network:
	$(foreach image,$(DOCKER_IMAGES),$(call stop_docker,$(image)))
	docker volume prune -f
	docker volume rm  network2_peer0.org2.network2.com || true
	docker volume rm network1_peer0.org2.network1.com || true
	if [ "$(shell id -un )" != "root" ]; then  \
		sudo chown -R $(shell id -un ) $(WORKSPACE)/weaver/tests/network-setups/fabric/shared; \
	fi 
	cd $(WORKSPACE)/weaver/tests/network-setups/fabric/dev && make clean
