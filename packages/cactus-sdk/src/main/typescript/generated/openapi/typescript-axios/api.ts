/* tslint:disable */
/* eslint-disable */
/**
 * Hyperledger Cactus API
 * Interact with a Cactus deployment through HTTP.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface HealthCheckResponse
 */
export interface HealthCheckResponse {
    /**
     * 
     * @type {boolean}
     * @memberof HealthCheckResponse
     */
    success?: boolean;
    /**
     * 
     * @type {string}
     * @memberof HealthCheckResponse
     */
    createdAt: string;
    /**
     * 
     * @type {MemoryUsage}
     * @memberof HealthCheckResponse
     */
    memoryUsage: MemoryUsage;
}
/**
 * 
 * @export
 * @interface MemoryUsage
 */
export interface MemoryUsage {
    /**
     * 
     * @type {number}
     * @memberof MemoryUsage
     */
    rss?: number;
    /**
     * 
     * @type {number}
     * @memberof MemoryUsage
     */
    heapTotal?: number;
    /**
     * 
     * @type {number}
     * @memberof MemoryUsage
     */
    heapUsed?: number;
    /**
     * 
     * @type {number}
     * @memberof MemoryUsage
     */
    external?: number;
    /**
     * 
     * @type {number}
     * @memberof MemoryUsage
     */
    arrayBuffers?: number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the current timestamp of the API server as proof of health/liveness
         * @summary Can be used to verify liveness of an API server instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ApiServerHealthcheckGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/api-server/healthcheck`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns the current timestamp of the API server as proof of health/liveness
         * @summary Can be used to verify liveness of an API server instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ApiServerHealthcheckGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthCheckResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiV1ApiServerHealthcheckGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns the current timestamp of the API server as proof of health/liveness
         * @summary Can be used to verify liveness of an API server instance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ApiServerHealthcheckGet(options?: any): AxiosPromise<HealthCheckResponse> {
            return DefaultApiFp(configuration).apiV1ApiServerHealthcheckGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Returns the current timestamp of the API server as proof of health/liveness
     * @summary Can be used to verify liveness of an API server instance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ApiServerHealthcheckGet(options?: any) {
        return DefaultApiFp(this.configuration).apiV1ApiServerHealthcheckGet(options).then((request) => request(this.axios, this.basePath));
    }
}


