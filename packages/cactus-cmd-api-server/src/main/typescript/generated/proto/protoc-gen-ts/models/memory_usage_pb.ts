/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.6
 * source: models/memory_usage_pb.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
import * as pb_1 from "google-protobuf";
export namespace org.hyperledger.cactus.cmd_api_server {
    export class MemoryUsagePB extends pb_1.Message {
        constructor(data?: any[] | {
            rss?: number;
            heapTotal?: number;
            heapUsed?: number;
            external?: number;
            arrayBuffers?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rss" in data && data.rss != undefined) {
                    this.rss = data.rss;
                }
                if ("heapTotal" in data && data.heapTotal != undefined) {
                    this.heapTotal = data.heapTotal;
                }
                if ("heapUsed" in data && data.heapUsed != undefined) {
                    this.heapUsed = data.heapUsed;
                }
                if ("external" in data && data.external != undefined) {
                    this.external = data.external;
                }
                if ("arrayBuffers" in data && data.arrayBuffers != undefined) {
                    this.arrayBuffers = data.arrayBuffers;
                }
            }
        }
        get rss() {
            return pb_1.Message.getField(this, 113234) as number;
        }
        set rss(value: number) {
            pb_1.Message.setField(this, 113234, value);
        }
        get heapTotal() {
            return pb_1.Message.getField(this, 114487480) as number;
        }
        set heapTotal(value: number) {
            pb_1.Message.setField(this, 114487480, value);
        }
        get heapUsed() {
            return pb_1.Message.getField(this, 30910521) as number;
        }
        set heapUsed(value: number) {
            pb_1.Message.setField(this, 30910521, value);
        }
        get external() {
            return pb_1.Message.getField(this, 210148408) as number;
        }
        set external(value: number) {
            pb_1.Message.setField(this, 210148408, value);
        }
        get arrayBuffers() {
            return pb_1.Message.getField(this, 116952168) as number;
        }
        set arrayBuffers(value: number) {
            pb_1.Message.setField(this, 116952168, value);
        }
        static fromObject(data: {
            rss?: number;
            heapTotal?: number;
            heapUsed?: number;
            external?: number;
            arrayBuffers?: number;
        }) {
            const message = new MemoryUsagePB({});
            if (data.rss != null) {
                message.rss = data.rss;
            }
            if (data.heapTotal != null) {
                message.heapTotal = data.heapTotal;
            }
            if (data.heapUsed != null) {
                message.heapUsed = data.heapUsed;
            }
            if (data.external != null) {
                message.external = data.external;
            }
            if (data.arrayBuffers != null) {
                message.arrayBuffers = data.arrayBuffers;
            }
            return message;
        }
        toObject() {
            const data: {
                rss?: number;
                heapTotal?: number;
                heapUsed?: number;
                external?: number;
                arrayBuffers?: number;
            } = {};
            if (this.rss != null) {
                data.rss = this.rss;
            }
            if (this.heapTotal != null) {
                data.heapTotal = this.heapTotal;
            }
            if (this.heapUsed != null) {
                data.heapUsed = this.heapUsed;
            }
            if (this.external != null) {
                data.external = this.external;
            }
            if (this.arrayBuffers != null) {
                data.arrayBuffers = this.arrayBuffers;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rss !== undefined)
                writer.writeFloat(113234, this.rss);
            if (this.heapTotal !== undefined)
                writer.writeFloat(114487480, this.heapTotal);
            if (this.heapUsed !== undefined)
                writer.writeFloat(30910521, this.heapUsed);
            if (this.external !== undefined)
                writer.writeFloat(210148408, this.external);
            if (this.arrayBuffers !== undefined)
                writer.writeFloat(116952168, this.arrayBuffers);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemoryUsagePB {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemoryUsagePB();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 113234:
                        message.rss = reader.readFloat();
                        break;
                    case 114487480:
                        message.heapTotal = reader.readFloat();
                        break;
                    case 30910521:
                        message.heapUsed = reader.readFloat();
                        break;
                    case 210148408:
                        message.external = reader.readFloat();
                        break;
                    case 116952168:
                        message.arrayBuffers = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MemoryUsagePB {
            return MemoryUsagePB.deserialize(bytes);
        }
    }
}
