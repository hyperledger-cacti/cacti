/*
Hyperledger Cactus API

Interact with a Cactus deployment through HTTP.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-cmd-api-server

import (
	"encoding/json"
	"fmt"
)

// WatchHealthcheckV1 the model 'WatchHealthcheckV1'
type WatchHealthcheckV1 string

// List of WatchHealthcheckV1
const (
	Subscribe WatchHealthcheckV1 = "org.hyperledger.cactus.api.async.besu.WatchHealthcheckV1.Subscribe"
	Next WatchHealthcheckV1 = "org.hyperledger.cactus.api.async.besu.WatchHealthcheckV1.Next"
	Unsubscribe WatchHealthcheckV1 = "org.hyperledger.cactus.api.async.besu.WatchHealthcheckV1.Unsubscribe"
	Error WatchHealthcheckV1 = "org.hyperledger.cactus.api.async.besu.WatchHealthcheckV1.Error"
	Complete WatchHealthcheckV1 = "org.hyperledger.cactus.api.async.besu.WatchHealthcheckV1.Complete"
)

// All allowed values of WatchHealthcheckV1 enum
var AllowedWatchHealthcheckV1EnumValues = []WatchHealthcheckV1{
	"org.hyperledger.cactus.api.async.besu.WatchHealthcheckV1.Subscribe",
	"org.hyperledger.cactus.api.async.besu.WatchHealthcheckV1.Next",
	"org.hyperledger.cactus.api.async.besu.WatchHealthcheckV1.Unsubscribe",
	"org.hyperledger.cactus.api.async.besu.WatchHealthcheckV1.Error",
	"org.hyperledger.cactus.api.async.besu.WatchHealthcheckV1.Complete",
}

func (v *WatchHealthcheckV1) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WatchHealthcheckV1(value)
	for _, existing := range AllowedWatchHealthcheckV1EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WatchHealthcheckV1", value)
}

// NewWatchHealthcheckV1FromValue returns a pointer to a valid WatchHealthcheckV1
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWatchHealthcheckV1FromValue(v string) (*WatchHealthcheckV1, error) {
	ev := WatchHealthcheckV1(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WatchHealthcheckV1: valid values are %v", v, AllowedWatchHealthcheckV1EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WatchHealthcheckV1) IsValid() bool {
	for _, existing := range AllowedWatchHealthcheckV1EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WatchHealthcheckV1 value
func (v WatchHealthcheckV1) Ptr() *WatchHealthcheckV1 {
	return &v
}

type NullableWatchHealthcheckV1 struct {
	value *WatchHealthcheckV1
	isSet bool
}

func (v NullableWatchHealthcheckV1) Get() *WatchHealthcheckV1 {
	return v.value
}

func (v *NullableWatchHealthcheckV1) Set(val *WatchHealthcheckV1) {
	v.value = val
	v.isSet = true
}

func (v NullableWatchHealthcheckV1) IsSet() bool {
	return v.isSet
}

func (v *NullableWatchHealthcheckV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWatchHealthcheckV1(val *WatchHealthcheckV1) *NullableWatchHealthcheckV1 {
	return &NullableWatchHealthcheckV1{value: val, isSet: true}
}

func (v NullableWatchHealthcheckV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWatchHealthcheckV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

