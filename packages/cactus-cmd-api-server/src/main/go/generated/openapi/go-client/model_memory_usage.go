/*
Hyperledger Cactus API

Interact with a Cactus deployment through HTTP.

API version: 2.0.0-rc.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-cmd-api-server

import (
	"encoding/json"
)

// checks if the MemoryUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemoryUsage{}

// MemoryUsage struct for MemoryUsage
type MemoryUsage struct {
	Rss *float32 `json:"rss,omitempty"`
	HeapTotal *float32 `json:"heapTotal,omitempty"`
	HeapUsed *float32 `json:"heapUsed,omitempty"`
	External *float32 `json:"external,omitempty"`
	ArrayBuffers *float32 `json:"arrayBuffers,omitempty"`
}

// NewMemoryUsage instantiates a new MemoryUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemoryUsage() *MemoryUsage {
	this := MemoryUsage{}
	return &this
}

// NewMemoryUsageWithDefaults instantiates a new MemoryUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemoryUsageWithDefaults() *MemoryUsage {
	this := MemoryUsage{}
	return &this
}

// GetRss returns the Rss field value if set, zero value otherwise.
func (o *MemoryUsage) GetRss() float32 {
	if o == nil || IsNil(o.Rss) {
		var ret float32
		return ret
	}
	return *o.Rss
}

// GetRssOk returns a tuple with the Rss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryUsage) GetRssOk() (*float32, bool) {
	if o == nil || IsNil(o.Rss) {
		return nil, false
	}
	return o.Rss, true
}

// HasRss returns a boolean if a field has been set.
func (o *MemoryUsage) HasRss() bool {
	if o != nil && !IsNil(o.Rss) {
		return true
	}

	return false
}

// SetRss gets a reference to the given float32 and assigns it to the Rss field.
func (o *MemoryUsage) SetRss(v float32) {
	o.Rss = &v
}

// GetHeapTotal returns the HeapTotal field value if set, zero value otherwise.
func (o *MemoryUsage) GetHeapTotal() float32 {
	if o == nil || IsNil(o.HeapTotal) {
		var ret float32
		return ret
	}
	return *o.HeapTotal
}

// GetHeapTotalOk returns a tuple with the HeapTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryUsage) GetHeapTotalOk() (*float32, bool) {
	if o == nil || IsNil(o.HeapTotal) {
		return nil, false
	}
	return o.HeapTotal, true
}

// HasHeapTotal returns a boolean if a field has been set.
func (o *MemoryUsage) HasHeapTotal() bool {
	if o != nil && !IsNil(o.HeapTotal) {
		return true
	}

	return false
}

// SetHeapTotal gets a reference to the given float32 and assigns it to the HeapTotal field.
func (o *MemoryUsage) SetHeapTotal(v float32) {
	o.HeapTotal = &v
}

// GetHeapUsed returns the HeapUsed field value if set, zero value otherwise.
func (o *MemoryUsage) GetHeapUsed() float32 {
	if o == nil || IsNil(o.HeapUsed) {
		var ret float32
		return ret
	}
	return *o.HeapUsed
}

// GetHeapUsedOk returns a tuple with the HeapUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryUsage) GetHeapUsedOk() (*float32, bool) {
	if o == nil || IsNil(o.HeapUsed) {
		return nil, false
	}
	return o.HeapUsed, true
}

// HasHeapUsed returns a boolean if a field has been set.
func (o *MemoryUsage) HasHeapUsed() bool {
	if o != nil && !IsNil(o.HeapUsed) {
		return true
	}

	return false
}

// SetHeapUsed gets a reference to the given float32 and assigns it to the HeapUsed field.
func (o *MemoryUsage) SetHeapUsed(v float32) {
	o.HeapUsed = &v
}

// GetExternal returns the External field value if set, zero value otherwise.
func (o *MemoryUsage) GetExternal() float32 {
	if o == nil || IsNil(o.External) {
		var ret float32
		return ret
	}
	return *o.External
}

// GetExternalOk returns a tuple with the External field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryUsage) GetExternalOk() (*float32, bool) {
	if o == nil || IsNil(o.External) {
		return nil, false
	}
	return o.External, true
}

// HasExternal returns a boolean if a field has been set.
func (o *MemoryUsage) HasExternal() bool {
	if o != nil && !IsNil(o.External) {
		return true
	}

	return false
}

// SetExternal gets a reference to the given float32 and assigns it to the External field.
func (o *MemoryUsage) SetExternal(v float32) {
	o.External = &v
}

// GetArrayBuffers returns the ArrayBuffers field value if set, zero value otherwise.
func (o *MemoryUsage) GetArrayBuffers() float32 {
	if o == nil || IsNil(o.ArrayBuffers) {
		var ret float32
		return ret
	}
	return *o.ArrayBuffers
}

// GetArrayBuffersOk returns a tuple with the ArrayBuffers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryUsage) GetArrayBuffersOk() (*float32, bool) {
	if o == nil || IsNil(o.ArrayBuffers) {
		return nil, false
	}
	return o.ArrayBuffers, true
}

// HasArrayBuffers returns a boolean if a field has been set.
func (o *MemoryUsage) HasArrayBuffers() bool {
	if o != nil && !IsNil(o.ArrayBuffers) {
		return true
	}

	return false
}

// SetArrayBuffers gets a reference to the given float32 and assigns it to the ArrayBuffers field.
func (o *MemoryUsage) SetArrayBuffers(v float32) {
	o.ArrayBuffers = &v
}

func (o MemoryUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemoryUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Rss) {
		toSerialize["rss"] = o.Rss
	}
	if !IsNil(o.HeapTotal) {
		toSerialize["heapTotal"] = o.HeapTotal
	}
	if !IsNil(o.HeapUsed) {
		toSerialize["heapUsed"] = o.HeapUsed
	}
	if !IsNil(o.External) {
		toSerialize["external"] = o.External
	}
	if !IsNil(o.ArrayBuffers) {
		toSerialize["arrayBuffers"] = o.ArrayBuffers
	}
	return toSerialize, nil
}

type NullableMemoryUsage struct {
	value *MemoryUsage
	isSet bool
}

func (v NullableMemoryUsage) Get() *MemoryUsage {
	return v.value
}

func (v *NullableMemoryUsage) Set(val *MemoryUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableMemoryUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableMemoryUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemoryUsage(val *MemoryUsage) *NullableMemoryUsage {
	return &NullableMemoryUsage{value: val, isSet: true}
}

func (v NullableMemoryUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemoryUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


