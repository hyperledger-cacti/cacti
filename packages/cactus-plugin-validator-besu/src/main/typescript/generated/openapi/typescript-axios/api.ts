// tslint:disable
/**
 * Hyperledger Cactus Plugin - Validator Besu Web Service
 * Obtain signatures of ledger state from Cactus nodes through the API .
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface SignTransactionRequest
 */
export interface SignTransactionRequest {
    /**
     * The transaction hash of ledger will be used to fetch the contain.
     * @type {string}
     * @memberof SignTransactionRequest
     */
    transactionHash: string;
}
/**
 * 
 * @export
 * @interface SignTransactionResponse
 */
export interface SignTransactionResponse {
    /**
     * The signatures of ledger from the corresponding transaction hash.
     * @type {string}
     * @memberof SignTransactionResponse
     */
    signature: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Obtain signatures of ledger from the corresponding transaction hash.
         * @summary Obtain signatures of ledger from the corresponding transaction hash.
         * @param {SignTransactionRequest} signTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PluginsHyperledgerCactusPluginValidatorBesuSignTransactionPost(signTransactionRequest: SignTransactionRequest, options: any = {}): RequestArgs {
            // verify required parameter 'signTransactionRequest' is not null or undefined
            if (signTransactionRequest === null || signTransactionRequest === undefined) {
                throw new RequiredError('signTransactionRequest','Required parameter signTransactionRequest was null or undefined when calling apiV1PluginsHyperledgerCactusPluginValidatorBesuSignTransactionPost.');
            }
            const localVarPath = `/api/v1/plugins/@hyperledger/cactus-plugin-validator-besu/sign-transaction`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof signTransactionRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(signTransactionRequest !== undefined ? signTransactionRequest : {}) : (signTransactionRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Obtain signatures of ledger from the corresponding transaction hash.
         * @summary Obtain signatures of ledger from the corresponding transaction hash.
         * @param {SignTransactionRequest} signTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PluginsHyperledgerCactusPluginValidatorBesuSignTransactionPost(signTransactionRequest: SignTransactionRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignTransactionResponse> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiV1PluginsHyperledgerCactusPluginValidatorBesuSignTransactionPost(signTransactionRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Obtain signatures of ledger from the corresponding transaction hash.
         * @summary Obtain signatures of ledger from the corresponding transaction hash.
         * @param {SignTransactionRequest} signTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PluginsHyperledgerCactusPluginValidatorBesuSignTransactionPost(signTransactionRequest: SignTransactionRequest, options?: any): AxiosPromise<SignTransactionResponse> {
            return DefaultApiFp(configuration).apiV1PluginsHyperledgerCactusPluginValidatorBesuSignTransactionPost(signTransactionRequest, options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Obtain signatures of ledger from the corresponding transaction hash.
     * @summary Obtain signatures of ledger from the corresponding transaction hash.
     * @param {SignTransactionRequest} signTransactionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PluginsHyperledgerCactusPluginValidatorBesuSignTransactionPost(signTransactionRequest: SignTransactionRequest, options?: any) {
        return DefaultApiFp(this.configuration).apiV1PluginsHyperledgerCactusPluginValidatorBesuSignTransactionPost(signTransactionRequest, options)(this.axios, this.basePath);
    }

}


