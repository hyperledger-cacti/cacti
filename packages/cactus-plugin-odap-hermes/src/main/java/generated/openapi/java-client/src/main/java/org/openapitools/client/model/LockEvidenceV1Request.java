/*
 * Hyperledger Cactus Plugin - Odap Hermes
 * Implementation for Odap and Hermes
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LockEvidenceV1Request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LockEvidenceV1Request {
  public static final String SERIALIZED_NAME_SESSION_I_D = "sessionID";
  @SerializedName(SERIALIZED_NAME_SESSION_I_D)
  private String sessionID;

  public static final String SERIALIZED_NAME_CLIENT_IDENTITY_PUBKEY = "clientIdentityPubkey";
  @SerializedName(SERIALIZED_NAME_CLIENT_IDENTITY_PUBKEY)
  private String clientIdentityPubkey;

  public static final String SERIALIZED_NAME_SERVER_IDENTITY_PUBKEY = "serverIdentityPubkey";
  @SerializedName(SERIALIZED_NAME_SERVER_IDENTITY_PUBKEY)
  private String serverIdentityPubkey;

  public static final String SERIALIZED_NAME_LOCK_EVIDENCE_CLAIM = "lockEvidenceClaim";
  @SerializedName(SERIALIZED_NAME_LOCK_EVIDENCE_CLAIM)
  private String lockEvidenceClaim;

  public static final String SERIALIZED_NAME_LOCK_EVIDENCE_FORMAT = "lockEvidenceFormat";
  @SerializedName(SERIALIZED_NAME_LOCK_EVIDENCE_FORMAT)
  private Object lockEvidenceFormat;

  public static final String SERIALIZED_NAME_LOCK_EVIDENCE_EXPIRATION = "lockEvidenceExpiration";
  @SerializedName(SERIALIZED_NAME_LOCK_EVIDENCE_EXPIRATION)
  private String lockEvidenceExpiration;

  public static final String SERIALIZED_NAME_HASH_COMMENCE_ACK_REQUEST = "hashCommenceAckRequest";
  @SerializedName(SERIALIZED_NAME_HASH_COMMENCE_ACK_REQUEST)
  private String hashCommenceAckRequest;

  public static final String SERIALIZED_NAME_CLIENT_TRANSFER_NUMBER = "clientTransferNumber";
  @SerializedName(SERIALIZED_NAME_CLIENT_TRANSFER_NUMBER)
  private Integer clientTransferNumber;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public static final String SERIALIZED_NAME_MESSAGE_TYPE = "messageType";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TYPE)
  private String messageType;

  public static final String SERIALIZED_NAME_MESSAGE_HASH = "messageHash";
  @SerializedName(SERIALIZED_NAME_MESSAGE_HASH)
  private String messageHash;

  public static final String SERIALIZED_NAME_SEQUENCE_NUMBER = "sequenceNumber";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_NUMBER)
  private BigDecimal sequenceNumber;

  public LockEvidenceV1Request() {
  }

  public LockEvidenceV1Request sessionID(String sessionID) {
    
    this.sessionID = sessionID;
    return this;
  }

   /**
   * Get sessionID
   * @return sessionID
  **/
  @javax.annotation.Nonnull
  public String getSessionID() {
    return sessionID;
  }


  public void setSessionID(String sessionID) {
    this.sessionID = sessionID;
  }


  public LockEvidenceV1Request clientIdentityPubkey(String clientIdentityPubkey) {
    
    this.clientIdentityPubkey = clientIdentityPubkey;
    return this;
  }

   /**
   * Get clientIdentityPubkey
   * @return clientIdentityPubkey
  **/
  @javax.annotation.Nonnull
  public String getClientIdentityPubkey() {
    return clientIdentityPubkey;
  }


  public void setClientIdentityPubkey(String clientIdentityPubkey) {
    this.clientIdentityPubkey = clientIdentityPubkey;
  }


  public LockEvidenceV1Request serverIdentityPubkey(String serverIdentityPubkey) {
    
    this.serverIdentityPubkey = serverIdentityPubkey;
    return this;
  }

   /**
   * Get serverIdentityPubkey
   * @return serverIdentityPubkey
  **/
  @javax.annotation.Nonnull
  public String getServerIdentityPubkey() {
    return serverIdentityPubkey;
  }


  public void setServerIdentityPubkey(String serverIdentityPubkey) {
    this.serverIdentityPubkey = serverIdentityPubkey;
  }


  public LockEvidenceV1Request lockEvidenceClaim(String lockEvidenceClaim) {
    
    this.lockEvidenceClaim = lockEvidenceClaim;
    return this;
  }

   /**
   * Get lockEvidenceClaim
   * @return lockEvidenceClaim
  **/
  @javax.annotation.Nonnull
  public String getLockEvidenceClaim() {
    return lockEvidenceClaim;
  }


  public void setLockEvidenceClaim(String lockEvidenceClaim) {
    this.lockEvidenceClaim = lockEvidenceClaim;
  }


  public LockEvidenceV1Request lockEvidenceFormat(Object lockEvidenceFormat) {
    
    this.lockEvidenceFormat = lockEvidenceFormat;
    return this;
  }

   /**
   * Get lockEvidenceFormat
   * @return lockEvidenceFormat
  **/
  @javax.annotation.Nullable
  public Object getLockEvidenceFormat() {
    return lockEvidenceFormat;
  }


  public void setLockEvidenceFormat(Object lockEvidenceFormat) {
    this.lockEvidenceFormat = lockEvidenceFormat;
  }


  public LockEvidenceV1Request lockEvidenceExpiration(String lockEvidenceExpiration) {
    
    this.lockEvidenceExpiration = lockEvidenceExpiration;
    return this;
  }

   /**
   * Get lockEvidenceExpiration
   * @return lockEvidenceExpiration
  **/
  @javax.annotation.Nonnull
  public String getLockEvidenceExpiration() {
    return lockEvidenceExpiration;
  }


  public void setLockEvidenceExpiration(String lockEvidenceExpiration) {
    this.lockEvidenceExpiration = lockEvidenceExpiration;
  }


  public LockEvidenceV1Request hashCommenceAckRequest(String hashCommenceAckRequest) {
    
    this.hashCommenceAckRequest = hashCommenceAckRequest;
    return this;
  }

   /**
   * Get hashCommenceAckRequest
   * @return hashCommenceAckRequest
  **/
  @javax.annotation.Nonnull
  public String getHashCommenceAckRequest() {
    return hashCommenceAckRequest;
  }


  public void setHashCommenceAckRequest(String hashCommenceAckRequest) {
    this.hashCommenceAckRequest = hashCommenceAckRequest;
  }


  public LockEvidenceV1Request clientTransferNumber(Integer clientTransferNumber) {
    
    this.clientTransferNumber = clientTransferNumber;
    return this;
  }

   /**
   * Get clientTransferNumber
   * @return clientTransferNumber
  **/
  @javax.annotation.Nullable
  public Integer getClientTransferNumber() {
    return clientTransferNumber;
  }


  public void setClientTransferNumber(Integer clientTransferNumber) {
    this.clientTransferNumber = clientTransferNumber;
  }


  public LockEvidenceV1Request signature(String signature) {
    
    this.signature = signature;
    return this;
  }

   /**
   * Get signature
   * @return signature
  **/
  @javax.annotation.Nonnull
  public String getSignature() {
    return signature;
  }


  public void setSignature(String signature) {
    this.signature = signature;
  }


  public LockEvidenceV1Request messageType(String messageType) {
    
    this.messageType = messageType;
    return this;
  }

   /**
   * Get messageType
   * @return messageType
  **/
  @javax.annotation.Nonnull
  public String getMessageType() {
    return messageType;
  }


  public void setMessageType(String messageType) {
    this.messageType = messageType;
  }


  public LockEvidenceV1Request messageHash(String messageHash) {
    
    this.messageHash = messageHash;
    return this;
  }

   /**
   * Get messageHash
   * @return messageHash
  **/
  @javax.annotation.Nullable
  public String getMessageHash() {
    return messageHash;
  }


  public void setMessageHash(String messageHash) {
    this.messageHash = messageHash;
  }


  public LockEvidenceV1Request sequenceNumber(BigDecimal sequenceNumber) {
    
    this.sequenceNumber = sequenceNumber;
    return this;
  }

   /**
   * Get sequenceNumber
   * @return sequenceNumber
  **/
  @javax.annotation.Nonnull
  public BigDecimal getSequenceNumber() {
    return sequenceNumber;
  }


  public void setSequenceNumber(BigDecimal sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LockEvidenceV1Request lockEvidenceV1Request = (LockEvidenceV1Request) o;
    return Objects.equals(this.sessionID, lockEvidenceV1Request.sessionID) &&
        Objects.equals(this.clientIdentityPubkey, lockEvidenceV1Request.clientIdentityPubkey) &&
        Objects.equals(this.serverIdentityPubkey, lockEvidenceV1Request.serverIdentityPubkey) &&
        Objects.equals(this.lockEvidenceClaim, lockEvidenceV1Request.lockEvidenceClaim) &&
        Objects.equals(this.lockEvidenceFormat, lockEvidenceV1Request.lockEvidenceFormat) &&
        Objects.equals(this.lockEvidenceExpiration, lockEvidenceV1Request.lockEvidenceExpiration) &&
        Objects.equals(this.hashCommenceAckRequest, lockEvidenceV1Request.hashCommenceAckRequest) &&
        Objects.equals(this.clientTransferNumber, lockEvidenceV1Request.clientTransferNumber) &&
        Objects.equals(this.signature, lockEvidenceV1Request.signature) &&
        Objects.equals(this.messageType, lockEvidenceV1Request.messageType) &&
        Objects.equals(this.messageHash, lockEvidenceV1Request.messageHash) &&
        Objects.equals(this.sequenceNumber, lockEvidenceV1Request.sequenceNumber);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(sessionID, clientIdentityPubkey, serverIdentityPubkey, lockEvidenceClaim, lockEvidenceFormat, lockEvidenceExpiration, hashCommenceAckRequest, clientTransferNumber, signature, messageType, messageHash, sequenceNumber);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LockEvidenceV1Request {\n");
    sb.append("    sessionID: ").append(toIndentedString(sessionID)).append("\n");
    sb.append("    clientIdentityPubkey: ").append(toIndentedString(clientIdentityPubkey)).append("\n");
    sb.append("    serverIdentityPubkey: ").append(toIndentedString(serverIdentityPubkey)).append("\n");
    sb.append("    lockEvidenceClaim: ").append(toIndentedString(lockEvidenceClaim)).append("\n");
    sb.append("    lockEvidenceFormat: ").append(toIndentedString(lockEvidenceFormat)).append("\n");
    sb.append("    lockEvidenceExpiration: ").append(toIndentedString(lockEvidenceExpiration)).append("\n");
    sb.append("    hashCommenceAckRequest: ").append(toIndentedString(hashCommenceAckRequest)).append("\n");
    sb.append("    clientTransferNumber: ").append(toIndentedString(clientTransferNumber)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    messageType: ").append(toIndentedString(messageType)).append("\n");
    sb.append("    messageHash: ").append(toIndentedString(messageHash)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sessionID");
    openapiFields.add("clientIdentityPubkey");
    openapiFields.add("serverIdentityPubkey");
    openapiFields.add("lockEvidenceClaim");
    openapiFields.add("lockEvidenceFormat");
    openapiFields.add("lockEvidenceExpiration");
    openapiFields.add("hashCommenceAckRequest");
    openapiFields.add("clientTransferNumber");
    openapiFields.add("signature");
    openapiFields.add("messageType");
    openapiFields.add("messageHash");
    openapiFields.add("sequenceNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sessionID");
    openapiRequiredFields.add("clientIdentityPubkey");
    openapiRequiredFields.add("serverIdentityPubkey");
    openapiRequiredFields.add("lockEvidenceClaim");
    openapiRequiredFields.add("lockEvidenceExpiration");
    openapiRequiredFields.add("hashCommenceAckRequest");
    openapiRequiredFields.add("signature");
    openapiRequiredFields.add("messageType");
    openapiRequiredFields.add("sequenceNumber");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LockEvidenceV1Request
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LockEvidenceV1Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LockEvidenceV1Request is not found in the empty JSON string", LockEvidenceV1Request.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!LockEvidenceV1Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LockEvidenceV1Request` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LockEvidenceV1Request.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("sessionID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionID").toString()));
      }
      if (!jsonObj.get("clientIdentityPubkey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientIdentityPubkey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientIdentityPubkey").toString()));
      }
      if (!jsonObj.get("serverIdentityPubkey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverIdentityPubkey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverIdentityPubkey").toString()));
      }
      if (!jsonObj.get("lockEvidenceClaim").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lockEvidenceClaim` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lockEvidenceClaim").toString()));
      }
      if (!jsonObj.get("lockEvidenceExpiration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lockEvidenceExpiration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lockEvidenceExpiration").toString()));
      }
      if (!jsonObj.get("hashCommenceAckRequest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashCommenceAckRequest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hashCommenceAckRequest").toString()));
      }
      if (!jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
      if (!jsonObj.get("messageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageType").toString()));
      }
      if ((jsonObj.get("messageHash") != null && !jsonObj.get("messageHash").isJsonNull()) && !jsonObj.get("messageHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageHash").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LockEvidenceV1Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LockEvidenceV1Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LockEvidenceV1Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LockEvidenceV1Request.class));

       return (TypeAdapter<T>) new TypeAdapter<LockEvidenceV1Request>() {
           @Override
           public void write(JsonWriter out, LockEvidenceV1Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LockEvidenceV1Request read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LockEvidenceV1Request given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LockEvidenceV1Request
  * @throws IOException if the JSON string is invalid with respect to LockEvidenceV1Request
  */
  public static LockEvidenceV1Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LockEvidenceV1Request.class);
  }

 /**
  * Convert an instance of LockEvidenceV1Request to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

