/*
 * Hyperledger Cactus Plugin - Odap Hermes
 * Implementation for Odap and Hermes
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.AssetProfile;
import org.openapitools.client.model.PayloadProfile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SessionData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SessionData {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_STEP = "step";
  @SerializedName(SERIALIZED_NAME_STEP)
  private BigDecimal step;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_LAST_SEQUENCE_NUMBER = "lastSequenceNumber";
  @SerializedName(SERIALIZED_NAME_LAST_SEQUENCE_NUMBER)
  private BigDecimal lastSequenceNumber;

  public static final String SERIALIZED_NAME_LOGGING_PROFILE = "loggingProfile";
  @SerializedName(SERIALIZED_NAME_LOGGING_PROFILE)
  private String loggingProfile;

  public static final String SERIALIZED_NAME_ACCESS_CONTROL_PROFILE = "accessControlProfile";
  @SerializedName(SERIALIZED_NAME_ACCESS_CONTROL_PROFILE)
  private String accessControlProfile;

  public static final String SERIALIZED_NAME_APPLICATION_PROFILE = "applicationProfile";
  @SerializedName(SERIALIZED_NAME_APPLICATION_PROFILE)
  private String applicationProfile;

  public static final String SERIALIZED_NAME_PAYLOAD_PROFILE = "payloadProfile";
  @SerializedName(SERIALIZED_NAME_PAYLOAD_PROFILE)
  private PayloadProfile payloadProfile;

  public static final String SERIALIZED_NAME_ASSET_PROFILE = "assetProfile";
  @SerializedName(SERIALIZED_NAME_ASSET_PROFILE)
  private AssetProfile assetProfile;

  public static final String SERIALIZED_NAME_ALLOWED_SOURCE_BACKUP_GATEWAYS = "allowedSourceBackupGateways";
  @SerializedName(SERIALIZED_NAME_ALLOWED_SOURCE_BACKUP_GATEWAYS)
  private List<String> allowedSourceBackupGateways;

  public static final String SERIALIZED_NAME_ALLOWED_RECIPIENT_BACKUP_GATEWAYS = "allowedRecipientBackupGateways";
  @SerializedName(SERIALIZED_NAME_ALLOWED_RECIPIENT_BACKUP_GATEWAYS)
  private List<String> allowedRecipientBackupGateways;

  public static final String SERIALIZED_NAME_SOURCE_BASE_PATH = "sourceBasePath";
  @SerializedName(SERIALIZED_NAME_SOURCE_BASE_PATH)
  private String sourceBasePath;

  public static final String SERIALIZED_NAME_RECIPIENT_BASE_PATH = "recipientBasePath";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_BASE_PATH)
  private String recipientBasePath;

  public static final String SERIALIZED_NAME_ORIGINATOR_PUBKEY = "originatorPubkey";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_PUBKEY)
  private String originatorPubkey;

  public static final String SERIALIZED_NAME_BENEFICIARY_PUBKEY = "beneficiaryPubkey";
  @SerializedName(SERIALIZED_NAME_BENEFICIARY_PUBKEY)
  private String beneficiaryPubkey;

  public static final String SERIALIZED_NAME_SOURCE_GATEWAY_PUBKEY = "sourceGatewayPubkey";
  @SerializedName(SERIALIZED_NAME_SOURCE_GATEWAY_PUBKEY)
  private String sourceGatewayPubkey;

  public static final String SERIALIZED_NAME_SOURCE_GATEWAY_DLT_SYSTEM = "sourceGatewayDltSystem";
  @SerializedName(SERIALIZED_NAME_SOURCE_GATEWAY_DLT_SYSTEM)
  private String sourceGatewayDltSystem;

  public static final String SERIALIZED_NAME_RECIPIENT_GATEWAY_PUBKEY = "recipientGatewayPubkey";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_GATEWAY_PUBKEY)
  private String recipientGatewayPubkey;

  public static final String SERIALIZED_NAME_RECIPIENT_GATEWAY_DLT_SYSTEM = "recipientGatewayDltSystem";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_GATEWAY_DLT_SYSTEM)
  private String recipientGatewayDltSystem;

  public static final String SERIALIZED_NAME_INITIALIZATION_REQUEST_MESSAGE_HASH = "initializationRequestMessageHash";
  @SerializedName(SERIALIZED_NAME_INITIALIZATION_REQUEST_MESSAGE_HASH)
  private String initializationRequestMessageHash;

  public static final String SERIALIZED_NAME_INITIALIZATION_RESPONSE_MESSAGE_HASH = "initializationResponseMessageHash";
  @SerializedName(SERIALIZED_NAME_INITIALIZATION_RESPONSE_MESSAGE_HASH)
  private String initializationResponseMessageHash;

  public static final String SERIALIZED_NAME_INITIALIZATION_REQUEST_MESSAGE_RCV_TIME_STAMP = "initializationRequestMessageRcvTimeStamp";
  @SerializedName(SERIALIZED_NAME_INITIALIZATION_REQUEST_MESSAGE_RCV_TIME_STAMP)
  private String initializationRequestMessageRcvTimeStamp;

  public static final String SERIALIZED_NAME_INITIALIZATION_REQUEST_MESSAGE_PROCESSED_TIME_STAMP = "initializationRequestMessageProcessedTimeStamp";
  @SerializedName(SERIALIZED_NAME_INITIALIZATION_REQUEST_MESSAGE_PROCESSED_TIME_STAMP)
  private String initializationRequestMessageProcessedTimeStamp;

  public static final String SERIALIZED_NAME_CLIENT_SIGNATURE_INITIALIZATION_REQUEST_MESSAGE = "clientSignatureInitializationRequestMessage";
  @SerializedName(SERIALIZED_NAME_CLIENT_SIGNATURE_INITIALIZATION_REQUEST_MESSAGE)
  private String clientSignatureInitializationRequestMessage;

  public static final String SERIALIZED_NAME_SERVER_SIGNATURE_INITIALIZATION_RESPONSE_MESSAGE = "serverSignatureInitializationResponseMessage";
  @SerializedName(SERIALIZED_NAME_SERVER_SIGNATURE_INITIALIZATION_RESPONSE_MESSAGE)
  private String serverSignatureInitializationResponseMessage;

  public static final String SERIALIZED_NAME_TRANSFER_COMMENCE_MESSAGE_REQUEST_HASH = "transferCommenceMessageRequestHash";
  @SerializedName(SERIALIZED_NAME_TRANSFER_COMMENCE_MESSAGE_REQUEST_HASH)
  private String transferCommenceMessageRequestHash;

  public static final String SERIALIZED_NAME_TRANSFER_COMMENCE_MESSAGE_RESPONSE_HASH = "transferCommenceMessageResponseHash";
  @SerializedName(SERIALIZED_NAME_TRANSFER_COMMENCE_MESSAGE_RESPONSE_HASH)
  private String transferCommenceMessageResponseHash;

  public static final String SERIALIZED_NAME_CLIENT_SIGNATURE_TRANSFER_COMMENCE_REQUEST_MESSAGE = "clientSignatureTransferCommenceRequestMessage";
  @SerializedName(SERIALIZED_NAME_CLIENT_SIGNATURE_TRANSFER_COMMENCE_REQUEST_MESSAGE)
  private String clientSignatureTransferCommenceRequestMessage;

  public static final String SERIALIZED_NAME_SERVER_SIGNATURE_TRANSFER_COMMENCE_RESPONSE_MESSAGE = "serverSignatureTransferCommenceResponseMessage";
  @SerializedName(SERIALIZED_NAME_SERVER_SIGNATURE_TRANSFER_COMMENCE_RESPONSE_MESSAGE)
  private String serverSignatureTransferCommenceResponseMessage;

  public static final String SERIALIZED_NAME_LOCK_EVIDENCE_REQUEST_MESSAGE_HASH = "lockEvidenceRequestMessageHash";
  @SerializedName(SERIALIZED_NAME_LOCK_EVIDENCE_REQUEST_MESSAGE_HASH)
  private String lockEvidenceRequestMessageHash;

  public static final String SERIALIZED_NAME_LOCK_EVIDENCE_RESPONSE_MESSAGE_HASH = "lockEvidenceResponseMessageHash";
  @SerializedName(SERIALIZED_NAME_LOCK_EVIDENCE_RESPONSE_MESSAGE_HASH)
  private String lockEvidenceResponseMessageHash;

  public static final String SERIALIZED_NAME_CLIENT_SIGNATURE_LOCK_EVIDENCE_REQUEST_MESSAGE = "clientSignatureLockEvidenceRequestMessage";
  @SerializedName(SERIALIZED_NAME_CLIENT_SIGNATURE_LOCK_EVIDENCE_REQUEST_MESSAGE)
  private String clientSignatureLockEvidenceRequestMessage;

  public static final String SERIALIZED_NAME_SERVER_SIGNATURE_LOCK_EVIDENCE_RESPONSE_MESSAGE = "serverSignatureLockEvidenceResponseMessage";
  @SerializedName(SERIALIZED_NAME_SERVER_SIGNATURE_LOCK_EVIDENCE_RESPONSE_MESSAGE)
  private String serverSignatureLockEvidenceResponseMessage;

  public static final String SERIALIZED_NAME_LOCK_EVIDENCE_CLAIM = "lockEvidenceClaim";
  @SerializedName(SERIALIZED_NAME_LOCK_EVIDENCE_CLAIM)
  private String lockEvidenceClaim;

  public static final String SERIALIZED_NAME_COMMIT_PREPARE_REQUEST_MESSAGE_HASH = "commitPrepareRequestMessageHash";
  @SerializedName(SERIALIZED_NAME_COMMIT_PREPARE_REQUEST_MESSAGE_HASH)
  private String commitPrepareRequestMessageHash;

  public static final String SERIALIZED_NAME_COMMIT_PREPARE_RESPONSE_MESSAGE_HASH = "commitPrepareResponseMessageHash";
  @SerializedName(SERIALIZED_NAME_COMMIT_PREPARE_RESPONSE_MESSAGE_HASH)
  private String commitPrepareResponseMessageHash;

  public static final String SERIALIZED_NAME_CLIENT_SIGNATURE_COMMIT_PREPARATION_REQUEST_MESSAGE = "clientSignatureCommitPreparationRequestMessage";
  @SerializedName(SERIALIZED_NAME_CLIENT_SIGNATURE_COMMIT_PREPARATION_REQUEST_MESSAGE)
  private String clientSignatureCommitPreparationRequestMessage;

  public static final String SERIALIZED_NAME_SERVER_SIGNATURE_COMMIT_PREPARATION_RESPONSE_MESSAGE = "serverSignatureCommitPreparationResponseMessage";
  @SerializedName(SERIALIZED_NAME_SERVER_SIGNATURE_COMMIT_PREPARATION_RESPONSE_MESSAGE)
  private String serverSignatureCommitPreparationResponseMessage;

  public static final String SERIALIZED_NAME_COMMIT_FINAL_REQUEST_MESSAGE_HASH = "commitFinalRequestMessageHash";
  @SerializedName(SERIALIZED_NAME_COMMIT_FINAL_REQUEST_MESSAGE_HASH)
  private String commitFinalRequestMessageHash;

  public static final String SERIALIZED_NAME_COMMIT_FINAL_RESPONSE_MESSAGE_HASH = "commitFinalResponseMessageHash";
  @SerializedName(SERIALIZED_NAME_COMMIT_FINAL_RESPONSE_MESSAGE_HASH)
  private String commitFinalResponseMessageHash;

  public static final String SERIALIZED_NAME_COMMIT_FINAL_CLAIM = "commitFinalClaim";
  @SerializedName(SERIALIZED_NAME_COMMIT_FINAL_CLAIM)
  private String commitFinalClaim;

  public static final String SERIALIZED_NAME_COMMIT_FINAL_CLAIM_FORMAT = "commitFinalClaimFormat";
  @SerializedName(SERIALIZED_NAME_COMMIT_FINAL_CLAIM_FORMAT)
  private String commitFinalClaimFormat;

  public static final String SERIALIZED_NAME_COMMIT_ACKNOWLEDGEMENT_CLAIM = "commitAcknowledgementClaim";
  @SerializedName(SERIALIZED_NAME_COMMIT_ACKNOWLEDGEMENT_CLAIM)
  private String commitAcknowledgementClaim;

  public static final String SERIALIZED_NAME_COMMIT_ACKNOWLEDGEMENT_CLAIM_FORMAT = "commitAcknowledgementClaimFormat";
  @SerializedName(SERIALIZED_NAME_COMMIT_ACKNOWLEDGEMENT_CLAIM_FORMAT)
  private String commitAcknowledgementClaimFormat;

  public static final String SERIALIZED_NAME_CLIENT_SIGNATURE_COMMIT_FINAL_REQUEST_MESSAGE = "clientSignatureCommitFinalRequestMessage";
  @SerializedName(SERIALIZED_NAME_CLIENT_SIGNATURE_COMMIT_FINAL_REQUEST_MESSAGE)
  private String clientSignatureCommitFinalRequestMessage;

  public static final String SERIALIZED_NAME_SERVER_SIGNATURE_COMMIT_FINAL_RESPONSE_MESSAGE = "serverSignatureCommitFinalResponseMessage";
  @SerializedName(SERIALIZED_NAME_SERVER_SIGNATURE_COMMIT_FINAL_RESPONSE_MESSAGE)
  private String serverSignatureCommitFinalResponseMessage;

  public static final String SERIALIZED_NAME_TRANSFER_COMPLETE_MESSAGE_HASH = "transferCompleteMessageHash";
  @SerializedName(SERIALIZED_NAME_TRANSFER_COMPLETE_MESSAGE_HASH)
  private String transferCompleteMessageHash;

  public static final String SERIALIZED_NAME_CLIENT_SIGNATURE_TRANSFER_COMPLETE_MESSAGE = "clientSignatureTransferCompleteMessage";
  @SerializedName(SERIALIZED_NAME_CLIENT_SIGNATURE_TRANSFER_COMPLETE_MESSAGE)
  private String clientSignatureTransferCompleteMessage;

  public static final String SERIALIZED_NAME_MAX_RETRIES = "maxRetries";
  @SerializedName(SERIALIZED_NAME_MAX_RETRIES)
  private BigDecimal maxRetries;

  public static final String SERIALIZED_NAME_RECIPIENT_LEDGER_ASSET_I_D = "recipientLedgerAssetID";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_LEDGER_ASSET_I_D)
  private String recipientLedgerAssetID;

  public static final String SERIALIZED_NAME_SOURCE_LEDGER_ASSET_I_D = "sourceLedgerAssetID";
  @SerializedName(SERIALIZED_NAME_SOURCE_LEDGER_ASSET_I_D)
  private String sourceLedgerAssetID;

  public static final String SERIALIZED_NAME_MAX_TIMEOUT = "maxTimeout";
  @SerializedName(SERIALIZED_NAME_MAX_TIMEOUT)
  private BigDecimal maxTimeout;

  public static final String SERIALIZED_NAME_LAST_LOG_ENTRY_TIMESTAMP = "lastLogEntryTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_LOG_ENTRY_TIMESTAMP)
  private String lastLogEntryTimestamp;

  public static final String SERIALIZED_NAME_UNLOCK_ASSET_CLAIM = "unlockAssetClaim";
  @SerializedName(SERIALIZED_NAME_UNLOCK_ASSET_CLAIM)
  private String unlockAssetClaim;

  public static final String SERIALIZED_NAME_RECREATE_ASSET_CLAIM = "recreateAssetClaim";
  @SerializedName(SERIALIZED_NAME_RECREATE_ASSET_CLAIM)
  private String recreateAssetClaim;

  public static final String SERIALIZED_NAME_DELETE_ASSET_CLAIM = "deleteAssetClaim";
  @SerializedName(SERIALIZED_NAME_DELETE_ASSET_CLAIM)
  private String deleteAssetClaim;

  public static final String SERIALIZED_NAME_LAST_MESSAGE_RECEIVED_TIMESTAMP = "lastMessageReceivedTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_MESSAGE_RECEIVED_TIMESTAMP)
  private String lastMessageReceivedTimestamp;

  public static final String SERIALIZED_NAME_ROLLBACK = "rollback";
  @SerializedName(SERIALIZED_NAME_ROLLBACK)
  private Boolean rollback;

  public static final String SERIALIZED_NAME_ROLLBACK_MESSAGE_HASH = "rollbackMessageHash";
  @SerializedName(SERIALIZED_NAME_ROLLBACK_MESSAGE_HASH)
  private String rollbackMessageHash;

  public static final String SERIALIZED_NAME_ROLLBACK_PROOFS = "rollbackProofs";
  @SerializedName(SERIALIZED_NAME_ROLLBACK_PROOFS)
  private List<String> rollbackProofs;

  /**
   * Gets or Sets rollbackActionsPerformed
   */
  @JsonAdapter(RollbackActionsPerformedEnum.Adapter.class)
  public enum RollbackActionsPerformedEnum {
    CREATE("CREATE"),
    
    DELETE("DELETE"),
    
    LOCK("LOCK"),
    
    UNLOCK("UNLOCK");

    private String value;

    RollbackActionsPerformedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RollbackActionsPerformedEnum fromValue(String value) {
      for (RollbackActionsPerformedEnum b : RollbackActionsPerformedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RollbackActionsPerformedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RollbackActionsPerformedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RollbackActionsPerformedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RollbackActionsPerformedEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ROLLBACK_ACTIONS_PERFORMED = "rollbackActionsPerformed";
  @SerializedName(SERIALIZED_NAME_ROLLBACK_ACTIONS_PERFORMED)
  private List<RollbackActionsPerformedEnum> rollbackActionsPerformed;

  public SessionData() {
  }

  public SessionData id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public SessionData step(BigDecimal step) {
    
    this.step = step;
    return this;
  }

   /**
   * Get step
   * @return step
  **/
  @javax.annotation.Nullable
  public BigDecimal getStep() {
    return step;
  }


  public void setStep(BigDecimal step) {
    this.step = step;
  }


  public SessionData version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  public SessionData lastSequenceNumber(BigDecimal lastSequenceNumber) {
    
    this.lastSequenceNumber = lastSequenceNumber;
    return this;
  }

   /**
   * Get lastSequenceNumber
   * @return lastSequenceNumber
  **/
  @javax.annotation.Nullable
  public BigDecimal getLastSequenceNumber() {
    return lastSequenceNumber;
  }


  public void setLastSequenceNumber(BigDecimal lastSequenceNumber) {
    this.lastSequenceNumber = lastSequenceNumber;
  }


  public SessionData loggingProfile(String loggingProfile) {
    
    this.loggingProfile = loggingProfile;
    return this;
  }

   /**
   * Get loggingProfile
   * @return loggingProfile
  **/
  @javax.annotation.Nullable
  public String getLoggingProfile() {
    return loggingProfile;
  }


  public void setLoggingProfile(String loggingProfile) {
    this.loggingProfile = loggingProfile;
  }


  public SessionData accessControlProfile(String accessControlProfile) {
    
    this.accessControlProfile = accessControlProfile;
    return this;
  }

   /**
   * Get accessControlProfile
   * @return accessControlProfile
  **/
  @javax.annotation.Nullable
  public String getAccessControlProfile() {
    return accessControlProfile;
  }


  public void setAccessControlProfile(String accessControlProfile) {
    this.accessControlProfile = accessControlProfile;
  }


  public SessionData applicationProfile(String applicationProfile) {
    
    this.applicationProfile = applicationProfile;
    return this;
  }

   /**
   * Get applicationProfile
   * @return applicationProfile
  **/
  @javax.annotation.Nullable
  public String getApplicationProfile() {
    return applicationProfile;
  }


  public void setApplicationProfile(String applicationProfile) {
    this.applicationProfile = applicationProfile;
  }


  public SessionData payloadProfile(PayloadProfile payloadProfile) {
    
    this.payloadProfile = payloadProfile;
    return this;
  }

   /**
   * Get payloadProfile
   * @return payloadProfile
  **/
  @javax.annotation.Nullable
  public PayloadProfile getPayloadProfile() {
    return payloadProfile;
  }


  public void setPayloadProfile(PayloadProfile payloadProfile) {
    this.payloadProfile = payloadProfile;
  }


  public SessionData assetProfile(AssetProfile assetProfile) {
    
    this.assetProfile = assetProfile;
    return this;
  }

   /**
   * Get assetProfile
   * @return assetProfile
  **/
  @javax.annotation.Nullable
  public AssetProfile getAssetProfile() {
    return assetProfile;
  }


  public void setAssetProfile(AssetProfile assetProfile) {
    this.assetProfile = assetProfile;
  }


  public SessionData allowedSourceBackupGateways(List<String> allowedSourceBackupGateways) {
    
    this.allowedSourceBackupGateways = allowedSourceBackupGateways;
    return this;
  }

  public SessionData addAllowedSourceBackupGatewaysItem(String allowedSourceBackupGatewaysItem) {
    if (this.allowedSourceBackupGateways == null) {
      this.allowedSourceBackupGateways = new ArrayList<>();
    }
    this.allowedSourceBackupGateways.add(allowedSourceBackupGatewaysItem);
    return this;
  }

   /**
   * Get allowedSourceBackupGateways
   * @return allowedSourceBackupGateways
  **/
  @javax.annotation.Nullable
  public List<String> getAllowedSourceBackupGateways() {
    return allowedSourceBackupGateways;
  }


  public void setAllowedSourceBackupGateways(List<String> allowedSourceBackupGateways) {
    this.allowedSourceBackupGateways = allowedSourceBackupGateways;
  }


  public SessionData allowedRecipientBackupGateways(List<String> allowedRecipientBackupGateways) {
    
    this.allowedRecipientBackupGateways = allowedRecipientBackupGateways;
    return this;
  }

  public SessionData addAllowedRecipientBackupGatewaysItem(String allowedRecipientBackupGatewaysItem) {
    if (this.allowedRecipientBackupGateways == null) {
      this.allowedRecipientBackupGateways = new ArrayList<>();
    }
    this.allowedRecipientBackupGateways.add(allowedRecipientBackupGatewaysItem);
    return this;
  }

   /**
   * Get allowedRecipientBackupGateways
   * @return allowedRecipientBackupGateways
  **/
  @javax.annotation.Nullable
  public List<String> getAllowedRecipientBackupGateways() {
    return allowedRecipientBackupGateways;
  }


  public void setAllowedRecipientBackupGateways(List<String> allowedRecipientBackupGateways) {
    this.allowedRecipientBackupGateways = allowedRecipientBackupGateways;
  }


  public SessionData sourceBasePath(String sourceBasePath) {
    
    this.sourceBasePath = sourceBasePath;
    return this;
  }

   /**
   * Get sourceBasePath
   * @return sourceBasePath
  **/
  @javax.annotation.Nullable
  public String getSourceBasePath() {
    return sourceBasePath;
  }


  public void setSourceBasePath(String sourceBasePath) {
    this.sourceBasePath = sourceBasePath;
  }


  public SessionData recipientBasePath(String recipientBasePath) {
    
    this.recipientBasePath = recipientBasePath;
    return this;
  }

   /**
   * Get recipientBasePath
   * @return recipientBasePath
  **/
  @javax.annotation.Nullable
  public String getRecipientBasePath() {
    return recipientBasePath;
  }


  public void setRecipientBasePath(String recipientBasePath) {
    this.recipientBasePath = recipientBasePath;
  }


  public SessionData originatorPubkey(String originatorPubkey) {
    
    this.originatorPubkey = originatorPubkey;
    return this;
  }

   /**
   * Get originatorPubkey
   * @return originatorPubkey
  **/
  @javax.annotation.Nullable
  public String getOriginatorPubkey() {
    return originatorPubkey;
  }


  public void setOriginatorPubkey(String originatorPubkey) {
    this.originatorPubkey = originatorPubkey;
  }


  public SessionData beneficiaryPubkey(String beneficiaryPubkey) {
    
    this.beneficiaryPubkey = beneficiaryPubkey;
    return this;
  }

   /**
   * Get beneficiaryPubkey
   * @return beneficiaryPubkey
  **/
  @javax.annotation.Nullable
  public String getBeneficiaryPubkey() {
    return beneficiaryPubkey;
  }


  public void setBeneficiaryPubkey(String beneficiaryPubkey) {
    this.beneficiaryPubkey = beneficiaryPubkey;
  }


  public SessionData sourceGatewayPubkey(String sourceGatewayPubkey) {
    
    this.sourceGatewayPubkey = sourceGatewayPubkey;
    return this;
  }

   /**
   * Get sourceGatewayPubkey
   * @return sourceGatewayPubkey
  **/
  @javax.annotation.Nullable
  public String getSourceGatewayPubkey() {
    return sourceGatewayPubkey;
  }


  public void setSourceGatewayPubkey(String sourceGatewayPubkey) {
    this.sourceGatewayPubkey = sourceGatewayPubkey;
  }


  public SessionData sourceGatewayDltSystem(String sourceGatewayDltSystem) {
    
    this.sourceGatewayDltSystem = sourceGatewayDltSystem;
    return this;
  }

   /**
   * Get sourceGatewayDltSystem
   * @return sourceGatewayDltSystem
  **/
  @javax.annotation.Nullable
  public String getSourceGatewayDltSystem() {
    return sourceGatewayDltSystem;
  }


  public void setSourceGatewayDltSystem(String sourceGatewayDltSystem) {
    this.sourceGatewayDltSystem = sourceGatewayDltSystem;
  }


  public SessionData recipientGatewayPubkey(String recipientGatewayPubkey) {
    
    this.recipientGatewayPubkey = recipientGatewayPubkey;
    return this;
  }

   /**
   * Get recipientGatewayPubkey
   * @return recipientGatewayPubkey
  **/
  @javax.annotation.Nullable
  public String getRecipientGatewayPubkey() {
    return recipientGatewayPubkey;
  }


  public void setRecipientGatewayPubkey(String recipientGatewayPubkey) {
    this.recipientGatewayPubkey = recipientGatewayPubkey;
  }


  public SessionData recipientGatewayDltSystem(String recipientGatewayDltSystem) {
    
    this.recipientGatewayDltSystem = recipientGatewayDltSystem;
    return this;
  }

   /**
   * Get recipientGatewayDltSystem
   * @return recipientGatewayDltSystem
  **/
  @javax.annotation.Nullable
  public String getRecipientGatewayDltSystem() {
    return recipientGatewayDltSystem;
  }


  public void setRecipientGatewayDltSystem(String recipientGatewayDltSystem) {
    this.recipientGatewayDltSystem = recipientGatewayDltSystem;
  }


  public SessionData initializationRequestMessageHash(String initializationRequestMessageHash) {
    
    this.initializationRequestMessageHash = initializationRequestMessageHash;
    return this;
  }

   /**
   * Get initializationRequestMessageHash
   * @return initializationRequestMessageHash
  **/
  @javax.annotation.Nullable
  public String getInitializationRequestMessageHash() {
    return initializationRequestMessageHash;
  }


  public void setInitializationRequestMessageHash(String initializationRequestMessageHash) {
    this.initializationRequestMessageHash = initializationRequestMessageHash;
  }


  public SessionData initializationResponseMessageHash(String initializationResponseMessageHash) {
    
    this.initializationResponseMessageHash = initializationResponseMessageHash;
    return this;
  }

   /**
   * Get initializationResponseMessageHash
   * @return initializationResponseMessageHash
  **/
  @javax.annotation.Nullable
  public String getInitializationResponseMessageHash() {
    return initializationResponseMessageHash;
  }


  public void setInitializationResponseMessageHash(String initializationResponseMessageHash) {
    this.initializationResponseMessageHash = initializationResponseMessageHash;
  }


  public SessionData initializationRequestMessageRcvTimeStamp(String initializationRequestMessageRcvTimeStamp) {
    
    this.initializationRequestMessageRcvTimeStamp = initializationRequestMessageRcvTimeStamp;
    return this;
  }

   /**
   * Get initializationRequestMessageRcvTimeStamp
   * @return initializationRequestMessageRcvTimeStamp
  **/
  @javax.annotation.Nullable
  public String getInitializationRequestMessageRcvTimeStamp() {
    return initializationRequestMessageRcvTimeStamp;
  }


  public void setInitializationRequestMessageRcvTimeStamp(String initializationRequestMessageRcvTimeStamp) {
    this.initializationRequestMessageRcvTimeStamp = initializationRequestMessageRcvTimeStamp;
  }


  public SessionData initializationRequestMessageProcessedTimeStamp(String initializationRequestMessageProcessedTimeStamp) {
    
    this.initializationRequestMessageProcessedTimeStamp = initializationRequestMessageProcessedTimeStamp;
    return this;
  }

   /**
   * Get initializationRequestMessageProcessedTimeStamp
   * @return initializationRequestMessageProcessedTimeStamp
  **/
  @javax.annotation.Nullable
  public String getInitializationRequestMessageProcessedTimeStamp() {
    return initializationRequestMessageProcessedTimeStamp;
  }


  public void setInitializationRequestMessageProcessedTimeStamp(String initializationRequestMessageProcessedTimeStamp) {
    this.initializationRequestMessageProcessedTimeStamp = initializationRequestMessageProcessedTimeStamp;
  }


  public SessionData clientSignatureInitializationRequestMessage(String clientSignatureInitializationRequestMessage) {
    
    this.clientSignatureInitializationRequestMessage = clientSignatureInitializationRequestMessage;
    return this;
  }

   /**
   * Get clientSignatureInitializationRequestMessage
   * @return clientSignatureInitializationRequestMessage
  **/
  @javax.annotation.Nullable
  public String getClientSignatureInitializationRequestMessage() {
    return clientSignatureInitializationRequestMessage;
  }


  public void setClientSignatureInitializationRequestMessage(String clientSignatureInitializationRequestMessage) {
    this.clientSignatureInitializationRequestMessage = clientSignatureInitializationRequestMessage;
  }


  public SessionData serverSignatureInitializationResponseMessage(String serverSignatureInitializationResponseMessage) {
    
    this.serverSignatureInitializationResponseMessage = serverSignatureInitializationResponseMessage;
    return this;
  }

   /**
   * Get serverSignatureInitializationResponseMessage
   * @return serverSignatureInitializationResponseMessage
  **/
  @javax.annotation.Nullable
  public String getServerSignatureInitializationResponseMessage() {
    return serverSignatureInitializationResponseMessage;
  }


  public void setServerSignatureInitializationResponseMessage(String serverSignatureInitializationResponseMessage) {
    this.serverSignatureInitializationResponseMessage = serverSignatureInitializationResponseMessage;
  }


  public SessionData transferCommenceMessageRequestHash(String transferCommenceMessageRequestHash) {
    
    this.transferCommenceMessageRequestHash = transferCommenceMessageRequestHash;
    return this;
  }

   /**
   * Get transferCommenceMessageRequestHash
   * @return transferCommenceMessageRequestHash
  **/
  @javax.annotation.Nullable
  public String getTransferCommenceMessageRequestHash() {
    return transferCommenceMessageRequestHash;
  }


  public void setTransferCommenceMessageRequestHash(String transferCommenceMessageRequestHash) {
    this.transferCommenceMessageRequestHash = transferCommenceMessageRequestHash;
  }


  public SessionData transferCommenceMessageResponseHash(String transferCommenceMessageResponseHash) {
    
    this.transferCommenceMessageResponseHash = transferCommenceMessageResponseHash;
    return this;
  }

   /**
   * Get transferCommenceMessageResponseHash
   * @return transferCommenceMessageResponseHash
  **/
  @javax.annotation.Nullable
  public String getTransferCommenceMessageResponseHash() {
    return transferCommenceMessageResponseHash;
  }


  public void setTransferCommenceMessageResponseHash(String transferCommenceMessageResponseHash) {
    this.transferCommenceMessageResponseHash = transferCommenceMessageResponseHash;
  }


  public SessionData clientSignatureTransferCommenceRequestMessage(String clientSignatureTransferCommenceRequestMessage) {
    
    this.clientSignatureTransferCommenceRequestMessage = clientSignatureTransferCommenceRequestMessage;
    return this;
  }

   /**
   * Get clientSignatureTransferCommenceRequestMessage
   * @return clientSignatureTransferCommenceRequestMessage
  **/
  @javax.annotation.Nullable
  public String getClientSignatureTransferCommenceRequestMessage() {
    return clientSignatureTransferCommenceRequestMessage;
  }


  public void setClientSignatureTransferCommenceRequestMessage(String clientSignatureTransferCommenceRequestMessage) {
    this.clientSignatureTransferCommenceRequestMessage = clientSignatureTransferCommenceRequestMessage;
  }


  public SessionData serverSignatureTransferCommenceResponseMessage(String serverSignatureTransferCommenceResponseMessage) {
    
    this.serverSignatureTransferCommenceResponseMessage = serverSignatureTransferCommenceResponseMessage;
    return this;
  }

   /**
   * Get serverSignatureTransferCommenceResponseMessage
   * @return serverSignatureTransferCommenceResponseMessage
  **/
  @javax.annotation.Nullable
  public String getServerSignatureTransferCommenceResponseMessage() {
    return serverSignatureTransferCommenceResponseMessage;
  }


  public void setServerSignatureTransferCommenceResponseMessage(String serverSignatureTransferCommenceResponseMessage) {
    this.serverSignatureTransferCommenceResponseMessage = serverSignatureTransferCommenceResponseMessage;
  }


  public SessionData lockEvidenceRequestMessageHash(String lockEvidenceRequestMessageHash) {
    
    this.lockEvidenceRequestMessageHash = lockEvidenceRequestMessageHash;
    return this;
  }

   /**
   * Get lockEvidenceRequestMessageHash
   * @return lockEvidenceRequestMessageHash
  **/
  @javax.annotation.Nullable
  public String getLockEvidenceRequestMessageHash() {
    return lockEvidenceRequestMessageHash;
  }


  public void setLockEvidenceRequestMessageHash(String lockEvidenceRequestMessageHash) {
    this.lockEvidenceRequestMessageHash = lockEvidenceRequestMessageHash;
  }


  public SessionData lockEvidenceResponseMessageHash(String lockEvidenceResponseMessageHash) {
    
    this.lockEvidenceResponseMessageHash = lockEvidenceResponseMessageHash;
    return this;
  }

   /**
   * Get lockEvidenceResponseMessageHash
   * @return lockEvidenceResponseMessageHash
  **/
  @javax.annotation.Nullable
  public String getLockEvidenceResponseMessageHash() {
    return lockEvidenceResponseMessageHash;
  }


  public void setLockEvidenceResponseMessageHash(String lockEvidenceResponseMessageHash) {
    this.lockEvidenceResponseMessageHash = lockEvidenceResponseMessageHash;
  }


  public SessionData clientSignatureLockEvidenceRequestMessage(String clientSignatureLockEvidenceRequestMessage) {
    
    this.clientSignatureLockEvidenceRequestMessage = clientSignatureLockEvidenceRequestMessage;
    return this;
  }

   /**
   * Get clientSignatureLockEvidenceRequestMessage
   * @return clientSignatureLockEvidenceRequestMessage
  **/
  @javax.annotation.Nullable
  public String getClientSignatureLockEvidenceRequestMessage() {
    return clientSignatureLockEvidenceRequestMessage;
  }


  public void setClientSignatureLockEvidenceRequestMessage(String clientSignatureLockEvidenceRequestMessage) {
    this.clientSignatureLockEvidenceRequestMessage = clientSignatureLockEvidenceRequestMessage;
  }


  public SessionData serverSignatureLockEvidenceResponseMessage(String serverSignatureLockEvidenceResponseMessage) {
    
    this.serverSignatureLockEvidenceResponseMessage = serverSignatureLockEvidenceResponseMessage;
    return this;
  }

   /**
   * Get serverSignatureLockEvidenceResponseMessage
   * @return serverSignatureLockEvidenceResponseMessage
  **/
  @javax.annotation.Nullable
  public String getServerSignatureLockEvidenceResponseMessage() {
    return serverSignatureLockEvidenceResponseMessage;
  }


  public void setServerSignatureLockEvidenceResponseMessage(String serverSignatureLockEvidenceResponseMessage) {
    this.serverSignatureLockEvidenceResponseMessage = serverSignatureLockEvidenceResponseMessage;
  }


  public SessionData lockEvidenceClaim(String lockEvidenceClaim) {
    
    this.lockEvidenceClaim = lockEvidenceClaim;
    return this;
  }

   /**
   * Get lockEvidenceClaim
   * @return lockEvidenceClaim
  **/
  @javax.annotation.Nullable
  public String getLockEvidenceClaim() {
    return lockEvidenceClaim;
  }


  public void setLockEvidenceClaim(String lockEvidenceClaim) {
    this.lockEvidenceClaim = lockEvidenceClaim;
  }


  public SessionData commitPrepareRequestMessageHash(String commitPrepareRequestMessageHash) {
    
    this.commitPrepareRequestMessageHash = commitPrepareRequestMessageHash;
    return this;
  }

   /**
   * Get commitPrepareRequestMessageHash
   * @return commitPrepareRequestMessageHash
  **/
  @javax.annotation.Nullable
  public String getCommitPrepareRequestMessageHash() {
    return commitPrepareRequestMessageHash;
  }


  public void setCommitPrepareRequestMessageHash(String commitPrepareRequestMessageHash) {
    this.commitPrepareRequestMessageHash = commitPrepareRequestMessageHash;
  }


  public SessionData commitPrepareResponseMessageHash(String commitPrepareResponseMessageHash) {
    
    this.commitPrepareResponseMessageHash = commitPrepareResponseMessageHash;
    return this;
  }

   /**
   * Get commitPrepareResponseMessageHash
   * @return commitPrepareResponseMessageHash
  **/
  @javax.annotation.Nullable
  public String getCommitPrepareResponseMessageHash() {
    return commitPrepareResponseMessageHash;
  }


  public void setCommitPrepareResponseMessageHash(String commitPrepareResponseMessageHash) {
    this.commitPrepareResponseMessageHash = commitPrepareResponseMessageHash;
  }


  public SessionData clientSignatureCommitPreparationRequestMessage(String clientSignatureCommitPreparationRequestMessage) {
    
    this.clientSignatureCommitPreparationRequestMessage = clientSignatureCommitPreparationRequestMessage;
    return this;
  }

   /**
   * Get clientSignatureCommitPreparationRequestMessage
   * @return clientSignatureCommitPreparationRequestMessage
  **/
  @javax.annotation.Nullable
  public String getClientSignatureCommitPreparationRequestMessage() {
    return clientSignatureCommitPreparationRequestMessage;
  }


  public void setClientSignatureCommitPreparationRequestMessage(String clientSignatureCommitPreparationRequestMessage) {
    this.clientSignatureCommitPreparationRequestMessage = clientSignatureCommitPreparationRequestMessage;
  }


  public SessionData serverSignatureCommitPreparationResponseMessage(String serverSignatureCommitPreparationResponseMessage) {
    
    this.serverSignatureCommitPreparationResponseMessage = serverSignatureCommitPreparationResponseMessage;
    return this;
  }

   /**
   * Get serverSignatureCommitPreparationResponseMessage
   * @return serverSignatureCommitPreparationResponseMessage
  **/
  @javax.annotation.Nullable
  public String getServerSignatureCommitPreparationResponseMessage() {
    return serverSignatureCommitPreparationResponseMessage;
  }


  public void setServerSignatureCommitPreparationResponseMessage(String serverSignatureCommitPreparationResponseMessage) {
    this.serverSignatureCommitPreparationResponseMessage = serverSignatureCommitPreparationResponseMessage;
  }


  public SessionData commitFinalRequestMessageHash(String commitFinalRequestMessageHash) {
    
    this.commitFinalRequestMessageHash = commitFinalRequestMessageHash;
    return this;
  }

   /**
   * Get commitFinalRequestMessageHash
   * @return commitFinalRequestMessageHash
  **/
  @javax.annotation.Nullable
  public String getCommitFinalRequestMessageHash() {
    return commitFinalRequestMessageHash;
  }


  public void setCommitFinalRequestMessageHash(String commitFinalRequestMessageHash) {
    this.commitFinalRequestMessageHash = commitFinalRequestMessageHash;
  }


  public SessionData commitFinalResponseMessageHash(String commitFinalResponseMessageHash) {
    
    this.commitFinalResponseMessageHash = commitFinalResponseMessageHash;
    return this;
  }

   /**
   * Get commitFinalResponseMessageHash
   * @return commitFinalResponseMessageHash
  **/
  @javax.annotation.Nullable
  public String getCommitFinalResponseMessageHash() {
    return commitFinalResponseMessageHash;
  }


  public void setCommitFinalResponseMessageHash(String commitFinalResponseMessageHash) {
    this.commitFinalResponseMessageHash = commitFinalResponseMessageHash;
  }


  public SessionData commitFinalClaim(String commitFinalClaim) {
    
    this.commitFinalClaim = commitFinalClaim;
    return this;
  }

   /**
   * Get commitFinalClaim
   * @return commitFinalClaim
  **/
  @javax.annotation.Nullable
  public String getCommitFinalClaim() {
    return commitFinalClaim;
  }


  public void setCommitFinalClaim(String commitFinalClaim) {
    this.commitFinalClaim = commitFinalClaim;
  }


  public SessionData commitFinalClaimFormat(String commitFinalClaimFormat) {
    
    this.commitFinalClaimFormat = commitFinalClaimFormat;
    return this;
  }

   /**
   * Get commitFinalClaimFormat
   * @return commitFinalClaimFormat
  **/
  @javax.annotation.Nullable
  public String getCommitFinalClaimFormat() {
    return commitFinalClaimFormat;
  }


  public void setCommitFinalClaimFormat(String commitFinalClaimFormat) {
    this.commitFinalClaimFormat = commitFinalClaimFormat;
  }


  public SessionData commitAcknowledgementClaim(String commitAcknowledgementClaim) {
    
    this.commitAcknowledgementClaim = commitAcknowledgementClaim;
    return this;
  }

   /**
   * Get commitAcknowledgementClaim
   * @return commitAcknowledgementClaim
  **/
  @javax.annotation.Nullable
  public String getCommitAcknowledgementClaim() {
    return commitAcknowledgementClaim;
  }


  public void setCommitAcknowledgementClaim(String commitAcknowledgementClaim) {
    this.commitAcknowledgementClaim = commitAcknowledgementClaim;
  }


  public SessionData commitAcknowledgementClaimFormat(String commitAcknowledgementClaimFormat) {
    
    this.commitAcknowledgementClaimFormat = commitAcknowledgementClaimFormat;
    return this;
  }

   /**
   * Get commitAcknowledgementClaimFormat
   * @return commitAcknowledgementClaimFormat
  **/
  @javax.annotation.Nullable
  public String getCommitAcknowledgementClaimFormat() {
    return commitAcknowledgementClaimFormat;
  }


  public void setCommitAcknowledgementClaimFormat(String commitAcknowledgementClaimFormat) {
    this.commitAcknowledgementClaimFormat = commitAcknowledgementClaimFormat;
  }


  public SessionData clientSignatureCommitFinalRequestMessage(String clientSignatureCommitFinalRequestMessage) {
    
    this.clientSignatureCommitFinalRequestMessage = clientSignatureCommitFinalRequestMessage;
    return this;
  }

   /**
   * Get clientSignatureCommitFinalRequestMessage
   * @return clientSignatureCommitFinalRequestMessage
  **/
  @javax.annotation.Nullable
  public String getClientSignatureCommitFinalRequestMessage() {
    return clientSignatureCommitFinalRequestMessage;
  }


  public void setClientSignatureCommitFinalRequestMessage(String clientSignatureCommitFinalRequestMessage) {
    this.clientSignatureCommitFinalRequestMessage = clientSignatureCommitFinalRequestMessage;
  }


  public SessionData serverSignatureCommitFinalResponseMessage(String serverSignatureCommitFinalResponseMessage) {
    
    this.serverSignatureCommitFinalResponseMessage = serverSignatureCommitFinalResponseMessage;
    return this;
  }

   /**
   * Get serverSignatureCommitFinalResponseMessage
   * @return serverSignatureCommitFinalResponseMessage
  **/
  @javax.annotation.Nullable
  public String getServerSignatureCommitFinalResponseMessage() {
    return serverSignatureCommitFinalResponseMessage;
  }


  public void setServerSignatureCommitFinalResponseMessage(String serverSignatureCommitFinalResponseMessage) {
    this.serverSignatureCommitFinalResponseMessage = serverSignatureCommitFinalResponseMessage;
  }


  public SessionData transferCompleteMessageHash(String transferCompleteMessageHash) {
    
    this.transferCompleteMessageHash = transferCompleteMessageHash;
    return this;
  }

   /**
   * Get transferCompleteMessageHash
   * @return transferCompleteMessageHash
  **/
  @javax.annotation.Nullable
  public String getTransferCompleteMessageHash() {
    return transferCompleteMessageHash;
  }


  public void setTransferCompleteMessageHash(String transferCompleteMessageHash) {
    this.transferCompleteMessageHash = transferCompleteMessageHash;
  }


  public SessionData clientSignatureTransferCompleteMessage(String clientSignatureTransferCompleteMessage) {
    
    this.clientSignatureTransferCompleteMessage = clientSignatureTransferCompleteMessage;
    return this;
  }

   /**
   * Get clientSignatureTransferCompleteMessage
   * @return clientSignatureTransferCompleteMessage
  **/
  @javax.annotation.Nullable
  public String getClientSignatureTransferCompleteMessage() {
    return clientSignatureTransferCompleteMessage;
  }


  public void setClientSignatureTransferCompleteMessage(String clientSignatureTransferCompleteMessage) {
    this.clientSignatureTransferCompleteMessage = clientSignatureTransferCompleteMessage;
  }


  public SessionData maxRetries(BigDecimal maxRetries) {
    
    this.maxRetries = maxRetries;
    return this;
  }

   /**
   * Get maxRetries
   * @return maxRetries
  **/
  @javax.annotation.Nullable
  public BigDecimal getMaxRetries() {
    return maxRetries;
  }


  public void setMaxRetries(BigDecimal maxRetries) {
    this.maxRetries = maxRetries;
  }


  public SessionData recipientLedgerAssetID(String recipientLedgerAssetID) {
    
    this.recipientLedgerAssetID = recipientLedgerAssetID;
    return this;
  }

   /**
   * Get recipientLedgerAssetID
   * @return recipientLedgerAssetID
  **/
  @javax.annotation.Nullable
  public String getRecipientLedgerAssetID() {
    return recipientLedgerAssetID;
  }


  public void setRecipientLedgerAssetID(String recipientLedgerAssetID) {
    this.recipientLedgerAssetID = recipientLedgerAssetID;
  }


  public SessionData sourceLedgerAssetID(String sourceLedgerAssetID) {
    
    this.sourceLedgerAssetID = sourceLedgerAssetID;
    return this;
  }

   /**
   * Get sourceLedgerAssetID
   * @return sourceLedgerAssetID
  **/
  @javax.annotation.Nullable
  public String getSourceLedgerAssetID() {
    return sourceLedgerAssetID;
  }


  public void setSourceLedgerAssetID(String sourceLedgerAssetID) {
    this.sourceLedgerAssetID = sourceLedgerAssetID;
  }


  public SessionData maxTimeout(BigDecimal maxTimeout) {
    
    this.maxTimeout = maxTimeout;
    return this;
  }

   /**
   * Get maxTimeout
   * @return maxTimeout
  **/
  @javax.annotation.Nullable
  public BigDecimal getMaxTimeout() {
    return maxTimeout;
  }


  public void setMaxTimeout(BigDecimal maxTimeout) {
    this.maxTimeout = maxTimeout;
  }


  public SessionData lastLogEntryTimestamp(String lastLogEntryTimestamp) {
    
    this.lastLogEntryTimestamp = lastLogEntryTimestamp;
    return this;
  }

   /**
   * Get lastLogEntryTimestamp
   * @return lastLogEntryTimestamp
  **/
  @javax.annotation.Nullable
  public String getLastLogEntryTimestamp() {
    return lastLogEntryTimestamp;
  }


  public void setLastLogEntryTimestamp(String lastLogEntryTimestamp) {
    this.lastLogEntryTimestamp = lastLogEntryTimestamp;
  }


  public SessionData unlockAssetClaim(String unlockAssetClaim) {
    
    this.unlockAssetClaim = unlockAssetClaim;
    return this;
  }

   /**
   * Get unlockAssetClaim
   * @return unlockAssetClaim
  **/
  @javax.annotation.Nullable
  public String getUnlockAssetClaim() {
    return unlockAssetClaim;
  }


  public void setUnlockAssetClaim(String unlockAssetClaim) {
    this.unlockAssetClaim = unlockAssetClaim;
  }


  public SessionData recreateAssetClaim(String recreateAssetClaim) {
    
    this.recreateAssetClaim = recreateAssetClaim;
    return this;
  }

   /**
   * Get recreateAssetClaim
   * @return recreateAssetClaim
  **/
  @javax.annotation.Nullable
  public String getRecreateAssetClaim() {
    return recreateAssetClaim;
  }


  public void setRecreateAssetClaim(String recreateAssetClaim) {
    this.recreateAssetClaim = recreateAssetClaim;
  }


  public SessionData deleteAssetClaim(String deleteAssetClaim) {
    
    this.deleteAssetClaim = deleteAssetClaim;
    return this;
  }

   /**
   * Get deleteAssetClaim
   * @return deleteAssetClaim
  **/
  @javax.annotation.Nullable
  public String getDeleteAssetClaim() {
    return deleteAssetClaim;
  }


  public void setDeleteAssetClaim(String deleteAssetClaim) {
    this.deleteAssetClaim = deleteAssetClaim;
  }


  public SessionData lastMessageReceivedTimestamp(String lastMessageReceivedTimestamp) {
    
    this.lastMessageReceivedTimestamp = lastMessageReceivedTimestamp;
    return this;
  }

   /**
   * Get lastMessageReceivedTimestamp
   * @return lastMessageReceivedTimestamp
  **/
  @javax.annotation.Nullable
  public String getLastMessageReceivedTimestamp() {
    return lastMessageReceivedTimestamp;
  }


  public void setLastMessageReceivedTimestamp(String lastMessageReceivedTimestamp) {
    this.lastMessageReceivedTimestamp = lastMessageReceivedTimestamp;
  }


  public SessionData rollback(Boolean rollback) {
    
    this.rollback = rollback;
    return this;
  }

   /**
   * Get rollback
   * @return rollback
  **/
  @javax.annotation.Nullable
  public Boolean getRollback() {
    return rollback;
  }


  public void setRollback(Boolean rollback) {
    this.rollback = rollback;
  }


  public SessionData rollbackMessageHash(String rollbackMessageHash) {
    
    this.rollbackMessageHash = rollbackMessageHash;
    return this;
  }

   /**
   * Get rollbackMessageHash
   * @return rollbackMessageHash
  **/
  @javax.annotation.Nullable
  public String getRollbackMessageHash() {
    return rollbackMessageHash;
  }


  public void setRollbackMessageHash(String rollbackMessageHash) {
    this.rollbackMessageHash = rollbackMessageHash;
  }


  public SessionData rollbackProofs(List<String> rollbackProofs) {
    
    this.rollbackProofs = rollbackProofs;
    return this;
  }

  public SessionData addRollbackProofsItem(String rollbackProofsItem) {
    if (this.rollbackProofs == null) {
      this.rollbackProofs = new ArrayList<>();
    }
    this.rollbackProofs.add(rollbackProofsItem);
    return this;
  }

   /**
   * Get rollbackProofs
   * @return rollbackProofs
  **/
  @javax.annotation.Nullable
  public List<String> getRollbackProofs() {
    return rollbackProofs;
  }


  public void setRollbackProofs(List<String> rollbackProofs) {
    this.rollbackProofs = rollbackProofs;
  }


  public SessionData rollbackActionsPerformed(List<RollbackActionsPerformedEnum> rollbackActionsPerformed) {
    
    this.rollbackActionsPerformed = rollbackActionsPerformed;
    return this;
  }

  public SessionData addRollbackActionsPerformedItem(RollbackActionsPerformedEnum rollbackActionsPerformedItem) {
    if (this.rollbackActionsPerformed == null) {
      this.rollbackActionsPerformed = new ArrayList<>();
    }
    this.rollbackActionsPerformed.add(rollbackActionsPerformedItem);
    return this;
  }

   /**
   * Get rollbackActionsPerformed
   * @return rollbackActionsPerformed
  **/
  @javax.annotation.Nullable
  public List<RollbackActionsPerformedEnum> getRollbackActionsPerformed() {
    return rollbackActionsPerformed;
  }


  public void setRollbackActionsPerformed(List<RollbackActionsPerformedEnum> rollbackActionsPerformed) {
    this.rollbackActionsPerformed = rollbackActionsPerformed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SessionData sessionData = (SessionData) o;
    return Objects.equals(this.id, sessionData.id) &&
        Objects.equals(this.step, sessionData.step) &&
        Objects.equals(this.version, sessionData.version) &&
        Objects.equals(this.lastSequenceNumber, sessionData.lastSequenceNumber) &&
        Objects.equals(this.loggingProfile, sessionData.loggingProfile) &&
        Objects.equals(this.accessControlProfile, sessionData.accessControlProfile) &&
        Objects.equals(this.applicationProfile, sessionData.applicationProfile) &&
        Objects.equals(this.payloadProfile, sessionData.payloadProfile) &&
        Objects.equals(this.assetProfile, sessionData.assetProfile) &&
        Objects.equals(this.allowedSourceBackupGateways, sessionData.allowedSourceBackupGateways) &&
        Objects.equals(this.allowedRecipientBackupGateways, sessionData.allowedRecipientBackupGateways) &&
        Objects.equals(this.sourceBasePath, sessionData.sourceBasePath) &&
        Objects.equals(this.recipientBasePath, sessionData.recipientBasePath) &&
        Objects.equals(this.originatorPubkey, sessionData.originatorPubkey) &&
        Objects.equals(this.beneficiaryPubkey, sessionData.beneficiaryPubkey) &&
        Objects.equals(this.sourceGatewayPubkey, sessionData.sourceGatewayPubkey) &&
        Objects.equals(this.sourceGatewayDltSystem, sessionData.sourceGatewayDltSystem) &&
        Objects.equals(this.recipientGatewayPubkey, sessionData.recipientGatewayPubkey) &&
        Objects.equals(this.recipientGatewayDltSystem, sessionData.recipientGatewayDltSystem) &&
        Objects.equals(this.initializationRequestMessageHash, sessionData.initializationRequestMessageHash) &&
        Objects.equals(this.initializationResponseMessageHash, sessionData.initializationResponseMessageHash) &&
        Objects.equals(this.initializationRequestMessageRcvTimeStamp, sessionData.initializationRequestMessageRcvTimeStamp) &&
        Objects.equals(this.initializationRequestMessageProcessedTimeStamp, sessionData.initializationRequestMessageProcessedTimeStamp) &&
        Objects.equals(this.clientSignatureInitializationRequestMessage, sessionData.clientSignatureInitializationRequestMessage) &&
        Objects.equals(this.serverSignatureInitializationResponseMessage, sessionData.serverSignatureInitializationResponseMessage) &&
        Objects.equals(this.transferCommenceMessageRequestHash, sessionData.transferCommenceMessageRequestHash) &&
        Objects.equals(this.transferCommenceMessageResponseHash, sessionData.transferCommenceMessageResponseHash) &&
        Objects.equals(this.clientSignatureTransferCommenceRequestMessage, sessionData.clientSignatureTransferCommenceRequestMessage) &&
        Objects.equals(this.serverSignatureTransferCommenceResponseMessage, sessionData.serverSignatureTransferCommenceResponseMessage) &&
        Objects.equals(this.lockEvidenceRequestMessageHash, sessionData.lockEvidenceRequestMessageHash) &&
        Objects.equals(this.lockEvidenceResponseMessageHash, sessionData.lockEvidenceResponseMessageHash) &&
        Objects.equals(this.clientSignatureLockEvidenceRequestMessage, sessionData.clientSignatureLockEvidenceRequestMessage) &&
        Objects.equals(this.serverSignatureLockEvidenceResponseMessage, sessionData.serverSignatureLockEvidenceResponseMessage) &&
        Objects.equals(this.lockEvidenceClaim, sessionData.lockEvidenceClaim) &&
        Objects.equals(this.commitPrepareRequestMessageHash, sessionData.commitPrepareRequestMessageHash) &&
        Objects.equals(this.commitPrepareResponseMessageHash, sessionData.commitPrepareResponseMessageHash) &&
        Objects.equals(this.clientSignatureCommitPreparationRequestMessage, sessionData.clientSignatureCommitPreparationRequestMessage) &&
        Objects.equals(this.serverSignatureCommitPreparationResponseMessage, sessionData.serverSignatureCommitPreparationResponseMessage) &&
        Objects.equals(this.commitFinalRequestMessageHash, sessionData.commitFinalRequestMessageHash) &&
        Objects.equals(this.commitFinalResponseMessageHash, sessionData.commitFinalResponseMessageHash) &&
        Objects.equals(this.commitFinalClaim, sessionData.commitFinalClaim) &&
        Objects.equals(this.commitFinalClaimFormat, sessionData.commitFinalClaimFormat) &&
        Objects.equals(this.commitAcknowledgementClaim, sessionData.commitAcknowledgementClaim) &&
        Objects.equals(this.commitAcknowledgementClaimFormat, sessionData.commitAcknowledgementClaimFormat) &&
        Objects.equals(this.clientSignatureCommitFinalRequestMessage, sessionData.clientSignatureCommitFinalRequestMessage) &&
        Objects.equals(this.serverSignatureCommitFinalResponseMessage, sessionData.serverSignatureCommitFinalResponseMessage) &&
        Objects.equals(this.transferCompleteMessageHash, sessionData.transferCompleteMessageHash) &&
        Objects.equals(this.clientSignatureTransferCompleteMessage, sessionData.clientSignatureTransferCompleteMessage) &&
        Objects.equals(this.maxRetries, sessionData.maxRetries) &&
        Objects.equals(this.recipientLedgerAssetID, sessionData.recipientLedgerAssetID) &&
        Objects.equals(this.sourceLedgerAssetID, sessionData.sourceLedgerAssetID) &&
        Objects.equals(this.maxTimeout, sessionData.maxTimeout) &&
        Objects.equals(this.lastLogEntryTimestamp, sessionData.lastLogEntryTimestamp) &&
        Objects.equals(this.unlockAssetClaim, sessionData.unlockAssetClaim) &&
        Objects.equals(this.recreateAssetClaim, sessionData.recreateAssetClaim) &&
        Objects.equals(this.deleteAssetClaim, sessionData.deleteAssetClaim) &&
        Objects.equals(this.lastMessageReceivedTimestamp, sessionData.lastMessageReceivedTimestamp) &&
        Objects.equals(this.rollback, sessionData.rollback) &&
        Objects.equals(this.rollbackMessageHash, sessionData.rollbackMessageHash) &&
        Objects.equals(this.rollbackProofs, sessionData.rollbackProofs) &&
        Objects.equals(this.rollbackActionsPerformed, sessionData.rollbackActionsPerformed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, step, version, lastSequenceNumber, loggingProfile, accessControlProfile, applicationProfile, payloadProfile, assetProfile, allowedSourceBackupGateways, allowedRecipientBackupGateways, sourceBasePath, recipientBasePath, originatorPubkey, beneficiaryPubkey, sourceGatewayPubkey, sourceGatewayDltSystem, recipientGatewayPubkey, recipientGatewayDltSystem, initializationRequestMessageHash, initializationResponseMessageHash, initializationRequestMessageRcvTimeStamp, initializationRequestMessageProcessedTimeStamp, clientSignatureInitializationRequestMessage, serverSignatureInitializationResponseMessage, transferCommenceMessageRequestHash, transferCommenceMessageResponseHash, clientSignatureTransferCommenceRequestMessage, serverSignatureTransferCommenceResponseMessage, lockEvidenceRequestMessageHash, lockEvidenceResponseMessageHash, clientSignatureLockEvidenceRequestMessage, serverSignatureLockEvidenceResponseMessage, lockEvidenceClaim, commitPrepareRequestMessageHash, commitPrepareResponseMessageHash, clientSignatureCommitPreparationRequestMessage, serverSignatureCommitPreparationResponseMessage, commitFinalRequestMessageHash, commitFinalResponseMessageHash, commitFinalClaim, commitFinalClaimFormat, commitAcknowledgementClaim, commitAcknowledgementClaimFormat, clientSignatureCommitFinalRequestMessage, serverSignatureCommitFinalResponseMessage, transferCompleteMessageHash, clientSignatureTransferCompleteMessage, maxRetries, recipientLedgerAssetID, sourceLedgerAssetID, maxTimeout, lastLogEntryTimestamp, unlockAssetClaim, recreateAssetClaim, deleteAssetClaim, lastMessageReceivedTimestamp, rollback, rollbackMessageHash, rollbackProofs, rollbackActionsPerformed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SessionData {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    step: ").append(toIndentedString(step)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    lastSequenceNumber: ").append(toIndentedString(lastSequenceNumber)).append("\n");
    sb.append("    loggingProfile: ").append(toIndentedString(loggingProfile)).append("\n");
    sb.append("    accessControlProfile: ").append(toIndentedString(accessControlProfile)).append("\n");
    sb.append("    applicationProfile: ").append(toIndentedString(applicationProfile)).append("\n");
    sb.append("    payloadProfile: ").append(toIndentedString(payloadProfile)).append("\n");
    sb.append("    assetProfile: ").append(toIndentedString(assetProfile)).append("\n");
    sb.append("    allowedSourceBackupGateways: ").append(toIndentedString(allowedSourceBackupGateways)).append("\n");
    sb.append("    allowedRecipientBackupGateways: ").append(toIndentedString(allowedRecipientBackupGateways)).append("\n");
    sb.append("    sourceBasePath: ").append(toIndentedString(sourceBasePath)).append("\n");
    sb.append("    recipientBasePath: ").append(toIndentedString(recipientBasePath)).append("\n");
    sb.append("    originatorPubkey: ").append(toIndentedString(originatorPubkey)).append("\n");
    sb.append("    beneficiaryPubkey: ").append(toIndentedString(beneficiaryPubkey)).append("\n");
    sb.append("    sourceGatewayPubkey: ").append(toIndentedString(sourceGatewayPubkey)).append("\n");
    sb.append("    sourceGatewayDltSystem: ").append(toIndentedString(sourceGatewayDltSystem)).append("\n");
    sb.append("    recipientGatewayPubkey: ").append(toIndentedString(recipientGatewayPubkey)).append("\n");
    sb.append("    recipientGatewayDltSystem: ").append(toIndentedString(recipientGatewayDltSystem)).append("\n");
    sb.append("    initializationRequestMessageHash: ").append(toIndentedString(initializationRequestMessageHash)).append("\n");
    sb.append("    initializationResponseMessageHash: ").append(toIndentedString(initializationResponseMessageHash)).append("\n");
    sb.append("    initializationRequestMessageRcvTimeStamp: ").append(toIndentedString(initializationRequestMessageRcvTimeStamp)).append("\n");
    sb.append("    initializationRequestMessageProcessedTimeStamp: ").append(toIndentedString(initializationRequestMessageProcessedTimeStamp)).append("\n");
    sb.append("    clientSignatureInitializationRequestMessage: ").append(toIndentedString(clientSignatureInitializationRequestMessage)).append("\n");
    sb.append("    serverSignatureInitializationResponseMessage: ").append(toIndentedString(serverSignatureInitializationResponseMessage)).append("\n");
    sb.append("    transferCommenceMessageRequestHash: ").append(toIndentedString(transferCommenceMessageRequestHash)).append("\n");
    sb.append("    transferCommenceMessageResponseHash: ").append(toIndentedString(transferCommenceMessageResponseHash)).append("\n");
    sb.append("    clientSignatureTransferCommenceRequestMessage: ").append(toIndentedString(clientSignatureTransferCommenceRequestMessage)).append("\n");
    sb.append("    serverSignatureTransferCommenceResponseMessage: ").append(toIndentedString(serverSignatureTransferCommenceResponseMessage)).append("\n");
    sb.append("    lockEvidenceRequestMessageHash: ").append(toIndentedString(lockEvidenceRequestMessageHash)).append("\n");
    sb.append("    lockEvidenceResponseMessageHash: ").append(toIndentedString(lockEvidenceResponseMessageHash)).append("\n");
    sb.append("    clientSignatureLockEvidenceRequestMessage: ").append(toIndentedString(clientSignatureLockEvidenceRequestMessage)).append("\n");
    sb.append("    serverSignatureLockEvidenceResponseMessage: ").append(toIndentedString(serverSignatureLockEvidenceResponseMessage)).append("\n");
    sb.append("    lockEvidenceClaim: ").append(toIndentedString(lockEvidenceClaim)).append("\n");
    sb.append("    commitPrepareRequestMessageHash: ").append(toIndentedString(commitPrepareRequestMessageHash)).append("\n");
    sb.append("    commitPrepareResponseMessageHash: ").append(toIndentedString(commitPrepareResponseMessageHash)).append("\n");
    sb.append("    clientSignatureCommitPreparationRequestMessage: ").append(toIndentedString(clientSignatureCommitPreparationRequestMessage)).append("\n");
    sb.append("    serverSignatureCommitPreparationResponseMessage: ").append(toIndentedString(serverSignatureCommitPreparationResponseMessage)).append("\n");
    sb.append("    commitFinalRequestMessageHash: ").append(toIndentedString(commitFinalRequestMessageHash)).append("\n");
    sb.append("    commitFinalResponseMessageHash: ").append(toIndentedString(commitFinalResponseMessageHash)).append("\n");
    sb.append("    commitFinalClaim: ").append(toIndentedString(commitFinalClaim)).append("\n");
    sb.append("    commitFinalClaimFormat: ").append(toIndentedString(commitFinalClaimFormat)).append("\n");
    sb.append("    commitAcknowledgementClaim: ").append(toIndentedString(commitAcknowledgementClaim)).append("\n");
    sb.append("    commitAcknowledgementClaimFormat: ").append(toIndentedString(commitAcknowledgementClaimFormat)).append("\n");
    sb.append("    clientSignatureCommitFinalRequestMessage: ").append(toIndentedString(clientSignatureCommitFinalRequestMessage)).append("\n");
    sb.append("    serverSignatureCommitFinalResponseMessage: ").append(toIndentedString(serverSignatureCommitFinalResponseMessage)).append("\n");
    sb.append("    transferCompleteMessageHash: ").append(toIndentedString(transferCompleteMessageHash)).append("\n");
    sb.append("    clientSignatureTransferCompleteMessage: ").append(toIndentedString(clientSignatureTransferCompleteMessage)).append("\n");
    sb.append("    maxRetries: ").append(toIndentedString(maxRetries)).append("\n");
    sb.append("    recipientLedgerAssetID: ").append(toIndentedString(recipientLedgerAssetID)).append("\n");
    sb.append("    sourceLedgerAssetID: ").append(toIndentedString(sourceLedgerAssetID)).append("\n");
    sb.append("    maxTimeout: ").append(toIndentedString(maxTimeout)).append("\n");
    sb.append("    lastLogEntryTimestamp: ").append(toIndentedString(lastLogEntryTimestamp)).append("\n");
    sb.append("    unlockAssetClaim: ").append(toIndentedString(unlockAssetClaim)).append("\n");
    sb.append("    recreateAssetClaim: ").append(toIndentedString(recreateAssetClaim)).append("\n");
    sb.append("    deleteAssetClaim: ").append(toIndentedString(deleteAssetClaim)).append("\n");
    sb.append("    lastMessageReceivedTimestamp: ").append(toIndentedString(lastMessageReceivedTimestamp)).append("\n");
    sb.append("    rollback: ").append(toIndentedString(rollback)).append("\n");
    sb.append("    rollbackMessageHash: ").append(toIndentedString(rollbackMessageHash)).append("\n");
    sb.append("    rollbackProofs: ").append(toIndentedString(rollbackProofs)).append("\n");
    sb.append("    rollbackActionsPerformed: ").append(toIndentedString(rollbackActionsPerformed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("step");
    openapiFields.add("version");
    openapiFields.add("lastSequenceNumber");
    openapiFields.add("loggingProfile");
    openapiFields.add("accessControlProfile");
    openapiFields.add("applicationProfile");
    openapiFields.add("payloadProfile");
    openapiFields.add("assetProfile");
    openapiFields.add("allowedSourceBackupGateways");
    openapiFields.add("allowedRecipientBackupGateways");
    openapiFields.add("sourceBasePath");
    openapiFields.add("recipientBasePath");
    openapiFields.add("originatorPubkey");
    openapiFields.add("beneficiaryPubkey");
    openapiFields.add("sourceGatewayPubkey");
    openapiFields.add("sourceGatewayDltSystem");
    openapiFields.add("recipientGatewayPubkey");
    openapiFields.add("recipientGatewayDltSystem");
    openapiFields.add("initializationRequestMessageHash");
    openapiFields.add("initializationResponseMessageHash");
    openapiFields.add("initializationRequestMessageRcvTimeStamp");
    openapiFields.add("initializationRequestMessageProcessedTimeStamp");
    openapiFields.add("clientSignatureInitializationRequestMessage");
    openapiFields.add("serverSignatureInitializationResponseMessage");
    openapiFields.add("transferCommenceMessageRequestHash");
    openapiFields.add("transferCommenceMessageResponseHash");
    openapiFields.add("clientSignatureTransferCommenceRequestMessage");
    openapiFields.add("serverSignatureTransferCommenceResponseMessage");
    openapiFields.add("lockEvidenceRequestMessageHash");
    openapiFields.add("lockEvidenceResponseMessageHash");
    openapiFields.add("clientSignatureLockEvidenceRequestMessage");
    openapiFields.add("serverSignatureLockEvidenceResponseMessage");
    openapiFields.add("lockEvidenceClaim");
    openapiFields.add("commitPrepareRequestMessageHash");
    openapiFields.add("commitPrepareResponseMessageHash");
    openapiFields.add("clientSignatureCommitPreparationRequestMessage");
    openapiFields.add("serverSignatureCommitPreparationResponseMessage");
    openapiFields.add("commitFinalRequestMessageHash");
    openapiFields.add("commitFinalResponseMessageHash");
    openapiFields.add("commitFinalClaim");
    openapiFields.add("commitFinalClaimFormat");
    openapiFields.add("commitAcknowledgementClaim");
    openapiFields.add("commitAcknowledgementClaimFormat");
    openapiFields.add("clientSignatureCommitFinalRequestMessage");
    openapiFields.add("serverSignatureCommitFinalResponseMessage");
    openapiFields.add("transferCompleteMessageHash");
    openapiFields.add("clientSignatureTransferCompleteMessage");
    openapiFields.add("maxRetries");
    openapiFields.add("recipientLedgerAssetID");
    openapiFields.add("sourceLedgerAssetID");
    openapiFields.add("maxTimeout");
    openapiFields.add("lastLogEntryTimestamp");
    openapiFields.add("unlockAssetClaim");
    openapiFields.add("recreateAssetClaim");
    openapiFields.add("deleteAssetClaim");
    openapiFields.add("lastMessageReceivedTimestamp");
    openapiFields.add("rollback");
    openapiFields.add("rollbackMessageHash");
    openapiFields.add("rollbackProofs");
    openapiFields.add("rollbackActionsPerformed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SessionData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SessionData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SessionData is not found in the empty JSON string", SessionData.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SessionData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SessionData` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("loggingProfile") != null && !jsonObj.get("loggingProfile").isJsonNull()) && !jsonObj.get("loggingProfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loggingProfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loggingProfile").toString()));
      }
      if ((jsonObj.get("accessControlProfile") != null && !jsonObj.get("accessControlProfile").isJsonNull()) && !jsonObj.get("accessControlProfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessControlProfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessControlProfile").toString()));
      }
      if ((jsonObj.get("applicationProfile") != null && !jsonObj.get("applicationProfile").isJsonNull()) && !jsonObj.get("applicationProfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationProfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationProfile").toString()));
      }
      // validate the optional field `payloadProfile`
      if (jsonObj.get("payloadProfile") != null && !jsonObj.get("payloadProfile").isJsonNull()) {
        PayloadProfile.validateJsonObject(jsonObj.getAsJsonObject("payloadProfile"));
      }
      // validate the optional field `assetProfile`
      if (jsonObj.get("assetProfile") != null && !jsonObj.get("assetProfile").isJsonNull()) {
        AssetProfile.validateJsonObject(jsonObj.getAsJsonObject("assetProfile"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedSourceBackupGateways") != null && !jsonObj.get("allowedSourceBackupGateways").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedSourceBackupGateways` to be an array in the JSON string but got `%s`", jsonObj.get("allowedSourceBackupGateways").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedRecipientBackupGateways") != null && !jsonObj.get("allowedRecipientBackupGateways").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedRecipientBackupGateways` to be an array in the JSON string but got `%s`", jsonObj.get("allowedRecipientBackupGateways").toString()));
      }
      if ((jsonObj.get("sourceBasePath") != null && !jsonObj.get("sourceBasePath").isJsonNull()) && !jsonObj.get("sourceBasePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceBasePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceBasePath").toString()));
      }
      if ((jsonObj.get("recipientBasePath") != null && !jsonObj.get("recipientBasePath").isJsonNull()) && !jsonObj.get("recipientBasePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipientBasePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipientBasePath").toString()));
      }
      if ((jsonObj.get("originatorPubkey") != null && !jsonObj.get("originatorPubkey").isJsonNull()) && !jsonObj.get("originatorPubkey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originatorPubkey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originatorPubkey").toString()));
      }
      if ((jsonObj.get("beneficiaryPubkey") != null && !jsonObj.get("beneficiaryPubkey").isJsonNull()) && !jsonObj.get("beneficiaryPubkey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beneficiaryPubkey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beneficiaryPubkey").toString()));
      }
      if ((jsonObj.get("sourceGatewayPubkey") != null && !jsonObj.get("sourceGatewayPubkey").isJsonNull()) && !jsonObj.get("sourceGatewayPubkey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceGatewayPubkey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceGatewayPubkey").toString()));
      }
      if ((jsonObj.get("sourceGatewayDltSystem") != null && !jsonObj.get("sourceGatewayDltSystem").isJsonNull()) && !jsonObj.get("sourceGatewayDltSystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceGatewayDltSystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceGatewayDltSystem").toString()));
      }
      if ((jsonObj.get("recipientGatewayPubkey") != null && !jsonObj.get("recipientGatewayPubkey").isJsonNull()) && !jsonObj.get("recipientGatewayPubkey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipientGatewayPubkey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipientGatewayPubkey").toString()));
      }
      if ((jsonObj.get("recipientGatewayDltSystem") != null && !jsonObj.get("recipientGatewayDltSystem").isJsonNull()) && !jsonObj.get("recipientGatewayDltSystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipientGatewayDltSystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipientGatewayDltSystem").toString()));
      }
      if ((jsonObj.get("initializationRequestMessageHash") != null && !jsonObj.get("initializationRequestMessageHash").isJsonNull()) && !jsonObj.get("initializationRequestMessageHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initializationRequestMessageHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initializationRequestMessageHash").toString()));
      }
      if ((jsonObj.get("initializationResponseMessageHash") != null && !jsonObj.get("initializationResponseMessageHash").isJsonNull()) && !jsonObj.get("initializationResponseMessageHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initializationResponseMessageHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initializationResponseMessageHash").toString()));
      }
      if ((jsonObj.get("initializationRequestMessageRcvTimeStamp") != null && !jsonObj.get("initializationRequestMessageRcvTimeStamp").isJsonNull()) && !jsonObj.get("initializationRequestMessageRcvTimeStamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initializationRequestMessageRcvTimeStamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initializationRequestMessageRcvTimeStamp").toString()));
      }
      if ((jsonObj.get("initializationRequestMessageProcessedTimeStamp") != null && !jsonObj.get("initializationRequestMessageProcessedTimeStamp").isJsonNull()) && !jsonObj.get("initializationRequestMessageProcessedTimeStamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initializationRequestMessageProcessedTimeStamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initializationRequestMessageProcessedTimeStamp").toString()));
      }
      if ((jsonObj.get("clientSignatureInitializationRequestMessage") != null && !jsonObj.get("clientSignatureInitializationRequestMessage").isJsonNull()) && !jsonObj.get("clientSignatureInitializationRequestMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientSignatureInitializationRequestMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientSignatureInitializationRequestMessage").toString()));
      }
      if ((jsonObj.get("serverSignatureInitializationResponseMessage") != null && !jsonObj.get("serverSignatureInitializationResponseMessage").isJsonNull()) && !jsonObj.get("serverSignatureInitializationResponseMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverSignatureInitializationResponseMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverSignatureInitializationResponseMessage").toString()));
      }
      if ((jsonObj.get("transferCommenceMessageRequestHash") != null && !jsonObj.get("transferCommenceMessageRequestHash").isJsonNull()) && !jsonObj.get("transferCommenceMessageRequestHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferCommenceMessageRequestHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transferCommenceMessageRequestHash").toString()));
      }
      if ((jsonObj.get("transferCommenceMessageResponseHash") != null && !jsonObj.get("transferCommenceMessageResponseHash").isJsonNull()) && !jsonObj.get("transferCommenceMessageResponseHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferCommenceMessageResponseHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transferCommenceMessageResponseHash").toString()));
      }
      if ((jsonObj.get("clientSignatureTransferCommenceRequestMessage") != null && !jsonObj.get("clientSignatureTransferCommenceRequestMessage").isJsonNull()) && !jsonObj.get("clientSignatureTransferCommenceRequestMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientSignatureTransferCommenceRequestMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientSignatureTransferCommenceRequestMessage").toString()));
      }
      if ((jsonObj.get("serverSignatureTransferCommenceResponseMessage") != null && !jsonObj.get("serverSignatureTransferCommenceResponseMessage").isJsonNull()) && !jsonObj.get("serverSignatureTransferCommenceResponseMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverSignatureTransferCommenceResponseMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverSignatureTransferCommenceResponseMessage").toString()));
      }
      if ((jsonObj.get("lockEvidenceRequestMessageHash") != null && !jsonObj.get("lockEvidenceRequestMessageHash").isJsonNull()) && !jsonObj.get("lockEvidenceRequestMessageHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lockEvidenceRequestMessageHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lockEvidenceRequestMessageHash").toString()));
      }
      if ((jsonObj.get("lockEvidenceResponseMessageHash") != null && !jsonObj.get("lockEvidenceResponseMessageHash").isJsonNull()) && !jsonObj.get("lockEvidenceResponseMessageHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lockEvidenceResponseMessageHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lockEvidenceResponseMessageHash").toString()));
      }
      if ((jsonObj.get("clientSignatureLockEvidenceRequestMessage") != null && !jsonObj.get("clientSignatureLockEvidenceRequestMessage").isJsonNull()) && !jsonObj.get("clientSignatureLockEvidenceRequestMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientSignatureLockEvidenceRequestMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientSignatureLockEvidenceRequestMessage").toString()));
      }
      if ((jsonObj.get("serverSignatureLockEvidenceResponseMessage") != null && !jsonObj.get("serverSignatureLockEvidenceResponseMessage").isJsonNull()) && !jsonObj.get("serverSignatureLockEvidenceResponseMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverSignatureLockEvidenceResponseMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverSignatureLockEvidenceResponseMessage").toString()));
      }
      if ((jsonObj.get("lockEvidenceClaim") != null && !jsonObj.get("lockEvidenceClaim").isJsonNull()) && !jsonObj.get("lockEvidenceClaim").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lockEvidenceClaim` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lockEvidenceClaim").toString()));
      }
      if ((jsonObj.get("commitPrepareRequestMessageHash") != null && !jsonObj.get("commitPrepareRequestMessageHash").isJsonNull()) && !jsonObj.get("commitPrepareRequestMessageHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitPrepareRequestMessageHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitPrepareRequestMessageHash").toString()));
      }
      if ((jsonObj.get("commitPrepareResponseMessageHash") != null && !jsonObj.get("commitPrepareResponseMessageHash").isJsonNull()) && !jsonObj.get("commitPrepareResponseMessageHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitPrepareResponseMessageHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitPrepareResponseMessageHash").toString()));
      }
      if ((jsonObj.get("clientSignatureCommitPreparationRequestMessage") != null && !jsonObj.get("clientSignatureCommitPreparationRequestMessage").isJsonNull()) && !jsonObj.get("clientSignatureCommitPreparationRequestMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientSignatureCommitPreparationRequestMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientSignatureCommitPreparationRequestMessage").toString()));
      }
      if ((jsonObj.get("serverSignatureCommitPreparationResponseMessage") != null && !jsonObj.get("serverSignatureCommitPreparationResponseMessage").isJsonNull()) && !jsonObj.get("serverSignatureCommitPreparationResponseMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverSignatureCommitPreparationResponseMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverSignatureCommitPreparationResponseMessage").toString()));
      }
      if ((jsonObj.get("commitFinalRequestMessageHash") != null && !jsonObj.get("commitFinalRequestMessageHash").isJsonNull()) && !jsonObj.get("commitFinalRequestMessageHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitFinalRequestMessageHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitFinalRequestMessageHash").toString()));
      }
      if ((jsonObj.get("commitFinalResponseMessageHash") != null && !jsonObj.get("commitFinalResponseMessageHash").isJsonNull()) && !jsonObj.get("commitFinalResponseMessageHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitFinalResponseMessageHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitFinalResponseMessageHash").toString()));
      }
      if ((jsonObj.get("commitFinalClaim") != null && !jsonObj.get("commitFinalClaim").isJsonNull()) && !jsonObj.get("commitFinalClaim").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitFinalClaim` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitFinalClaim").toString()));
      }
      if ((jsonObj.get("commitFinalClaimFormat") != null && !jsonObj.get("commitFinalClaimFormat").isJsonNull()) && !jsonObj.get("commitFinalClaimFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitFinalClaimFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitFinalClaimFormat").toString()));
      }
      if ((jsonObj.get("commitAcknowledgementClaim") != null && !jsonObj.get("commitAcknowledgementClaim").isJsonNull()) && !jsonObj.get("commitAcknowledgementClaim").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitAcknowledgementClaim` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitAcknowledgementClaim").toString()));
      }
      if ((jsonObj.get("commitAcknowledgementClaimFormat") != null && !jsonObj.get("commitAcknowledgementClaimFormat").isJsonNull()) && !jsonObj.get("commitAcknowledgementClaimFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitAcknowledgementClaimFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitAcknowledgementClaimFormat").toString()));
      }
      if ((jsonObj.get("clientSignatureCommitFinalRequestMessage") != null && !jsonObj.get("clientSignatureCommitFinalRequestMessage").isJsonNull()) && !jsonObj.get("clientSignatureCommitFinalRequestMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientSignatureCommitFinalRequestMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientSignatureCommitFinalRequestMessage").toString()));
      }
      if ((jsonObj.get("serverSignatureCommitFinalResponseMessage") != null && !jsonObj.get("serverSignatureCommitFinalResponseMessage").isJsonNull()) && !jsonObj.get("serverSignatureCommitFinalResponseMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverSignatureCommitFinalResponseMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverSignatureCommitFinalResponseMessage").toString()));
      }
      if ((jsonObj.get("transferCompleteMessageHash") != null && !jsonObj.get("transferCompleteMessageHash").isJsonNull()) && !jsonObj.get("transferCompleteMessageHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferCompleteMessageHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transferCompleteMessageHash").toString()));
      }
      if ((jsonObj.get("clientSignatureTransferCompleteMessage") != null && !jsonObj.get("clientSignatureTransferCompleteMessage").isJsonNull()) && !jsonObj.get("clientSignatureTransferCompleteMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientSignatureTransferCompleteMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientSignatureTransferCompleteMessage").toString()));
      }
      if ((jsonObj.get("recipientLedgerAssetID") != null && !jsonObj.get("recipientLedgerAssetID").isJsonNull()) && !jsonObj.get("recipientLedgerAssetID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipientLedgerAssetID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipientLedgerAssetID").toString()));
      }
      if ((jsonObj.get("sourceLedgerAssetID") != null && !jsonObj.get("sourceLedgerAssetID").isJsonNull()) && !jsonObj.get("sourceLedgerAssetID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceLedgerAssetID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceLedgerAssetID").toString()));
      }
      if ((jsonObj.get("lastLogEntryTimestamp") != null && !jsonObj.get("lastLogEntryTimestamp").isJsonNull()) && !jsonObj.get("lastLogEntryTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastLogEntryTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastLogEntryTimestamp").toString()));
      }
      if ((jsonObj.get("unlockAssetClaim") != null && !jsonObj.get("unlockAssetClaim").isJsonNull()) && !jsonObj.get("unlockAssetClaim").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unlockAssetClaim` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unlockAssetClaim").toString()));
      }
      if ((jsonObj.get("recreateAssetClaim") != null && !jsonObj.get("recreateAssetClaim").isJsonNull()) && !jsonObj.get("recreateAssetClaim").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recreateAssetClaim` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recreateAssetClaim").toString()));
      }
      if ((jsonObj.get("deleteAssetClaim") != null && !jsonObj.get("deleteAssetClaim").isJsonNull()) && !jsonObj.get("deleteAssetClaim").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteAssetClaim` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteAssetClaim").toString()));
      }
      if ((jsonObj.get("lastMessageReceivedTimestamp") != null && !jsonObj.get("lastMessageReceivedTimestamp").isJsonNull()) && !jsonObj.get("lastMessageReceivedTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastMessageReceivedTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastMessageReceivedTimestamp").toString()));
      }
      if ((jsonObj.get("rollbackMessageHash") != null && !jsonObj.get("rollbackMessageHash").isJsonNull()) && !jsonObj.get("rollbackMessageHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rollbackMessageHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rollbackMessageHash").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rollbackProofs") != null && !jsonObj.get("rollbackProofs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rollbackProofs` to be an array in the JSON string but got `%s`", jsonObj.get("rollbackProofs").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rollbackActionsPerformed") != null && !jsonObj.get("rollbackActionsPerformed").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rollbackActionsPerformed` to be an array in the JSON string but got `%s`", jsonObj.get("rollbackActionsPerformed").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SessionData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SessionData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SessionData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SessionData.class));

       return (TypeAdapter<T>) new TypeAdapter<SessionData>() {
           @Override
           public void write(JsonWriter out, SessionData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SessionData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SessionData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SessionData
  * @throws IOException if the JSON string is invalid with respect to SessionData
  */
  public static SessionData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SessionData.class);
  }

 /**
  * Convert an instance of SessionData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

