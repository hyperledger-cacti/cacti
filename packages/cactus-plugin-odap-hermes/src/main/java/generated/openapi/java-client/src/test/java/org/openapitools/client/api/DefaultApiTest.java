/*
 * Hyperledger Cactus Plugin - Odap Hermes
 * Implementation for Odap and Hermes
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ClientV1Request;
import org.openapitools.client.model.CommitFinalV1Request;
import org.openapitools.client.model.CommitFinalV1Response;
import org.openapitools.client.model.CommitPreparationV1Request;
import org.openapitools.client.model.CommitPreparationV1Response;
import org.openapitools.client.model.LockEvidenceV1Request;
import org.openapitools.client.model.LockEvidenceV1Response;
import org.openapitools.client.model.RecoverSuccessV1Message;
import org.openapitools.client.model.RecoverUpdateAckV1Message;
import org.openapitools.client.model.RecoverUpdateV1Message;
import org.openapitools.client.model.RecoverV1Message;
import org.openapitools.client.model.RollbackAckV1Message;
import org.openapitools.client.model.RollbackV1Message;
import org.openapitools.client.model.TransferCommenceV1Request;
import org.openapitools.client.model.TransferCommenceV1Response;
import org.openapitools.client.model.TransferCompleteV1Request;
import org.openapitools.client.model.TransferInitializationV1Request;
import org.openapitools.client.model.TransferInitializationV1Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void clientRequestV1Test() throws ApiException {
        ClientV1Request clientV1Request = null;
        Object response = api.clientRequestV1(clientV1Request);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phase1TransferInitiationRequestV1Test() throws ApiException {
        TransferInitializationV1Request transferInitializationV1Request = null;
        api.phase1TransferInitiationRequestV1(transferInitializationV1Request);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phase1TransferInitiationResponseV1Test() throws ApiException {
        TransferInitializationV1Response transferInitializationV1Response = null;
        api.phase1TransferInitiationResponseV1(transferInitializationV1Response);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phase2LockEvidenceRequestV1Test() throws ApiException {
        LockEvidenceV1Request lockEvidenceV1Request = null;
        api.phase2LockEvidenceRequestV1(lockEvidenceV1Request);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phase2LockEvidenceResponseV1Test() throws ApiException {
        LockEvidenceV1Response lockEvidenceV1Response = null;
        api.phase2LockEvidenceResponseV1(lockEvidenceV1Response);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phase2TransferCommenceRequestV1Test() throws ApiException {
        TransferCommenceV1Request transferCommenceV1Request = null;
        api.phase2TransferCommenceRequestV1(transferCommenceV1Request);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phase2TransferCommenceResponseV1Test() throws ApiException {
        TransferCommenceV1Response transferCommenceV1Response = null;
        api.phase2TransferCommenceResponseV1(transferCommenceV1Response);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phase3CommitFinalRequestV1Test() throws ApiException {
        CommitFinalV1Request commitFinalV1Request = null;
        api.phase3CommitFinalRequestV1(commitFinalV1Request);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phase3CommitFinalResponseV1Test() throws ApiException {
        CommitFinalV1Response commitFinalV1Response = null;
        api.phase3CommitFinalResponseV1(commitFinalV1Response);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phase3CommitPreparationRequestV1Test() throws ApiException {
        CommitPreparationV1Request commitPreparationV1Request = null;
        api.phase3CommitPreparationRequestV1(commitPreparationV1Request);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phase3CommitPreparationResponseV1Test() throws ApiException {
        CommitPreparationV1Response commitPreparationV1Response = null;
        api.phase3CommitPreparationResponseV1(commitPreparationV1Response);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phase3TransferCompleteRequestV1Test() throws ApiException {
        TransferCompleteV1Request transferCompleteV1Request = null;
        api.phase3TransferCompleteRequestV1(transferCompleteV1Request);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recoverUpdateAckV1MessageTest() throws ApiException {
        RecoverUpdateAckV1Message recoverUpdateAckV1Message = null;
        api.recoverUpdateAckV1Message(recoverUpdateAckV1Message);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recoverUpdateV1MessageTest() throws ApiException {
        RecoverUpdateV1Message recoverUpdateV1Message = null;
        api.recoverUpdateV1Message(recoverUpdateV1Message);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recoverV1MessageTest() throws ApiException {
        RecoverV1Message recoverV1Message = null;
        api.recoverV1Message(recoverV1Message);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recoverV1SuccessTest() throws ApiException {
        RecoverSuccessV1Message recoverSuccessV1Message = null;
        api.recoverV1Success(recoverSuccessV1Message);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rollbackAckV1MessageTest() throws ApiException {
        RollbackAckV1Message rollbackAckV1Message = null;
        api.rollbackAckV1Message(rollbackAckV1Message);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rollbackV1MessageTest() throws ApiException {
        RollbackV1Message rollbackV1Message = null;
        api.rollbackV1Message(rollbackV1Message);
        // TODO: test validations
    }

}
