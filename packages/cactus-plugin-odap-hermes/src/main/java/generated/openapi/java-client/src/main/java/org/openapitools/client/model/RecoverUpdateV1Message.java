/*
 * Hyperledger Cactus Plugin - Odap Hermes
 * Implementation for Odap and Hermes
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.OdapLocalLog;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RecoverUpdateV1Message
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RecoverUpdateV1Message {
  public static final String SERIALIZED_NAME_SESSION_I_D = "sessionID";
  @SerializedName(SERIALIZED_NAME_SESSION_I_D)
  private String sessionID;

  public static final String SERIALIZED_NAME_RECOVERED_LOGS = "recoveredLogs";
  @SerializedName(SERIALIZED_NAME_RECOVERED_LOGS)
  private List<OdapLocalLog> recoveredLogs = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public RecoverUpdateV1Message() {
  }

  public RecoverUpdateV1Message sessionID(String sessionID) {
    
    this.sessionID = sessionID;
    return this;
  }

   /**
   * Get sessionID
   * @return sessionID
  **/
  @javax.annotation.Nonnull
  public String getSessionID() {
    return sessionID;
  }


  public void setSessionID(String sessionID) {
    this.sessionID = sessionID;
  }


  public RecoverUpdateV1Message recoveredLogs(List<OdapLocalLog> recoveredLogs) {
    
    this.recoveredLogs = recoveredLogs;
    return this;
  }

  public RecoverUpdateV1Message addRecoveredLogsItem(OdapLocalLog recoveredLogsItem) {
    if (this.recoveredLogs == null) {
      this.recoveredLogs = new ArrayList<>();
    }
    this.recoveredLogs.add(recoveredLogsItem);
    return this;
  }

   /**
   * Get recoveredLogs
   * @return recoveredLogs
  **/
  @javax.annotation.Nonnull
  public List<OdapLocalLog> getRecoveredLogs() {
    return recoveredLogs;
  }


  public void setRecoveredLogs(List<OdapLocalLog> recoveredLogs) {
    this.recoveredLogs = recoveredLogs;
  }


  public RecoverUpdateV1Message signature(String signature) {
    
    this.signature = signature;
    return this;
  }

   /**
   * Get signature
   * @return signature
  **/
  @javax.annotation.Nonnull
  public String getSignature() {
    return signature;
  }


  public void setSignature(String signature) {
    this.signature = signature;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecoverUpdateV1Message recoverUpdateV1Message = (RecoverUpdateV1Message) o;
    return Objects.equals(this.sessionID, recoverUpdateV1Message.sessionID) &&
        Objects.equals(this.recoveredLogs, recoverUpdateV1Message.recoveredLogs) &&
        Objects.equals(this.signature, recoverUpdateV1Message.signature);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sessionID, recoveredLogs, signature);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecoverUpdateV1Message {\n");
    sb.append("    sessionID: ").append(toIndentedString(sessionID)).append("\n");
    sb.append("    recoveredLogs: ").append(toIndentedString(recoveredLogs)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sessionID");
    openapiFields.add("recoveredLogs");
    openapiFields.add("signature");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sessionID");
    openapiRequiredFields.add("recoveredLogs");
    openapiRequiredFields.add("signature");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RecoverUpdateV1Message
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RecoverUpdateV1Message.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecoverUpdateV1Message is not found in the empty JSON string", RecoverUpdateV1Message.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!RecoverUpdateV1Message.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecoverUpdateV1Message` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RecoverUpdateV1Message.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("sessionID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionID").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("recoveredLogs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `recoveredLogs` to be an array in the JSON string but got `%s`", jsonObj.get("recoveredLogs").toString()));
      }

      JsonArray jsonArrayrecoveredLogs = jsonObj.getAsJsonArray("recoveredLogs");
      // validate the required field `recoveredLogs` (array)
      for (int i = 0; i < jsonArrayrecoveredLogs.size(); i++) {
        OdapLocalLog.validateJsonObject(jsonArrayrecoveredLogs.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecoverUpdateV1Message.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecoverUpdateV1Message' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecoverUpdateV1Message> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecoverUpdateV1Message.class));

       return (TypeAdapter<T>) new TypeAdapter<RecoverUpdateV1Message>() {
           @Override
           public void write(JsonWriter out, RecoverUpdateV1Message value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecoverUpdateV1Message read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RecoverUpdateV1Message given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RecoverUpdateV1Message
  * @throws IOException if the JSON string is invalid with respect to RecoverUpdateV1Message
  */
  public static RecoverUpdateV1Message fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecoverUpdateV1Message.class);
  }

 /**
  * Convert an instance of RecoverUpdateV1Message to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

