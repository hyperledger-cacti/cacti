/*
 * Hyperledger Cactus Plugin - Odap Hermes
 * Implementation for Odap and Hermes
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssetProfile
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AssetProfile {
  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_ASSET_CODE = "assetCode";
  @SerializedName(SERIALIZED_NAME_ASSET_CODE)
  private String assetCode;

  public static final String SERIALIZED_NAME_ASSET_CODE_TYPE = "assetCodeType";
  @SerializedName(SERIALIZED_NAME_ASSET_CODE_TYPE)
  private String assetCodeType;

  public static final String SERIALIZED_NAME_ISSUANCE_DATE = "issuanceDate";
  @SerializedName(SERIALIZED_NAME_ISSUANCE_DATE)
  private String issuanceDate;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private String expirationDate;

  public static final String SERIALIZED_NAME_VERIFICATION_END_POINT = "verificationEndPoint";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_END_POINT)
  private String verificationEndPoint;

  public static final String SERIALIZED_NAME_DIGITAL_SIGNATURE = "digitalSignature";
  @SerializedName(SERIALIZED_NAME_DIGITAL_SIGNATURE)
  private String digitalSignature;

  public static final String SERIALIZED_NAME_PROSPECTUS_LINK = "prospectusLink";
  @SerializedName(SERIALIZED_NAME_PROSPECTUS_LINK)
  private String prospectusLink;

  public static final String SERIALIZED_NAME_KEY_INFORMATION_LINK = "keyInformationLink";
  @SerializedName(SERIALIZED_NAME_KEY_INFORMATION_LINK)
  private List<Object> keyInformationLink;

  public static final String SERIALIZED_NAME_KEY_WORD = "keyWord";
  @SerializedName(SERIALIZED_NAME_KEY_WORD)
  private List<Object> keyWord;

  public static final String SERIALIZED_NAME_TRANSFER_RESTRICTION = "transferRestriction";
  @SerializedName(SERIALIZED_NAME_TRANSFER_RESTRICTION)
  private List<Object> transferRestriction;

  public static final String SERIALIZED_NAME_LEDGER_REQUIREMENTS = "ledgerRequirements";
  @SerializedName(SERIALIZED_NAME_LEDGER_REQUIREMENTS)
  private List<Object> ledgerRequirements;

  public AssetProfile() {
  }

  public AssetProfile issuer(String issuer) {
    
    this.issuer = issuer;
    return this;
  }

   /**
   * Get issuer
   * @return issuer
  **/
  @javax.annotation.Nullable
  public String getIssuer() {
    return issuer;
  }


  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public AssetProfile assetCode(String assetCode) {
    
    this.assetCode = assetCode;
    return this;
  }

   /**
   * Get assetCode
   * @return assetCode
  **/
  @javax.annotation.Nullable
  public String getAssetCode() {
    return assetCode;
  }


  public void setAssetCode(String assetCode) {
    this.assetCode = assetCode;
  }


  public AssetProfile assetCodeType(String assetCodeType) {
    
    this.assetCodeType = assetCodeType;
    return this;
  }

   /**
   * Get assetCodeType
   * @return assetCodeType
  **/
  @javax.annotation.Nullable
  public String getAssetCodeType() {
    return assetCodeType;
  }


  public void setAssetCodeType(String assetCodeType) {
    this.assetCodeType = assetCodeType;
  }


  public AssetProfile issuanceDate(String issuanceDate) {
    
    this.issuanceDate = issuanceDate;
    return this;
  }

   /**
   * Get issuanceDate
   * @return issuanceDate
  **/
  @javax.annotation.Nullable
  public String getIssuanceDate() {
    return issuanceDate;
  }


  public void setIssuanceDate(String issuanceDate) {
    this.issuanceDate = issuanceDate;
  }


  public AssetProfile expirationDate(String expirationDate) {
    
    this.expirationDate = expirationDate;
    return this;
  }

   /**
   * Get expirationDate
   * @return expirationDate
  **/
  @javax.annotation.Nonnull
  public String getExpirationDate() {
    return expirationDate;
  }


  public void setExpirationDate(String expirationDate) {
    this.expirationDate = expirationDate;
  }


  public AssetProfile verificationEndPoint(String verificationEndPoint) {
    
    this.verificationEndPoint = verificationEndPoint;
    return this;
  }

   /**
   * Get verificationEndPoint
   * @return verificationEndPoint
  **/
  @javax.annotation.Nullable
  public String getVerificationEndPoint() {
    return verificationEndPoint;
  }


  public void setVerificationEndPoint(String verificationEndPoint) {
    this.verificationEndPoint = verificationEndPoint;
  }


  public AssetProfile digitalSignature(String digitalSignature) {
    
    this.digitalSignature = digitalSignature;
    return this;
  }

   /**
   * Get digitalSignature
   * @return digitalSignature
  **/
  @javax.annotation.Nullable
  public String getDigitalSignature() {
    return digitalSignature;
  }


  public void setDigitalSignature(String digitalSignature) {
    this.digitalSignature = digitalSignature;
  }


  public AssetProfile prospectusLink(String prospectusLink) {
    
    this.prospectusLink = prospectusLink;
    return this;
  }

   /**
   * Get prospectusLink
   * @return prospectusLink
  **/
  @javax.annotation.Nullable
  public String getProspectusLink() {
    return prospectusLink;
  }


  public void setProspectusLink(String prospectusLink) {
    this.prospectusLink = prospectusLink;
  }


  public AssetProfile keyInformationLink(List<Object> keyInformationLink) {
    
    this.keyInformationLink = keyInformationLink;
    return this;
  }

  public AssetProfile addKeyInformationLinkItem(Object keyInformationLinkItem) {
    if (this.keyInformationLink == null) {
      this.keyInformationLink = new ArrayList<>();
    }
    this.keyInformationLink.add(keyInformationLinkItem);
    return this;
  }

   /**
   * Get keyInformationLink
   * @return keyInformationLink
  **/
  @javax.annotation.Nullable
  public List<Object> getKeyInformationLink() {
    return keyInformationLink;
  }


  public void setKeyInformationLink(List<Object> keyInformationLink) {
    this.keyInformationLink = keyInformationLink;
  }


  public AssetProfile keyWord(List<Object> keyWord) {
    
    this.keyWord = keyWord;
    return this;
  }

  public AssetProfile addKeyWordItem(Object keyWordItem) {
    if (this.keyWord == null) {
      this.keyWord = new ArrayList<>();
    }
    this.keyWord.add(keyWordItem);
    return this;
  }

   /**
   * Get keyWord
   * @return keyWord
  **/
  @javax.annotation.Nullable
  public List<Object> getKeyWord() {
    return keyWord;
  }


  public void setKeyWord(List<Object> keyWord) {
    this.keyWord = keyWord;
  }


  public AssetProfile transferRestriction(List<Object> transferRestriction) {
    
    this.transferRestriction = transferRestriction;
    return this;
  }

  public AssetProfile addTransferRestrictionItem(Object transferRestrictionItem) {
    if (this.transferRestriction == null) {
      this.transferRestriction = new ArrayList<>();
    }
    this.transferRestriction.add(transferRestrictionItem);
    return this;
  }

   /**
   * Get transferRestriction
   * @return transferRestriction
  **/
  @javax.annotation.Nullable
  public List<Object> getTransferRestriction() {
    return transferRestriction;
  }


  public void setTransferRestriction(List<Object> transferRestriction) {
    this.transferRestriction = transferRestriction;
  }


  public AssetProfile ledgerRequirements(List<Object> ledgerRequirements) {
    
    this.ledgerRequirements = ledgerRequirements;
    return this;
  }

  public AssetProfile addLedgerRequirementsItem(Object ledgerRequirementsItem) {
    if (this.ledgerRequirements == null) {
      this.ledgerRequirements = new ArrayList<>();
    }
    this.ledgerRequirements.add(ledgerRequirementsItem);
    return this;
  }

   /**
   * Get ledgerRequirements
   * @return ledgerRequirements
  **/
  @javax.annotation.Nullable
  public List<Object> getLedgerRequirements() {
    return ledgerRequirements;
  }


  public void setLedgerRequirements(List<Object> ledgerRequirements) {
    this.ledgerRequirements = ledgerRequirements;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetProfile assetProfile = (AssetProfile) o;
    return Objects.equals(this.issuer, assetProfile.issuer) &&
        Objects.equals(this.assetCode, assetProfile.assetCode) &&
        Objects.equals(this.assetCodeType, assetProfile.assetCodeType) &&
        Objects.equals(this.issuanceDate, assetProfile.issuanceDate) &&
        Objects.equals(this.expirationDate, assetProfile.expirationDate) &&
        Objects.equals(this.verificationEndPoint, assetProfile.verificationEndPoint) &&
        Objects.equals(this.digitalSignature, assetProfile.digitalSignature) &&
        Objects.equals(this.prospectusLink, assetProfile.prospectusLink) &&
        Objects.equals(this.keyInformationLink, assetProfile.keyInformationLink) &&
        Objects.equals(this.keyWord, assetProfile.keyWord) &&
        Objects.equals(this.transferRestriction, assetProfile.transferRestriction) &&
        Objects.equals(this.ledgerRequirements, assetProfile.ledgerRequirements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(issuer, assetCode, assetCodeType, issuanceDate, expirationDate, verificationEndPoint, digitalSignature, prospectusLink, keyInformationLink, keyWord, transferRestriction, ledgerRequirements);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetProfile {\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    assetCode: ").append(toIndentedString(assetCode)).append("\n");
    sb.append("    assetCodeType: ").append(toIndentedString(assetCodeType)).append("\n");
    sb.append("    issuanceDate: ").append(toIndentedString(issuanceDate)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    verificationEndPoint: ").append(toIndentedString(verificationEndPoint)).append("\n");
    sb.append("    digitalSignature: ").append(toIndentedString(digitalSignature)).append("\n");
    sb.append("    prospectusLink: ").append(toIndentedString(prospectusLink)).append("\n");
    sb.append("    keyInformationLink: ").append(toIndentedString(keyInformationLink)).append("\n");
    sb.append("    keyWord: ").append(toIndentedString(keyWord)).append("\n");
    sb.append("    transferRestriction: ").append(toIndentedString(transferRestriction)).append("\n");
    sb.append("    ledgerRequirements: ").append(toIndentedString(ledgerRequirements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("issuer");
    openapiFields.add("assetCode");
    openapiFields.add("assetCodeType");
    openapiFields.add("issuanceDate");
    openapiFields.add("expirationDate");
    openapiFields.add("verificationEndPoint");
    openapiFields.add("digitalSignature");
    openapiFields.add("prospectusLink");
    openapiFields.add("keyInformationLink");
    openapiFields.add("keyWord");
    openapiFields.add("transferRestriction");
    openapiFields.add("ledgerRequirements");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("expirationDate");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AssetProfile
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AssetProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssetProfile is not found in the empty JSON string", AssetProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AssetProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssetProfile` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssetProfile.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("issuer") != null && !jsonObj.get("issuer").isJsonNull()) && !jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      if ((jsonObj.get("assetCode") != null && !jsonObj.get("assetCode").isJsonNull()) && !jsonObj.get("assetCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetCode").toString()));
      }
      if ((jsonObj.get("assetCodeType") != null && !jsonObj.get("assetCodeType").isJsonNull()) && !jsonObj.get("assetCodeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetCodeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetCodeType").toString()));
      }
      if ((jsonObj.get("issuanceDate") != null && !jsonObj.get("issuanceDate").isJsonNull()) && !jsonObj.get("issuanceDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuanceDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuanceDate").toString()));
      }
      if (!jsonObj.get("expirationDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expirationDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expirationDate").toString()));
      }
      if ((jsonObj.get("verificationEndPoint") != null && !jsonObj.get("verificationEndPoint").isJsonNull()) && !jsonObj.get("verificationEndPoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationEndPoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationEndPoint").toString()));
      }
      if ((jsonObj.get("digitalSignature") != null && !jsonObj.get("digitalSignature").isJsonNull()) && !jsonObj.get("digitalSignature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `digitalSignature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("digitalSignature").toString()));
      }
      if ((jsonObj.get("prospectusLink") != null && !jsonObj.get("prospectusLink").isJsonNull()) && !jsonObj.get("prospectusLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prospectusLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prospectusLink").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("keyInformationLink") != null && !jsonObj.get("keyInformationLink").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyInformationLink` to be an array in the JSON string but got `%s`", jsonObj.get("keyInformationLink").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("keyWord") != null && !jsonObj.get("keyWord").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyWord` to be an array in the JSON string but got `%s`", jsonObj.get("keyWord").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("transferRestriction") != null && !jsonObj.get("transferRestriction").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `transferRestriction` to be an array in the JSON string but got `%s`", jsonObj.get("transferRestriction").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ledgerRequirements") != null && !jsonObj.get("ledgerRequirements").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ledgerRequirements` to be an array in the JSON string but got `%s`", jsonObj.get("ledgerRequirements").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssetProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssetProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssetProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssetProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<AssetProfile>() {
           @Override
           public void write(JsonWriter out, AssetProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssetProfile read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AssetProfile given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AssetProfile
  * @throws IOException if the JSON string is invalid with respect to AssetProfile
  */
  public static AssetProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssetProfile.class);
  }

 /**
  * Convert an instance of AssetProfile to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

