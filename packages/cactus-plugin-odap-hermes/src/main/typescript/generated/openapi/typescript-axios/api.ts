/* tslint:disable */
/* eslint-disable */
/**
 * Hyperledger Cactus Plugin - Odap Hermes
 * Implementation for Odap and Hermes
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AssetProfile
 */
export interface AssetProfile {
    /**
     * 
     * @type {string}
     * @memberof AssetProfile
     */
    issuer?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetProfile
     */
    assetCode?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetProfile
     */
    assetCodeType?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetProfile
     */
    issuanceDate?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetProfile
     */
    expirationDate: string;
    /**
     * 
     * @type {string}
     * @memberof AssetProfile
     */
    verificationEndPoint?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetProfile
     */
    digitalSignature?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetProfile
     */
    prospectusLink?: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof AssetProfile
     */
    keyInformationLink?: Array<any>;
    /**
     * 
     * @type {Array<any>}
     * @memberof AssetProfile
     */
    keyWord?: Array<any>;
    /**
     * 
     * @type {Array<any>}
     * @memberof AssetProfile
     */
    transferRestriction?: Array<any>;
    /**
     * 
     * @type {Array<any>}
     * @memberof AssetProfile
     */
    ledgerRequirements?: Array<any>;
}
/**
 * 
 * @export
 * @interface CommitFinalV1Request
 */
export interface CommitFinalV1Request {
    /**
     * 
     * @type {string}
     * @memberof CommitFinalV1Request
     */
    sessionID: string;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalV1Request
     */
    messageType: string;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalV1Request
     */
    clientIdentityPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalV1Request
     */
    serverIdentityPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalV1Request
     */
    commitFinalClaim: string;
    /**
     * 
     * @type {object}
     * @memberof CommitFinalV1Request
     */
    commitFinalClaimFormat?: object;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalV1Request
     */
    hashCommitPrepareAck: string;
    /**
     * 
     * @type {number}
     * @memberof CommitFinalV1Request
     */
    clientTransferNumber?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalV1Request
     */
    clientSignature: string;
}
/**
 * 
 * @export
 * @interface CommitFinalV1Response
 */
export interface CommitFinalV1Response {
    /**
     * 
     * @type {string}
     * @memberof CommitFinalV1Response
     */
    messageType: string;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalV1Response
     */
    clientIdentityPubkey?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalV1Response
     */
    serverIdentityPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalV1Response
     */
    commitAcknowledgementClaim: string;
    /**
     * 
     * @type {object}
     * @memberof CommitFinalV1Response
     */
    commitAcknowledgementClaimFormat?: object;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalV1Response
     */
    hashCommitFinal: string;
    /**
     * 
     * @type {number}
     * @memberof CommitFinalV1Response
     */
    serverTransferNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalV1Response
     */
    serverSignature: string;
}
/**
 * 
 * @export
 * @interface CommitPreparationV1Request
 */
export interface CommitPreparationV1Request {
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationV1Request
     */
    sessionID: string;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationV1Request
     */
    messageType: string;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationV1Request
     */
    clientIdentityPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationV1Request
     */
    serverIdentityPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationV1Request
     */
    hashLockEvidenceAck: string;
    /**
     * 
     * @type {number}
     * @memberof CommitPreparationV1Request
     */
    clientTransferNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationV1Request
     */
    clientSignature: string;
}
/**
 * 
 * @export
 * @interface CommitPreparationV1Response
 */
export interface CommitPreparationV1Response {
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationV1Response
     */
    messageType: string;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationV1Response
     */
    clientIdentityPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationV1Response
     */
    serverIdentityPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationV1Response
     */
    hashCommitPrep: string;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationV1Response
     */
    serverTransferNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationV1Response
     */
    serverSignature: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum CredentialProfile {
    Saml = 'SAML',
    Oauth = 'OAUTH',
    X509 = 'X509'
}

/**
 * 
 * @export
 * @interface History
 */
export interface History {
    /**
     * 
     * @type {Array<object>}
     * @memberof History
     */
    Transactions?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof History
     */
    Actions?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof History
     */
    Origin?: string;
    /**
     * 
     * @type {string}
     * @memberof History
     */
    Destination?: string;
    /**
     * 
     * @type {string}
     * @memberof History
     */
    Balance?: string;
    /**
     * 
     * @type {object}
     * @memberof History
     */
    CurrentStatus?: object;
    /**
     * 
     * @type {object}
     * @memberof History
     */
    ApplicationSpecificParameters?: object;
}
/**
 * 
 * @export
 * @interface LockEvidenceV1Request
 */
export interface LockEvidenceV1Request {
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Request
     */
    sessionID: string;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Request
     */
    clientIdentityPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Request
     */
    serverIdentityPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Request
     */
    lockEvidenceClaim: string;
    /**
     * 
     * @type {object}
     * @memberof LockEvidenceV1Request
     */
    lockEvidenceFormat?: object;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Request
     */
    lockEvidenceExpiration: string;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Request
     */
    hashCommenceAckRequest: string;
    /**
     * 
     * @type {number}
     * @memberof LockEvidenceV1Request
     */
    clientTransferNumber?: number | null;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Request
     */
    clientSignature: string;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Request
     */
    messageType: string;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Request
     */
    messageHash?: string;
}
/**
 * 
 * @export
 * @interface LockEvidenceV1Response
 */
export interface LockEvidenceV1Response {
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Response
     */
    clientIdentityPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Response
     */
    serverIdentityPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Response
     */
    hashLockEvidenceRequest: string;
    /**
     * 
     * @type {number}
     * @memberof LockEvidenceV1Response
     */
    serverTransferNumber?: number | null;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Response
     */
    serverSignature: string;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Response
     */
    messageType: string;
}
/**
 * 
 * @export
 * @interface OdapMessage
 */
export interface OdapMessage {
    /**
     * 
     * @type {number}
     * @memberof OdapMessage
     */
    SequenceNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof OdapMessage
     */
    Phase?: OdapMessagePhaseEnum;
    /**
     * 
     * @type {string}
     * @memberof OdapMessage
     */
    ResourceURL?: string;
    /**
     * 
     * @type {string}
     * @memberof OdapMessage
     */
    DeveloperURN?: string;
    /**
     * 
     * @type {OdapMessageActionResponse}
     * @memberof OdapMessage
     */
    ActionResponse?: OdapMessageActionResponse;
    /**
     * 
     * @type {string}
     * @memberof OdapMessage
     */
    CredentialProfile?: OdapMessageCredentialProfileEnum;
    /**
     * 
     * @type {Array<any>}
     * @memberof OdapMessage
     */
    CredentialBlock?: Array<any>;
    /**
     * 
     * @type {PayloadProfile}
     * @memberof OdapMessage
     */
    CredentialsProfile?: PayloadProfile;
    /**
     * 
     * @type {object}
     * @memberof OdapMessage
     */
    ApplicationProfile?: object;
    /**
     * 
     * @type {object}
     * @memberof OdapMessage
     */
    Payload?: object;
    /**
     * 
     * @type {string}
     * @memberof OdapMessage
     */
    PayloadHash?: string;
    /**
     * 
     * @type {string}
     * @memberof OdapMessage
     */
    MessageSignature?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum OdapMessagePhaseEnum {
    TransferInitialization = 'TransferInitialization',
    LockEvidenceVerification = 'LockEvidenceVerification',
    CommitmentEstablishment = 'CommitmentEstablishment'
}
/**
    * @export
    * @enum {string}
    */
export enum OdapMessageCredentialProfileEnum {
    Saml = 'SAML',
    OAuth = 'OAuth',
    X509 = 'X509'
}

/**
 * 
 * @export
 * @interface OdapMessageActionResponse
 */
export interface OdapMessageActionResponse {
    /**
     * 
     * @type {string}
     * @memberof OdapMessageActionResponse
     */
    ResponseCode?: OdapMessageActionResponseResponseCodeEnum;
    /**
     * 
     * @type {Array<any>}
     * @memberof OdapMessageActionResponse
     */
    Arguments?: Array<any>;
}

/**
    * @export
    * @enum {string}
    */
export enum OdapMessageActionResponseResponseCodeEnum {
    OK = '200',
    RESOURCE_NOT_FOUND = '404'
}

/**
 * 
 * @export
 * @interface PayloadProfile
 */
export interface PayloadProfile {
    /**
     * 
     * @type {AssetProfile}
     * @memberof PayloadProfile
     */
    assetProfile: AssetProfile;
    /**
     * 
     * @type {string}
     * @memberof PayloadProfile
     */
    capabilities?: string;
}
/**
 * 
 * @export
 * @interface SendClientV1Request
 */
export interface SendClientV1Request {
    /**
     * 
     * @type {string}
     * @memberof SendClientV1Request
     */
    version: string;
    /**
     * 
     * @type {string}
     * @memberof SendClientV1Request
     */
    loggingProfile: string;
    /**
     * 
     * @type {string}
     * @memberof SendClientV1Request
     */
    accessControlProfile: string;
    /**
     * 
     * @type {string}
     * @memberof SendClientV1Request
     */
    assetControlProfile: string;
    /**
     * 
     * @type {string}
     * @memberof SendClientV1Request
     */
    applicationProfile: string;
    /**
     * 
     * @type {AssetProfile}
     * @memberof SendClientV1Request
     */
    assetProfile: AssetProfile;
    /**
     * 
     * @type {PayloadProfile}
     * @memberof SendClientV1Request
     */
    payLoadProfile: PayloadProfile;
    /**
     * 
     * @type {string}
     * @memberof SendClientV1Request
     */
    sourceGateWayDltSystem: string;
    /**
     * 
     * @type {string}
     * @memberof SendClientV1Request
     */
    recipientGateWayDltSystem: string;
    /**
     * 
     * @type {string}
     * @memberof SendClientV1Request
     */
    recipientGateWayPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof SendClientV1Request
     */
    originatorPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof SendClientV1Request
     */
    beneficiaryPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof SendClientV1Request
     */
    clientIdentityPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof SendClientV1Request
     */
    serverIdentityPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof SendClientV1Request
     */
    clientDltSystem: string;
    /**
     * 
     * @type {string}
     * @memberof SendClientV1Request
     */
    serverDltSystem: string;
    /**
     * 
     * @type {SendClientV1RequestServerGatewayConfiguration}
     * @memberof SendClientV1Request
     */
    serverGatewayConfiguration: SendClientV1RequestServerGatewayConfiguration;
}
/**
 * 
 * @export
 * @interface SendClientV1RequestServerGatewayConfiguration
 */
export interface SendClientV1RequestServerGatewayConfiguration {
    /**
     * 
     * @type {string}
     * @memberof SendClientV1RequestServerGatewayConfiguration
     */
    apiHost: string;
}
/**
 * 
 * @export
 * @interface SessionData
 */
export interface SessionData {
    /**
     * 
     * @type {number}
     * @memberof SessionData
     */
    step?: number;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    initializationMsgHash?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    loggingProfile?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    accessControlProfile?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    applicationProfile?: string;
    /**
     * 
     * @type {AssetProfile}
     * @memberof SessionData
     */
    assetProfile?: AssetProfile;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    initializationRequestMsgSignature?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    sourceGateWayPubkey?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    sourceGateWayDltSystem?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    recipientGateWayPubkey?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    recipientGateWayDltSystem?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    initialMsgRcvTimeStamp?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    initialMsgProcessedTimeStamp?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    originatorPubkey?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    beneficiaryPubkey?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    clientIdentityPubkey?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    serverIdentityPubkey?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    clientDltSystem?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    serverDltSystem?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    commenceReqHash?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    commenceAckHash?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    clientSignatureForCommenceReq?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    serverSignatureForCommenceAck?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    lockEvidenceClaim?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    clientSignatureForLockEvidence?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    serverSignatureForLockEvidence?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    lockEvidenceAckHash?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    clientSignatureForCommitPreparation?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    commitPrepareReqHash?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    commitPrepareAckHash?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    serverSignatureForCommitPreparation?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    commitFinalClaim?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    clientSignatureForCommitFinal?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    commitAckClaim?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    serverSignatureForCommitFinal?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    commitFinalReqHash?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    commitFinalAckHash?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SessionData
     */
    isFabricAssetDeleted?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SessionData
     */
    isFabricAssetLocked?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SessionData
     */
    isFabricAssetCreated?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SessionData
     */
    isBesuAssetCreated?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SessionData
     */
    isBesuAssetDeleted?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SessionData
     */
    isBesuAssetLocked?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    fabricAssetID?: string;
    /**
     * 
     * @type {number}
     * @memberof SessionData
     */
    fabricAssetSize?: number;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    besuAssetID?: string;
}
/**
 * 
 * @export
 * @interface TransferCommenceV1Request
 */
export interface TransferCommenceV1Request {
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Request
     */
    sessionID: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Request
     */
    messageType: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Request
     */
    originatorPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Request
     */
    beneficiaryPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Request
     */
    senderDltSystem: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Request
     */
    recipientDltSystem: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Request
     */
    clientIdentityPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Request
     */
    serverIdentityPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Request
     */
    hashAssetProfile: string;
    /**
     * 
     * @type {number}
     * @memberof TransferCommenceV1Request
     */
    assetUnit?: number;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Request
     */
    hashPrevMessage: string;
    /**
     * 
     * @type {number}
     * @memberof TransferCommenceV1Request
     */
    clientTransferNumber?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Request
     */
    clientSignature: string;
}
/**
 * 
 * @export
 * @interface TransferCommenceV1Response
 */
export interface TransferCommenceV1Response {
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Response
     */
    clientIdentityPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Response
     */
    serverIdentityPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Response
     */
    hashCommenceRequest: string;
    /**
     * 
     * @type {number}
     * @memberof TransferCommenceV1Response
     */
    serverTransferNumber?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Response
     */
    serverSignature: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Response
     */
    messageType: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Response
     */
    messageHash?: string;
}
/**
 * 
 * @export
 * @interface TransferCompleteV1Request
 */
export interface TransferCompleteV1Request {
    /**
     * 
     * @type {string}
     * @memberof TransferCompleteV1Request
     */
    sessionID: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCompleteV1Request
     */
    messageType: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCompleteV1Request
     */
    clientIdentityPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCompleteV1Request
     */
    serverIdentityPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCompleteV1Request
     */
    hashCommitFinalAck: string;
    /**
     * 
     * @type {number}
     * @memberof TransferCompleteV1Request
     */
    clientTransferNumber?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TransferCompleteV1Request
     */
    clientSignature: string;
    /**
     * 
     * @type {string}
     * @memberof TransferCompleteV1Request
     */
    hashTransferCommence: string;
}
/**
 * 
 * @export
 * @interface TransferCompleteV1Response
 */
export interface TransferCompleteV1Response {
    /**
     * 
     * @type {string}
     * @memberof TransferCompleteV1Response
     */
    ok: string;
}
/**
 * 
 * @export
 * @interface TransferInitializationV1Request
 */
export interface TransferInitializationV1Request {
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    version?: string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    developerURN?: string;
    /**
     * 
     * @type {CredentialProfile}
     * @memberof TransferInitializationV1Request
     */
    credentialProfile?: CredentialProfile;
    /**
     * 
     * @type {PayloadProfile}
     * @memberof TransferInitializationV1Request
     */
    payloadProfile: PayloadProfile;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    applicationProfile: string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    loggingProfile: string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    accessControlProfile: string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    initializationRequestMessageSignature: string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    sourceGatewayPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    sourceGateWayDltSystem: string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    recipientGateWayPubkey: string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    recipientGateWayDltSystem: string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    escrowType?: TransferInitializationV1RequestEscrowTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    expiryTime?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TransferInitializationV1Request
     */
    multipleClaimsAllowed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TransferInitializationV1Request
     */
    multipleCancelsAllowed?: boolean;
    /**
     * 
     * @type {object}
     * @memberof TransferInitializationV1Request
     */
    permissions?: object;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    origin?: string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    destination?: string;
    /**
     * 
     * @type {object}
     * @memberof TransferInitializationV1Request
     */
    subsequentCalls?: object;
    /**
     * 
     * @type {Array<History>}
     * @memberof TransferInitializationV1Request
     */
    histories?: Array<History>;
}

/**
    * @export
    * @enum {string}
    */
export enum TransferInitializationV1RequestEscrowTypeEnum {
    Faucet = 'FAUCET',
    Timelock = 'TIMELOCK',
    Hashlock = 'HASHLOCK',
    Hashtimelock = 'HASHTIMELOCK',
    Multiclaimpc = 'MULTICLAIMPC',
    Destroy = 'DESTROY',
    Burn = 'BURN'
}

/**
 * 
 * @export
 * @interface TransferInitializationV1Response
 */
export interface TransferInitializationV1Response {
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Response
     */
    sessionID: string;
    /**
     * 
     * @type {number}
     * @memberof TransferInitializationV1Response
     */
    sequenceNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Response
     */
    odapPhase?: TransferInitializationV1ResponseOdapPhaseEnum;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Response
     */
    initialRequestMessageHash: string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Response
     */
    destination?: string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Response
     */
    timeStamp: string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Response
     */
    processedTimeStamp: string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Response
     */
    serverIdentityPubkey: string;
}

/**
    * @export
    * @enum {string}
    */
export enum TransferInitializationV1ResponseOdapPhaseEnum {
    TransferInitialization = 'TransferInitialization',
    LockEvidenceVerification = 'LockEvidenceVerification',
    CommitmentEstablishment = 'CommitmentEstablishment'
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {TransferInitializationV1Request} [transferInitializationV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase1TransferInitiationV1: async (transferInitializationV1Request?: TransferInitializationV1Request, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-odap-hemres/phase1/transferinitiation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferInitializationV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LockEvidenceV1Request} [lockEvidenceV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase2LockEvidenceV1: async (lockEvidenceV1Request?: LockEvidenceV1Request, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-odap-hemres/phase2/lockevidence`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lockEvidenceV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TransferCommenceV1Request} [transferCommenceV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase2TransferCommenceV1: async (transferCommenceV1Request?: TransferCommenceV1Request, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-odap-hemres/phase2/transfercommence`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferCommenceV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CommitFinalV1Request} [commitFinalV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase3CommitFinalV1: async (commitFinalV1Request?: CommitFinalV1Request, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-odap-hemres/phase3/commitfinal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commitFinalV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CommitPreparationV1Request} [commitPreparationV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase3CommitPreparationV1: async (commitPreparationV1Request?: CommitPreparationV1Request, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-odap-hemres/phase3/commitpreparation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commitPreparationV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TransferCompleteV1Request} [transferCompleteV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase3TransferCompleteV1: async (transferCompleteV1Request?: TransferCompleteV1Request, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-odap-hemres/phase3/transfercomplete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferCompleteV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SendClientV1Request} [sendClientV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendClientRequestV1: async (sendClientV1Request?: SendClientV1Request, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-odap-hemres/sendclientrequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendClientV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {TransferInitializationV1Request} [transferInitializationV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phase1TransferInitiationV1(transferInitializationV1Request?: TransferInitializationV1Request, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferInitializationV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phase1TransferInitiationV1(transferInitializationV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LockEvidenceV1Request} [lockEvidenceV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phase2LockEvidenceV1(lockEvidenceV1Request?: LockEvidenceV1Request, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LockEvidenceV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phase2LockEvidenceV1(lockEvidenceV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TransferCommenceV1Request} [transferCommenceV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phase2TransferCommenceV1(transferCommenceV1Request?: TransferCommenceV1Request, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransferCommenceV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phase2TransferCommenceV1(transferCommenceV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CommitFinalV1Request} [commitFinalV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phase3CommitFinalV1(commitFinalV1Request?: CommitFinalV1Request, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommitFinalV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phase3CommitFinalV1(commitFinalV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CommitPreparationV1Request} [commitPreparationV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phase3CommitPreparationV1(commitPreparationV1Request?: CommitPreparationV1Request, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommitPreparationV1Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phase3CommitPreparationV1(commitPreparationV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TransferCompleteV1Request} [transferCompleteV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phase3TransferCompleteV1(transferCompleteV1Request?: TransferCompleteV1Request, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phase3TransferCompleteV1(transferCompleteV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SendClientV1Request} [sendClientV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendClientRequestV1(sendClientV1Request?: SendClientV1Request, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendClientRequestV1(sendClientV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {TransferInitializationV1Request} [transferInitializationV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase1TransferInitiationV1(transferInitializationV1Request?: TransferInitializationV1Request, options?: any): AxiosPromise<TransferInitializationV1Response> {
            return localVarFp.phase1TransferInitiationV1(transferInitializationV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LockEvidenceV1Request} [lockEvidenceV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase2LockEvidenceV1(lockEvidenceV1Request?: LockEvidenceV1Request, options?: any): AxiosPromise<LockEvidenceV1Response> {
            return localVarFp.phase2LockEvidenceV1(lockEvidenceV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TransferCommenceV1Request} [transferCommenceV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase2TransferCommenceV1(transferCommenceV1Request?: TransferCommenceV1Request, options?: any): AxiosPromise<TransferCommenceV1Response> {
            return localVarFp.phase2TransferCommenceV1(transferCommenceV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CommitFinalV1Request} [commitFinalV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase3CommitFinalV1(commitFinalV1Request?: CommitFinalV1Request, options?: any): AxiosPromise<CommitFinalV1Response> {
            return localVarFp.phase3CommitFinalV1(commitFinalV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CommitPreparationV1Request} [commitPreparationV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase3CommitPreparationV1(commitPreparationV1Request?: CommitPreparationV1Request, options?: any): AxiosPromise<CommitPreparationV1Response> {
            return localVarFp.phase3CommitPreparationV1(commitPreparationV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TransferCompleteV1Request} [transferCompleteV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase3TransferCompleteV1(transferCompleteV1Request?: TransferCompleteV1Request, options?: any): AxiosPromise<any> {
            return localVarFp.phase3TransferCompleteV1(transferCompleteV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SendClientV1Request} [sendClientV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendClientRequestV1(sendClientV1Request?: SendClientV1Request, options?: any): AxiosPromise<any> {
            return localVarFp.sendClientRequestV1(sendClientV1Request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {TransferInitializationV1Request} [transferInitializationV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public phase1TransferInitiationV1(transferInitializationV1Request?: TransferInitializationV1Request, options?: any) {
        return DefaultApiFp(this.configuration).phase1TransferInitiationV1(transferInitializationV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LockEvidenceV1Request} [lockEvidenceV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public phase2LockEvidenceV1(lockEvidenceV1Request?: LockEvidenceV1Request, options?: any) {
        return DefaultApiFp(this.configuration).phase2LockEvidenceV1(lockEvidenceV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TransferCommenceV1Request} [transferCommenceV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public phase2TransferCommenceV1(transferCommenceV1Request?: TransferCommenceV1Request, options?: any) {
        return DefaultApiFp(this.configuration).phase2TransferCommenceV1(transferCommenceV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CommitFinalV1Request} [commitFinalV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public phase3CommitFinalV1(commitFinalV1Request?: CommitFinalV1Request, options?: any) {
        return DefaultApiFp(this.configuration).phase3CommitFinalV1(commitFinalV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CommitPreparationV1Request} [commitPreparationV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public phase3CommitPreparationV1(commitPreparationV1Request?: CommitPreparationV1Request, options?: any) {
        return DefaultApiFp(this.configuration).phase3CommitPreparationV1(commitPreparationV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TransferCompleteV1Request} [transferCompleteV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public phase3TransferCompleteV1(transferCompleteV1Request?: TransferCompleteV1Request, options?: any) {
        return DefaultApiFp(this.configuration).phase3TransferCompleteV1(transferCompleteV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SendClientV1Request} [sendClientV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sendClientRequestV1(sendClientV1Request?: SendClientV1Request, options?: any) {
        return DefaultApiFp(this.configuration).sendClientRequestV1(sendClientV1Request, options).then((request) => request(this.axios, this.basePath));
    }
}


