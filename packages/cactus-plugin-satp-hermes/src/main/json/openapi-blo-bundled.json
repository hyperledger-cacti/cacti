{
  "openapi": "3.0.3",
  "info": {
    "title": "SATP Gateway Client (Business Logic Orchestrator)",
    "version": "0.0.2",
    "description": "SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.\n\nThis API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.\n\n**Additional Resources**:\n- [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/)\n- [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core)\n- [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/)\n- [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/)\n- [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/)\n- [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing)\n- [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)",
    "contact": {
      "name": "Hyperledger Cacti"
    },
    "x-logo": {
      "altText": "Cacti logo",
      "backgroundColor": "#fafafa",
      "url": "https://github.com/hyperledger/cacti/blob/main/images/HL_Cacti_Logo_Color.png"
    }
  },
  "externalDocs": {
    "description": "For more information about the SATP Gateway Client, refer to the official documentation.",
    "url": "https://github.com/hyperledger/cacti/tree/main/packages/cactus-plugin-satp-hermes/README.md"
  },
  "servers": [
    {
      "url": "http://{host}:{port}/api/v1/@hyperledger/cactus-plugin-satp-hermes",
      "description": "Development server",
      "variables": {
        "host": {
          "default": "localhost"
        },
        "port": {
          "default": "3011"
        }
      }
    }
  ],
  "tags": [
    {
      "name": "transaction",
      "description": "API endpoints for interacting with blockchains via gateways"
    },
    {
      "name": "admin",
      "description": "API endpoints for fetching information on SATP sessions"
    }
  ],
  "paths": {
    "/api/v1/@hyperledger/cactus-plugin-satp-hermes/transact": {
      "post": {
        "tags": [
          "transaction"
        ],
        "x-hyperledger-cacti": {
          "http": {
            "verbLowerCase": "post",
            "path": "/api/v1/@hyperledger/cactus-plugin-satp-hermes/transact"
          }
        },
        "summary": "Submit a transaction intent",
        "description": "Allows users to queue intents for transactions based on specified parameters.",
        "operationId": "Transact",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "Request schema for initiating a transaction. Includes details such as the transaction context, mode (data or transfer), payload, and information about the source and destination DLT networks.",
                "type": "object",
                "required": [
                  "contextID",
                  "sourceAsset",
                  "receiverAsset"
                ],
                "properties": {
                  "contextID": {
                    "description": "The unique identifier of the task.",
                    "type": "string",
                    "example": "000003e8-e0b8-21ee-ba00-325096b39f47"
                  },
                  "payload": {
                    "type": "string",
                    "example": "{\"data\":\"example payload\"}"
                  },
                  "sourceAsset": {
                    "description": "An asset",
                    "type": "object",
                    "required": [
                      "id",
                      "owner",
                      "contractName",
                      "networkId",
                      "tokenType",
                      "referenceId"
                    ],
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "owner": {
                        "type": "string"
                      },
                      "contractName": {
                        "type": "string"
                      },
                      "contractAddress": {
                        "type": "string"
                      },
                      "mspId": {
                        "type": "string"
                      },
                      "channelName": {
                        "type": "string"
                      },
                      "amount": {
                        "type": "string"
                      },
                      "networkId": {
                        "type": "object",
                        "description": "The network of the DLT being interacted with.",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The network of the DLT being interacted with."
                          },
                          "ledgerType": {
                            "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                            "type": "string",
                            "enum": [
                              "BESU_1X",
                              "BESU_2X",
                              "BURROW_0X",
                              "CORDA_4X",
                              "ETHEREUM",
                              "FABRIC_2",
                              "SAWTOOTH_1X"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "ledgerType"
                        ]
                      },
                      "tokenType": {
                        "type": "string",
                        "enum": [
                          "ERC20",
                          "ERC721",
                          "ERC1155",
                          "NONSTANDARD_FUNGIBLE",
                          "NONSTANDARD_NONFUNGIBLE"
                        ],
                        "description": "The type of token."
                      },
                      "referenceId": {
                        "type": "string"
                      }
                    }
                  },
                  "receiverAsset": {
                    "description": "An asset",
                    "type": "object",
                    "required": [
                      "id",
                      "owner",
                      "contractName",
                      "networkId",
                      "tokenType",
                      "referenceId"
                    ],
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "owner": {
                        "type": "string"
                      },
                      "contractName": {
                        "type": "string"
                      },
                      "contractAddress": {
                        "type": "string"
                      },
                      "mspId": {
                        "type": "string"
                      },
                      "channelName": {
                        "type": "string"
                      },
                      "amount": {
                        "type": "string"
                      },
                      "networkId": {
                        "type": "object",
                        "description": "The network of the DLT being interacted with.",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "The network of the DLT being interacted with."
                          },
                          "ledgerType": {
                            "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                            "type": "string",
                            "enum": [
                              "BESU_1X",
                              "BESU_2X",
                              "BURROW_0X",
                              "CORDA_4X",
                              "ETHEREUM",
                              "FABRIC_2",
                              "SAWTOOTH_1X"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "ledgerType"
                        ]
                      },
                      "tokenType": {
                        "type": "string",
                        "enum": [
                          "ERC20",
                          "ERC721",
                          "ERC1155",
                          "NONSTANDARD_FUNGIBLE",
                          "NONSTANDARD_NONFUNGIBLE"
                        ],
                        "description": "The type of token."
                      },
                      "referenceId": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction successfully queued",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response schema for a transaction request. Includes the session ID and the current status of the transaction.",
                  "type": "object",
                  "properties": {
                    "sessionID": {
                      "x-category": "satp-core",
                      "type": "string",
                      "description": "Unique identifier (UUID) for the session.",
                      "example": "000003e8-e0b8-21ee-ba00-325096b39f47"
                    },
                    "statusResponse": {
                      "description": "Provides the current status of the SATP session including detailed information on the progress, such as substatus, stage, and step, along with the session start time and chain information.",
                      "type": "object",
                      "x-category": "response",
                      "required": [
                        "status",
                        "substatus",
                        "stage",
                        "step",
                        "startTime",
                        "originNetwork",
                        "destinationNetwork"
                      ],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "NOT_FOUND",
                            "INVALID",
                            "PENDING",
                            "DONE",
                            "FAILED"
                          ],
                          "example": "DONE"
                        },
                        "substatus": {
                          "type": "string",
                          "enum": [
                            "WAIT_SOURCE_CONFIRMATIONS",
                            "WAIT_DESTINATION_TRANSACTION",
                            "BRIDGE_NOT_AVAILABLE",
                            "CHAIN_NOT_AVAILABLE",
                            "REFUND_IN_PROGRESS",
                            "UNKNOWN_ERROR",
                            "COMPLETED",
                            "PARTIAL",
                            "REFUNDED",
                            "NOT_PROCESSABLE_REFUND_NEEDED",
                            "RECOVERING",
                            "RECOVERED",
                            "RECOVERY_FAILED",
                            "REJECTED"
                          ],
                          "example": "COMPLETED"
                        },
                        "stage": {
                          "type": "string",
                          "enum": [
                            "STAGE_0",
                            "STAGE_1",
                            "STAGE_2",
                            "STAGE_3"
                          ],
                          "example": "STAGE_3"
                        },
                        "step": {
                          "type": "string",
                          "enum": [
                            "transfer-initialization-claims",
                            "conveyance-of-network-capabilities-and-parameters",
                            "transfer-proposal-message",
                            "transfer-proposal-receipt-message",
                            "transfer-proposal-reject-and-conditional-reject-message",
                            "transfer-commence-message",
                            "commence-response-message",
                            "lock-assertion-message",
                            "lock-assertion-receipt-message",
                            "commit-preparation-message",
                            "commit-ready-message",
                            "commit-final-assertion-message",
                            "commit-final-acknowledgement-receipt-message",
                            "transfer-complete-message",
                            "rollback-transfer-initialization-claims",
                            "rollback-conveyance-of-network-capabilities-and-parameters",
                            "rollback-transfer-proposal-message",
                            "rollback-transfer-proposal-receipt-message",
                            "rollback-transfer-proposal-reject-and-conditional-reject-message",
                            "rollback-transfer-commence-message",
                            "rollback-commence-response-message",
                            "rollback-lock-assertion-message",
                            "rollback-lock-assertion-receipt-message",
                            "rollback-commit-preparation-message",
                            "rollback-commit-ready-message",
                            "rollback-commit-final-assertion-message",
                            "rollback-commit-final-acknowledgement-receipt-message",
                            "rollback-transfer-complete-message"
                          ],
                          "example": "transfer-complete-message"
                        },
                        "startTime": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2023-01-01T00:00:00Z"
                        },
                        "originNetwork": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the origin network.",
                              "example": "network1"
                            },
                            "dltProtocol": {
                              "example": "HyperledgerFabric"
                            },
                            "dltSubnetworkID": {
                              "example": "subnetwork1"
                            }
                          }
                        },
                        "destinationNetwork": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the origin network.",
                              "example": "network2"
                            },
                            "dltProtocol": {
                              "example": "HyperledgerBesu"
                            },
                            "dltSubnetworkID": {
                              "example": "subnetwork2"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "sessionID",
                    "statusResponse"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "x-category": "response",
                  "type": "object",
                  "x-go-type": "ApiError",
                  "x-go-name": "ApiError",
                  "description": "An Error",
                  "required": [
                    "message",
                    "type",
                    "code",
                    "status",
                    "timestamp"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "HTTP error type",
                      "example": "bad-request"
                    },
                    "code": {
                      "type": "integer",
                      "description": "Numeric error code",
                      "example": 16384
                    },
                    "status": {
                      "type": "integer",
                      "description": "HTTP status of the error",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Long error description",
                      "example": "Oops there's been an internal error handling"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Timestamp of the error",
                      "example": "2021-07-21T17:32:28Z"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/@hyperledger/cactus-plugin-satp-hermes/cancel": {
      "post": {
        "tags": [
          "transaction"
        ],
        "summary": "Cancel a transaction session",
        "description": "Attempts to cancel a previously submitted transaction intent using its session ID.",
        "operationId": "Cancel",
        "x-hyperledger-cacti": {
          "http": {
            "verbLowerCase": "post",
            "path": "/api/v1/@hyperledger/cactus-plugin-satp-hermes/cancel"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Request to cancel an ongoing transaction session, identified by the session ID.",
                "type": "object",
                "properties": {
                  "sessionID": {
                    "x-category": "satp-core",
                    "type": "string",
                    "description": "Unique identifier (UUID) for the session.",
                    "example": "000003e8-e0b8-21ee-ba00-325096b39f47"
                  }
                },
                "required": [
                  "sessionID"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Transaction cancellation attempted",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response for a cancel transaction request. Indicates whether the cancel action was successful and includes the current session status.",
                  "type": "object",
                  "properties": {
                    "statusResponse": {
                      "description": "Provides the current status of the SATP session including detailed information on the progress, such as substatus, stage, and step, along with the session start time and chain information.",
                      "type": "object",
                      "x-category": "response",
                      "required": [
                        "status",
                        "substatus",
                        "stage",
                        "step",
                        "startTime",
                        "originNetwork",
                        "destinationNetwork"
                      ],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "NOT_FOUND",
                            "INVALID",
                            "PENDING",
                            "DONE",
                            "FAILED"
                          ],
                          "example": "DONE"
                        },
                        "substatus": {
                          "type": "string",
                          "enum": [
                            "WAIT_SOURCE_CONFIRMATIONS",
                            "WAIT_DESTINATION_TRANSACTION",
                            "BRIDGE_NOT_AVAILABLE",
                            "CHAIN_NOT_AVAILABLE",
                            "REFUND_IN_PROGRESS",
                            "UNKNOWN_ERROR",
                            "COMPLETED",
                            "PARTIAL",
                            "REFUNDED",
                            "NOT_PROCESSABLE_REFUND_NEEDED",
                            "RECOVERING",
                            "RECOVERED",
                            "RECOVERY_FAILED",
                            "REJECTED"
                          ],
                          "example": "COMPLETED"
                        },
                        "stage": {
                          "type": "string",
                          "enum": [
                            "STAGE_0",
                            "STAGE_1",
                            "STAGE_2",
                            "STAGE_3"
                          ],
                          "example": "STAGE_3"
                        },
                        "step": {
                          "type": "string",
                          "enum": [
                            "transfer-initialization-claims",
                            "conveyance-of-network-capabilities-and-parameters",
                            "transfer-proposal-message",
                            "transfer-proposal-receipt-message",
                            "transfer-proposal-reject-and-conditional-reject-message",
                            "transfer-commence-message",
                            "commence-response-message",
                            "lock-assertion-message",
                            "lock-assertion-receipt-message",
                            "commit-preparation-message",
                            "commit-ready-message",
                            "commit-final-assertion-message",
                            "commit-final-acknowledgement-receipt-message",
                            "transfer-complete-message",
                            "rollback-transfer-initialization-claims",
                            "rollback-conveyance-of-network-capabilities-and-parameters",
                            "rollback-transfer-proposal-message",
                            "rollback-transfer-proposal-receipt-message",
                            "rollback-transfer-proposal-reject-and-conditional-reject-message",
                            "rollback-transfer-commence-message",
                            "rollback-commence-response-message",
                            "rollback-lock-assertion-message",
                            "rollback-lock-assertion-receipt-message",
                            "rollback-commit-preparation-message",
                            "rollback-commit-ready-message",
                            "rollback-commit-final-assertion-message",
                            "rollback-commit-final-acknowledgement-receipt-message",
                            "rollback-transfer-complete-message"
                          ],
                          "example": "transfer-complete-message"
                        },
                        "startTime": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2023-01-01T00:00:00Z"
                        },
                        "originNetwork": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the origin network.",
                              "example": "network1"
                            },
                            "dltProtocol": {
                              "example": "HyperledgerFabric"
                            },
                            "dltSubnetworkID": {
                              "example": "subnetwork1"
                            }
                          }
                        },
                        "destinationNetwork": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the origin network.",
                              "example": "network2"
                            },
                            "dltProtocol": {
                              "example": "HyperledgerBesu"
                            },
                            "dltSubnetworkID": {
                              "example": "subnetwork2"
                            }
                          }
                        }
                      }
                    },
                    "cancelSuccessful": {
                      "type": "boolean",
                      "description": "Indicates whether the cancel operation was successful.",
                      "example": true
                    }
                  },
                  "required": [
                    "statusResponse",
                    "cancelSuccessful"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error occurred or transaction cannot be cancelled",
            "content": {
              "application/json": {
                "schema": {
                  "x-category": "response",
                  "type": "object",
                  "x-go-type": "ApiError",
                  "x-go-name": "ApiError",
                  "description": "An Error",
                  "required": [
                    "message",
                    "type",
                    "code",
                    "status",
                    "timestamp"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "HTTP error type",
                      "example": "bad-request"
                    },
                    "code": {
                      "type": "integer",
                      "description": "Numeric error code",
                      "example": 16384
                    },
                    "status": {
                      "type": "integer",
                      "description": "HTTP status of the error",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Long error description",
                      "example": "Oops there's been an internal error handling"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Timestamp of the error",
                      "example": "2021-07-21T17:32:28Z"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/@hyperledger/cactus-plugin-satp-hermes/status": {
      "get": {
        "summary": "Get SATP current session data",
        "description": "Retrieve the status of a SATP session",
        "operationId": "GetStatus",
        "tags": [
          "admin"
        ],
        "x-hyperledger-cacti": {
          "http": {
            "verbLowerCase": "get",
            "path": "/api/v1/@hyperledger/cactus-plugin-satp-hermes/status"
          }
        },
        "parameters": [
          {
            "name": "SessionID",
            "in": "query",
            "schema": {
              "x-category": "satp-core",
              "type": "string",
              "description": "Unique identifier (UUID) for the session.",
              "example": "000003e8-e0b8-21ee-ba00-325096b39f47"
            },
            "required": true,
            "description": "Unique identifier for the session."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Provides the current status of the SATP session including detailed information on the progress, such as substatus, stage, and step, along with the session start time and chain information.",
                  "type": "object",
                  "x-category": "response",
                  "required": [
                    "status",
                    "substatus",
                    "stage",
                    "step",
                    "startTime",
                    "originNetwork",
                    "destinationNetwork"
                  ],
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "NOT_FOUND",
                        "INVALID",
                        "PENDING",
                        "DONE",
                        "FAILED"
                      ],
                      "example": "DONE"
                    },
                    "substatus": {
                      "type": "string",
                      "enum": [
                        "WAIT_SOURCE_CONFIRMATIONS",
                        "WAIT_DESTINATION_TRANSACTION",
                        "BRIDGE_NOT_AVAILABLE",
                        "CHAIN_NOT_AVAILABLE",
                        "REFUND_IN_PROGRESS",
                        "UNKNOWN_ERROR",
                        "COMPLETED",
                        "PARTIAL",
                        "REFUNDED",
                        "NOT_PROCESSABLE_REFUND_NEEDED",
                        "RECOVERING",
                        "RECOVERED",
                        "RECOVERY_FAILED",
                        "REJECTED"
                      ],
                      "example": "COMPLETED"
                    },
                    "stage": {
                      "type": "string",
                      "enum": [
                        "STAGE_0",
                        "STAGE_1",
                        "STAGE_2",
                        "STAGE_3"
                      ],
                      "example": "STAGE_3"
                    },
                    "step": {
                      "type": "string",
                      "enum": [
                        "transfer-initialization-claims",
                        "conveyance-of-network-capabilities-and-parameters",
                        "transfer-proposal-message",
                        "transfer-proposal-receipt-message",
                        "transfer-proposal-reject-and-conditional-reject-message",
                        "transfer-commence-message",
                        "commence-response-message",
                        "lock-assertion-message",
                        "lock-assertion-receipt-message",
                        "commit-preparation-message",
                        "commit-ready-message",
                        "commit-final-assertion-message",
                        "commit-final-acknowledgement-receipt-message",
                        "transfer-complete-message",
                        "rollback-transfer-initialization-claims",
                        "rollback-conveyance-of-network-capabilities-and-parameters",
                        "rollback-transfer-proposal-message",
                        "rollback-transfer-proposal-receipt-message",
                        "rollback-transfer-proposal-reject-and-conditional-reject-message",
                        "rollback-transfer-commence-message",
                        "rollback-commence-response-message",
                        "rollback-lock-assertion-message",
                        "rollback-lock-assertion-receipt-message",
                        "rollback-commit-preparation-message",
                        "rollback-commit-ready-message",
                        "rollback-commit-final-assertion-message",
                        "rollback-commit-final-acknowledgement-receipt-message",
                        "rollback-transfer-complete-message"
                      ],
                      "example": "transfer-complete-message"
                    },
                    "startTime": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2023-01-01T00:00:00Z"
                    },
                    "originNetwork": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The unique identifier of the origin network.",
                          "example": "network1"
                        },
                        "dltProtocol": {
                          "example": "HyperledgerFabric"
                        },
                        "dltSubnetworkID": {
                          "example": "subnetwork1"
                        }
                      }
                    },
                    "destinationNetwork": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The unique identifier of the origin network.",
                          "example": "network2"
                        },
                        "dltProtocol": {
                          "example": "HyperledgerBesu"
                        },
                        "dltSubnetworkID": {
                          "example": "subnetwork2"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Transaction not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/@hyperledger/cactus-plugin-satp-hermes/get-sessions-ids": {
      "get": {
        "summary": "Get SATP session ids",
        "description": "Retrieve the all SATP session IDs",
        "operationId": "GetSessionIds",
        "tags": [
          "admin"
        ],
        "x-hyperledger-cacti": {
          "http": {
            "verbLowerCase": "get",
            "path": "/api/v1/@hyperledger/cactus-plugin-satp-hermes/get-sessions-ids"
          }
        },
        "parameters": [
          {
            "name": "SessionsRequest",
            "in": "query",
            "schema": {
              "type": "object",
              "description": "Empty object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "nullable": false
                  },
                  "description": "Array with session Ids"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Transaction not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/@hyperledger/cactus-plugin-satp-hermes/healthcheck": {
      "get": {
        "summary": "Health check endpoint",
        "description": "Responds if SATP Hermes is on",
        "operationId": "GetHealthCheck",
        "tags": [
          "admin"
        ],
        "x-hyperledger-cacti": {
          "http": {
            "verbLowerCase": "get",
            "path": "/api/v1/@hyperledger/cactus-plugin-satp-hermes/healthcheck"
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "AVAILABLE",
                        "UNAVAILABLE"
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/@hyperledger/cactus-plugin-satp-hermes/continue": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Continue a paused transaction session",
        "description": "Attempts to continue a previously paused transaction intent, resuming its execution.",
        "operationId": "Continue",
        "x-hyperledger-cacti": {
          "http": {
            "verbLowerCase": "post",
            "path": "/api/v1/@hyperledger/cactus-plugin-satp-hermes/continue"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "sessionId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "A unique identifier for the transaction session to be continued."
                  },
                  "contextId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "A unique identifier for the transaction context."
                  }
                },
                "required": [
                  "sessionId",
                  "contextId"
                ],
                "description": "Schema for a request to continue a paused transaction session."
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Transaction continuation attempted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response schema for a continue request, returning the status of the SATP session.",
                  "properties": {
                    "statusResponse": {
                      "description": "Provides the current status of the SATP session including detailed information on the progress, such as substatus, stage, and step, along with the session start time and chain information.",
                      "type": "object",
                      "x-category": "response",
                      "required": [
                        "status",
                        "substatus",
                        "stage",
                        "step",
                        "startTime",
                        "originNetwork",
                        "destinationNetwork"
                      ],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "NOT_FOUND",
                            "INVALID",
                            "PENDING",
                            "DONE",
                            "FAILED"
                          ],
                          "example": "DONE"
                        },
                        "substatus": {
                          "type": "string",
                          "enum": [
                            "WAIT_SOURCE_CONFIRMATIONS",
                            "WAIT_DESTINATION_TRANSACTION",
                            "BRIDGE_NOT_AVAILABLE",
                            "CHAIN_NOT_AVAILABLE",
                            "REFUND_IN_PROGRESS",
                            "UNKNOWN_ERROR",
                            "COMPLETED",
                            "PARTIAL",
                            "REFUNDED",
                            "NOT_PROCESSABLE_REFUND_NEEDED",
                            "RECOVERING",
                            "RECOVERED",
                            "RECOVERY_FAILED",
                            "REJECTED"
                          ],
                          "example": "COMPLETED"
                        },
                        "stage": {
                          "type": "string",
                          "enum": [
                            "STAGE_0",
                            "STAGE_1",
                            "STAGE_2",
                            "STAGE_3"
                          ],
                          "example": "STAGE_3"
                        },
                        "step": {
                          "type": "string",
                          "enum": [
                            "transfer-initialization-claims",
                            "conveyance-of-network-capabilities-and-parameters",
                            "transfer-proposal-message",
                            "transfer-proposal-receipt-message",
                            "transfer-proposal-reject-and-conditional-reject-message",
                            "transfer-commence-message",
                            "commence-response-message",
                            "lock-assertion-message",
                            "lock-assertion-receipt-message",
                            "commit-preparation-message",
                            "commit-ready-message",
                            "commit-final-assertion-message",
                            "commit-final-acknowledgement-receipt-message",
                            "transfer-complete-message",
                            "rollback-transfer-initialization-claims",
                            "rollback-conveyance-of-network-capabilities-and-parameters",
                            "rollback-transfer-proposal-message",
                            "rollback-transfer-proposal-receipt-message",
                            "rollback-transfer-proposal-reject-and-conditional-reject-message",
                            "rollback-transfer-commence-message",
                            "rollback-commence-response-message",
                            "rollback-lock-assertion-message",
                            "rollback-lock-assertion-receipt-message",
                            "rollback-commit-preparation-message",
                            "rollback-commit-ready-message",
                            "rollback-commit-final-assertion-message",
                            "rollback-commit-final-acknowledgement-receipt-message",
                            "rollback-transfer-complete-message"
                          ],
                          "example": "transfer-complete-message"
                        },
                        "startTime": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2023-01-01T00:00:00Z"
                        },
                        "originNetwork": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the origin network.",
                              "example": "network1"
                            },
                            "dltProtocol": {
                              "example": "HyperledgerFabric"
                            },
                            "dltSubnetworkID": {
                              "example": "subnetwork1"
                            }
                          }
                        },
                        "destinationNetwork": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the origin network.",
                              "example": "network2"
                            },
                            "dltProtocol": {
                              "example": "HyperledgerBesu"
                            },
                            "dltSubnetworkID": {
                              "example": "subnetwork2"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "statusResponse"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error occurred or transaction cannot be continued",
            "content": {
              "application/json": {
                "schema": {
                  "x-category": "response",
                  "type": "object",
                  "x-go-type": "ApiError",
                  "x-go-name": "ApiError",
                  "description": "An Error",
                  "required": [
                    "message",
                    "type",
                    "code",
                    "status",
                    "timestamp"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "HTTP error type",
                      "example": "bad-request"
                    },
                    "code": {
                      "type": "integer",
                      "description": "Numeric error code",
                      "example": 16384
                    },
                    "status": {
                      "type": "integer",
                      "description": "HTTP status of the error",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Long error description",
                      "example": "Oops there's been an internal error handling"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Timestamp of the error",
                      "example": "2021-07-21T17:32:28Z"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/@hyperledger/cactus-plugin-satp-hermes/pause": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Pause a transaction session",
        "description": "Attempts to pause a previously submitted transaction intent, temporarily halting its execution.",
        "operationId": "Pause",
        "x-hyperledger-cacti": {
          "http": {
            "verbLowerCase": "post",
            "path": "/api/v1/@hyperledger/cactus-plugin-satp-hermes/pause"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Request to temporarily pause an ongoing transaction session, identified by the session and context IDs.",
                "type": "object",
                "properties": {
                  "sessionId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                  },
                  "contextId": {
                    "type": "string",
                    "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174001"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Transaction pause attempted",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response for a pause transaction request. Returns the current status of the SATP session post-pause action.",
                  "type": "object",
                  "properties": {
                    "statusResponse": {
                      "description": "Provides the current status of the SATP session including detailed information on the progress, such as substatus, stage, and step, along with the session start time and chain information.",
                      "type": "object",
                      "x-category": "response",
                      "required": [
                        "status",
                        "substatus",
                        "stage",
                        "step",
                        "startTime",
                        "originNetwork",
                        "destinationNetwork"
                      ],
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "NOT_FOUND",
                            "INVALID",
                            "PENDING",
                            "DONE",
                            "FAILED"
                          ],
                          "example": "DONE"
                        },
                        "substatus": {
                          "type": "string",
                          "enum": [
                            "WAIT_SOURCE_CONFIRMATIONS",
                            "WAIT_DESTINATION_TRANSACTION",
                            "BRIDGE_NOT_AVAILABLE",
                            "CHAIN_NOT_AVAILABLE",
                            "REFUND_IN_PROGRESS",
                            "UNKNOWN_ERROR",
                            "COMPLETED",
                            "PARTIAL",
                            "REFUNDED",
                            "NOT_PROCESSABLE_REFUND_NEEDED",
                            "RECOVERING",
                            "RECOVERED",
                            "RECOVERY_FAILED",
                            "REJECTED"
                          ],
                          "example": "COMPLETED"
                        },
                        "stage": {
                          "type": "string",
                          "enum": [
                            "STAGE_0",
                            "STAGE_1",
                            "STAGE_2",
                            "STAGE_3"
                          ],
                          "example": "STAGE_3"
                        },
                        "step": {
                          "type": "string",
                          "enum": [
                            "transfer-initialization-claims",
                            "conveyance-of-network-capabilities-and-parameters",
                            "transfer-proposal-message",
                            "transfer-proposal-receipt-message",
                            "transfer-proposal-reject-and-conditional-reject-message",
                            "transfer-commence-message",
                            "commence-response-message",
                            "lock-assertion-message",
                            "lock-assertion-receipt-message",
                            "commit-preparation-message",
                            "commit-ready-message",
                            "commit-final-assertion-message",
                            "commit-final-acknowledgement-receipt-message",
                            "transfer-complete-message",
                            "rollback-transfer-initialization-claims",
                            "rollback-conveyance-of-network-capabilities-and-parameters",
                            "rollback-transfer-proposal-message",
                            "rollback-transfer-proposal-receipt-message",
                            "rollback-transfer-proposal-reject-and-conditional-reject-message",
                            "rollback-transfer-commence-message",
                            "rollback-commence-response-message",
                            "rollback-lock-assertion-message",
                            "rollback-lock-assertion-receipt-message",
                            "rollback-commit-preparation-message",
                            "rollback-commit-ready-message",
                            "rollback-commit-final-assertion-message",
                            "rollback-commit-final-acknowledgement-receipt-message",
                            "rollback-transfer-complete-message"
                          ],
                          "example": "transfer-complete-message"
                        },
                        "startTime": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2023-01-01T00:00:00Z"
                        },
                        "originNetwork": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the origin network.",
                              "example": "network1"
                            },
                            "dltProtocol": {
                              "example": "HyperledgerFabric"
                            },
                            "dltSubnetworkID": {
                              "example": "subnetwork1"
                            }
                          }
                        },
                        "destinationNetwork": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the origin network.",
                              "example": "network2"
                            },
                            "dltProtocol": {
                              "example": "HyperledgerBesu"
                            },
                            "dltSubnetworkID": {
                              "example": "subnetwork2"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "statusResponse"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error occurred or transaction cannot be paused",
            "content": {
              "application/json": {
                "schema": {
                  "x-category": "response",
                  "type": "object",
                  "x-go-type": "ApiError",
                  "x-go-name": "ApiError",
                  "description": "An Error",
                  "required": [
                    "message",
                    "type",
                    "code",
                    "status",
                    "timestamp"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "HTTP error type",
                      "example": "bad-request"
                    },
                    "code": {
                      "type": "integer",
                      "description": "Numeric error code",
                      "example": 16384
                    },
                    "status": {
                      "type": "integer",
                      "description": "HTTP status of the error",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Long error description",
                      "example": "Oops there's been an internal error handling"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Timestamp of the error",
                      "example": "2021-07-21T17:32:28Z"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/@hyperledger/cactus-plugin-satp-hermes/integrations": {
      "get": {
        "description": "Retrieves metadata about each supported blockchain networks, chains, and other systems.",
        "summary": "Get supported integrations",
        "tags": [
          "transaction"
        ],
        "operationId": "GetIntegrations",
        "x-hyperledger-cacti": {
          "http": {
            "verbLowerCase": "get",
            "path": "/api/v1/@hyperledger/cactus-plugin-satp-hermes/integrations"
          }
        },
        "responses": {
          "200": {
            "description": "A list of supported systems.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of chains or systems and related metadata",
                  "type": "object",
                  "x-category": "response",
                  "properties": {
                    "integrations": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "A unique identifier for the blockchain network/system."
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the blockchain network/system."
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of network (e.g., 'evm', 'fabric', 'SQL Database')."
                          },
                          "environment": {
                            "type": "string",
                            "description": "The specific network name (e.g., 'mainnet', 'testnet')."
                          }
                        },
                        "required": [
                          "id",
                          "name",
                          "type"
                        ]
                      }
                    }
                  },
                  "required": [
                    "integrations"
                  ]
                }
              }
            }
          },
          "default": {
            "description": "An error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "x-category": "response",
                  "type": "object",
                  "x-go-type": "ApiError",
                  "x-go-name": "ApiError",
                  "description": "An Error",
                  "required": [
                    "message",
                    "type",
                    "code",
                    "status",
                    "timestamp"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "HTTP error type",
                      "example": "bad-request"
                    },
                    "code": {
                      "type": "integer",
                      "description": "Numeric error code",
                      "example": 16384
                    },
                    "status": {
                      "type": "integer",
                      "description": "HTTP status of the error",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Long error description",
                      "example": "Oops there's been an internal error handling"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Timestamp of the error",
                      "example": "2021-07-21T17:32:28Z"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/@hyperledger/cactus-plugin-satp-hermes/routes": {
      "get": {
        "description": "Get a list of possible routes for swapping one asset for another across multiple exchanges",
        "summary": "Get a list of routes for a gateway-to-gateway asset transfer",
        "tags": [
          "transaction"
        ],
        "operationId": "GetRoutes",
        "x-hyperledger-cacti": {
          "http": {
            "verbLowerCase": "get",
            "path": "/api/v1/@hyperledger/cactus-plugin-satp-hermes/routes"
          }
        },
        "parameters": [
          {
            "name": "fromNetworkID",
            "in": "query",
            "schema": {
              "type": "object",
              "description": "The network of the DLT being interacted with.",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The network of the DLT being interacted with."
                },
                "ledgerType": {
                  "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                  "type": "string",
                  "enum": [
                    "BESU_1X",
                    "BESU_2X",
                    "BURROW_0X",
                    "CORDA_4X",
                    "ETHEREUM",
                    "FABRIC_2",
                    "SAWTOOTH_1X"
                  ]
                }
              },
              "required": [
                "id",
                "ledgerType"
              ]
            },
            "required": true,
            "description": "The sending DLT Network."
          },
          {
            "name": "fromAmount",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "The amount in string format including all decimals.",
              "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
              "example": "1000000000000000000"
            },
            "required": true,
            "description": "The amount that should be sent including all decimals."
          },
          {
            "name": "fromToken",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "A blockchain address.",
              "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
            },
            "required": true,
            "description": "The token that should be transferred. Can be the address or the symbol."
          },
          {
            "name": "toDLTNetwork",
            "in": "query",
            "schema": {
              "type": "object",
              "description": "The network of the DLT being interacted with.",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The network of the DLT being interacted with."
                },
                "ledgerType": {
                  "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                  "type": "string",
                  "enum": [
                    "BESU_1X",
                    "BESU_2X",
                    "BURROW_0X",
                    "CORDA_4X",
                    "ETHEREUM",
                    "FABRIC_2",
                    "SAWTOOTH_1X"
                  ]
                }
              },
              "required": [
                "id",
                "ledgerType"
              ]
            },
            "required": true,
            "description": "The receiving DLT Network."
          },
          {
            "name": "toToken",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "A blockchain address.",
              "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
            },
            "required": true,
            "description": "The token that should be transferred to. Can be the address or the symbol."
          },
          {
            "name": "fromAddress",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "A blockchain address.",
              "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
            },
            "required": true,
            "description": "The sending wallet address."
          },
          {
            "name": "toAddress",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "A blockchain address.",
              "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
            },
            "required": true,
            "description": "The receiving wallet address. If none is provided, the fromAddress will be used."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A collection of available and unavailable routes",
                  "required": [
                    "routes"
                  ],
                  "properties": {
                    "routes": {
                      "type": "array",
                      "description": "A collection of route objects",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "A unique identifier of the route."
                          },
                          "gatewayID": {
                            "type": "string",
                            "format": "uuid",
                            "description": "A unique identifier for the gateway."
                          },
                          "mode": {
                            "type": "string",
                            "enum": [
                              "data",
                              "transfer"
                            ],
                            "description": "The mode of operation for this route - 'data' for arbitrary payload handling, 'transfer' for asset transfer."
                          },
                          "fromDLTNetworkID": {
                            "type": "string",
                            "description": "The ID of the DLT Network where the operation will originate."
                          },
                          "fromAmountUSD": {
                            "type": "string",
                            "format": "double",
                            "description": "The amount of 'fromToken' to be transferred in USD, specified as a string to maintain precision."
                          },
                          "fromAmount": {
                            "type": "string",
                            "description": "The amount that should be sent including all decimals (e.g., 1000000 for 1 USDC (6 decimals)).",
                            "pattern": "^[1-9][0-9]*$"
                          },
                          "fromToken": {
                            "type": "object",
                            "description": "Metadata detailing a supported token",
                            "required": [
                              "chainID",
                              "chainType",
                              "address",
                              "symbol",
                              "decimals"
                            ],
                            "properties": {
                              "chainID": {
                                "x-category": "satp-core",
                                "type": "string",
                                "description": "The network of the DLT being interacted with. TODO: implement network identification draft"
                              },
                              "chainType": {
                                "x-category": "satp-core",
                                "type": "string",
                                "enum": [
                                  "HyperledgerFabric",
                                  "HyperledgerBesu"
                                ],
                                "description": "Supported DLT protocols."
                              },
                              "address": {
                                "type": "string",
                                "description": "A blockchain address.",
                                "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the token."
                              },
                              "symbol": {
                                "type": "string",
                                "description": "The symbol of the token."
                              },
                              "decimals": {
                                "type": "integer",
                                "description": "How many decimals the token supports.",
                                "minimum": 1
                              },
                              "logoURI": {
                                "type": "string",
                                "description": "The logo of a token, chain, dex etc.",
                                "format": "uri"
                              },
                              "tags": {
                                "title": "Tags",
                                "type": "array",
                                "description": "List of tags identifiers providing additional context or categorization.",
                                "items": {
                                  "type": "string"
                                },
                                "example": [
                                  "satp",
                                  "hyperledger"
                                ]
                              },
                              "priceUSD": {
                                "type": "string",
                                "description": "The current price of the token in USD."
                              },
                              "extensions": {
                                "type": "object",
                                "properties": {
                                  "bridgeInfo": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "object",
                                      "description": "Information about the bridge used for the token transfer.",
                                      "properties": {
                                        "tokenAddress": {
                                          "type": "string",
                                          "description": "The address of the token being transferred.",
                                          "example": "0x..."
                                        }
                                      }
                                    }
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "description": "Indicates whether the token is verified."
                                  }
                                }
                              }
                            }
                          },
                          "toDLTNetworkID": {
                            "type": "string",
                            "description": "The ID of the DLT Network where the operation will end."
                          },
                          "toAmountUSD": {
                            "type": "string",
                            "description": "The expected amount to be received in USD."
                          },
                          "toAmount": {
                            "type": "string",
                            "description": "The expected amount to be received including all decimals (e.g., 1000000 for 1 USDC (6 decimals))."
                          },
                          "toAmountMin": {
                            "type": "string",
                            "description": "The minimum expected amount to be received including all decimals (e.g., 1000000 for 1 USDC (6 decimals))."
                          },
                          "toToken": {
                            "type": "object",
                            "description": "Metadata detailing a supported token",
                            "required": [
                              "chainID",
                              "chainType",
                              "address",
                              "symbol",
                              "decimals"
                            ],
                            "properties": {
                              "chainID": {
                                "x-category": "satp-core",
                                "type": "string",
                                "description": "The network of the DLT being interacted with. TODO: implement network identification draft"
                              },
                              "chainType": {
                                "x-category": "satp-core",
                                "type": "string",
                                "enum": [
                                  "HyperledgerFabric",
                                  "HyperledgerBesu"
                                ],
                                "description": "Supported DLT protocols."
                              },
                              "address": {
                                "type": "string",
                                "description": "A blockchain address.",
                                "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the token."
                              },
                              "symbol": {
                                "type": "string",
                                "description": "The symbol of the token."
                              },
                              "decimals": {
                                "type": "integer",
                                "description": "How many decimals the token supports.",
                                "minimum": 1
                              },
                              "logoURI": {
                                "type": "string",
                                "description": "The logo of a token, chain, dex etc.",
                                "format": "uri"
                              },
                              "tags": {
                                "title": "Tags",
                                "type": "array",
                                "description": "List of tags identifiers providing additional context or categorization.",
                                "items": {
                                  "type": "string"
                                },
                                "example": [
                                  "satp",
                                  "hyperledger"
                                ]
                              },
                              "priceUSD": {
                                "type": "string",
                                "description": "The current price of the token in USD."
                              },
                              "extensions": {
                                "type": "object",
                                "properties": {
                                  "bridgeInfo": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "object",
                                      "description": "Information about the bridge used for the token transfer.",
                                      "properties": {
                                        "tokenAddress": {
                                          "type": "string",
                                          "description": "The address of the token being transferred.",
                                          "example": "0x..."
                                        }
                                      }
                                    }
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "description": "Indicates whether the token is verified."
                                  }
                                }
                              }
                            }
                          },
                          "gasCostUSD": {
                            "type": "string",
                            "description": "The expected gas cost in USD."
                          },
                          "containsSwitchChain": {
                            "type": "boolean",
                            "description": "Whether chain switching is enabled or not."
                          },
                          "steps": {
                            "type": "array",
                            "description": "List of steps involved in this route, adjusted for mode.",
                            "items": {
                              "type": "object",
                              "description": "Details a single step within a route including actions and estimates.",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "Id of the step"
                                },
                                "type": {
                                  "type": "string",
                                  "description": "Type of the step, typically describing the action, e.g., 'swap'."
                                },
                                "tool": {
                                  "type": "string",
                                  "description": "Tool used in the step, e.g., 'stargate'."
                                },
                                "action": {
                                  "type": "object",
                                  "properties": {
                                    "fromToken": {
                                      "type": "object",
                                      "description": "Metadata detailing a supported token",
                                      "required": [
                                        "chainID",
                                        "chainType",
                                        "address",
                                        "symbol",
                                        "decimals"
                                      ],
                                      "properties": {
                                        "chainID": {
                                          "x-category": "satp-core",
                                          "type": "string",
                                          "description": "The network of the DLT being interacted with. TODO: implement network identification draft"
                                        },
                                        "chainType": {
                                          "x-category": "satp-core",
                                          "type": "string",
                                          "enum": [
                                            "HyperledgerFabric",
                                            "HyperledgerBesu"
                                          ],
                                          "description": "Supported DLT protocols."
                                        },
                                        "address": {
                                          "type": "string",
                                          "description": "A blockchain address.",
                                          "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "The name of the token."
                                        },
                                        "symbol": {
                                          "type": "string",
                                          "description": "The symbol of the token."
                                        },
                                        "decimals": {
                                          "type": "integer",
                                          "description": "How many decimals the token supports.",
                                          "minimum": 1
                                        },
                                        "logoURI": {
                                          "type": "string",
                                          "description": "The logo of a token, chain, dex etc.",
                                          "format": "uri"
                                        },
                                        "tags": {
                                          "title": "Tags",
                                          "type": "array",
                                          "description": "List of tags identifiers providing additional context or categorization.",
                                          "items": {
                                            "type": "string"
                                          },
                                          "example": [
                                            "satp",
                                            "hyperledger"
                                          ]
                                        },
                                        "priceUSD": {
                                          "type": "string",
                                          "description": "The current price of the token in USD."
                                        },
                                        "extensions": {
                                          "type": "object",
                                          "properties": {
                                            "bridgeInfo": {
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "object",
                                                "description": "Information about the bridge used for the token transfer.",
                                                "properties": {
                                                  "tokenAddress": {
                                                    "type": "string",
                                                    "description": "The address of the token being transferred.",
                                                    "example": "0x..."
                                                  }
                                                }
                                              }
                                            },
                                            "verified": {
                                              "type": "boolean",
                                              "description": "Indicates whether the token is verified."
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "fromAmount": {
                                      "type": "string",
                                      "description": "The amount of 'fromToken' to be transferred, specified as a string to maintain precision.",
                                      "example": "1000000000000000000",
                                      "pattern": "^[1-9][0-9]*$"
                                    },
                                    "toToken": {
                                      "type": "object",
                                      "description": "Metadata detailing a supported token",
                                      "required": [
                                        "chainID",
                                        "chainType",
                                        "address",
                                        "symbol",
                                        "decimals"
                                      ],
                                      "properties": {
                                        "chainID": {
                                          "x-category": "satp-core",
                                          "type": "string",
                                          "description": "The network of the DLT being interacted with. TODO: implement network identification draft"
                                        },
                                        "chainType": {
                                          "x-category": "satp-core",
                                          "type": "string",
                                          "enum": [
                                            "HyperledgerFabric",
                                            "HyperledgerBesu"
                                          ],
                                          "description": "Supported DLT protocols."
                                        },
                                        "address": {
                                          "type": "string",
                                          "description": "A blockchain address.",
                                          "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "The name of the token."
                                        },
                                        "symbol": {
                                          "type": "string",
                                          "description": "The symbol of the token."
                                        },
                                        "decimals": {
                                          "type": "integer",
                                          "description": "How many decimals the token supports.",
                                          "minimum": 1
                                        },
                                        "logoURI": {
                                          "type": "string",
                                          "description": "The logo of a token, chain, dex etc.",
                                          "format": "uri"
                                        },
                                        "tags": {
                                          "title": "Tags",
                                          "type": "array",
                                          "description": "List of tags identifiers providing additional context or categorization.",
                                          "items": {
                                            "type": "string"
                                          },
                                          "example": [
                                            "satp",
                                            "hyperledger"
                                          ]
                                        },
                                        "priceUSD": {
                                          "type": "string",
                                          "description": "The current price of the token in USD."
                                        },
                                        "extensions": {
                                          "type": "object",
                                          "properties": {
                                            "bridgeInfo": {
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "object",
                                                "description": "Information about the bridge used for the token transfer.",
                                                "properties": {
                                                  "tokenAddress": {
                                                    "type": "string",
                                                    "description": "The address of the token being transferred.",
                                                    "example": "0x..."
                                                  }
                                                }
                                              }
                                            },
                                            "verified": {
                                              "type": "boolean",
                                              "description": "Indicates whether the token is verified."
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "slippage": {
                                      "type": "number",
                                      "format": "float",
                                      "description": "The maximum acceptable difference between the expected price of the 'toToken' and the price at the time of the transfer.",
                                      "example": 0.005
                                    },
                                    "fromAddress": {
                                      "type": "string",
                                      "description": "A blockchain address.",
                                      "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
                                    },
                                    "toAddress": {
                                      "type": "string",
                                      "description": "A blockchain address.",
                                      "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
                                    }
                                  }
                                },
                                "estimate": {
                                  "type": "object",
                                  "description": "Provides an estimation for a transaction, including costs, amounts, and execution duration.",
                                  "properties": {
                                    "approvalAddress": {
                                      "type": "string",
                                      "description": "A blockchain address.",
                                      "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
                                    },
                                    "toAmountMin": {
                                      "type": "string",
                                      "description": "The amount in string format including all decimals.",
                                      "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                                      "example": "1000000000000000000"
                                    },
                                    "toAmount": {
                                      "type": "string",
                                      "description": "The amount in string format including all decimals.",
                                      "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                                      "example": "1000000000000000000"
                                    },
                                    "fromAmount": {
                                      "type": "string",
                                      "description": "The amount in string format including all decimals.",
                                      "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                                      "example": "1000000000000000000"
                                    },
                                    "feeCosts": {
                                      "type": "array",
                                      "description": "A collection of fee costs associated with the transaction.",
                                      "items": {
                                        "type": "object",
                                        "description": "Details about a specific fee cost associated with the transaction.",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "Name of the fee cost.",
                                            "example": "Network Fee"
                                          },
                                          "amount": {
                                            "type": "string",
                                            "description": "The amount in string format including all decimals.",
                                            "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                                            "example": "1000000000000000000"
                                          },
                                          "amountUSD": {
                                            "type": "string",
                                            "description": "The amount in string format including all decimals.",
                                            "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                                            "example": "1000000000000000000"
                                          },
                                          "token": {
                                            "type": "string",
                                            "description": "The symbol of a token",
                                            "example": "ETH"
                                          },
                                          "included": {
                                            "type": "boolean",
                                            "description": "Indicates if the fee is included in the transaction amount."
                                          }
                                        }
                                      }
                                    },
                                    "gasCosts": {
                                      "type": "array",
                                      "description": "A collection of estimated gas costs for executing the transaction.",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "description": "The type of the gas cost.",
                                            "example": "SEND"
                                          },
                                          "price": {
                                            "type": "string",
                                            "description": "The gas price, specified as a string to maintain precision.",
                                            "example": "19236858243"
                                          },
                                          "estimate": {
                                            "type": "string",
                                            "description": "The estimated gas required, specified as a string to maintain precision.",
                                            "example": "445393"
                                          },
                                          "limit": {
                                            "type": "string",
                                            "description": "The gas limit for the transaction, specified as a string to maintain precision.",
                                            "example": "579011",
                                            "pattern": "^[1-9][0-9]*$"
                                          },
                                          "amount": {
                                            "type": "string",
                                            "description": "The amount of gas required in the gas currency.",
                                            "example": "8567962003424499",
                                            "pattern": "^[1-9][0-9]*$"
                                          },
                                          "amountUSD": {
                                            "type": "string",
                                            "description": "The amount of gas required in USD.",
                                            "example": "16.05",
                                            "pattern": "^(0(\\.[0-9]+)?|[1-9][0-9]*(\\.[0-9]+)?)$"
                                          },
                                          "token": {
                                            "type": "object",
                                            "description": "Metadata detailing a supported token",
                                            "required": [
                                              "chainID",
                                              "chainType",
                                              "address",
                                              "symbol",
                                              "decimals"
                                            ],
                                            "properties": {
                                              "chainID": {
                                                "x-category": "satp-core",
                                                "type": "string",
                                                "description": "The network of the DLT being interacted with. TODO: implement network identification draft"
                                              },
                                              "chainType": {
                                                "x-category": "satp-core",
                                                "type": "string",
                                                "enum": [
                                                  "HyperledgerFabric",
                                                  "HyperledgerBesu"
                                                ],
                                                "description": "Supported DLT protocols."
                                              },
                                              "address": {
                                                "type": "string",
                                                "description": "A blockchain address.",
                                                "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "The name of the token."
                                              },
                                              "symbol": {
                                                "type": "string",
                                                "description": "The symbol of the token."
                                              },
                                              "decimals": {
                                                "type": "integer",
                                                "description": "How many decimals the token supports.",
                                                "minimum": 1
                                              },
                                              "logoURI": {
                                                "type": "string",
                                                "description": "The logo of a token, chain, dex etc.",
                                                "format": "uri"
                                              },
                                              "tags": {
                                                "title": "Tags",
                                                "type": "array",
                                                "description": "List of tags identifiers providing additional context or categorization.",
                                                "items": {
                                                  "type": "string"
                                                },
                                                "example": [
                                                  "satp",
                                                  "hyperledger"
                                                ]
                                              },
                                              "priceUSD": {
                                                "type": "string",
                                                "description": "The current price of the token in USD."
                                              },
                                              "extensions": {
                                                "type": "object",
                                                "properties": {
                                                  "bridgeInfo": {
                                                    "type": "object",
                                                    "additionalProperties": {
                                                      "type": "object",
                                                      "description": "Information about the bridge used for the token transfer.",
                                                      "properties": {
                                                        "tokenAddress": {
                                                          "type": "string",
                                                          "description": "The address of the token being transferred.",
                                                          "example": "0x..."
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "verified": {
                                                    "type": "boolean",
                                                    "description": "Indicates whether the token is verified."
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "executionDuration": {
                                      "type": "integer",
                                      "description": "The estimated duration for the transaction execution in seconds.",
                                      "example": 30
                                    },
                                    "fromAmountUSD": {
                                      "type": "string",
                                      "description": "The amount in string format including all decimals.",
                                      "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                                      "example": "1000000000000000000"
                                    },
                                    "toAmountUSD": {
                                      "type": "string",
                                      "description": "The amount in string format including all decimals.",
                                      "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                                      "example": "1000000000000000000"
                                    },
                                    "tool": {
                                      "type": "string",
                                      "description": "The tool or service used to generate this estimate.",
                                      "example": "satp"
                                    }
                                  }
                                },
                                "toolDetails": {
                                  "type": "object",
                                  "description": "Describes integration or tool details such as bridges or exchanges involved in the transaction.",
                                  "required": [
                                    "key",
                                    "name",
                                    "logoURI"
                                  ],
                                  "properties": {
                                    "key": {
                                      "type": "string",
                                      "description": "A unique identifier for the integration or tool.",
                                      "example": "1inch"
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the integration or tool.",
                                      "example": "1inch Exchange"
                                    },
                                    "logoURI": {
                                      "type": "string",
                                      "format": "uri",
                                      "description": "URL to the logo of the integration or tool.",
                                      "example": "https://cdn.example.com/logos/1inch.png"
                                    }
                                  }
                                },
                                "integrationDetails": {
                                  "type": "object",
                                  "description": "Describes integration or tool details such as bridges or exchanges involved in the transaction.",
                                  "required": [
                                    "key",
                                    "name",
                                    "logoURI"
                                  ],
                                  "properties": {
                                    "key": {
                                      "type": "string",
                                      "description": "A unique identifier for the integration or tool.",
                                      "example": "1inch"
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the integration or tool.",
                                      "example": "1inch Exchange"
                                    },
                                    "logoURI": {
                                      "type": "string",
                                      "format": "uri",
                                      "description": "URL to the logo of the integration or tool.",
                                      "example": "https://cdn.example.com/logos/1inch.png"
                                    }
                                  }
                                },
                                "includedStepIds": {
                                  "type": "array",
                                  "description": "IDs of further steps included within this step, allowing for nested actions without direct recursion.",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          },
                          "insurance": {
                            "type": "object",
                            "properties": {
                              "state": {
                                "type": "string",
                                "description": "The state of insurance applicability for the transaction.",
                                "example": "NOT_INSURABLE",
                                "enum": [
                                  "NOT_INSURABLE",
                                  "INSURABLE",
                                  "INSURED"
                                ]
                              },
                              "feeAmountUsd": {
                                "type": "string",
                                "description": "The fee amount for insurance, represented in USD.",
                                "example": "10.00",
                                "pattern": "^(0|[1-9]\\d*)(\\.\\d+)?$"
                              }
                            }
                          },
                          "tags": {
                            "title": "Tags",
                            "type": "array",
                            "description": "List of tags identifiers providing additional context or categorization.",
                            "items": {
                              "type": "string"
                            },
                            "example": [
                              "satp",
                              "hyperledger"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "gatewayID",
                          "mode"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "An error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "x-category": "response",
                  "type": "object",
                  "x-go-type": "ApiError",
                  "x-go-name": "ApiError",
                  "description": "An Error",
                  "required": [
                    "message",
                    "type",
                    "code",
                    "status",
                    "timestamp"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "HTTP error type",
                      "example": "bad-request"
                    },
                    "code": {
                      "type": "integer",
                      "description": "Numeric error code",
                      "example": 16384
                    },
                    "status": {
                      "type": "integer",
                      "description": "HTTP status of the error",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "description": "Long error description",
                      "example": "Oops there's been an internal error handling"
                    },
                    "timestamp": {
                      "type": "string",
                      "description": "Timestamp of the error",
                      "example": "2021-07-21T17:32:28Z"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/@hyperledger/cactus-plugin-satp-hermes/audit": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Audit transactions",
        "description": "Audits transactions based on provided filters such as start and end dates. Optionally includes proofs generated from each gateway transaction.",
        "operationId": "PerformAudit",
        "x-hyperledger-cacti": {
          "http": {
            "verbLowerCase": "get",
            "path": "/api/v1/@hyperledger/cactus-plugin-satp-hermes/audit"
          }
        },
        "parameters": [
          {
            "name": "startTimestamp",
            "in": "query",
            "description": "The start timestamp for the audit period.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endTimestamp",
            "in": "query",
            "description": "The end timestamp for the audit period.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit results",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response schema for an audit request. Contains the proofs generated during the audit period and the start and end datetimes.",
                  "type": "object",
                  "x-category": "response",
                  "properties": {
                    "sessions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "startTimestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The start timestamp for the audit period, as a Unix timestamp (milliseconds since epoch)."
                    },
                    "endTimestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The end timestamp for the audit period, as a Unix timestamp (milliseconds since epoch)."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/@hyperledger/cactus-plugin-satp-hermes/approve-address": {
      "get": {
        "tags": [
          "get-approve-address"
        ],
        "summary": "Get approve address",
        "description": "Get approve address for the token transfer",
        "operationId": "GetApproveAddress",
        "x-hyperledger-cacti": {
          "http": {
            "verbLowerCase": "get",
            "path": "/api/v1/@hyperledger/cactus-plugin-satp-hermes/approve-address"
          }
        },
        "parameters": [
          {
            "name": "networkId",
            "in": "query",
            "schema": {
              "type": "object",
              "description": "The network of the DLT being interacted with.",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The network of the DLT being interacted with."
                },
                "ledgerType": {
                  "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                  "type": "string",
                  "enum": [
                    "BESU_1X",
                    "BESU_2X",
                    "BURROW_0X",
                    "CORDA_4X",
                    "ETHEREUM",
                    "FABRIC_2",
                    "SAWTOOTH_1X"
                  ]
                }
              },
              "required": [
                "id",
                "ledgerType"
              ]
            },
            "required": true
          },
          {
            "name": "tokenType",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "ERC20",
                "ERC721",
                "ERC1155",
                "NONSTANDARD_FUNGIBLE",
                "NONSTANDARD_NONFUNGIBLE"
              ],
              "description": "The type of token."
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Approve address for the token transfer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response schema for getting the address to approve the token transfer.",
                  "properties": {
                    "approveAddress": {
                      "type": "string",
                      "description": "The address to approve the token transfer."
                    }
                  },
                  "required": [
                    "approveAddress"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Approve address not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/@hyperledger/cactus-plugin-satp-hermes/add-counterparty-gateway": {
      "post": {
        "tags": [
          "add-counterparty"
        ],
        "summary": "Add counterparty",
        "description": "Add a counterparty to the Gateway",
        "operationId": "AddCounterparty",
        "x-hyperledger-cacti": {
          "http": {
            "verbLowerCase": "post",
            "path": "/api/v1/@hyperledger/cactus-plugin-satp-hermes/add-counterparty-gateway"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Request schema for adding a counterparty.",
                "properties": {
                  "counterparty": {
                    "type": "object",
                    "description": "The identity of the gateway.",
                    "required": [
                      "id",
                      "pubKey",
                      "name",
                      "version",
                      "connectedDLTs",
                      "proofID",
                      "gatewayServerPort",
                      "gatewayClientPort",
                      "address"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The unique identifier for the gateway."
                      },
                      "pubKey": {
                        "type": "string",
                        "description": "The public key of the gateway."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the gateway."
                      },
                      "version": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "description": "The draft versions supported by the gateway.",
                          "properties": {
                            "Core": {
                              "type": "string",
                              "description": "Core functionality or component.",
                              "example": "Core"
                            },
                            "Architecture": {
                              "type": "string",
                              "description": "System architecture or design.",
                              "example": "Architecture"
                            },
                            "Crash": {
                              "type": "string",
                              "description": "Crash or failure scenario.",
                              "example": "Crash"
                            }
                          }
                        },
                        "description": "The draft versions supported by the gateway."
                      },
                      "connectedDLTs": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "description": "The network of the DLT being interacted with.",
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "The network of the DLT being interacted with."
                            },
                            "ledgerType": {
                              "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                              "type": "string",
                              "enum": [
                                "BESU_1X",
                                "BESU_2X",
                                "BURROW_0X",
                                "CORDA_4X",
                                "ETHEREUM",
                                "FABRIC_2",
                                "SAWTOOTH_1X"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "ledgerType"
                          ]
                        },
                        "description": "The list of connected DLT networks."
                      },
                      "proofID": {
                        "type": "string",
                        "description": "The proof ID associated with the gateway."
                      },
                      "gatewayServerPort": {
                        "type": "integer",
                        "description": "The server port of the gateway."
                      },
                      "gatewayClientPort": {
                        "type": "integer",
                        "description": "The client port of the gateway."
                      },
                      "gatewayOapiPort": {
                        "type": "integer",
                        "description": "The OpenAPI port of the gateway."
                      },
                      "gatewayUIPort": {
                        "type": "integer",
                        "description": "The UI port of the gateway."
                      },
                      "address": {
                        "type": "string",
                        "description": "A blockchain address.",
                        "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
                      }
                    }
                  }
                },
                "required": [
                  "counterparty"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Counterparty added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response schema for adding a counterparty.",
                  "properties": {
                    "status": {
                      "type": "boolean",
                      "description": "The status of the request."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Counterparty not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/@hyperledger/cactus-plugin-satp-hermes/oracle/execute": {
      "post": {
        "summary": "Execute data transfer task",
        "description": "Execute a registered data transfer task from source to target blockchain",
        "operationId": "ExecuteOracleTask",
        "tags": [
          "oracle"
        ],
        "x-hyperledger-cacti": {
          "http": {
            "verbLowerCase": "post",
            "path": "/api/v1/@hyperledger/cactus-plugin-satp-hermes/oracle/execute"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "Request schema for triggering an immediate transfer task. Includes the task ID, payload, and destination network and contract details.",
                "type": "object",
                "properties": {
                  "sourceNetworkId": {
                    "type": "object",
                    "description": "The network of the DLT being interacted with.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The network of the DLT being interacted with."
                      },
                      "ledgerType": {
                        "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                        "type": "string",
                        "enum": [
                          "BESU_1X",
                          "BESU_2X",
                          "BURROW_0X",
                          "CORDA_4X",
                          "ETHEREUM",
                          "FABRIC_2",
                          "SAWTOOTH_1X"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "ledgerType"
                    ]
                  },
                  "destinationNetworkId": {
                    "type": "object",
                    "description": "The network of the DLT being interacted with.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The network of the DLT being interacted with."
                      },
                      "ledgerType": {
                        "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                        "type": "string",
                        "enum": [
                          "BESU_1X",
                          "BESU_2X",
                          "BURROW_0X",
                          "CORDA_4X",
                          "ETHEREUM",
                          "FABRIC_2",
                          "SAWTOOTH_1X"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "ledgerType"
                    ]
                  },
                  "sourceContract": {
                    "description": "The contract data on the source blockchain. Only if taskType is READ or READ_AND_UPDATE.",
                    "type": "object",
                    "properties": {
                      "contractName": {
                        "type": "string",
                        "description": "The name of the contract."
                      },
                      "contractAddress": {
                        "type": "string",
                        "description": "The address of the contract.",
                        "nullable": true
                      },
                      "contractAbi": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        },
                        "description": "The ABI (Application Binary Interface) of the contract.",
                        "nullable": true
                      },
                      "contractBytecode": {
                        "type": "string",
                        "description": "The bytecode of the contract.",
                        "nullable": true
                      },
                      "methodName": {
                        "type": "string",
                        "description": "The name of the method to be invoked on the contract."
                      },
                      "params": {
                        "type": "array",
                        "items": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "description": "The parameters to be passed to the contract method."
                      }
                    }
                  },
                  "destinationContract": {
                    "description": "The contract data on the destination blockchain. Only if taskType is UPDATE or READ_AND_UPDATE.",
                    "type": "object",
                    "properties": {
                      "contractName": {
                        "type": "string",
                        "description": "The name of the contract."
                      },
                      "contractAddress": {
                        "type": "string",
                        "description": "The address of the contract.",
                        "nullable": true
                      },
                      "contractAbi": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        },
                        "description": "The ABI (Application Binary Interface) of the contract.",
                        "nullable": true
                      },
                      "contractBytecode": {
                        "type": "string",
                        "description": "The bytecode of the contract.",
                        "nullable": true
                      },
                      "methodName": {
                        "type": "string",
                        "description": "The name of the method to be invoked on the contract."
                      },
                      "params": {
                        "type": "array",
                        "items": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "description": "The parameters to be passed to the contract method."
                      }
                    }
                  },
                  "taskType": {
                    "type": "string",
                    "description": "The type of task to be registered.",
                    "example": "READ",
                    "enum": [
                      "READ",
                      "UPDATE",
                      "READ_AND_UPDATE"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response schema for executing a data transfer task.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response schema for executing a data transfer task. Includes the task ID and status of the execution.",
                  "type": "object",
                  "properties": {
                    "taskID": {
                      "description": "The unique identifier of the task.",
                      "type": "string",
                      "example": "000003e8-e0b8-21ee-ba00-325096b39f47"
                    },
                    "type": {
                      "type": "string",
                      "description": "The type of the Oracle task.",
                      "enum": [
                        "READ",
                        "UPDATE",
                        "READ_AND_UPDATE"
                      ]
                    },
                    "srcNetworkId": {
                      "type": "object",
                      "description": "The network of the DLT being interacted with.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The network of the DLT being interacted with."
                        },
                        "ledgerType": {
                          "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                          "type": "string",
                          "enum": [
                            "BESU_1X",
                            "BESU_2X",
                            "BURROW_0X",
                            "CORDA_4X",
                            "ETHEREUM",
                            "FABRIC_2",
                            "SAWTOOTH_1X"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "ledgerType"
                      ]
                    },
                    "srcContract": {
                      "description": "The source contract details for the Oracle task.",
                      "type": "object",
                      "properties": {
                        "contractName": {
                          "type": "string",
                          "description": "The name of the contract."
                        },
                        "contractAddress": {
                          "type": "string",
                          "description": "The address of the contract.",
                          "nullable": true
                        },
                        "contractAbi": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          },
                          "description": "The ABI (Application Binary Interface) of the contract.",
                          "nullable": true
                        },
                        "contractBytecode": {
                          "type": "string",
                          "description": "The bytecode of the contract.",
                          "nullable": true
                        },
                        "methodName": {
                          "type": "string",
                          "description": "The name of the method to be invoked on the contract."
                        },
                        "params": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "description": "The parameters to be passed to the contract method."
                        }
                      }
                    },
                    "dstNetworkId": {
                      "type": "object",
                      "description": "The network of the DLT being interacted with.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The network of the DLT being interacted with."
                        },
                        "ledgerType": {
                          "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                          "type": "string",
                          "enum": [
                            "BESU_1X",
                            "BESU_2X",
                            "BURROW_0X",
                            "CORDA_4X",
                            "ETHEREUM",
                            "FABRIC_2",
                            "SAWTOOTH_1X"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "ledgerType"
                      ]
                    },
                    "dstContract": {
                      "description": "The destination contract details for the Oracle task.",
                      "type": "object",
                      "properties": {
                        "contractName": {
                          "type": "string",
                          "description": "The name of the contract."
                        },
                        "contractAddress": {
                          "type": "string",
                          "description": "The address of the contract.",
                          "nullable": true
                        },
                        "contractAbi": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          },
                          "description": "The ABI (Application Binary Interface) of the contract.",
                          "nullable": true
                        },
                        "contractBytecode": {
                          "type": "string",
                          "description": "The bytecode of the contract.",
                          "nullable": true
                        },
                        "methodName": {
                          "type": "string",
                          "description": "The name of the method to be invoked on the contract."
                        },
                        "params": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "description": "The parameters to be passed to the contract method."
                        }
                      }
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The timestamp when the Oracle task was created or last updated.",
                      "example": 1672531200
                    },
                    "operations": {
                      "type": "array",
                      "description": "The list of operations performed by the Oracle task.",
                      "items": {
                        "type": "object",
                        "description": "Represents an operation performed by the Oracle, including its type, network, contract, status, and optional output.",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "A unique identifier for the Oracle operation.",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of the Oracle operation.",
                            "enum": [
                              "READ",
                              "UPDATE"
                            ],
                            "example": "READ"
                          },
                          "networkId": {
                            "type": "object",
                            "description": "The network of the DLT being interacted with.",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The network of the DLT being interacted with."
                              },
                              "ledgerType": {
                                "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                                "type": "string",
                                "enum": [
                                  "BESU_1X",
                                  "BESU_2X",
                                  "BURROW_0X",
                                  "CORDA_4X",
                                  "ETHEREUM",
                                  "FABRIC_2",
                                  "SAWTOOTH_1X"
                                ]
                              }
                            },
                            "required": [
                              "id",
                              "ledgerType"
                            ]
                          },
                          "contract": {
                            "description": "The contract associated with the Oracle operation.",
                            "type": "object",
                            "properties": {
                              "contractName": {
                                "type": "string",
                                "description": "The name of the contract."
                              },
                              "contractAddress": {
                                "type": "string",
                                "description": "The address of the contract.",
                                "nullable": true
                              },
                              "contractAbi": {
                                "type": "array",
                                "items": {
                                  "type": "object"
                                },
                                "description": "The ABI (Application Binary Interface) of the contract.",
                                "nullable": true
                              },
                              "contractBytecode": {
                                "type": "string",
                                "description": "The bytecode of the contract.",
                                "nullable": true
                              },
                              "methodName": {
                                "type": "string",
                                "description": "The name of the method to be invoked on the contract."
                              },
                              "params": {
                                "type": "array",
                                "items": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "number"
                                    }
                                  ]
                                },
                                "description": "The parameters to be passed to the contract method."
                              }
                            }
                          },
                          "status": {
                            "type": "string",
                            "description": "The current status of the Oracle operation.",
                            "enum": [
                              "PENDING",
                              "SUCCESS",
                              "FAILED"
                            ],
                            "example": "IN_PROGRESS"
                          },
                          "output": {
                            "description": "Optional output generated by the Oracle operation.",
                            "type": "object",
                            "properties": {
                              "transactionId": {
                                "type": "string",
                                "description": "The unique identifier for the transaction.",
                                "example": "0x1234567890abcdef"
                              },
                              "transactionReceipt": {
                                "type": "object",
                                "description": "The receipt of the transaction, providing proof of execution."
                              },
                              "output": {
                                "type": "string",
                                "description": "The output of the Oracle operation execution."
                              },
                              "proof": {
                                "type": "object",
                                "description": "Proof of the Oracle operation execution."
                              }
                            }
                          },
                          "timestamp": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The timestamp when the Oracle operation was created or last updated.",
                            "example": 1672531200
                          }
                        },
                        "required": [
                          "id",
                          "type",
                          "networkId",
                          "contract",
                          "status",
                          "timestamp"
                        ]
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "The current status of the Oracle task.",
                      "enum": [
                        "ACTIVE",
                        "INACTIVE"
                      ]
                    },
                    "mode": {
                      "type": "string",
                      "description": "The mode of operation for registered tasks.",
                      "example": "POLLING",
                      "enum": [
                        "POLLING",
                        "EVENT_LISTENING",
                        "IMMEDIATE"
                      ]
                    },
                    "pollingInterval": {
                      "type": "integer",
                      "description": "The interval for polling in milliseconds. Only if taskMode is POLLING.",
                      "example": 5000
                    }
                  },
                  "required": [
                    "taskID",
                    "type",
                    "srcContract",
                    "dstContract",
                    "timestamp",
                    "operations",
                    "status",
                    "mode"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/@hyperledger/cactus-plugin-satp-hermes/oracle/register": {
      "post": {
        "summary": "Register data transfer task",
        "description": "Register data transfer from source to target blockchain",
        "operationId": "RegisterOracleTask",
        "tags": [
          "oracle"
        ],
        "x-hyperledger-cacti": {
          "http": {
            "verbLowerCase": "post",
            "path": "/api/v1/@hyperledger/cactus-plugin-satp-hermes/oracle/register"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "Request schema for registering a repeatable task.",
                "type": "object",
                "required": [
                  "taskType",
                  "taskMode"
                ],
                "properties": {
                  "sourceNetworkId": {
                    "type": "object",
                    "description": "The network of the DLT being interacted with.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The network of the DLT being interacted with."
                      },
                      "ledgerType": {
                        "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                        "type": "string",
                        "enum": [
                          "BESU_1X",
                          "BESU_2X",
                          "BURROW_0X",
                          "CORDA_4X",
                          "ETHEREUM",
                          "FABRIC_2",
                          "SAWTOOTH_1X"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "ledgerType"
                    ]
                  },
                  "destinationNetworkId": {
                    "type": "object",
                    "description": "The network of the DLT being interacted with.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The network of the DLT being interacted with."
                      },
                      "ledgerType": {
                        "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                        "type": "string",
                        "enum": [
                          "BESU_1X",
                          "BESU_2X",
                          "BURROW_0X",
                          "CORDA_4X",
                          "ETHEREUM",
                          "FABRIC_2",
                          "SAWTOOTH_1X"
                        ]
                      }
                    },
                    "required": [
                      "id",
                      "ledgerType"
                    ]
                  },
                  "sourceContract": {
                    "description": "The contract address on the source blockchain. Only if taskType is READ or READ_AND_UPDATE.",
                    "type": "object",
                    "properties": {
                      "contractName": {
                        "type": "string",
                        "description": "The name of the contract."
                      },
                      "contractAddress": {
                        "type": "string",
                        "description": "The address of the contract.",
                        "nullable": true
                      },
                      "contractAbi": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        },
                        "description": "The ABI (Application Binary Interface) of the contract.",
                        "nullable": true
                      },
                      "contractBytecode": {
                        "type": "string",
                        "description": "The bytecode of the contract.",
                        "nullable": true
                      },
                      "methodName": {
                        "type": "string",
                        "description": "The name of the method to be invoked on the contract."
                      },
                      "params": {
                        "type": "array",
                        "items": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "description": "The parameters to be passed to the contract method."
                      }
                    }
                  },
                  "destinationContract": {
                    "description": "The contract address on the destination blockchain. Only if taskType is UPDATE or READ_AND_UPDATE.",
                    "type": "object",
                    "properties": {
                      "contractName": {
                        "type": "string",
                        "description": "The name of the contract."
                      },
                      "contractAddress": {
                        "type": "string",
                        "description": "The address of the contract.",
                        "nullable": true
                      },
                      "contractAbi": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        },
                        "description": "The ABI (Application Binary Interface) of the contract.",
                        "nullable": true
                      },
                      "contractBytecode": {
                        "type": "string",
                        "description": "The bytecode of the contract.",
                        "nullable": true
                      },
                      "methodName": {
                        "type": "string",
                        "description": "The name of the method to be invoked on the contract."
                      },
                      "params": {
                        "type": "array",
                        "items": {
                          "oneOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "description": "The parameters to be passed to the contract method."
                      }
                    }
                  },
                  "taskMode": {
                    "type": "string",
                    "description": "The mode of operation for the repeatable task.",
                    "example": "POLLING",
                    "enum": [
                      "POLLING",
                      "EVENT_LISTENING"
                    ]
                  },
                  "pollingInterval": {
                    "type": "integer",
                    "description": "The interval for polling in milliseconds. Only if taskMode is POLLING.",
                    "example": 5000
                  },
                  "listeningOptions": {
                    "type": "object",
                    "description": "Options for event listening. Only if taskMode is EVENT_LISTENING.",
                    "required": [
                      "eventSignature"
                    ],
                    "properties": {
                      "eventSignature": {
                        "type": "string",
                        "description": "The event signature to listen for on the source network. Only if taskMode is EVENT_LISTENING.",
                        "example": "Transfer(address,address,uint256)"
                      },
                      "filterParams": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "The parameters to filter in the captured events."
                      }
                    }
                  },
                  "taskType": {
                    "type": "string",
                    "description": "The type of task to be registered.",
                    "example": "READ",
                    "enum": [
                      "READ",
                      "UPDATE",
                      "READ_AND_UPDATE"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response schema for registering a data transfer task.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response schema for registering a repeatable task. Includes the task ID and status of the registration.",
                  "type": "object",
                  "properties": {
                    "taskID": {
                      "description": "The unique identifier of the task.",
                      "type": "string",
                      "example": "000003e8-e0b8-21ee-ba00-325096b39f47"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ],
                      "example": "SUCCESS"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Transaction not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/@hyperledger/cactus-plugin-satp-hermes/oracle/unregister": {
      "post": {
        "summary": "Unregister data transfer task",
        "description": "Unregister data transfer task from source to target blockchain",
        "operationId": "UnregisterOracleTask",
        "tags": [
          "oracle"
        ],
        "x-hyperledger-cacti": {
          "http": {
            "verbLowerCase": "post",
            "path": "/api/v1/@hyperledger/cactus-plugin-satp-hermes/oracle/unregister"
          }
        },
        "parameters": [
          {
            "name": "taskID",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Unique identifier (UUID) for the session.",
              "example": "000003e8-e0b8-21ee-ba00-325096b39f47"
            },
            "required": true,
            "description": "Unique identifier for the task."
          }
        ],
        "responses": {
          "200": {
            "description": "Response schema for unregistering a data transfer task.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response schema for unregistering a data transfer task. Includes the task ID and status of the unregistration.",
                  "type": "object",
                  "properties": {
                    "taskID": {
                      "type": "string",
                      "description": "Unique identifier (UUID) for the session.",
                      "example": "000003e8-e0b8-21ee-ba00-325096b39f47"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "FAILED"
                      ],
                      "example": "SUCCESS"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Transaction not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/@hyperledger/cactus-plugin-satp-hermes/oracle/status": {
      "get": {
        "summary": "Get oracle task status",
        "description": "Retrieve the status of an oracle task",
        "operationId": "GetOracleTaskStatus",
        "tags": [
          "oracle"
        ],
        "x-hyperledger-cacti": {
          "http": {
            "verbLowerCase": "get",
            "path": "/api/v1/@hyperledger/cactus-plugin-satp-hermes/oracle/status"
          }
        },
        "parameters": [
          {
            "name": "taskID",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Unique identifier (UUID) for the session.",
              "example": "000003e8-e0b8-21ee-ba00-325096b39f47"
            },
            "required": true,
            "description": "Unique identifier for the task."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response schema for checking the status of a data transfer task. Includes the task ID and status of the task.",
                  "type": "object",
                  "properties": {
                    "taskID": {
                      "type": "string",
                      "description": "Unique identifier (UUID) for the session.",
                      "example": "000003e8-e0b8-21ee-ba00-325096b39f47"
                    },
                    "type": {
                      "type": "string",
                      "description": "The type of the Oracle task.",
                      "enum": [
                        "READ",
                        "UPDATE",
                        "READ_AND_UPDATE"
                      ]
                    },
                    "srcNetworkId": {
                      "type": "object",
                      "description": "The network of the DLT being interacted with.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The network of the DLT being interacted with."
                        },
                        "ledgerType": {
                          "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                          "type": "string",
                          "enum": [
                            "BESU_1X",
                            "BESU_2X",
                            "BURROW_0X",
                            "CORDA_4X",
                            "ETHEREUM",
                            "FABRIC_2",
                            "SAWTOOTH_1X"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "ledgerType"
                      ]
                    },
                    "srcContract": {
                      "description": "The source contract details for the Oracle task.",
                      "type": "object",
                      "properties": {
                        "contractName": {
                          "type": "string",
                          "description": "The name of the contract."
                        },
                        "contractAddress": {
                          "type": "string",
                          "description": "The address of the contract.",
                          "nullable": true
                        },
                        "contractAbi": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          },
                          "description": "The ABI (Application Binary Interface) of the contract.",
                          "nullable": true
                        },
                        "contractBytecode": {
                          "type": "string",
                          "description": "The bytecode of the contract.",
                          "nullable": true
                        },
                        "methodName": {
                          "type": "string",
                          "description": "The name of the method to be invoked on the contract."
                        },
                        "params": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "description": "The parameters to be passed to the contract method."
                        }
                      }
                    },
                    "dstNetworkId": {
                      "type": "object",
                      "description": "The network of the DLT being interacted with.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The network of the DLT being interacted with."
                        },
                        "ledgerType": {
                          "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                          "type": "string",
                          "enum": [
                            "BESU_1X",
                            "BESU_2X",
                            "BURROW_0X",
                            "CORDA_4X",
                            "ETHEREUM",
                            "FABRIC_2",
                            "SAWTOOTH_1X"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "ledgerType"
                      ]
                    },
                    "dstContract": {
                      "description": "The destination contract details for the Oracle task.",
                      "type": "object",
                      "properties": {
                        "contractName": {
                          "type": "string",
                          "description": "The name of the contract."
                        },
                        "contractAddress": {
                          "type": "string",
                          "description": "The address of the contract.",
                          "nullable": true
                        },
                        "contractAbi": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          },
                          "description": "The ABI (Application Binary Interface) of the contract.",
                          "nullable": true
                        },
                        "contractBytecode": {
                          "type": "string",
                          "description": "The bytecode of the contract.",
                          "nullable": true
                        },
                        "methodName": {
                          "type": "string",
                          "description": "The name of the method to be invoked on the contract."
                        },
                        "params": {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "description": "The parameters to be passed to the contract method."
                        }
                      }
                    },
                    "timestamp": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The timestamp when the Oracle task was created or last updated.",
                      "example": 1672531200
                    },
                    "operations": {
                      "type": "array",
                      "description": "The list of operations performed by the Oracle task.",
                      "items": {
                        "type": "object",
                        "description": "Represents an operation performed by the Oracle, including its type, network, contract, status, and optional output.",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "A unique identifier for the Oracle operation.",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                          },
                          "type": {
                            "type": "string",
                            "description": "The type of the Oracle operation.",
                            "enum": [
                              "READ",
                              "UPDATE"
                            ],
                            "example": "READ"
                          },
                          "networkId": {
                            "type": "object",
                            "description": "The network of the DLT being interacted with.",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The network of the DLT being interacted with."
                              },
                              "ledgerType": {
                                "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                                "type": "string",
                                "enum": [
                                  "BESU_1X",
                                  "BESU_2X",
                                  "BURROW_0X",
                                  "CORDA_4X",
                                  "ETHEREUM",
                                  "FABRIC_2",
                                  "SAWTOOTH_1X"
                                ]
                              }
                            },
                            "required": [
                              "id",
                              "ledgerType"
                            ]
                          },
                          "contract": {
                            "description": "The contract associated with the Oracle operation.",
                            "type": "object",
                            "properties": {
                              "contractName": {
                                "type": "string",
                                "description": "The name of the contract."
                              },
                              "contractAddress": {
                                "type": "string",
                                "description": "The address of the contract.",
                                "nullable": true
                              },
                              "contractAbi": {
                                "type": "array",
                                "items": {
                                  "type": "object"
                                },
                                "description": "The ABI (Application Binary Interface) of the contract.",
                                "nullable": true
                              },
                              "contractBytecode": {
                                "type": "string",
                                "description": "The bytecode of the contract.",
                                "nullable": true
                              },
                              "methodName": {
                                "type": "string",
                                "description": "The name of the method to be invoked on the contract."
                              },
                              "params": {
                                "type": "array",
                                "items": {
                                  "oneOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "number"
                                    }
                                  ]
                                },
                                "description": "The parameters to be passed to the contract method."
                              }
                            }
                          },
                          "status": {
                            "type": "string",
                            "description": "The current status of the Oracle operation.",
                            "enum": [
                              "PENDING",
                              "SUCCESS",
                              "FAILED"
                            ],
                            "example": "IN_PROGRESS"
                          },
                          "output": {
                            "description": "Optional output generated by the Oracle operation.",
                            "type": "object",
                            "properties": {
                              "transactionId": {
                                "type": "string",
                                "description": "The unique identifier for the transaction.",
                                "example": "0x1234567890abcdef"
                              },
                              "transactionReceipt": {
                                "type": "object",
                                "description": "The receipt of the transaction, providing proof of execution."
                              },
                              "output": {
                                "type": "string",
                                "description": "The output of the Oracle operation execution."
                              },
                              "proof": {
                                "type": "object",
                                "description": "Proof of the Oracle operation execution."
                              }
                            }
                          },
                          "timestamp": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The timestamp when the Oracle operation was created or last updated.",
                            "example": 1672531200
                          }
                        },
                        "required": [
                          "id",
                          "type",
                          "networkId",
                          "contract",
                          "status",
                          "timestamp"
                        ]
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "The current status of the Oracle task.",
                      "enum": [
                        "ACTIVE",
                        "INACTIVE"
                      ]
                    },
                    "mode": {
                      "type": "string",
                      "description": "The mode of operation for registered tasks.",
                      "example": "POLLING",
                      "enum": [
                        "POLLING",
                        "EVENT_LISTENING",
                        "IMMEDIATE"
                      ]
                    },
                    "pollingInterval": {
                      "type": "integer",
                      "description": "The interval for polling in milliseconds. Only if taskMode is POLLING.",
                      "example": 5000
                    }
                  },
                  "required": [
                    "taskID",
                    "type",
                    "srcContract",
                    "dstContract",
                    "timestamp",
                    "operations",
                    "status",
                    "mode"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Transaction not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AuthzScope": {
        "type": "string",
        "enum": [
          "group:admin",
          "group:user"
        ],
        "x-enum-descriptions": [
          "Identities with the group:admin scope are administrators of the system.",
          "Identities with the group:user scope are end users of the system who only have authorization to perform a limited set of actions."
        ],
        "x-enum-varnames": [
          "GroupAdmin",
          "GroupUser"
        ],
        "example": "group:admin"
      },
      "AuthzJwtClaim": {
        "description": "Stores global constants related to the authorization of the application. Specifically enumerates the claims to validate for as per RFC 7519, section 4.1. See: https://tools.ietf.org/html/rfc7519#section-4.1",
        "type": "string",
        "enum": [
          "Hyperledger Labs - Carbon Accounting Tool"
        ],
        "x-enum-descriptions": [
          "The \"iss\" (issuer) claim identifies the principal that issued the JWT. The processing of this claim is generally application specific. The \"iss\" value is a case-sensitive string containing a StringOrURI value. Use of this claim is OPTIONAL."
        ],
        "x-enum-varnames": [
          "iss"
        ],
        "example": "Hyperledger Labs - Carbon Accounting Tool"
      },
      "CredentialProfile": {
        "type": "string",
        "enum": [
          "SAML",
          "OAUTH",
          "X509"
        ],
        "example": "OAUTH"
      },
      "AllSessionIdsRequest": {
        "type": "object",
        "description": "Empty object"
      },
      "AllSessionIdsResponse": {
        "type": "array",
        "items": {
          "type": "string",
          "nullable": false
        },
        "description": "Array with session Ids"
      },
      "AuditRequest": {
        "description": "Response schema for an audit request. Contains the proofs generated during the audit period and the start and end datetimes.",
        "type": "object",
        "x-category": "request",
        "required": [
          "startTimestamp",
          "endTimestamp"
        ],
        "properties": {
          "startTimestamp": {
            "type": "integer",
            "format": "int64",
            "description": "The start timestamp for the audit period, as a Unix timestamp (milliseconds since epoch)."
          },
          "endTimestamp": {
            "type": "integer",
            "format": "int64",
            "description": "The end timestamp for the audit period, as a Unix timestamp (milliseconds since epoch)."
          }
        }
      },
      "AuditResponse": {
        "description": "Response schema for an audit request. Contains the proofs generated during the audit period and the start and end datetimes.",
        "type": "object",
        "x-category": "response",
        "properties": {
          "sessions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "startTimestamp": {
            "type": "integer",
            "format": "int64",
            "description": "The start timestamp for the audit period, as a Unix timestamp (milliseconds since epoch)."
          },
          "endTimestamp": {
            "type": "integer",
            "format": "int64",
            "description": "The end timestamp for the audit period, as a Unix timestamp (milliseconds since epoch)."
          }
        }
      },
      "StatusResponse": {
        "description": "Provides the current status of the SATP session including detailed information on the progress, such as substatus, stage, and step, along with the session start time and chain information.",
        "type": "object",
        "x-category": "response",
        "required": [
          "status",
          "substatus",
          "stage",
          "step",
          "startTime",
          "originNetwork",
          "destinationNetwork"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "NOT_FOUND",
              "INVALID",
              "PENDING",
              "DONE",
              "FAILED"
            ],
            "example": "DONE"
          },
          "substatus": {
            "type": "string",
            "enum": [
              "WAIT_SOURCE_CONFIRMATIONS",
              "WAIT_DESTINATION_TRANSACTION",
              "BRIDGE_NOT_AVAILABLE",
              "CHAIN_NOT_AVAILABLE",
              "REFUND_IN_PROGRESS",
              "UNKNOWN_ERROR",
              "COMPLETED",
              "PARTIAL",
              "REFUNDED",
              "NOT_PROCESSABLE_REFUND_NEEDED",
              "RECOVERING",
              "RECOVERED",
              "RECOVERY_FAILED",
              "REJECTED"
            ],
            "example": "COMPLETED"
          },
          "stage": {
            "type": "string",
            "enum": [
              "STAGE_0",
              "STAGE_1",
              "STAGE_2",
              "STAGE_3"
            ],
            "example": "STAGE_3"
          },
          "step": {
            "type": "string",
            "enum": [
              "transfer-initialization-claims",
              "conveyance-of-network-capabilities-and-parameters",
              "transfer-proposal-message",
              "transfer-proposal-receipt-message",
              "transfer-proposal-reject-and-conditional-reject-message",
              "transfer-commence-message",
              "commence-response-message",
              "lock-assertion-message",
              "lock-assertion-receipt-message",
              "commit-preparation-message",
              "commit-ready-message",
              "commit-final-assertion-message",
              "commit-final-acknowledgement-receipt-message",
              "transfer-complete-message",
              "rollback-transfer-initialization-claims",
              "rollback-conveyance-of-network-capabilities-and-parameters",
              "rollback-transfer-proposal-message",
              "rollback-transfer-proposal-receipt-message",
              "rollback-transfer-proposal-reject-and-conditional-reject-message",
              "rollback-transfer-commence-message",
              "rollback-commence-response-message",
              "rollback-lock-assertion-message",
              "rollback-lock-assertion-receipt-message",
              "rollback-commit-preparation-message",
              "rollback-commit-ready-message",
              "rollback-commit-final-assertion-message",
              "rollback-commit-final-acknowledgement-receipt-message",
              "rollback-transfer-complete-message"
            ],
            "example": "transfer-complete-message"
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "example": "2023-01-01T00:00:00Z"
          },
          "originNetwork": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique identifier of the origin network.",
                "example": "network1"
              },
              "dltProtocol": {
                "example": "HyperledgerFabric"
              },
              "dltSubnetworkID": {
                "example": "subnetwork1"
              }
            }
          },
          "destinationNetwork": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique identifier of the origin network.",
                "example": "network2"
              },
              "dltProtocol": {
                "example": "HyperledgerBesu"
              },
              "dltSubnetworkID": {
                "example": "subnetwork2"
              }
            }
          }
        }
      },
      "PauseRequest": {
        "description": "Request to temporarily pause an ongoing transaction session, identified by the session and context IDs.",
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "contextId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174001"
          }
        }
      },
      "PauseResponse": {
        "description": "Response for a pause transaction request. Returns the current status of the SATP session post-pause action.",
        "type": "object",
        "properties": {
          "statusResponse": {
            "description": "Provides the current status of the SATP session including detailed information on the progress, such as substatus, stage, and step, along with the session start time and chain information.",
            "type": "object",
            "x-category": "response",
            "required": [
              "status",
              "substatus",
              "stage",
              "step",
              "startTime",
              "originNetwork",
              "destinationNetwork"
            ],
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "NOT_FOUND",
                  "INVALID",
                  "PENDING",
                  "DONE",
                  "FAILED"
                ],
                "example": "DONE"
              },
              "substatus": {
                "type": "string",
                "enum": [
                  "WAIT_SOURCE_CONFIRMATIONS",
                  "WAIT_DESTINATION_TRANSACTION",
                  "BRIDGE_NOT_AVAILABLE",
                  "CHAIN_NOT_AVAILABLE",
                  "REFUND_IN_PROGRESS",
                  "UNKNOWN_ERROR",
                  "COMPLETED",
                  "PARTIAL",
                  "REFUNDED",
                  "NOT_PROCESSABLE_REFUND_NEEDED",
                  "RECOVERING",
                  "RECOVERED",
                  "RECOVERY_FAILED",
                  "REJECTED"
                ],
                "example": "COMPLETED"
              },
              "stage": {
                "type": "string",
                "enum": [
                  "STAGE_0",
                  "STAGE_1",
                  "STAGE_2",
                  "STAGE_3"
                ],
                "example": "STAGE_3"
              },
              "step": {
                "type": "string",
                "enum": [
                  "transfer-initialization-claims",
                  "conveyance-of-network-capabilities-and-parameters",
                  "transfer-proposal-message",
                  "transfer-proposal-receipt-message",
                  "transfer-proposal-reject-and-conditional-reject-message",
                  "transfer-commence-message",
                  "commence-response-message",
                  "lock-assertion-message",
                  "lock-assertion-receipt-message",
                  "commit-preparation-message",
                  "commit-ready-message",
                  "commit-final-assertion-message",
                  "commit-final-acknowledgement-receipt-message",
                  "transfer-complete-message",
                  "rollback-transfer-initialization-claims",
                  "rollback-conveyance-of-network-capabilities-and-parameters",
                  "rollback-transfer-proposal-message",
                  "rollback-transfer-proposal-receipt-message",
                  "rollback-transfer-proposal-reject-and-conditional-reject-message",
                  "rollback-transfer-commence-message",
                  "rollback-commence-response-message",
                  "rollback-lock-assertion-message",
                  "rollback-lock-assertion-receipt-message",
                  "rollback-commit-preparation-message",
                  "rollback-commit-ready-message",
                  "rollback-commit-final-assertion-message",
                  "rollback-commit-final-acknowledgement-receipt-message",
                  "rollback-transfer-complete-message"
                ],
                "example": "transfer-complete-message"
              },
              "startTime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-01-01T00:00:00Z"
              },
              "originNetwork": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The unique identifier of the origin network.",
                    "example": "network1"
                  },
                  "dltProtocol": {
                    "example": "HyperledgerFabric"
                  },
                  "dltSubnetworkID": {
                    "example": "subnetwork1"
                  }
                }
              },
              "destinationNetwork": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The unique identifier of the origin network.",
                    "example": "network2"
                  },
                  "dltProtocol": {
                    "example": "HyperledgerBesu"
                  },
                  "dltSubnetworkID": {
                    "example": "subnetwork2"
                  }
                }
              }
            }
          }
        },
        "required": [
          "statusResponse"
        ]
      },
      "StatusRequest": {
        "description": "Request for retrieving the current status of a session, identified by the session ID.",
        "type": "object",
        "x-category": "request",
        "required": [
          "sessionID"
        ],
        "properties": {
          "sessionID": {
            "type": "string",
            "description": "The ID of the session for which the status is being requested."
          }
        },
        "example": "123e4567-e89b-12d3-a456-426614174000"
      },
      "Asset": {
        "description": "An asset",
        "type": "object",
        "required": [
          "id",
          "owner",
          "contractName",
          "networkId",
          "tokenType",
          "referenceId"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "contractName": {
            "type": "string"
          },
          "contractAddress": {
            "type": "string"
          },
          "mspId": {
            "type": "string"
          },
          "channelName": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "networkId": {
            "type": "object",
            "description": "The network of the DLT being interacted with.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The network of the DLT being interacted with."
              },
              "ledgerType": {
                "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                "type": "string",
                "enum": [
                  "BESU_1X",
                  "BESU_2X",
                  "BURROW_0X",
                  "CORDA_4X",
                  "ETHEREUM",
                  "FABRIC_2",
                  "SAWTOOTH_1X"
                ]
              }
            },
            "required": [
              "id",
              "ledgerType"
            ]
          },
          "tokenType": {
            "type": "string",
            "enum": [
              "ERC20",
              "ERC721",
              "ERC1155",
              "NONSTANDARD_FUNGIBLE",
              "NONSTANDARD_NONFUNGIBLE"
            ],
            "description": "The type of token."
          },
          "referenceId": {
            "type": "string"
          }
        }
      },
      "TransactRequest": {
        "description": "Request schema for initiating a transaction. Includes details such as the transaction context, mode (data or transfer), payload, and information about the source and destination DLT networks.",
        "type": "object",
        "required": [
          "contextID",
          "sourceAsset",
          "receiverAsset"
        ],
        "properties": {
          "contextID": {
            "description": "The unique identifier of the task.",
            "type": "string",
            "example": "000003e8-e0b8-21ee-ba00-325096b39f47"
          },
          "payload": {
            "type": "string",
            "example": "{\"data\":\"example payload\"}"
          },
          "sourceAsset": {
            "description": "An asset",
            "type": "object",
            "required": [
              "id",
              "owner",
              "contractName",
              "networkId",
              "tokenType",
              "referenceId"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "owner": {
                "type": "string"
              },
              "contractName": {
                "type": "string"
              },
              "contractAddress": {
                "type": "string"
              },
              "mspId": {
                "type": "string"
              },
              "channelName": {
                "type": "string"
              },
              "amount": {
                "type": "string"
              },
              "networkId": {
                "type": "object",
                "description": "The network of the DLT being interacted with.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The network of the DLT being interacted with."
                  },
                  "ledgerType": {
                    "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                    "type": "string",
                    "enum": [
                      "BESU_1X",
                      "BESU_2X",
                      "BURROW_0X",
                      "CORDA_4X",
                      "ETHEREUM",
                      "FABRIC_2",
                      "SAWTOOTH_1X"
                    ]
                  }
                },
                "required": [
                  "id",
                  "ledgerType"
                ]
              },
              "tokenType": {
                "type": "string",
                "enum": [
                  "ERC20",
                  "ERC721",
                  "ERC1155",
                  "NONSTANDARD_FUNGIBLE",
                  "NONSTANDARD_NONFUNGIBLE"
                ],
                "description": "The type of token."
              },
              "referenceId": {
                "type": "string"
              }
            }
          },
          "receiverAsset": {
            "description": "An asset",
            "type": "object",
            "required": [
              "id",
              "owner",
              "contractName",
              "networkId",
              "tokenType",
              "referenceId"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "owner": {
                "type": "string"
              },
              "contractName": {
                "type": "string"
              },
              "contractAddress": {
                "type": "string"
              },
              "mspId": {
                "type": "string"
              },
              "channelName": {
                "type": "string"
              },
              "amount": {
                "type": "string"
              },
              "networkId": {
                "type": "object",
                "description": "The network of the DLT being interacted with.",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The network of the DLT being interacted with."
                  },
                  "ledgerType": {
                    "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                    "type": "string",
                    "enum": [
                      "BESU_1X",
                      "BESU_2X",
                      "BURROW_0X",
                      "CORDA_4X",
                      "ETHEREUM",
                      "FABRIC_2",
                      "SAWTOOTH_1X"
                    ]
                  }
                },
                "required": [
                  "id",
                  "ledgerType"
                ]
              },
              "tokenType": {
                "type": "string",
                "enum": [
                  "ERC20",
                  "ERC721",
                  "ERC1155",
                  "NONSTANDARD_FUNGIBLE",
                  "NONSTANDARD_NONFUNGIBLE"
                ],
                "description": "The type of token."
              },
              "referenceId": {
                "type": "string"
              }
            }
          }
        }
      },
      "TransactResponse": {
        "description": "Response schema for a transaction request. Includes the session ID and the current status of the transaction.",
        "type": "object",
        "properties": {
          "sessionID": {
            "x-category": "satp-core",
            "type": "string",
            "description": "Unique identifier (UUID) for the session.",
            "example": "000003e8-e0b8-21ee-ba00-325096b39f47"
          },
          "statusResponse": {
            "description": "Provides the current status of the SATP session including detailed information on the progress, such as substatus, stage, and step, along with the session start time and chain information.",
            "type": "object",
            "x-category": "response",
            "required": [
              "status",
              "substatus",
              "stage",
              "step",
              "startTime",
              "originNetwork",
              "destinationNetwork"
            ],
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "NOT_FOUND",
                  "INVALID",
                  "PENDING",
                  "DONE",
                  "FAILED"
                ],
                "example": "DONE"
              },
              "substatus": {
                "type": "string",
                "enum": [
                  "WAIT_SOURCE_CONFIRMATIONS",
                  "WAIT_DESTINATION_TRANSACTION",
                  "BRIDGE_NOT_AVAILABLE",
                  "CHAIN_NOT_AVAILABLE",
                  "REFUND_IN_PROGRESS",
                  "UNKNOWN_ERROR",
                  "COMPLETED",
                  "PARTIAL",
                  "REFUNDED",
                  "NOT_PROCESSABLE_REFUND_NEEDED",
                  "RECOVERING",
                  "RECOVERED",
                  "RECOVERY_FAILED",
                  "REJECTED"
                ],
                "example": "COMPLETED"
              },
              "stage": {
                "type": "string",
                "enum": [
                  "STAGE_0",
                  "STAGE_1",
                  "STAGE_2",
                  "STAGE_3"
                ],
                "example": "STAGE_3"
              },
              "step": {
                "type": "string",
                "enum": [
                  "transfer-initialization-claims",
                  "conveyance-of-network-capabilities-and-parameters",
                  "transfer-proposal-message",
                  "transfer-proposal-receipt-message",
                  "transfer-proposal-reject-and-conditional-reject-message",
                  "transfer-commence-message",
                  "commence-response-message",
                  "lock-assertion-message",
                  "lock-assertion-receipt-message",
                  "commit-preparation-message",
                  "commit-ready-message",
                  "commit-final-assertion-message",
                  "commit-final-acknowledgement-receipt-message",
                  "transfer-complete-message",
                  "rollback-transfer-initialization-claims",
                  "rollback-conveyance-of-network-capabilities-and-parameters",
                  "rollback-transfer-proposal-message",
                  "rollback-transfer-proposal-receipt-message",
                  "rollback-transfer-proposal-reject-and-conditional-reject-message",
                  "rollback-transfer-commence-message",
                  "rollback-commence-response-message",
                  "rollback-lock-assertion-message",
                  "rollback-lock-assertion-receipt-message",
                  "rollback-commit-preparation-message",
                  "rollback-commit-ready-message",
                  "rollback-commit-final-assertion-message",
                  "rollback-commit-final-acknowledgement-receipt-message",
                  "rollback-transfer-complete-message"
                ],
                "example": "transfer-complete-message"
              },
              "startTime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-01-01T00:00:00Z"
              },
              "originNetwork": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The unique identifier of the origin network.",
                    "example": "network1"
                  },
                  "dltProtocol": {
                    "example": "HyperledgerFabric"
                  },
                  "dltSubnetworkID": {
                    "example": "subnetwork1"
                  }
                }
              },
              "destinationNetwork": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The unique identifier of the origin network.",
                    "example": "network2"
                  },
                  "dltProtocol": {
                    "example": "HyperledgerBesu"
                  },
                  "dltSubnetworkID": {
                    "example": "subnetwork2"
                  }
                }
              }
            }
          }
        },
        "required": [
          "sessionID",
          "statusResponse"
        ]
      },
      "CancelRequest": {
        "description": "Request to cancel an ongoing transaction session, identified by the session ID.",
        "type": "object",
        "properties": {
          "sessionID": {
            "x-category": "satp-core",
            "type": "string",
            "description": "Unique identifier (UUID) for the session.",
            "example": "000003e8-e0b8-21ee-ba00-325096b39f47"
          }
        },
        "required": [
          "sessionID"
        ]
      },
      "CancelResponse": {
        "description": "Response for a cancel transaction request. Indicates whether the cancel action was successful and includes the current session status.",
        "type": "object",
        "properties": {
          "statusResponse": {
            "description": "Provides the current status of the SATP session including detailed information on the progress, such as substatus, stage, and step, along with the session start time and chain information.",
            "type": "object",
            "x-category": "response",
            "required": [
              "status",
              "substatus",
              "stage",
              "step",
              "startTime",
              "originNetwork",
              "destinationNetwork"
            ],
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "NOT_FOUND",
                  "INVALID",
                  "PENDING",
                  "DONE",
                  "FAILED"
                ],
                "example": "DONE"
              },
              "substatus": {
                "type": "string",
                "enum": [
                  "WAIT_SOURCE_CONFIRMATIONS",
                  "WAIT_DESTINATION_TRANSACTION",
                  "BRIDGE_NOT_AVAILABLE",
                  "CHAIN_NOT_AVAILABLE",
                  "REFUND_IN_PROGRESS",
                  "UNKNOWN_ERROR",
                  "COMPLETED",
                  "PARTIAL",
                  "REFUNDED",
                  "NOT_PROCESSABLE_REFUND_NEEDED",
                  "RECOVERING",
                  "RECOVERED",
                  "RECOVERY_FAILED",
                  "REJECTED"
                ],
                "example": "COMPLETED"
              },
              "stage": {
                "type": "string",
                "enum": [
                  "STAGE_0",
                  "STAGE_1",
                  "STAGE_2",
                  "STAGE_3"
                ],
                "example": "STAGE_3"
              },
              "step": {
                "type": "string",
                "enum": [
                  "transfer-initialization-claims",
                  "conveyance-of-network-capabilities-and-parameters",
                  "transfer-proposal-message",
                  "transfer-proposal-receipt-message",
                  "transfer-proposal-reject-and-conditional-reject-message",
                  "transfer-commence-message",
                  "commence-response-message",
                  "lock-assertion-message",
                  "lock-assertion-receipt-message",
                  "commit-preparation-message",
                  "commit-ready-message",
                  "commit-final-assertion-message",
                  "commit-final-acknowledgement-receipt-message",
                  "transfer-complete-message",
                  "rollback-transfer-initialization-claims",
                  "rollback-conveyance-of-network-capabilities-and-parameters",
                  "rollback-transfer-proposal-message",
                  "rollback-transfer-proposal-receipt-message",
                  "rollback-transfer-proposal-reject-and-conditional-reject-message",
                  "rollback-transfer-commence-message",
                  "rollback-commence-response-message",
                  "rollback-lock-assertion-message",
                  "rollback-lock-assertion-receipt-message",
                  "rollback-commit-preparation-message",
                  "rollback-commit-ready-message",
                  "rollback-commit-final-assertion-message",
                  "rollback-commit-final-acknowledgement-receipt-message",
                  "rollback-transfer-complete-message"
                ],
                "example": "transfer-complete-message"
              },
              "startTime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-01-01T00:00:00Z"
              },
              "originNetwork": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The unique identifier of the origin network.",
                    "example": "network1"
                  },
                  "dltProtocol": {
                    "example": "HyperledgerFabric"
                  },
                  "dltSubnetworkID": {
                    "example": "subnetwork1"
                  }
                }
              },
              "destinationNetwork": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The unique identifier of the origin network.",
                    "example": "network2"
                  },
                  "dltProtocol": {
                    "example": "HyperledgerBesu"
                  },
                  "dltSubnetworkID": {
                    "example": "subnetwork2"
                  }
                }
              }
            }
          },
          "cancelSuccessful": {
            "type": "boolean",
            "description": "Indicates whether the cancel operation was successful.",
            "example": true
          }
        },
        "required": [
          "statusResponse",
          "cancelSuccessful"
        ]
      },
      "APIError": {
        "x-category": "response",
        "type": "object",
        "x-go-type": "ApiError",
        "x-go-name": "ApiError",
        "description": "An Error",
        "required": [
          "message",
          "type",
          "code",
          "status",
          "timestamp"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "HTTP error type",
            "example": "bad-request"
          },
          "code": {
            "type": "integer",
            "description": "Numeric error code",
            "example": 16384
          },
          "status": {
            "type": "integer",
            "description": "HTTP status of the error",
            "example": 500
          },
          "message": {
            "type": "string",
            "description": "Long error description",
            "example": "Oops there's been an internal error handling"
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp of the error",
            "example": "2021-07-21T17:32:28Z"
          }
        }
      },
      "DLTProtocol": {
        "x-category": "satp-core",
        "type": "string",
        "enum": [
          "HyperledgerFabric",
          "HyperledgerBesu"
        ],
        "description": "Supported DLT protocols."
      },
      "DLTNetworkID": {
        "x-category": "satp-core",
        "type": "string",
        "description": "The network of the DLT being interacted with. TODO: implement network identification draft"
      },
      "DLTSubnetworkID": {
        "x-category": "satp-core",
        "type": "string",
        "description": "The subnetwork of the DLT being interacted with. TODO: implement network identification draft"
      },
      "SessionID": {
        "x-category": "satp-core",
        "type": "string",
        "description": "Unique identifier (UUID) for the session.",
        "example": "000003e8-e0b8-21ee-ba00-325096b39f47"
      },
      "TaskID": {
        "type": "string",
        "description": "Unique identifier (UUID) for the session.",
        "example": "000003e8-e0b8-21ee-ba00-325096b39f47"
      },
      "Address": {
        "type": "string",
        "description": "A blockchain address.",
        "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
      },
      "AmountString": {
        "type": "string",
        "description": "The amount in string format including all decimals.",
        "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
        "example": "1000000000000000000"
      },
      "AmountDecimal": {
        "type": "number",
        "format": "float",
        "description": "Amount value with decimal places",
        "example": 100.33
      },
      "TokenSymbol": {
        "type": "string",
        "description": "The symbol of a token",
        "example": "ETH"
      },
      "LogoURI": {
        "type": "string",
        "description": "The logo of a token, chain, dex etc.",
        "format": "uri"
      },
      "RoutesResponse": {
        "type": "object",
        "description": "A collection of available and unavailable routes",
        "required": [
          "routes"
        ],
        "properties": {
          "routes": {
            "type": "array",
            "description": "A collection of route objects",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "A unique identifier of the route."
                },
                "gatewayID": {
                  "type": "string",
                  "format": "uuid",
                  "description": "A unique identifier for the gateway."
                },
                "mode": {
                  "type": "string",
                  "enum": [
                    "data",
                    "transfer"
                  ],
                  "description": "The mode of operation for this route - 'data' for arbitrary payload handling, 'transfer' for asset transfer."
                },
                "fromDLTNetworkID": {
                  "type": "string",
                  "description": "The ID of the DLT Network where the operation will originate."
                },
                "fromAmountUSD": {
                  "type": "string",
                  "format": "double",
                  "description": "The amount of 'fromToken' to be transferred in USD, specified as a string to maintain precision."
                },
                "fromAmount": {
                  "type": "string",
                  "description": "The amount that should be sent including all decimals (e.g., 1000000 for 1 USDC (6 decimals)).",
                  "pattern": "^[1-9][0-9]*$"
                },
                "fromToken": {
                  "type": "object",
                  "description": "Metadata detailing a supported token",
                  "required": [
                    "chainID",
                    "chainType",
                    "address",
                    "symbol",
                    "decimals"
                  ],
                  "properties": {
                    "chainID": {
                      "x-category": "satp-core",
                      "type": "string",
                      "description": "The network of the DLT being interacted with. TODO: implement network identification draft"
                    },
                    "chainType": {
                      "x-category": "satp-core",
                      "type": "string",
                      "enum": [
                        "HyperledgerFabric",
                        "HyperledgerBesu"
                      ],
                      "description": "Supported DLT protocols."
                    },
                    "address": {
                      "type": "string",
                      "description": "A blockchain address.",
                      "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the token."
                    },
                    "symbol": {
                      "type": "string",
                      "description": "The symbol of the token."
                    },
                    "decimals": {
                      "type": "integer",
                      "description": "How many decimals the token supports.",
                      "minimum": 1
                    },
                    "logoURI": {
                      "type": "string",
                      "description": "The logo of a token, chain, dex etc.",
                      "format": "uri"
                    },
                    "tags": {
                      "title": "Tags",
                      "type": "array",
                      "description": "List of tags identifiers providing additional context or categorization.",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "satp",
                        "hyperledger"
                      ]
                    },
                    "priceUSD": {
                      "type": "string",
                      "description": "The current price of the token in USD."
                    },
                    "extensions": {
                      "type": "object",
                      "properties": {
                        "bridgeInfo": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "object",
                            "description": "Information about the bridge used for the token transfer.",
                            "properties": {
                              "tokenAddress": {
                                "type": "string",
                                "description": "The address of the token being transferred.",
                                "example": "0x..."
                              }
                            }
                          }
                        },
                        "verified": {
                          "type": "boolean",
                          "description": "Indicates whether the token is verified."
                        }
                      }
                    }
                  }
                },
                "toDLTNetworkID": {
                  "type": "string",
                  "description": "The ID of the DLT Network where the operation will end."
                },
                "toAmountUSD": {
                  "type": "string",
                  "description": "The expected amount to be received in USD."
                },
                "toAmount": {
                  "type": "string",
                  "description": "The expected amount to be received including all decimals (e.g., 1000000 for 1 USDC (6 decimals))."
                },
                "toAmountMin": {
                  "type": "string",
                  "description": "The minimum expected amount to be received including all decimals (e.g., 1000000 for 1 USDC (6 decimals))."
                },
                "toToken": {
                  "type": "object",
                  "description": "Metadata detailing a supported token",
                  "required": [
                    "chainID",
                    "chainType",
                    "address",
                    "symbol",
                    "decimals"
                  ],
                  "properties": {
                    "chainID": {
                      "x-category": "satp-core",
                      "type": "string",
                      "description": "The network of the DLT being interacted with. TODO: implement network identification draft"
                    },
                    "chainType": {
                      "x-category": "satp-core",
                      "type": "string",
                      "enum": [
                        "HyperledgerFabric",
                        "HyperledgerBesu"
                      ],
                      "description": "Supported DLT protocols."
                    },
                    "address": {
                      "type": "string",
                      "description": "A blockchain address.",
                      "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the token."
                    },
                    "symbol": {
                      "type": "string",
                      "description": "The symbol of the token."
                    },
                    "decimals": {
                      "type": "integer",
                      "description": "How many decimals the token supports.",
                      "minimum": 1
                    },
                    "logoURI": {
                      "type": "string",
                      "description": "The logo of a token, chain, dex etc.",
                      "format": "uri"
                    },
                    "tags": {
                      "title": "Tags",
                      "type": "array",
                      "description": "List of tags identifiers providing additional context or categorization.",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "satp",
                        "hyperledger"
                      ]
                    },
                    "priceUSD": {
                      "type": "string",
                      "description": "The current price of the token in USD."
                    },
                    "extensions": {
                      "type": "object",
                      "properties": {
                        "bridgeInfo": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "object",
                            "description": "Information about the bridge used for the token transfer.",
                            "properties": {
                              "tokenAddress": {
                                "type": "string",
                                "description": "The address of the token being transferred.",
                                "example": "0x..."
                              }
                            }
                          }
                        },
                        "verified": {
                          "type": "boolean",
                          "description": "Indicates whether the token is verified."
                        }
                      }
                    }
                  }
                },
                "gasCostUSD": {
                  "type": "string",
                  "description": "The expected gas cost in USD."
                },
                "containsSwitchChain": {
                  "type": "boolean",
                  "description": "Whether chain switching is enabled or not."
                },
                "steps": {
                  "type": "array",
                  "description": "List of steps involved in this route, adjusted for mode.",
                  "items": {
                    "type": "object",
                    "description": "Details a single step within a route including actions and estimates.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Id of the step"
                      },
                      "type": {
                        "type": "string",
                        "description": "Type of the step, typically describing the action, e.g., 'swap'."
                      },
                      "tool": {
                        "type": "string",
                        "description": "Tool used in the step, e.g., 'stargate'."
                      },
                      "action": {
                        "type": "object",
                        "properties": {
                          "fromToken": {
                            "type": "object",
                            "description": "Metadata detailing a supported token",
                            "required": [
                              "chainID",
                              "chainType",
                              "address",
                              "symbol",
                              "decimals"
                            ],
                            "properties": {
                              "chainID": {
                                "x-category": "satp-core",
                                "type": "string",
                                "description": "The network of the DLT being interacted with. TODO: implement network identification draft"
                              },
                              "chainType": {
                                "x-category": "satp-core",
                                "type": "string",
                                "enum": [
                                  "HyperledgerFabric",
                                  "HyperledgerBesu"
                                ],
                                "description": "Supported DLT protocols."
                              },
                              "address": {
                                "type": "string",
                                "description": "A blockchain address.",
                                "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the token."
                              },
                              "symbol": {
                                "type": "string",
                                "description": "The symbol of the token."
                              },
                              "decimals": {
                                "type": "integer",
                                "description": "How many decimals the token supports.",
                                "minimum": 1
                              },
                              "logoURI": {
                                "type": "string",
                                "description": "The logo of a token, chain, dex etc.",
                                "format": "uri"
                              },
                              "tags": {
                                "title": "Tags",
                                "type": "array",
                                "description": "List of tags identifiers providing additional context or categorization.",
                                "items": {
                                  "type": "string"
                                },
                                "example": [
                                  "satp",
                                  "hyperledger"
                                ]
                              },
                              "priceUSD": {
                                "type": "string",
                                "description": "The current price of the token in USD."
                              },
                              "extensions": {
                                "type": "object",
                                "properties": {
                                  "bridgeInfo": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "object",
                                      "description": "Information about the bridge used for the token transfer.",
                                      "properties": {
                                        "tokenAddress": {
                                          "type": "string",
                                          "description": "The address of the token being transferred.",
                                          "example": "0x..."
                                        }
                                      }
                                    }
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "description": "Indicates whether the token is verified."
                                  }
                                }
                              }
                            }
                          },
                          "fromAmount": {
                            "type": "string",
                            "description": "The amount of 'fromToken' to be transferred, specified as a string to maintain precision.",
                            "example": "1000000000000000000",
                            "pattern": "^[1-9][0-9]*$"
                          },
                          "toToken": {
                            "type": "object",
                            "description": "Metadata detailing a supported token",
                            "required": [
                              "chainID",
                              "chainType",
                              "address",
                              "symbol",
                              "decimals"
                            ],
                            "properties": {
                              "chainID": {
                                "x-category": "satp-core",
                                "type": "string",
                                "description": "The network of the DLT being interacted with. TODO: implement network identification draft"
                              },
                              "chainType": {
                                "x-category": "satp-core",
                                "type": "string",
                                "enum": [
                                  "HyperledgerFabric",
                                  "HyperledgerBesu"
                                ],
                                "description": "Supported DLT protocols."
                              },
                              "address": {
                                "type": "string",
                                "description": "A blockchain address.",
                                "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the token."
                              },
                              "symbol": {
                                "type": "string",
                                "description": "The symbol of the token."
                              },
                              "decimals": {
                                "type": "integer",
                                "description": "How many decimals the token supports.",
                                "minimum": 1
                              },
                              "logoURI": {
                                "type": "string",
                                "description": "The logo of a token, chain, dex etc.",
                                "format": "uri"
                              },
                              "tags": {
                                "title": "Tags",
                                "type": "array",
                                "description": "List of tags identifiers providing additional context or categorization.",
                                "items": {
                                  "type": "string"
                                },
                                "example": [
                                  "satp",
                                  "hyperledger"
                                ]
                              },
                              "priceUSD": {
                                "type": "string",
                                "description": "The current price of the token in USD."
                              },
                              "extensions": {
                                "type": "object",
                                "properties": {
                                  "bridgeInfo": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "object",
                                      "description": "Information about the bridge used for the token transfer.",
                                      "properties": {
                                        "tokenAddress": {
                                          "type": "string",
                                          "description": "The address of the token being transferred.",
                                          "example": "0x..."
                                        }
                                      }
                                    }
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "description": "Indicates whether the token is verified."
                                  }
                                }
                              }
                            }
                          },
                          "slippage": {
                            "type": "number",
                            "format": "float",
                            "description": "The maximum acceptable difference between the expected price of the 'toToken' and the price at the time of the transfer.",
                            "example": 0.005
                          },
                          "fromAddress": {
                            "type": "string",
                            "description": "A blockchain address.",
                            "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
                          },
                          "toAddress": {
                            "type": "string",
                            "description": "A blockchain address.",
                            "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
                          }
                        }
                      },
                      "estimate": {
                        "type": "object",
                        "description": "Provides an estimation for a transaction, including costs, amounts, and execution duration.",
                        "properties": {
                          "approvalAddress": {
                            "type": "string",
                            "description": "A blockchain address.",
                            "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
                          },
                          "toAmountMin": {
                            "type": "string",
                            "description": "The amount in string format including all decimals.",
                            "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                            "example": "1000000000000000000"
                          },
                          "toAmount": {
                            "type": "string",
                            "description": "The amount in string format including all decimals.",
                            "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                            "example": "1000000000000000000"
                          },
                          "fromAmount": {
                            "type": "string",
                            "description": "The amount in string format including all decimals.",
                            "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                            "example": "1000000000000000000"
                          },
                          "feeCosts": {
                            "type": "array",
                            "description": "A collection of fee costs associated with the transaction.",
                            "items": {
                              "type": "object",
                              "description": "Details about a specific fee cost associated with the transaction.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the fee cost.",
                                  "example": "Network Fee"
                                },
                                "amount": {
                                  "type": "string",
                                  "description": "The amount in string format including all decimals.",
                                  "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                                  "example": "1000000000000000000"
                                },
                                "amountUSD": {
                                  "type": "string",
                                  "description": "The amount in string format including all decimals.",
                                  "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                                  "example": "1000000000000000000"
                                },
                                "token": {
                                  "type": "string",
                                  "description": "The symbol of a token",
                                  "example": "ETH"
                                },
                                "included": {
                                  "type": "boolean",
                                  "description": "Indicates if the fee is included in the transaction amount."
                                }
                              }
                            }
                          },
                          "gasCosts": {
                            "type": "array",
                            "description": "A collection of estimated gas costs for executing the transaction.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "description": "The type of the gas cost.",
                                  "example": "SEND"
                                },
                                "price": {
                                  "type": "string",
                                  "description": "The gas price, specified as a string to maintain precision.",
                                  "example": "19236858243"
                                },
                                "estimate": {
                                  "type": "string",
                                  "description": "The estimated gas required, specified as a string to maintain precision.",
                                  "example": "445393"
                                },
                                "limit": {
                                  "type": "string",
                                  "description": "The gas limit for the transaction, specified as a string to maintain precision.",
                                  "example": "579011",
                                  "pattern": "^[1-9][0-9]*$"
                                },
                                "amount": {
                                  "type": "string",
                                  "description": "The amount of gas required in the gas currency.",
                                  "example": "8567962003424499",
                                  "pattern": "^[1-9][0-9]*$"
                                },
                                "amountUSD": {
                                  "type": "string",
                                  "description": "The amount of gas required in USD.",
                                  "example": "16.05",
                                  "pattern": "^(0(\\.[0-9]+)?|[1-9][0-9]*(\\.[0-9]+)?)$"
                                },
                                "token": {
                                  "type": "object",
                                  "description": "Metadata detailing a supported token",
                                  "required": [
                                    "chainID",
                                    "chainType",
                                    "address",
                                    "symbol",
                                    "decimals"
                                  ],
                                  "properties": {
                                    "chainID": {
                                      "x-category": "satp-core",
                                      "type": "string",
                                      "description": "The network of the DLT being interacted with. TODO: implement network identification draft"
                                    },
                                    "chainType": {
                                      "x-category": "satp-core",
                                      "type": "string",
                                      "enum": [
                                        "HyperledgerFabric",
                                        "HyperledgerBesu"
                                      ],
                                      "description": "Supported DLT protocols."
                                    },
                                    "address": {
                                      "type": "string",
                                      "description": "A blockchain address.",
                                      "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the token."
                                    },
                                    "symbol": {
                                      "type": "string",
                                      "description": "The symbol of the token."
                                    },
                                    "decimals": {
                                      "type": "integer",
                                      "description": "How many decimals the token supports.",
                                      "minimum": 1
                                    },
                                    "logoURI": {
                                      "type": "string",
                                      "description": "The logo of a token, chain, dex etc.",
                                      "format": "uri"
                                    },
                                    "tags": {
                                      "title": "Tags",
                                      "type": "array",
                                      "description": "List of tags identifiers providing additional context or categorization.",
                                      "items": {
                                        "type": "string"
                                      },
                                      "example": [
                                        "satp",
                                        "hyperledger"
                                      ]
                                    },
                                    "priceUSD": {
                                      "type": "string",
                                      "description": "The current price of the token in USD."
                                    },
                                    "extensions": {
                                      "type": "object",
                                      "properties": {
                                        "bridgeInfo": {
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "object",
                                            "description": "Information about the bridge used for the token transfer.",
                                            "properties": {
                                              "tokenAddress": {
                                                "type": "string",
                                                "description": "The address of the token being transferred.",
                                                "example": "0x..."
                                              }
                                            }
                                          }
                                        },
                                        "verified": {
                                          "type": "boolean",
                                          "description": "Indicates whether the token is verified."
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "executionDuration": {
                            "type": "integer",
                            "description": "The estimated duration for the transaction execution in seconds.",
                            "example": 30
                          },
                          "fromAmountUSD": {
                            "type": "string",
                            "description": "The amount in string format including all decimals.",
                            "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                            "example": "1000000000000000000"
                          },
                          "toAmountUSD": {
                            "type": "string",
                            "description": "The amount in string format including all decimals.",
                            "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                            "example": "1000000000000000000"
                          },
                          "tool": {
                            "type": "string",
                            "description": "The tool or service used to generate this estimate.",
                            "example": "satp"
                          }
                        }
                      },
                      "toolDetails": {
                        "type": "object",
                        "description": "Describes integration or tool details such as bridges or exchanges involved in the transaction.",
                        "required": [
                          "key",
                          "name",
                          "logoURI"
                        ],
                        "properties": {
                          "key": {
                            "type": "string",
                            "description": "A unique identifier for the integration or tool.",
                            "example": "1inch"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the integration or tool.",
                            "example": "1inch Exchange"
                          },
                          "logoURI": {
                            "type": "string",
                            "format": "uri",
                            "description": "URL to the logo of the integration or tool.",
                            "example": "https://cdn.example.com/logos/1inch.png"
                          }
                        }
                      },
                      "integrationDetails": {
                        "type": "object",
                        "description": "Describes integration or tool details such as bridges or exchanges involved in the transaction.",
                        "required": [
                          "key",
                          "name",
                          "logoURI"
                        ],
                        "properties": {
                          "key": {
                            "type": "string",
                            "description": "A unique identifier for the integration or tool.",
                            "example": "1inch"
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the integration or tool.",
                            "example": "1inch Exchange"
                          },
                          "logoURI": {
                            "type": "string",
                            "format": "uri",
                            "description": "URL to the logo of the integration or tool.",
                            "example": "https://cdn.example.com/logos/1inch.png"
                          }
                        }
                      },
                      "includedStepIds": {
                        "type": "array",
                        "description": "IDs of further steps included within this step, allowing for nested actions without direct recursion.",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "insurance": {
                  "type": "object",
                  "properties": {
                    "state": {
                      "type": "string",
                      "description": "The state of insurance applicability for the transaction.",
                      "example": "NOT_INSURABLE",
                      "enum": [
                        "NOT_INSURABLE",
                        "INSURABLE",
                        "INSURED"
                      ]
                    },
                    "feeAmountUsd": {
                      "type": "string",
                      "description": "The fee amount for insurance, represented in USD.",
                      "example": "10.00",
                      "pattern": "^(0|[1-9]\\d*)(\\.\\d+)?$"
                    }
                  }
                },
                "tags": {
                  "title": "Tags",
                  "type": "array",
                  "description": "List of tags identifiers providing additional context or categorization.",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "satp",
                    "hyperledger"
                  ]
                }
              },
              "required": [
                "id",
                "gatewayID",
                "mode"
              ]
            }
          }
        }
      },
      "Route": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier of the route."
          },
          "gatewayID": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier for the gateway."
          },
          "mode": {
            "type": "string",
            "enum": [
              "data",
              "transfer"
            ],
            "description": "The mode of operation for this route - 'data' for arbitrary payload handling, 'transfer' for asset transfer."
          },
          "fromDLTNetworkID": {
            "type": "string",
            "description": "The ID of the DLT Network where the operation will originate."
          },
          "fromAmountUSD": {
            "type": "string",
            "format": "double",
            "description": "The amount of 'fromToken' to be transferred in USD, specified as a string to maintain precision."
          },
          "fromAmount": {
            "type": "string",
            "description": "The amount that should be sent including all decimals (e.g., 1000000 for 1 USDC (6 decimals)).",
            "pattern": "^[1-9][0-9]*$"
          },
          "fromToken": {
            "type": "object",
            "description": "Metadata detailing a supported token",
            "required": [
              "chainID",
              "chainType",
              "address",
              "symbol",
              "decimals"
            ],
            "properties": {
              "chainID": {
                "x-category": "satp-core",
                "type": "string",
                "description": "The network of the DLT being interacted with. TODO: implement network identification draft"
              },
              "chainType": {
                "x-category": "satp-core",
                "type": "string",
                "enum": [
                  "HyperledgerFabric",
                  "HyperledgerBesu"
                ],
                "description": "Supported DLT protocols."
              },
              "address": {
                "type": "string",
                "description": "A blockchain address.",
                "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
              },
              "name": {
                "type": "string",
                "description": "The name of the token."
              },
              "symbol": {
                "type": "string",
                "description": "The symbol of the token."
              },
              "decimals": {
                "type": "integer",
                "description": "How many decimals the token supports.",
                "minimum": 1
              },
              "logoURI": {
                "type": "string",
                "description": "The logo of a token, chain, dex etc.",
                "format": "uri"
              },
              "tags": {
                "title": "Tags",
                "type": "array",
                "description": "List of tags identifiers providing additional context or categorization.",
                "items": {
                  "type": "string"
                },
                "example": [
                  "satp",
                  "hyperledger"
                ]
              },
              "priceUSD": {
                "type": "string",
                "description": "The current price of the token in USD."
              },
              "extensions": {
                "type": "object",
                "properties": {
                  "bridgeInfo": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object",
                      "description": "Information about the bridge used for the token transfer.",
                      "properties": {
                        "tokenAddress": {
                          "type": "string",
                          "description": "The address of the token being transferred.",
                          "example": "0x..."
                        }
                      }
                    }
                  },
                  "verified": {
                    "type": "boolean",
                    "description": "Indicates whether the token is verified."
                  }
                }
              }
            }
          },
          "toDLTNetworkID": {
            "type": "string",
            "description": "The ID of the DLT Network where the operation will end."
          },
          "toAmountUSD": {
            "type": "string",
            "description": "The expected amount to be received in USD."
          },
          "toAmount": {
            "type": "string",
            "description": "The expected amount to be received including all decimals (e.g., 1000000 for 1 USDC (6 decimals))."
          },
          "toAmountMin": {
            "type": "string",
            "description": "The minimum expected amount to be received including all decimals (e.g., 1000000 for 1 USDC (6 decimals))."
          },
          "toToken": {
            "type": "object",
            "description": "Metadata detailing a supported token",
            "required": [
              "chainID",
              "chainType",
              "address",
              "symbol",
              "decimals"
            ],
            "properties": {
              "chainID": {
                "x-category": "satp-core",
                "type": "string",
                "description": "The network of the DLT being interacted with. TODO: implement network identification draft"
              },
              "chainType": {
                "x-category": "satp-core",
                "type": "string",
                "enum": [
                  "HyperledgerFabric",
                  "HyperledgerBesu"
                ],
                "description": "Supported DLT protocols."
              },
              "address": {
                "type": "string",
                "description": "A blockchain address.",
                "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
              },
              "name": {
                "type": "string",
                "description": "The name of the token."
              },
              "symbol": {
                "type": "string",
                "description": "The symbol of the token."
              },
              "decimals": {
                "type": "integer",
                "description": "How many decimals the token supports.",
                "minimum": 1
              },
              "logoURI": {
                "type": "string",
                "description": "The logo of a token, chain, dex etc.",
                "format": "uri"
              },
              "tags": {
                "title": "Tags",
                "type": "array",
                "description": "List of tags identifiers providing additional context or categorization.",
                "items": {
                  "type": "string"
                },
                "example": [
                  "satp",
                  "hyperledger"
                ]
              },
              "priceUSD": {
                "type": "string",
                "description": "The current price of the token in USD."
              },
              "extensions": {
                "type": "object",
                "properties": {
                  "bridgeInfo": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object",
                      "description": "Information about the bridge used for the token transfer.",
                      "properties": {
                        "tokenAddress": {
                          "type": "string",
                          "description": "The address of the token being transferred.",
                          "example": "0x..."
                        }
                      }
                    }
                  },
                  "verified": {
                    "type": "boolean",
                    "description": "Indicates whether the token is verified."
                  }
                }
              }
            }
          },
          "gasCostUSD": {
            "type": "string",
            "description": "The expected gas cost in USD."
          },
          "containsSwitchChain": {
            "type": "boolean",
            "description": "Whether chain switching is enabled or not."
          },
          "steps": {
            "type": "array",
            "description": "List of steps involved in this route, adjusted for mode.",
            "items": {
              "type": "object",
              "description": "Details a single step within a route including actions and estimates.",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Id of the step"
                },
                "type": {
                  "type": "string",
                  "description": "Type of the step, typically describing the action, e.g., 'swap'."
                },
                "tool": {
                  "type": "string",
                  "description": "Tool used in the step, e.g., 'stargate'."
                },
                "action": {
                  "type": "object",
                  "properties": {
                    "fromToken": {
                      "type": "object",
                      "description": "Metadata detailing a supported token",
                      "required": [
                        "chainID",
                        "chainType",
                        "address",
                        "symbol",
                        "decimals"
                      ],
                      "properties": {
                        "chainID": {
                          "x-category": "satp-core",
                          "type": "string",
                          "description": "The network of the DLT being interacted with. TODO: implement network identification draft"
                        },
                        "chainType": {
                          "x-category": "satp-core",
                          "type": "string",
                          "enum": [
                            "HyperledgerFabric",
                            "HyperledgerBesu"
                          ],
                          "description": "Supported DLT protocols."
                        },
                        "address": {
                          "type": "string",
                          "description": "A blockchain address.",
                          "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the token."
                        },
                        "symbol": {
                          "type": "string",
                          "description": "The symbol of the token."
                        },
                        "decimals": {
                          "type": "integer",
                          "description": "How many decimals the token supports.",
                          "minimum": 1
                        },
                        "logoURI": {
                          "type": "string",
                          "description": "The logo of a token, chain, dex etc.",
                          "format": "uri"
                        },
                        "tags": {
                          "title": "Tags",
                          "type": "array",
                          "description": "List of tags identifiers providing additional context or categorization.",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "satp",
                            "hyperledger"
                          ]
                        },
                        "priceUSD": {
                          "type": "string",
                          "description": "The current price of the token in USD."
                        },
                        "extensions": {
                          "type": "object",
                          "properties": {
                            "bridgeInfo": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "object",
                                "description": "Information about the bridge used for the token transfer.",
                                "properties": {
                                  "tokenAddress": {
                                    "type": "string",
                                    "description": "The address of the token being transferred.",
                                    "example": "0x..."
                                  }
                                }
                              }
                            },
                            "verified": {
                              "type": "boolean",
                              "description": "Indicates whether the token is verified."
                            }
                          }
                        }
                      }
                    },
                    "fromAmount": {
                      "type": "string",
                      "description": "The amount of 'fromToken' to be transferred, specified as a string to maintain precision.",
                      "example": "1000000000000000000",
                      "pattern": "^[1-9][0-9]*$"
                    },
                    "toToken": {
                      "type": "object",
                      "description": "Metadata detailing a supported token",
                      "required": [
                        "chainID",
                        "chainType",
                        "address",
                        "symbol",
                        "decimals"
                      ],
                      "properties": {
                        "chainID": {
                          "x-category": "satp-core",
                          "type": "string",
                          "description": "The network of the DLT being interacted with. TODO: implement network identification draft"
                        },
                        "chainType": {
                          "x-category": "satp-core",
                          "type": "string",
                          "enum": [
                            "HyperledgerFabric",
                            "HyperledgerBesu"
                          ],
                          "description": "Supported DLT protocols."
                        },
                        "address": {
                          "type": "string",
                          "description": "A blockchain address.",
                          "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the token."
                        },
                        "symbol": {
                          "type": "string",
                          "description": "The symbol of the token."
                        },
                        "decimals": {
                          "type": "integer",
                          "description": "How many decimals the token supports.",
                          "minimum": 1
                        },
                        "logoURI": {
                          "type": "string",
                          "description": "The logo of a token, chain, dex etc.",
                          "format": "uri"
                        },
                        "tags": {
                          "title": "Tags",
                          "type": "array",
                          "description": "List of tags identifiers providing additional context or categorization.",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "satp",
                            "hyperledger"
                          ]
                        },
                        "priceUSD": {
                          "type": "string",
                          "description": "The current price of the token in USD."
                        },
                        "extensions": {
                          "type": "object",
                          "properties": {
                            "bridgeInfo": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "object",
                                "description": "Information about the bridge used for the token transfer.",
                                "properties": {
                                  "tokenAddress": {
                                    "type": "string",
                                    "description": "The address of the token being transferred.",
                                    "example": "0x..."
                                  }
                                }
                              }
                            },
                            "verified": {
                              "type": "boolean",
                              "description": "Indicates whether the token is verified."
                            }
                          }
                        }
                      }
                    },
                    "slippage": {
                      "type": "number",
                      "format": "float",
                      "description": "The maximum acceptable difference between the expected price of the 'toToken' and the price at the time of the transfer.",
                      "example": 0.005
                    },
                    "fromAddress": {
                      "type": "string",
                      "description": "A blockchain address.",
                      "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
                    },
                    "toAddress": {
                      "type": "string",
                      "description": "A blockchain address.",
                      "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
                    }
                  }
                },
                "estimate": {
                  "type": "object",
                  "description": "Provides an estimation for a transaction, including costs, amounts, and execution duration.",
                  "properties": {
                    "approvalAddress": {
                      "type": "string",
                      "description": "A blockchain address.",
                      "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
                    },
                    "toAmountMin": {
                      "type": "string",
                      "description": "The amount in string format including all decimals.",
                      "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                      "example": "1000000000000000000"
                    },
                    "toAmount": {
                      "type": "string",
                      "description": "The amount in string format including all decimals.",
                      "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                      "example": "1000000000000000000"
                    },
                    "fromAmount": {
                      "type": "string",
                      "description": "The amount in string format including all decimals.",
                      "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                      "example": "1000000000000000000"
                    },
                    "feeCosts": {
                      "type": "array",
                      "description": "A collection of fee costs associated with the transaction.",
                      "items": {
                        "type": "object",
                        "description": "Details about a specific fee cost associated with the transaction.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the fee cost.",
                            "example": "Network Fee"
                          },
                          "amount": {
                            "type": "string",
                            "description": "The amount in string format including all decimals.",
                            "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                            "example": "1000000000000000000"
                          },
                          "amountUSD": {
                            "type": "string",
                            "description": "The amount in string format including all decimals.",
                            "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                            "example": "1000000000000000000"
                          },
                          "token": {
                            "type": "string",
                            "description": "The symbol of a token",
                            "example": "ETH"
                          },
                          "included": {
                            "type": "boolean",
                            "description": "Indicates if the fee is included in the transaction amount."
                          }
                        }
                      }
                    },
                    "gasCosts": {
                      "type": "array",
                      "description": "A collection of estimated gas costs for executing the transaction.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The type of the gas cost.",
                            "example": "SEND"
                          },
                          "price": {
                            "type": "string",
                            "description": "The gas price, specified as a string to maintain precision.",
                            "example": "19236858243"
                          },
                          "estimate": {
                            "type": "string",
                            "description": "The estimated gas required, specified as a string to maintain precision.",
                            "example": "445393"
                          },
                          "limit": {
                            "type": "string",
                            "description": "The gas limit for the transaction, specified as a string to maintain precision.",
                            "example": "579011",
                            "pattern": "^[1-9][0-9]*$"
                          },
                          "amount": {
                            "type": "string",
                            "description": "The amount of gas required in the gas currency.",
                            "example": "8567962003424499",
                            "pattern": "^[1-9][0-9]*$"
                          },
                          "amountUSD": {
                            "type": "string",
                            "description": "The amount of gas required in USD.",
                            "example": "16.05",
                            "pattern": "^(0(\\.[0-9]+)?|[1-9][0-9]*(\\.[0-9]+)?)$"
                          },
                          "token": {
                            "type": "object",
                            "description": "Metadata detailing a supported token",
                            "required": [
                              "chainID",
                              "chainType",
                              "address",
                              "symbol",
                              "decimals"
                            ],
                            "properties": {
                              "chainID": {
                                "x-category": "satp-core",
                                "type": "string",
                                "description": "The network of the DLT being interacted with. TODO: implement network identification draft"
                              },
                              "chainType": {
                                "x-category": "satp-core",
                                "type": "string",
                                "enum": [
                                  "HyperledgerFabric",
                                  "HyperledgerBesu"
                                ],
                                "description": "Supported DLT protocols."
                              },
                              "address": {
                                "type": "string",
                                "description": "A blockchain address.",
                                "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the token."
                              },
                              "symbol": {
                                "type": "string",
                                "description": "The symbol of the token."
                              },
                              "decimals": {
                                "type": "integer",
                                "description": "How many decimals the token supports.",
                                "minimum": 1
                              },
                              "logoURI": {
                                "type": "string",
                                "description": "The logo of a token, chain, dex etc.",
                                "format": "uri"
                              },
                              "tags": {
                                "title": "Tags",
                                "type": "array",
                                "description": "List of tags identifiers providing additional context or categorization.",
                                "items": {
                                  "type": "string"
                                },
                                "example": [
                                  "satp",
                                  "hyperledger"
                                ]
                              },
                              "priceUSD": {
                                "type": "string",
                                "description": "The current price of the token in USD."
                              },
                              "extensions": {
                                "type": "object",
                                "properties": {
                                  "bridgeInfo": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "object",
                                      "description": "Information about the bridge used for the token transfer.",
                                      "properties": {
                                        "tokenAddress": {
                                          "type": "string",
                                          "description": "The address of the token being transferred.",
                                          "example": "0x..."
                                        }
                                      }
                                    }
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "description": "Indicates whether the token is verified."
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "executionDuration": {
                      "type": "integer",
                      "description": "The estimated duration for the transaction execution in seconds.",
                      "example": 30
                    },
                    "fromAmountUSD": {
                      "type": "string",
                      "description": "The amount in string format including all decimals.",
                      "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                      "example": "1000000000000000000"
                    },
                    "toAmountUSD": {
                      "type": "string",
                      "description": "The amount in string format including all decimals.",
                      "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                      "example": "1000000000000000000"
                    },
                    "tool": {
                      "type": "string",
                      "description": "The tool or service used to generate this estimate.",
                      "example": "satp"
                    }
                  }
                },
                "toolDetails": {
                  "type": "object",
                  "description": "Describes integration or tool details such as bridges or exchanges involved in the transaction.",
                  "required": [
                    "key",
                    "name",
                    "logoURI"
                  ],
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "A unique identifier for the integration or tool.",
                      "example": "1inch"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the integration or tool.",
                      "example": "1inch Exchange"
                    },
                    "logoURI": {
                      "type": "string",
                      "format": "uri",
                      "description": "URL to the logo of the integration or tool.",
                      "example": "https://cdn.example.com/logos/1inch.png"
                    }
                  }
                },
                "integrationDetails": {
                  "type": "object",
                  "description": "Describes integration or tool details such as bridges or exchanges involved in the transaction.",
                  "required": [
                    "key",
                    "name",
                    "logoURI"
                  ],
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "A unique identifier for the integration or tool.",
                      "example": "1inch"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the integration or tool.",
                      "example": "1inch Exchange"
                    },
                    "logoURI": {
                      "type": "string",
                      "format": "uri",
                      "description": "URL to the logo of the integration or tool.",
                      "example": "https://cdn.example.com/logos/1inch.png"
                    }
                  }
                },
                "includedStepIds": {
                  "type": "array",
                  "description": "IDs of further steps included within this step, allowing for nested actions without direct recursion.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "insurance": {
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "description": "The state of insurance applicability for the transaction.",
                "example": "NOT_INSURABLE",
                "enum": [
                  "NOT_INSURABLE",
                  "INSURABLE",
                  "INSURED"
                ]
              },
              "feeAmountUsd": {
                "type": "string",
                "description": "The fee amount for insurance, represented in USD.",
                "example": "10.00",
                "pattern": "^(0|[1-9]\\d*)(\\.\\d+)?$"
              }
            }
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "description": "List of tags identifiers providing additional context or categorization.",
            "items": {
              "type": "string"
            },
            "example": [
              "satp",
              "hyperledger"
            ]
          }
        },
        "required": [
          "id",
          "gatewayID",
          "mode"
        ]
      },
      "ContinueRequest": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier for the transaction session to be continued."
          },
          "contextId": {
            "type": "string",
            "format": "uuid",
            "description": "A unique identifier for the transaction context."
          }
        },
        "required": [
          "sessionId",
          "contextId"
        ],
        "description": "Schema for a request to continue a paused transaction session."
      },
      "ContinueResponse": {
        "type": "object",
        "description": "Response schema for a continue request, returning the status of the SATP session.",
        "properties": {
          "statusResponse": {
            "description": "Provides the current status of the SATP session including detailed information on the progress, such as substatus, stage, and step, along with the session start time and chain information.",
            "type": "object",
            "x-category": "response",
            "required": [
              "status",
              "substatus",
              "stage",
              "step",
              "startTime",
              "originNetwork",
              "destinationNetwork"
            ],
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "NOT_FOUND",
                  "INVALID",
                  "PENDING",
                  "DONE",
                  "FAILED"
                ],
                "example": "DONE"
              },
              "substatus": {
                "type": "string",
                "enum": [
                  "WAIT_SOURCE_CONFIRMATIONS",
                  "WAIT_DESTINATION_TRANSACTION",
                  "BRIDGE_NOT_AVAILABLE",
                  "CHAIN_NOT_AVAILABLE",
                  "REFUND_IN_PROGRESS",
                  "UNKNOWN_ERROR",
                  "COMPLETED",
                  "PARTIAL",
                  "REFUNDED",
                  "NOT_PROCESSABLE_REFUND_NEEDED",
                  "RECOVERING",
                  "RECOVERED",
                  "RECOVERY_FAILED",
                  "REJECTED"
                ],
                "example": "COMPLETED"
              },
              "stage": {
                "type": "string",
                "enum": [
                  "STAGE_0",
                  "STAGE_1",
                  "STAGE_2",
                  "STAGE_3"
                ],
                "example": "STAGE_3"
              },
              "step": {
                "type": "string",
                "enum": [
                  "transfer-initialization-claims",
                  "conveyance-of-network-capabilities-and-parameters",
                  "transfer-proposal-message",
                  "transfer-proposal-receipt-message",
                  "transfer-proposal-reject-and-conditional-reject-message",
                  "transfer-commence-message",
                  "commence-response-message",
                  "lock-assertion-message",
                  "lock-assertion-receipt-message",
                  "commit-preparation-message",
                  "commit-ready-message",
                  "commit-final-assertion-message",
                  "commit-final-acknowledgement-receipt-message",
                  "transfer-complete-message",
                  "rollback-transfer-initialization-claims",
                  "rollback-conveyance-of-network-capabilities-and-parameters",
                  "rollback-transfer-proposal-message",
                  "rollback-transfer-proposal-receipt-message",
                  "rollback-transfer-proposal-reject-and-conditional-reject-message",
                  "rollback-transfer-commence-message",
                  "rollback-commence-response-message",
                  "rollback-lock-assertion-message",
                  "rollback-lock-assertion-receipt-message",
                  "rollback-commit-preparation-message",
                  "rollback-commit-ready-message",
                  "rollback-commit-final-assertion-message",
                  "rollback-commit-final-acknowledgement-receipt-message",
                  "rollback-transfer-complete-message"
                ],
                "example": "transfer-complete-message"
              },
              "startTime": {
                "type": "string",
                "format": "date-time",
                "example": "2023-01-01T00:00:00Z"
              },
              "originNetwork": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The unique identifier of the origin network.",
                    "example": "network1"
                  },
                  "dltProtocol": {
                    "example": "HyperledgerFabric"
                  },
                  "dltSubnetworkID": {
                    "example": "subnetwork1"
                  }
                }
              },
              "destinationNetwork": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The unique identifier of the origin network.",
                    "example": "network2"
                  },
                  "dltProtocol": {
                    "example": "HyperledgerBesu"
                  },
                  "dltSubnetworkID": {
                    "example": "subnetwork2"
                  }
                }
              }
            }
          }
        },
        "required": [
          "statusResponse"
        ]
      },
      "IntegrationsResponse": {
        "description": "List of chains or systems and related metadata",
        "type": "object",
        "x-category": "response",
        "properties": {
          "integrations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "A unique identifier for the blockchain network/system."
                },
                "name": {
                  "type": "string",
                  "description": "The name of the blockchain network/system."
                },
                "type": {
                  "type": "string",
                  "description": "The type of network (e.g., 'evm', 'fabric', 'SQL Database')."
                },
                "environment": {
                  "type": "string",
                  "description": "The specific network name (e.g., 'mainnet', 'testnet')."
                }
              },
              "required": [
                "id",
                "name",
                "type"
              ]
            }
          }
        },
        "required": [
          "integrations"
        ]
      },
      "Integration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the blockchain network/system."
          },
          "name": {
            "type": "string",
            "description": "The name of the blockchain network/system."
          },
          "type": {
            "type": "string",
            "description": "The type of network (e.g., 'evm', 'fabric', 'SQL Database')."
          },
          "environment": {
            "type": "string",
            "description": "The specific network name (e.g., 'mainnet', 'testnet')."
          }
        },
        "required": [
          "id",
          "name",
          "type"
        ]
      },
      "Token": {
        "type": "object",
        "description": "Metadata detailing a supported token",
        "required": [
          "chainID",
          "chainType",
          "address",
          "symbol",
          "decimals"
        ],
        "properties": {
          "chainID": {
            "x-category": "satp-core",
            "type": "string",
            "description": "The network of the DLT being interacted with. TODO: implement network identification draft"
          },
          "chainType": {
            "x-category": "satp-core",
            "type": "string",
            "enum": [
              "HyperledgerFabric",
              "HyperledgerBesu"
            ],
            "description": "Supported DLT protocols."
          },
          "address": {
            "type": "string",
            "description": "A blockchain address.",
            "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
          },
          "name": {
            "type": "string",
            "description": "The name of the token."
          },
          "symbol": {
            "type": "string",
            "description": "The symbol of the token."
          },
          "decimals": {
            "type": "integer",
            "description": "How many decimals the token supports.",
            "minimum": 1
          },
          "logoURI": {
            "type": "string",
            "description": "The logo of a token, chain, dex etc.",
            "format": "uri"
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "description": "List of tags identifiers providing additional context or categorization.",
            "items": {
              "type": "string"
            },
            "example": [
              "satp",
              "hyperledger"
            ]
          },
          "priceUSD": {
            "type": "string",
            "description": "The current price of the token in USD."
          },
          "extensions": {
            "type": "object",
            "properties": {
              "bridgeInfo": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "description": "Information about the bridge used for the token transfer.",
                  "properties": {
                    "tokenAddress": {
                      "type": "string",
                      "description": "The address of the token being transferred.",
                      "example": "0x..."
                    }
                  }
                }
              },
              "verified": {
                "type": "boolean",
                "description": "Indicates whether the token is verified."
              }
            }
          }
        }
      },
      "Tags": {
        "title": "Tags",
        "type": "array",
        "description": "List of tags identifiers providing additional context or categorization.",
        "items": {
          "type": "string"
        },
        "example": [
          "satp",
          "hyperledger"
        ]
      },
      "HealthCheckResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "AVAILABLE",
              "UNAVAILABLE"
            ]
          }
        }
      },
      "BridgeInfo": {
        "type": "object",
        "description": "Information about the bridge used for the token transfer.",
        "properties": {
          "tokenAddress": {
            "type": "string",
            "description": "The address of the token being transferred.",
            "example": "0x..."
          }
        }
      },
      "IncludedStep": {
        "type": "object",
        "description": "Details a single step within a route including actions and estimates.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the step"
          },
          "type": {
            "type": "string",
            "description": "Type of the step, typically describing the action, e.g., 'swap'."
          },
          "tool": {
            "type": "string",
            "description": "Tool used in the step, e.g., 'stargate'."
          },
          "action": {
            "type": "object",
            "properties": {
              "fromToken": {
                "type": "object",
                "description": "Metadata detailing a supported token",
                "required": [
                  "chainID",
                  "chainType",
                  "address",
                  "symbol",
                  "decimals"
                ],
                "properties": {
                  "chainID": {
                    "x-category": "satp-core",
                    "type": "string",
                    "description": "The network of the DLT being interacted with. TODO: implement network identification draft"
                  },
                  "chainType": {
                    "x-category": "satp-core",
                    "type": "string",
                    "enum": [
                      "HyperledgerFabric",
                      "HyperledgerBesu"
                    ],
                    "description": "Supported DLT protocols."
                  },
                  "address": {
                    "type": "string",
                    "description": "A blockchain address.",
                    "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the token."
                  },
                  "symbol": {
                    "type": "string",
                    "description": "The symbol of the token."
                  },
                  "decimals": {
                    "type": "integer",
                    "description": "How many decimals the token supports.",
                    "minimum": 1
                  },
                  "logoURI": {
                    "type": "string",
                    "description": "The logo of a token, chain, dex etc.",
                    "format": "uri"
                  },
                  "tags": {
                    "title": "Tags",
                    "type": "array",
                    "description": "List of tags identifiers providing additional context or categorization.",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "satp",
                      "hyperledger"
                    ]
                  },
                  "priceUSD": {
                    "type": "string",
                    "description": "The current price of the token in USD."
                  },
                  "extensions": {
                    "type": "object",
                    "properties": {
                      "bridgeInfo": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "description": "Information about the bridge used for the token transfer.",
                          "properties": {
                            "tokenAddress": {
                              "type": "string",
                              "description": "The address of the token being transferred.",
                              "example": "0x..."
                            }
                          }
                        }
                      },
                      "verified": {
                        "type": "boolean",
                        "description": "Indicates whether the token is verified."
                      }
                    }
                  }
                }
              },
              "fromAmount": {
                "type": "string",
                "description": "The amount of 'fromToken' to be transferred, specified as a string to maintain precision.",
                "example": "1000000000000000000",
                "pattern": "^[1-9][0-9]*$"
              },
              "toToken": {
                "type": "object",
                "description": "Metadata detailing a supported token",
                "required": [
                  "chainID",
                  "chainType",
                  "address",
                  "symbol",
                  "decimals"
                ],
                "properties": {
                  "chainID": {
                    "x-category": "satp-core",
                    "type": "string",
                    "description": "The network of the DLT being interacted with. TODO: implement network identification draft"
                  },
                  "chainType": {
                    "x-category": "satp-core",
                    "type": "string",
                    "enum": [
                      "HyperledgerFabric",
                      "HyperledgerBesu"
                    ],
                    "description": "Supported DLT protocols."
                  },
                  "address": {
                    "type": "string",
                    "description": "A blockchain address.",
                    "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the token."
                  },
                  "symbol": {
                    "type": "string",
                    "description": "The symbol of the token."
                  },
                  "decimals": {
                    "type": "integer",
                    "description": "How many decimals the token supports.",
                    "minimum": 1
                  },
                  "logoURI": {
                    "type": "string",
                    "description": "The logo of a token, chain, dex etc.",
                    "format": "uri"
                  },
                  "tags": {
                    "title": "Tags",
                    "type": "array",
                    "description": "List of tags identifiers providing additional context or categorization.",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "satp",
                      "hyperledger"
                    ]
                  },
                  "priceUSD": {
                    "type": "string",
                    "description": "The current price of the token in USD."
                  },
                  "extensions": {
                    "type": "object",
                    "properties": {
                      "bridgeInfo": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "object",
                          "description": "Information about the bridge used for the token transfer.",
                          "properties": {
                            "tokenAddress": {
                              "type": "string",
                              "description": "The address of the token being transferred.",
                              "example": "0x..."
                            }
                          }
                        }
                      },
                      "verified": {
                        "type": "boolean",
                        "description": "Indicates whether the token is verified."
                      }
                    }
                  }
                }
              },
              "slippage": {
                "type": "number",
                "format": "float",
                "description": "The maximum acceptable difference between the expected price of the 'toToken' and the price at the time of the transfer.",
                "example": 0.005
              },
              "fromAddress": {
                "type": "string",
                "description": "A blockchain address.",
                "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
              },
              "toAddress": {
                "type": "string",
                "description": "A blockchain address.",
                "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
              }
            }
          },
          "estimate": {
            "type": "object",
            "description": "Provides an estimation for a transaction, including costs, amounts, and execution duration.",
            "properties": {
              "approvalAddress": {
                "type": "string",
                "description": "A blockchain address.",
                "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
              },
              "toAmountMin": {
                "type": "string",
                "description": "The amount in string format including all decimals.",
                "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                "example": "1000000000000000000"
              },
              "toAmount": {
                "type": "string",
                "description": "The amount in string format including all decimals.",
                "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                "example": "1000000000000000000"
              },
              "fromAmount": {
                "type": "string",
                "description": "The amount in string format including all decimals.",
                "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                "example": "1000000000000000000"
              },
              "feeCosts": {
                "type": "array",
                "description": "A collection of fee costs associated with the transaction.",
                "items": {
                  "type": "object",
                  "description": "Details about a specific fee cost associated with the transaction.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the fee cost.",
                      "example": "Network Fee"
                    },
                    "amount": {
                      "type": "string",
                      "description": "The amount in string format including all decimals.",
                      "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                      "example": "1000000000000000000"
                    },
                    "amountUSD": {
                      "type": "string",
                      "description": "The amount in string format including all decimals.",
                      "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                      "example": "1000000000000000000"
                    },
                    "token": {
                      "type": "string",
                      "description": "The symbol of a token",
                      "example": "ETH"
                    },
                    "included": {
                      "type": "boolean",
                      "description": "Indicates if the fee is included in the transaction amount."
                    }
                  }
                }
              },
              "gasCosts": {
                "type": "array",
                "description": "A collection of estimated gas costs for executing the transaction.",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The type of the gas cost.",
                      "example": "SEND"
                    },
                    "price": {
                      "type": "string",
                      "description": "The gas price, specified as a string to maintain precision.",
                      "example": "19236858243"
                    },
                    "estimate": {
                      "type": "string",
                      "description": "The estimated gas required, specified as a string to maintain precision.",
                      "example": "445393"
                    },
                    "limit": {
                      "type": "string",
                      "description": "The gas limit for the transaction, specified as a string to maintain precision.",
                      "example": "579011",
                      "pattern": "^[1-9][0-9]*$"
                    },
                    "amount": {
                      "type": "string",
                      "description": "The amount of gas required in the gas currency.",
                      "example": "8567962003424499",
                      "pattern": "^[1-9][0-9]*$"
                    },
                    "amountUSD": {
                      "type": "string",
                      "description": "The amount of gas required in USD.",
                      "example": "16.05",
                      "pattern": "^(0(\\.[0-9]+)?|[1-9][0-9]*(\\.[0-9]+)?)$"
                    },
                    "token": {
                      "type": "object",
                      "description": "Metadata detailing a supported token",
                      "required": [
                        "chainID",
                        "chainType",
                        "address",
                        "symbol",
                        "decimals"
                      ],
                      "properties": {
                        "chainID": {
                          "x-category": "satp-core",
                          "type": "string",
                          "description": "The network of the DLT being interacted with. TODO: implement network identification draft"
                        },
                        "chainType": {
                          "x-category": "satp-core",
                          "type": "string",
                          "enum": [
                            "HyperledgerFabric",
                            "HyperledgerBesu"
                          ],
                          "description": "Supported DLT protocols."
                        },
                        "address": {
                          "type": "string",
                          "description": "A blockchain address.",
                          "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
                        },
                        "name": {
                          "type": "string",
                          "description": "The name of the token."
                        },
                        "symbol": {
                          "type": "string",
                          "description": "The symbol of the token."
                        },
                        "decimals": {
                          "type": "integer",
                          "description": "How many decimals the token supports.",
                          "minimum": 1
                        },
                        "logoURI": {
                          "type": "string",
                          "description": "The logo of a token, chain, dex etc.",
                          "format": "uri"
                        },
                        "tags": {
                          "title": "Tags",
                          "type": "array",
                          "description": "List of tags identifiers providing additional context or categorization.",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "satp",
                            "hyperledger"
                          ]
                        },
                        "priceUSD": {
                          "type": "string",
                          "description": "The current price of the token in USD."
                        },
                        "extensions": {
                          "type": "object",
                          "properties": {
                            "bridgeInfo": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "object",
                                "description": "Information about the bridge used for the token transfer.",
                                "properties": {
                                  "tokenAddress": {
                                    "type": "string",
                                    "description": "The address of the token being transferred.",
                                    "example": "0x..."
                                  }
                                }
                              }
                            },
                            "verified": {
                              "type": "boolean",
                              "description": "Indicates whether the token is verified."
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "executionDuration": {
                "type": "integer",
                "description": "The estimated duration for the transaction execution in seconds.",
                "example": 30
              },
              "fromAmountUSD": {
                "type": "string",
                "description": "The amount in string format including all decimals.",
                "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                "example": "1000000000000000000"
              },
              "toAmountUSD": {
                "type": "string",
                "description": "The amount in string format including all decimals.",
                "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                "example": "1000000000000000000"
              },
              "tool": {
                "type": "string",
                "description": "The tool or service used to generate this estimate.",
                "example": "satp"
              }
            }
          },
          "toolDetails": {
            "type": "object",
            "description": "Describes integration or tool details such as bridges or exchanges involved in the transaction.",
            "required": [
              "key",
              "name",
              "logoURI"
            ],
            "properties": {
              "key": {
                "type": "string",
                "description": "A unique identifier for the integration or tool.",
                "example": "1inch"
              },
              "name": {
                "type": "string",
                "description": "The name of the integration or tool.",
                "example": "1inch Exchange"
              },
              "logoURI": {
                "type": "string",
                "format": "uri",
                "description": "URL to the logo of the integration or tool.",
                "example": "https://cdn.example.com/logos/1inch.png"
              }
            }
          },
          "integrationDetails": {
            "type": "object",
            "description": "Describes integration or tool details such as bridges or exchanges involved in the transaction.",
            "required": [
              "key",
              "name",
              "logoURI"
            ],
            "properties": {
              "key": {
                "type": "string",
                "description": "A unique identifier for the integration or tool.",
                "example": "1inch"
              },
              "name": {
                "type": "string",
                "description": "The name of the integration or tool.",
                "example": "1inch Exchange"
              },
              "logoURI": {
                "type": "string",
                "format": "uri",
                "description": "URL to the logo of the integration or tool.",
                "example": "https://cdn.example.com/logos/1inch.png"
              }
            }
          },
          "includedStepIds": {
            "type": "array",
            "description": "IDs of further steps included within this step, allowing for nested actions without direct recursion.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Insurance": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "The state of insurance applicability for the transaction.",
            "example": "NOT_INSURABLE",
            "enum": [
              "NOT_INSURABLE",
              "INSURABLE",
              "INSURED"
            ]
          },
          "feeAmountUsd": {
            "type": "string",
            "description": "The fee amount for insurance, represented in USD.",
            "example": "10.00",
            "pattern": "^(0|[1-9]\\d*)(\\.\\d+)?$"
          }
        }
      },
      "Action": {
        "type": "object",
        "properties": {
          "fromToken": {
            "type": "object",
            "description": "Metadata detailing a supported token",
            "required": [
              "chainID",
              "chainType",
              "address",
              "symbol",
              "decimals"
            ],
            "properties": {
              "chainID": {
                "x-category": "satp-core",
                "type": "string",
                "description": "The network of the DLT being interacted with. TODO: implement network identification draft"
              },
              "chainType": {
                "x-category": "satp-core",
                "type": "string",
                "enum": [
                  "HyperledgerFabric",
                  "HyperledgerBesu"
                ],
                "description": "Supported DLT protocols."
              },
              "address": {
                "type": "string",
                "description": "A blockchain address.",
                "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
              },
              "name": {
                "type": "string",
                "description": "The name of the token."
              },
              "symbol": {
                "type": "string",
                "description": "The symbol of the token."
              },
              "decimals": {
                "type": "integer",
                "description": "How many decimals the token supports.",
                "minimum": 1
              },
              "logoURI": {
                "type": "string",
                "description": "The logo of a token, chain, dex etc.",
                "format": "uri"
              },
              "tags": {
                "title": "Tags",
                "type": "array",
                "description": "List of tags identifiers providing additional context or categorization.",
                "items": {
                  "type": "string"
                },
                "example": [
                  "satp",
                  "hyperledger"
                ]
              },
              "priceUSD": {
                "type": "string",
                "description": "The current price of the token in USD."
              },
              "extensions": {
                "type": "object",
                "properties": {
                  "bridgeInfo": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object",
                      "description": "Information about the bridge used for the token transfer.",
                      "properties": {
                        "tokenAddress": {
                          "type": "string",
                          "description": "The address of the token being transferred.",
                          "example": "0x..."
                        }
                      }
                    }
                  },
                  "verified": {
                    "type": "boolean",
                    "description": "Indicates whether the token is verified."
                  }
                }
              }
            }
          },
          "fromAmount": {
            "type": "string",
            "description": "The amount of 'fromToken' to be transferred, specified as a string to maintain precision.",
            "example": "1000000000000000000",
            "pattern": "^[1-9][0-9]*$"
          },
          "toToken": {
            "type": "object",
            "description": "Metadata detailing a supported token",
            "required": [
              "chainID",
              "chainType",
              "address",
              "symbol",
              "decimals"
            ],
            "properties": {
              "chainID": {
                "x-category": "satp-core",
                "type": "string",
                "description": "The network of the DLT being interacted with. TODO: implement network identification draft"
              },
              "chainType": {
                "x-category": "satp-core",
                "type": "string",
                "enum": [
                  "HyperledgerFabric",
                  "HyperledgerBesu"
                ],
                "description": "Supported DLT protocols."
              },
              "address": {
                "type": "string",
                "description": "A blockchain address.",
                "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
              },
              "name": {
                "type": "string",
                "description": "The name of the token."
              },
              "symbol": {
                "type": "string",
                "description": "The symbol of the token."
              },
              "decimals": {
                "type": "integer",
                "description": "How many decimals the token supports.",
                "minimum": 1
              },
              "logoURI": {
                "type": "string",
                "description": "The logo of a token, chain, dex etc.",
                "format": "uri"
              },
              "tags": {
                "title": "Tags",
                "type": "array",
                "description": "List of tags identifiers providing additional context or categorization.",
                "items": {
                  "type": "string"
                },
                "example": [
                  "satp",
                  "hyperledger"
                ]
              },
              "priceUSD": {
                "type": "string",
                "description": "The current price of the token in USD."
              },
              "extensions": {
                "type": "object",
                "properties": {
                  "bridgeInfo": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object",
                      "description": "Information about the bridge used for the token transfer.",
                      "properties": {
                        "tokenAddress": {
                          "type": "string",
                          "description": "The address of the token being transferred.",
                          "example": "0x..."
                        }
                      }
                    }
                  },
                  "verified": {
                    "type": "boolean",
                    "description": "Indicates whether the token is verified."
                  }
                }
              }
            }
          },
          "slippage": {
            "type": "number",
            "format": "float",
            "description": "The maximum acceptable difference between the expected price of the 'toToken' and the price at the time of the transfer.",
            "example": 0.005
          },
          "fromAddress": {
            "type": "string",
            "description": "A blockchain address.",
            "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
          },
          "toAddress": {
            "type": "string",
            "description": "A blockchain address.",
            "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
          }
        }
      },
      "IntegrationDetails": {
        "type": "object",
        "description": "Describes integration or tool details such as bridges or exchanges involved in the transaction.",
        "required": [
          "key",
          "name",
          "logoURI"
        ],
        "properties": {
          "key": {
            "type": "string",
            "description": "A unique identifier for the integration or tool.",
            "example": "1inch"
          },
          "name": {
            "type": "string",
            "description": "The name of the integration or tool.",
            "example": "1inch Exchange"
          },
          "logoURI": {
            "type": "string",
            "format": "uri",
            "description": "URL to the logo of the integration or tool.",
            "example": "https://cdn.example.com/logos/1inch.png"
          }
        }
      },
      "Estimate": {
        "type": "object",
        "description": "Provides an estimation for a transaction, including costs, amounts, and execution duration.",
        "properties": {
          "approvalAddress": {
            "type": "string",
            "description": "A blockchain address.",
            "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
          },
          "toAmountMin": {
            "type": "string",
            "description": "The amount in string format including all decimals.",
            "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
            "example": "1000000000000000000"
          },
          "toAmount": {
            "type": "string",
            "description": "The amount in string format including all decimals.",
            "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
            "example": "1000000000000000000"
          },
          "fromAmount": {
            "type": "string",
            "description": "The amount in string format including all decimals.",
            "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
            "example": "1000000000000000000"
          },
          "feeCosts": {
            "type": "array",
            "description": "A collection of fee costs associated with the transaction.",
            "items": {
              "type": "object",
              "description": "Details about a specific fee cost associated with the transaction.",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the fee cost.",
                  "example": "Network Fee"
                },
                "amount": {
                  "type": "string",
                  "description": "The amount in string format including all decimals.",
                  "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                  "example": "1000000000000000000"
                },
                "amountUSD": {
                  "type": "string",
                  "description": "The amount in string format including all decimals.",
                  "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
                  "example": "1000000000000000000"
                },
                "token": {
                  "type": "string",
                  "description": "The symbol of a token",
                  "example": "ETH"
                },
                "included": {
                  "type": "boolean",
                  "description": "Indicates if the fee is included in the transaction amount."
                }
              }
            }
          },
          "gasCosts": {
            "type": "array",
            "description": "A collection of estimated gas costs for executing the transaction.",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The type of the gas cost.",
                  "example": "SEND"
                },
                "price": {
                  "type": "string",
                  "description": "The gas price, specified as a string to maintain precision.",
                  "example": "19236858243"
                },
                "estimate": {
                  "type": "string",
                  "description": "The estimated gas required, specified as a string to maintain precision.",
                  "example": "445393"
                },
                "limit": {
                  "type": "string",
                  "description": "The gas limit for the transaction, specified as a string to maintain precision.",
                  "example": "579011",
                  "pattern": "^[1-9][0-9]*$"
                },
                "amount": {
                  "type": "string",
                  "description": "The amount of gas required in the gas currency.",
                  "example": "8567962003424499",
                  "pattern": "^[1-9][0-9]*$"
                },
                "amountUSD": {
                  "type": "string",
                  "description": "The amount of gas required in USD.",
                  "example": "16.05",
                  "pattern": "^(0(\\.[0-9]+)?|[1-9][0-9]*(\\.[0-9]+)?)$"
                },
                "token": {
                  "type": "object",
                  "description": "Metadata detailing a supported token",
                  "required": [
                    "chainID",
                    "chainType",
                    "address",
                    "symbol",
                    "decimals"
                  ],
                  "properties": {
                    "chainID": {
                      "x-category": "satp-core",
                      "type": "string",
                      "description": "The network of the DLT being interacted with. TODO: implement network identification draft"
                    },
                    "chainType": {
                      "x-category": "satp-core",
                      "type": "string",
                      "enum": [
                        "HyperledgerFabric",
                        "HyperledgerBesu"
                      ],
                      "description": "Supported DLT protocols."
                    },
                    "address": {
                      "type": "string",
                      "description": "A blockchain address.",
                      "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the token."
                    },
                    "symbol": {
                      "type": "string",
                      "description": "The symbol of the token."
                    },
                    "decimals": {
                      "type": "integer",
                      "description": "How many decimals the token supports.",
                      "minimum": 1
                    },
                    "logoURI": {
                      "type": "string",
                      "description": "The logo of a token, chain, dex etc.",
                      "format": "uri"
                    },
                    "tags": {
                      "title": "Tags",
                      "type": "array",
                      "description": "List of tags identifiers providing additional context or categorization.",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "satp",
                        "hyperledger"
                      ]
                    },
                    "priceUSD": {
                      "type": "string",
                      "description": "The current price of the token in USD."
                    },
                    "extensions": {
                      "type": "object",
                      "properties": {
                        "bridgeInfo": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "object",
                            "description": "Information about the bridge used for the token transfer.",
                            "properties": {
                              "tokenAddress": {
                                "type": "string",
                                "description": "The address of the token being transferred.",
                                "example": "0x..."
                              }
                            }
                          }
                        },
                        "verified": {
                          "type": "boolean",
                          "description": "Indicates whether the token is verified."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "executionDuration": {
            "type": "integer",
            "description": "The estimated duration for the transaction execution in seconds.",
            "example": 30
          },
          "fromAmountUSD": {
            "type": "string",
            "description": "The amount in string format including all decimals.",
            "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
            "example": "1000000000000000000"
          },
          "toAmountUSD": {
            "type": "string",
            "description": "The amount in string format including all decimals.",
            "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
            "example": "1000000000000000000"
          },
          "tool": {
            "type": "string",
            "description": "The tool or service used to generate this estimate.",
            "example": "satp"
          }
        }
      },
      "FeeCost": {
        "type": "object",
        "description": "Details about a specific fee cost associated with the transaction.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the fee cost.",
            "example": "Network Fee"
          },
          "amount": {
            "type": "string",
            "description": "The amount in string format including all decimals.",
            "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
            "example": "1000000000000000000"
          },
          "amountUSD": {
            "type": "string",
            "description": "The amount in string format including all decimals.",
            "pattern": "^([1-9][0-9]*|0)(\\.[0-9]+)?$",
            "example": "1000000000000000000"
          },
          "token": {
            "type": "string",
            "description": "The symbol of a token",
            "example": "ETH"
          },
          "included": {
            "type": "boolean",
            "description": "Indicates if the fee is included in the transaction amount."
          }
        }
      },
      "GasCost": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the gas cost.",
            "example": "SEND"
          },
          "price": {
            "type": "string",
            "description": "The gas price, specified as a string to maintain precision.",
            "example": "19236858243"
          },
          "estimate": {
            "type": "string",
            "description": "The estimated gas required, specified as a string to maintain precision.",
            "example": "445393"
          },
          "limit": {
            "type": "string",
            "description": "The gas limit for the transaction, specified as a string to maintain precision.",
            "example": "579011",
            "pattern": "^[1-9][0-9]*$"
          },
          "amount": {
            "type": "string",
            "description": "The amount of gas required in the gas currency.",
            "example": "8567962003424499",
            "pattern": "^[1-9][0-9]*$"
          },
          "amountUSD": {
            "type": "string",
            "description": "The amount of gas required in USD.",
            "example": "16.05",
            "pattern": "^(0(\\.[0-9]+)?|[1-9][0-9]*(\\.[0-9]+)?)$"
          },
          "token": {
            "type": "object",
            "description": "Metadata detailing a supported token",
            "required": [
              "chainID",
              "chainType",
              "address",
              "symbol",
              "decimals"
            ],
            "properties": {
              "chainID": {
                "x-category": "satp-core",
                "type": "string",
                "description": "The network of the DLT being interacted with. TODO: implement network identification draft"
              },
              "chainType": {
                "x-category": "satp-core",
                "type": "string",
                "enum": [
                  "HyperledgerFabric",
                  "HyperledgerBesu"
                ],
                "description": "Supported DLT protocols."
              },
              "address": {
                "type": "string",
                "description": "A blockchain address.",
                "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
              },
              "name": {
                "type": "string",
                "description": "The name of the token."
              },
              "symbol": {
                "type": "string",
                "description": "The symbol of the token."
              },
              "decimals": {
                "type": "integer",
                "description": "How many decimals the token supports.",
                "minimum": 1
              },
              "logoURI": {
                "type": "string",
                "description": "The logo of a token, chain, dex etc.",
                "format": "uri"
              },
              "tags": {
                "title": "Tags",
                "type": "array",
                "description": "List of tags identifiers providing additional context or categorization.",
                "items": {
                  "type": "string"
                },
                "example": [
                  "satp",
                  "hyperledger"
                ]
              },
              "priceUSD": {
                "type": "string",
                "description": "The current price of the token in USD."
              },
              "extensions": {
                "type": "object",
                "properties": {
                  "bridgeInfo": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object",
                      "description": "Information about the bridge used for the token transfer.",
                      "properties": {
                        "tokenAddress": {
                          "type": "string",
                          "description": "The address of the token being transferred.",
                          "example": "0x..."
                        }
                      }
                    }
                  },
                  "verified": {
                    "type": "boolean",
                    "description": "Indicates whether the token is verified."
                  }
                }
              }
            }
          }
        }
      },
      "GetApproveAddressRequest": {
        "type": "object",
        "description": "Request schema for getting the address to approve the token transfer.",
        "properties": {
          "networkId": {
            "type": "object",
            "description": "The network of the DLT being interacted with.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The network of the DLT being interacted with."
              },
              "ledgerType": {
                "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                "type": "string",
                "enum": [
                  "BESU_1X",
                  "BESU_2X",
                  "BURROW_0X",
                  "CORDA_4X",
                  "ETHEREUM",
                  "FABRIC_2",
                  "SAWTOOTH_1X"
                ]
              }
            },
            "required": [
              "id",
              "ledgerType"
            ]
          },
          "tokenType": {
            "type": "string",
            "enum": [
              "ERC20",
              "ERC721",
              "ERC1155",
              "NONSTANDARD_FUNGIBLE",
              "NONSTANDARD_NONFUNGIBLE"
            ],
            "description": "The type of token."
          }
        },
        "required": [
          "networkId",
          "tokenType"
        ]
      },
      "GetApproveAddressResponse": {
        "type": "object",
        "description": "Response schema for getting the address to approve the token transfer.",
        "properties": {
          "approveAddress": {
            "type": "string",
            "description": "The address to approve the token transfer."
          }
        },
        "required": [
          "approveAddress"
        ]
      },
      "OracleRegisterRequest": {
        "description": "Request schema for registering a repeatable task.",
        "type": "object",
        "required": [
          "taskType",
          "taskMode"
        ],
        "properties": {
          "sourceNetworkId": {
            "type": "object",
            "description": "The network of the DLT being interacted with.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The network of the DLT being interacted with."
              },
              "ledgerType": {
                "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                "type": "string",
                "enum": [
                  "BESU_1X",
                  "BESU_2X",
                  "BURROW_0X",
                  "CORDA_4X",
                  "ETHEREUM",
                  "FABRIC_2",
                  "SAWTOOTH_1X"
                ]
              }
            },
            "required": [
              "id",
              "ledgerType"
            ]
          },
          "destinationNetworkId": {
            "type": "object",
            "description": "The network of the DLT being interacted with.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The network of the DLT being interacted with."
              },
              "ledgerType": {
                "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                "type": "string",
                "enum": [
                  "BESU_1X",
                  "BESU_2X",
                  "BURROW_0X",
                  "CORDA_4X",
                  "ETHEREUM",
                  "FABRIC_2",
                  "SAWTOOTH_1X"
                ]
              }
            },
            "required": [
              "id",
              "ledgerType"
            ]
          },
          "sourceContract": {
            "description": "The contract address on the source blockchain. Only if taskType is READ or READ_AND_UPDATE.",
            "type": "object",
            "properties": {
              "contractName": {
                "type": "string",
                "description": "The name of the contract."
              },
              "contractAddress": {
                "type": "string",
                "description": "The address of the contract.",
                "nullable": true
              },
              "contractAbi": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "The ABI (Application Binary Interface) of the contract.",
                "nullable": true
              },
              "contractBytecode": {
                "type": "string",
                "description": "The bytecode of the contract.",
                "nullable": true
              },
              "methodName": {
                "type": "string",
                "description": "The name of the method to be invoked on the contract."
              },
              "params": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    }
                  ]
                },
                "description": "The parameters to be passed to the contract method."
              }
            }
          },
          "destinationContract": {
            "description": "The contract address on the destination blockchain. Only if taskType is UPDATE or READ_AND_UPDATE.",
            "type": "object",
            "properties": {
              "contractName": {
                "type": "string",
                "description": "The name of the contract."
              },
              "contractAddress": {
                "type": "string",
                "description": "The address of the contract.",
                "nullable": true
              },
              "contractAbi": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "The ABI (Application Binary Interface) of the contract.",
                "nullable": true
              },
              "contractBytecode": {
                "type": "string",
                "description": "The bytecode of the contract.",
                "nullable": true
              },
              "methodName": {
                "type": "string",
                "description": "The name of the method to be invoked on the contract."
              },
              "params": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    }
                  ]
                },
                "description": "The parameters to be passed to the contract method."
              }
            }
          },
          "taskMode": {
            "type": "string",
            "description": "The mode of operation for the repeatable task.",
            "example": "POLLING",
            "enum": [
              "POLLING",
              "EVENT_LISTENING"
            ]
          },
          "pollingInterval": {
            "type": "integer",
            "description": "The interval for polling in milliseconds. Only if taskMode is POLLING.",
            "example": 5000
          },
          "listeningOptions": {
            "type": "object",
            "description": "Options for event listening. Only if taskMode is EVENT_LISTENING.",
            "required": [
              "eventSignature"
            ],
            "properties": {
              "eventSignature": {
                "type": "string",
                "description": "The event signature to listen for on the source network. Only if taskMode is EVENT_LISTENING.",
                "example": "Transfer(address,address,uint256)"
              },
              "filterParams": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The parameters to filter in the captured events."
              }
            }
          },
          "taskType": {
            "type": "string",
            "description": "The type of task to be registered.",
            "example": "READ",
            "enum": [
              "READ",
              "UPDATE",
              "READ_AND_UPDATE"
            ]
          }
        }
      },
      "OracleExecuteRequest": {
        "description": "Request schema for triggering an immediate transfer task. Includes the task ID, payload, and destination network and contract details.",
        "type": "object",
        "properties": {
          "sourceNetworkId": {
            "type": "object",
            "description": "The network of the DLT being interacted with.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The network of the DLT being interacted with."
              },
              "ledgerType": {
                "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                "type": "string",
                "enum": [
                  "BESU_1X",
                  "BESU_2X",
                  "BURROW_0X",
                  "CORDA_4X",
                  "ETHEREUM",
                  "FABRIC_2",
                  "SAWTOOTH_1X"
                ]
              }
            },
            "required": [
              "id",
              "ledgerType"
            ]
          },
          "destinationNetworkId": {
            "type": "object",
            "description": "The network of the DLT being interacted with.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The network of the DLT being interacted with."
              },
              "ledgerType": {
                "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                "type": "string",
                "enum": [
                  "BESU_1X",
                  "BESU_2X",
                  "BURROW_0X",
                  "CORDA_4X",
                  "ETHEREUM",
                  "FABRIC_2",
                  "SAWTOOTH_1X"
                ]
              }
            },
            "required": [
              "id",
              "ledgerType"
            ]
          },
          "sourceContract": {
            "description": "The contract data on the source blockchain. Only if taskType is READ or READ_AND_UPDATE.",
            "type": "object",
            "properties": {
              "contractName": {
                "type": "string",
                "description": "The name of the contract."
              },
              "contractAddress": {
                "type": "string",
                "description": "The address of the contract.",
                "nullable": true
              },
              "contractAbi": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "The ABI (Application Binary Interface) of the contract.",
                "nullable": true
              },
              "contractBytecode": {
                "type": "string",
                "description": "The bytecode of the contract.",
                "nullable": true
              },
              "methodName": {
                "type": "string",
                "description": "The name of the method to be invoked on the contract."
              },
              "params": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    }
                  ]
                },
                "description": "The parameters to be passed to the contract method."
              }
            }
          },
          "destinationContract": {
            "description": "The contract data on the destination blockchain. Only if taskType is UPDATE or READ_AND_UPDATE.",
            "type": "object",
            "properties": {
              "contractName": {
                "type": "string",
                "description": "The name of the contract."
              },
              "contractAddress": {
                "type": "string",
                "description": "The address of the contract.",
                "nullable": true
              },
              "contractAbi": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "The ABI (Application Binary Interface) of the contract.",
                "nullable": true
              },
              "contractBytecode": {
                "type": "string",
                "description": "The bytecode of the contract.",
                "nullable": true
              },
              "methodName": {
                "type": "string",
                "description": "The name of the method to be invoked on the contract."
              },
              "params": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    }
                  ]
                },
                "description": "The parameters to be passed to the contract method."
              }
            }
          },
          "taskType": {
            "type": "string",
            "description": "The type of task to be registered.",
            "example": "READ",
            "enum": [
              "READ",
              "UPDATE",
              "READ_AND_UPDATE"
            ]
          }
        }
      },
      "BusinessLogicContract": {
        "type": "object",
        "description": "Represents a business logic contract with its associated metadata and method details.",
        "properties": {
          "contractName": {
            "type": "string",
            "description": "The name of the contract."
          },
          "contractAddress": {
            "type": "string",
            "description": "The address of the contract.",
            "nullable": true
          },
          "contractAbi": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "The ABI (Application Binary Interface) of the contract.",
            "nullable": true
          },
          "contractBytecode": {
            "type": "string",
            "description": "The bytecode of the contract.",
            "nullable": true
          },
          "methodName": {
            "type": "string",
            "description": "The name of the method to be invoked on the contract."
          },
          "params": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                }
              ]
            },
            "description": "The parameters to be passed to the contract method."
          }
        }
      },
      "OracleTask": {
        "type": "object",
        "description": "Represents a repeatable Oracle task with additional properties for mode, polling interval, and source event signature.",
        "properties": {
          "taskID": {
            "type": "string",
            "description": "Unique identifier (UUID) for the session.",
            "example": "000003e8-e0b8-21ee-ba00-325096b39f47"
          },
          "type": {
            "type": "string",
            "description": "The type of the Oracle task.",
            "enum": [
              "READ",
              "UPDATE",
              "READ_AND_UPDATE"
            ]
          },
          "srcNetworkId": {
            "type": "object",
            "description": "The network of the DLT being interacted with.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The network of the DLT being interacted with."
              },
              "ledgerType": {
                "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                "type": "string",
                "enum": [
                  "BESU_1X",
                  "BESU_2X",
                  "BURROW_0X",
                  "CORDA_4X",
                  "ETHEREUM",
                  "FABRIC_2",
                  "SAWTOOTH_1X"
                ]
              }
            },
            "required": [
              "id",
              "ledgerType"
            ]
          },
          "srcContract": {
            "description": "The source contract details for the Oracle task.",
            "type": "object",
            "properties": {
              "contractName": {
                "type": "string",
                "description": "The name of the contract."
              },
              "contractAddress": {
                "type": "string",
                "description": "The address of the contract.",
                "nullable": true
              },
              "contractAbi": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "The ABI (Application Binary Interface) of the contract.",
                "nullable": true
              },
              "contractBytecode": {
                "type": "string",
                "description": "The bytecode of the contract.",
                "nullable": true
              },
              "methodName": {
                "type": "string",
                "description": "The name of the method to be invoked on the contract."
              },
              "params": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    }
                  ]
                },
                "description": "The parameters to be passed to the contract method."
              }
            }
          },
          "dstNetworkId": {
            "type": "object",
            "description": "The network of the DLT being interacted with.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The network of the DLT being interacted with."
              },
              "ledgerType": {
                "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                "type": "string",
                "enum": [
                  "BESU_1X",
                  "BESU_2X",
                  "BURROW_0X",
                  "CORDA_4X",
                  "ETHEREUM",
                  "FABRIC_2",
                  "SAWTOOTH_1X"
                ]
              }
            },
            "required": [
              "id",
              "ledgerType"
            ]
          },
          "dstContract": {
            "description": "The destination contract details for the Oracle task.",
            "type": "object",
            "properties": {
              "contractName": {
                "type": "string",
                "description": "The name of the contract."
              },
              "contractAddress": {
                "type": "string",
                "description": "The address of the contract.",
                "nullable": true
              },
              "contractAbi": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "The ABI (Application Binary Interface) of the contract.",
                "nullable": true
              },
              "contractBytecode": {
                "type": "string",
                "description": "The bytecode of the contract.",
                "nullable": true
              },
              "methodName": {
                "type": "string",
                "description": "The name of the method to be invoked on the contract."
              },
              "params": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    }
                  ]
                },
                "description": "The parameters to be passed to the contract method."
              }
            }
          },
          "timestamp": {
            "type": "integer",
            "format": "int64",
            "description": "The timestamp when the Oracle task was created or last updated.",
            "example": 1672531200
          },
          "operations": {
            "type": "array",
            "description": "The list of operations performed by the Oracle task.",
            "items": {
              "type": "object",
              "description": "Represents an operation performed by the Oracle, including its type, network, contract, status, and optional output.",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "A unique identifier for the Oracle operation.",
                  "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "type": {
                  "type": "string",
                  "description": "The type of the Oracle operation.",
                  "enum": [
                    "READ",
                    "UPDATE"
                  ],
                  "example": "READ"
                },
                "networkId": {
                  "type": "object",
                  "description": "The network of the DLT being interacted with.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The network of the DLT being interacted with."
                    },
                    "ledgerType": {
                      "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                      "type": "string",
                      "enum": [
                        "BESU_1X",
                        "BESU_2X",
                        "BURROW_0X",
                        "CORDA_4X",
                        "ETHEREUM",
                        "FABRIC_2",
                        "SAWTOOTH_1X"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "ledgerType"
                  ]
                },
                "contract": {
                  "description": "The contract associated with the Oracle operation.",
                  "type": "object",
                  "properties": {
                    "contractName": {
                      "type": "string",
                      "description": "The name of the contract."
                    },
                    "contractAddress": {
                      "type": "string",
                      "description": "The address of the contract.",
                      "nullable": true
                    },
                    "contractAbi": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "The ABI (Application Binary Interface) of the contract.",
                      "nullable": true
                    },
                    "contractBytecode": {
                      "type": "string",
                      "description": "The bytecode of the contract.",
                      "nullable": true
                    },
                    "methodName": {
                      "type": "string",
                      "description": "The name of the method to be invoked on the contract."
                    },
                    "params": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "number"
                          }
                        ]
                      },
                      "description": "The parameters to be passed to the contract method."
                    }
                  }
                },
                "status": {
                  "type": "string",
                  "description": "The current status of the Oracle operation.",
                  "enum": [
                    "PENDING",
                    "SUCCESS",
                    "FAILED"
                  ],
                  "example": "IN_PROGRESS"
                },
                "output": {
                  "description": "Optional output generated by the Oracle operation.",
                  "type": "object",
                  "properties": {
                    "transactionId": {
                      "type": "string",
                      "description": "The unique identifier for the transaction.",
                      "example": "0x1234567890abcdef"
                    },
                    "transactionReceipt": {
                      "type": "object",
                      "description": "The receipt of the transaction, providing proof of execution."
                    },
                    "output": {
                      "type": "string",
                      "description": "The output of the Oracle operation execution."
                    },
                    "proof": {
                      "type": "object",
                      "description": "Proof of the Oracle operation execution."
                    }
                  }
                },
                "timestamp": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The timestamp when the Oracle operation was created or last updated.",
                  "example": 1672531200
                }
              },
              "required": [
                "id",
                "type",
                "networkId",
                "contract",
                "status",
                "timestamp"
              ]
            }
          },
          "status": {
            "type": "string",
            "description": "The current status of the Oracle task.",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ]
          },
          "mode": {
            "type": "string",
            "description": "The mode of operation for registered tasks.",
            "example": "POLLING",
            "enum": [
              "POLLING",
              "EVENT_LISTENING",
              "IMMEDIATE"
            ]
          },
          "pollingInterval": {
            "type": "integer",
            "description": "The interval for polling in milliseconds. Only if taskMode is POLLING.",
            "example": 5000
          },
          "listeningOptions": {
            "type": "object",
            "description": "Options for event listening. Only if taskMode is EVENT_LISTENING.",
            "required": [
              "eventSignature"
            ],
            "properties": {
              "eventSignature": {
                "type": "string",
                "description": "The event signature to listen for on the source network. Only if taskMode is EVENT_LISTENING.",
                "example": "Transfer(address,address,uint256)"
              },
              "filterParams": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The parameters to filter in the captured events."
              }
            }
          }
        },
        "required": [
          "taskID",
          "type",
          "srcContract",
          "dstContract",
          "timestamp",
          "operations",
          "status",
          "mode"
        ]
      },
      "OracleResponse": {
        "type": "object",
        "description": "Represents the response from an Oracle task execution, including transaction details and outputs.",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The unique identifier for the transaction.",
            "example": "0x1234567890abcdef"
          },
          "transactionReceipt": {
            "type": "object",
            "description": "The receipt of the transaction, providing proof of execution."
          },
          "output": {
            "type": "string",
            "description": "The output of the Oracle operation execution."
          },
          "proof": {
            "type": "object",
            "description": "Proof of the Oracle operation execution."
          }
        }
      },
      "OracleOperation": {
        "type": "object",
        "description": "Represents an operation performed by the Oracle, including its type, network, contract, status, and optional output.",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the Oracle operation.",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "type": {
            "type": "string",
            "description": "The type of the Oracle operation.",
            "enum": [
              "READ",
              "UPDATE"
            ],
            "example": "READ"
          },
          "networkId": {
            "type": "object",
            "description": "The network of the DLT being interacted with.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The network of the DLT being interacted with."
              },
              "ledgerType": {
                "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                "type": "string",
                "enum": [
                  "BESU_1X",
                  "BESU_2X",
                  "BURROW_0X",
                  "CORDA_4X",
                  "ETHEREUM",
                  "FABRIC_2",
                  "SAWTOOTH_1X"
                ]
              }
            },
            "required": [
              "id",
              "ledgerType"
            ]
          },
          "contract": {
            "description": "The contract associated with the Oracle operation.",
            "type": "object",
            "properties": {
              "contractName": {
                "type": "string",
                "description": "The name of the contract."
              },
              "contractAddress": {
                "type": "string",
                "description": "The address of the contract.",
                "nullable": true
              },
              "contractAbi": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "The ABI (Application Binary Interface) of the contract.",
                "nullable": true
              },
              "contractBytecode": {
                "type": "string",
                "description": "The bytecode of the contract.",
                "nullable": true
              },
              "methodName": {
                "type": "string",
                "description": "The name of the method to be invoked on the contract."
              },
              "params": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    }
                  ]
                },
                "description": "The parameters to be passed to the contract method."
              }
            }
          },
          "status": {
            "type": "string",
            "description": "The current status of the Oracle operation.",
            "enum": [
              "PENDING",
              "SUCCESS",
              "FAILED"
            ],
            "example": "IN_PROGRESS"
          },
          "output": {
            "description": "Optional output generated by the Oracle operation.",
            "type": "object",
            "properties": {
              "transactionId": {
                "type": "string",
                "description": "The unique identifier for the transaction.",
                "example": "0x1234567890abcdef"
              },
              "transactionReceipt": {
                "type": "object",
                "description": "The receipt of the transaction, providing proof of execution."
              },
              "output": {
                "type": "string",
                "description": "The output of the Oracle operation execution."
              },
              "proof": {
                "type": "object",
                "description": "Proof of the Oracle operation execution."
              }
            }
          },
          "timestamp": {
            "type": "integer",
            "format": "int64",
            "description": "The timestamp when the Oracle operation was created or last updated.",
            "example": 1672531200
          }
        },
        "required": [
          "id",
          "type",
          "networkId",
          "contract",
          "status",
          "timestamp"
        ]
      },
      "OracleUnregisterRequest": {
        "description": "Request schema for unregistering a data transfer task. Includes the context ID of the task to be unregistered.",
        "type": "object",
        "required": [
          "taskID"
        ],
        "properties": {
          "taskID": {
            "type": "string",
            "description": "Unique identifier (UUID) for the session.",
            "example": "000003e8-e0b8-21ee-ba00-325096b39f47"
          }
        }
      },
      "OracleStatusRequest": {
        "description": "Request schema for checking the status of a data transfer task.",
        "type": "object",
        "required": [
          "taskID"
        ],
        "properties": {
          "taskID": {
            "type": "string",
            "description": "Unique identifier (UUID) for the session.",
            "example": "000003e8-e0b8-21ee-ba00-325096b39f47"
          }
        }
      },
      "OracleUnregisterResponse": {
        "description": "Response schema for unregistering a data transfer task. Includes the task ID and status of the unregistration.",
        "type": "object",
        "properties": {
          "taskID": {
            "type": "string",
            "description": "Unique identifier (UUID) for the session.",
            "example": "000003e8-e0b8-21ee-ba00-325096b39f47"
          },
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED"
            ],
            "example": "SUCCESS"
          }
        }
      },
      "OracleRegisterResponse": {
        "description": "Response schema for registering a repeatable task. Includes the task ID and status of the registration.",
        "type": "object",
        "properties": {
          "taskID": {
            "description": "The unique identifier of the task.",
            "type": "string",
            "example": "000003e8-e0b8-21ee-ba00-325096b39f47"
          },
          "status": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "FAILED"
            ],
            "example": "SUCCESS"
          }
        }
      },
      "OracleExecuteResponse": {
        "description": "Response schema for executing a data transfer task. Includes the task ID and status of the execution.",
        "type": "object",
        "properties": {
          "taskID": {
            "description": "The unique identifier of the task.",
            "type": "string",
            "example": "000003e8-e0b8-21ee-ba00-325096b39f47"
          },
          "type": {
            "type": "string",
            "description": "The type of the Oracle task.",
            "enum": [
              "READ",
              "UPDATE",
              "READ_AND_UPDATE"
            ]
          },
          "srcNetworkId": {
            "type": "object",
            "description": "The network of the DLT being interacted with.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The network of the DLT being interacted with."
              },
              "ledgerType": {
                "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                "type": "string",
                "enum": [
                  "BESU_1X",
                  "BESU_2X",
                  "BURROW_0X",
                  "CORDA_4X",
                  "ETHEREUM",
                  "FABRIC_2",
                  "SAWTOOTH_1X"
                ]
              }
            },
            "required": [
              "id",
              "ledgerType"
            ]
          },
          "srcContract": {
            "description": "The source contract details for the Oracle task.",
            "type": "object",
            "properties": {
              "contractName": {
                "type": "string",
                "description": "The name of the contract."
              },
              "contractAddress": {
                "type": "string",
                "description": "The address of the contract.",
                "nullable": true
              },
              "contractAbi": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "The ABI (Application Binary Interface) of the contract.",
                "nullable": true
              },
              "contractBytecode": {
                "type": "string",
                "description": "The bytecode of the contract.",
                "nullable": true
              },
              "methodName": {
                "type": "string",
                "description": "The name of the method to be invoked on the contract."
              },
              "params": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    }
                  ]
                },
                "description": "The parameters to be passed to the contract method."
              }
            }
          },
          "dstNetworkId": {
            "type": "object",
            "description": "The network of the DLT being interacted with.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The network of the DLT being interacted with."
              },
              "ledgerType": {
                "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                "type": "string",
                "enum": [
                  "BESU_1X",
                  "BESU_2X",
                  "BURROW_0X",
                  "CORDA_4X",
                  "ETHEREUM",
                  "FABRIC_2",
                  "SAWTOOTH_1X"
                ]
              }
            },
            "required": [
              "id",
              "ledgerType"
            ]
          },
          "dstContract": {
            "description": "The destination contract details for the Oracle task.",
            "type": "object",
            "properties": {
              "contractName": {
                "type": "string",
                "description": "The name of the contract."
              },
              "contractAddress": {
                "type": "string",
                "description": "The address of the contract.",
                "nullable": true
              },
              "contractAbi": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "The ABI (Application Binary Interface) of the contract.",
                "nullable": true
              },
              "contractBytecode": {
                "type": "string",
                "description": "The bytecode of the contract.",
                "nullable": true
              },
              "methodName": {
                "type": "string",
                "description": "The name of the method to be invoked on the contract."
              },
              "params": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    }
                  ]
                },
                "description": "The parameters to be passed to the contract method."
              }
            }
          },
          "timestamp": {
            "type": "integer",
            "format": "int64",
            "description": "The timestamp when the Oracle task was created or last updated.",
            "example": 1672531200
          },
          "operations": {
            "type": "array",
            "description": "The list of operations performed by the Oracle task.",
            "items": {
              "type": "object",
              "description": "Represents an operation performed by the Oracle, including its type, network, contract, status, and optional output.",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "A unique identifier for the Oracle operation.",
                  "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "type": {
                  "type": "string",
                  "description": "The type of the Oracle operation.",
                  "enum": [
                    "READ",
                    "UPDATE"
                  ],
                  "example": "READ"
                },
                "networkId": {
                  "type": "object",
                  "description": "The network of the DLT being interacted with.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The network of the DLT being interacted with."
                    },
                    "ledgerType": {
                      "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                      "type": "string",
                      "enum": [
                        "BESU_1X",
                        "BESU_2X",
                        "BURROW_0X",
                        "CORDA_4X",
                        "ETHEREUM",
                        "FABRIC_2",
                        "SAWTOOTH_1X"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "ledgerType"
                  ]
                },
                "contract": {
                  "description": "The contract associated with the Oracle operation.",
                  "type": "object",
                  "properties": {
                    "contractName": {
                      "type": "string",
                      "description": "The name of the contract."
                    },
                    "contractAddress": {
                      "type": "string",
                      "description": "The address of the contract.",
                      "nullable": true
                    },
                    "contractAbi": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "The ABI (Application Binary Interface) of the contract.",
                      "nullable": true
                    },
                    "contractBytecode": {
                      "type": "string",
                      "description": "The bytecode of the contract.",
                      "nullable": true
                    },
                    "methodName": {
                      "type": "string",
                      "description": "The name of the method to be invoked on the contract."
                    },
                    "params": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "number"
                          }
                        ]
                      },
                      "description": "The parameters to be passed to the contract method."
                    }
                  }
                },
                "status": {
                  "type": "string",
                  "description": "The current status of the Oracle operation.",
                  "enum": [
                    "PENDING",
                    "SUCCESS",
                    "FAILED"
                  ],
                  "example": "IN_PROGRESS"
                },
                "output": {
                  "description": "Optional output generated by the Oracle operation.",
                  "type": "object",
                  "properties": {
                    "transactionId": {
                      "type": "string",
                      "description": "The unique identifier for the transaction.",
                      "example": "0x1234567890abcdef"
                    },
                    "transactionReceipt": {
                      "type": "object",
                      "description": "The receipt of the transaction, providing proof of execution."
                    },
                    "output": {
                      "type": "string",
                      "description": "The output of the Oracle operation execution."
                    },
                    "proof": {
                      "type": "object",
                      "description": "Proof of the Oracle operation execution."
                    }
                  }
                },
                "timestamp": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The timestamp when the Oracle operation was created or last updated.",
                  "example": 1672531200
                }
              },
              "required": [
                "id",
                "type",
                "networkId",
                "contract",
                "status",
                "timestamp"
              ]
            }
          },
          "status": {
            "type": "string",
            "description": "The current status of the Oracle task.",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ]
          },
          "mode": {
            "type": "string",
            "description": "The mode of operation for registered tasks.",
            "example": "POLLING",
            "enum": [
              "POLLING",
              "EVENT_LISTENING",
              "IMMEDIATE"
            ]
          },
          "pollingInterval": {
            "type": "integer",
            "description": "The interval for polling in milliseconds. Only if taskMode is POLLING.",
            "example": 5000
          }
        },
        "required": [
          "taskID",
          "type",
          "srcContract",
          "dstContract",
          "timestamp",
          "operations",
          "status",
          "mode"
        ]
      },
      "OracleStatusResponse": {
        "description": "Response schema for checking the status of a data transfer task. Includes the task ID and status of the task.",
        "type": "object",
        "properties": {
          "taskID": {
            "type": "string",
            "description": "Unique identifier (UUID) for the session.",
            "example": "000003e8-e0b8-21ee-ba00-325096b39f47"
          },
          "type": {
            "type": "string",
            "description": "The type of the Oracle task.",
            "enum": [
              "READ",
              "UPDATE",
              "READ_AND_UPDATE"
            ]
          },
          "srcNetworkId": {
            "type": "object",
            "description": "The network of the DLT being interacted with.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The network of the DLT being interacted with."
              },
              "ledgerType": {
                "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                "type": "string",
                "enum": [
                  "BESU_1X",
                  "BESU_2X",
                  "BURROW_0X",
                  "CORDA_4X",
                  "ETHEREUM",
                  "FABRIC_2",
                  "SAWTOOTH_1X"
                ]
              }
            },
            "required": [
              "id",
              "ledgerType"
            ]
          },
          "srcContract": {
            "description": "The source contract details for the Oracle task.",
            "type": "object",
            "properties": {
              "contractName": {
                "type": "string",
                "description": "The name of the contract."
              },
              "contractAddress": {
                "type": "string",
                "description": "The address of the contract.",
                "nullable": true
              },
              "contractAbi": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "The ABI (Application Binary Interface) of the contract.",
                "nullable": true
              },
              "contractBytecode": {
                "type": "string",
                "description": "The bytecode of the contract.",
                "nullable": true
              },
              "methodName": {
                "type": "string",
                "description": "The name of the method to be invoked on the contract."
              },
              "params": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    }
                  ]
                },
                "description": "The parameters to be passed to the contract method."
              }
            }
          },
          "dstNetworkId": {
            "type": "object",
            "description": "The network of the DLT being interacted with.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The network of the DLT being interacted with."
              },
              "ledgerType": {
                "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                "type": "string",
                "enum": [
                  "BESU_1X",
                  "BESU_2X",
                  "BURROW_0X",
                  "CORDA_4X",
                  "ETHEREUM",
                  "FABRIC_2",
                  "SAWTOOTH_1X"
                ]
              }
            },
            "required": [
              "id",
              "ledgerType"
            ]
          },
          "dstContract": {
            "description": "The destination contract details for the Oracle task.",
            "type": "object",
            "properties": {
              "contractName": {
                "type": "string",
                "description": "The name of the contract."
              },
              "contractAddress": {
                "type": "string",
                "description": "The address of the contract.",
                "nullable": true
              },
              "contractAbi": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "description": "The ABI (Application Binary Interface) of the contract.",
                "nullable": true
              },
              "contractBytecode": {
                "type": "string",
                "description": "The bytecode of the contract.",
                "nullable": true
              },
              "methodName": {
                "type": "string",
                "description": "The name of the method to be invoked on the contract."
              },
              "params": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    }
                  ]
                },
                "description": "The parameters to be passed to the contract method."
              }
            }
          },
          "timestamp": {
            "type": "integer",
            "format": "int64",
            "description": "The timestamp when the Oracle task was created or last updated.",
            "example": 1672531200
          },
          "operations": {
            "type": "array",
            "description": "The list of operations performed by the Oracle task.",
            "items": {
              "type": "object",
              "description": "Represents an operation performed by the Oracle, including its type, network, contract, status, and optional output.",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "A unique identifier for the Oracle operation.",
                  "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "type": {
                  "type": "string",
                  "description": "The type of the Oracle operation.",
                  "enum": [
                    "READ",
                    "UPDATE"
                  ],
                  "example": "READ"
                },
                "networkId": {
                  "type": "object",
                  "description": "The network of the DLT being interacted with.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The network of the DLT being interacted with."
                    },
                    "ledgerType": {
                      "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                      "type": "string",
                      "enum": [
                        "BESU_1X",
                        "BESU_2X",
                        "BURROW_0X",
                        "CORDA_4X",
                        "ETHEREUM",
                        "FABRIC_2",
                        "SAWTOOTH_1X"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "ledgerType"
                  ]
                },
                "contract": {
                  "description": "The contract associated with the Oracle operation.",
                  "type": "object",
                  "properties": {
                    "contractName": {
                      "type": "string",
                      "description": "The name of the contract."
                    },
                    "contractAddress": {
                      "type": "string",
                      "description": "The address of the contract.",
                      "nullable": true
                    },
                    "contractAbi": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "description": "The ABI (Application Binary Interface) of the contract.",
                      "nullable": true
                    },
                    "contractBytecode": {
                      "type": "string",
                      "description": "The bytecode of the contract.",
                      "nullable": true
                    },
                    "methodName": {
                      "type": "string",
                      "description": "The name of the method to be invoked on the contract."
                    },
                    "params": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "number"
                          }
                        ]
                      },
                      "description": "The parameters to be passed to the contract method."
                    }
                  }
                },
                "status": {
                  "type": "string",
                  "description": "The current status of the Oracle operation.",
                  "enum": [
                    "PENDING",
                    "SUCCESS",
                    "FAILED"
                  ],
                  "example": "IN_PROGRESS"
                },
                "output": {
                  "description": "Optional output generated by the Oracle operation.",
                  "type": "object",
                  "properties": {
                    "transactionId": {
                      "type": "string",
                      "description": "The unique identifier for the transaction.",
                      "example": "0x1234567890abcdef"
                    },
                    "transactionReceipt": {
                      "type": "object",
                      "description": "The receipt of the transaction, providing proof of execution."
                    },
                    "output": {
                      "type": "string",
                      "description": "The output of the Oracle operation execution."
                    },
                    "proof": {
                      "type": "object",
                      "description": "Proof of the Oracle operation execution."
                    }
                  }
                },
                "timestamp": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The timestamp when the Oracle operation was created or last updated.",
                  "example": 1672531200
                }
              },
              "required": [
                "id",
                "type",
                "networkId",
                "contract",
                "status",
                "timestamp"
              ]
            }
          },
          "status": {
            "type": "string",
            "description": "The current status of the Oracle task.",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ]
          },
          "mode": {
            "type": "string",
            "description": "The mode of operation for registered tasks.",
            "example": "POLLING",
            "enum": [
              "POLLING",
              "EVENT_LISTENING",
              "IMMEDIATE"
            ]
          },
          "pollingInterval": {
            "type": "integer",
            "description": "The interval for polling in milliseconds. Only if taskMode is POLLING.",
            "example": 5000
          }
        },
        "required": [
          "taskID",
          "type",
          "srcContract",
          "dstContract",
          "timestamp",
          "operations",
          "status",
          "mode"
        ]
      },
      "NetworkId": {
        "type": "object",
        "description": "The network of the DLT being interacted with.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The network of the DLT being interacted with."
          },
          "ledgerType": {
            "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
            "type": "string",
            "enum": [
              "BESU_1X",
              "BESU_2X",
              "BURROW_0X",
              "CORDA_4X",
              "ETHEREUM",
              "FABRIC_2",
              "SAWTOOTH_1X"
            ]
          }
        },
        "required": [
          "id",
          "ledgerType"
        ]
      },
      "TokenType": {
        "type": "string",
        "enum": [
          "ERC20",
          "ERC721",
          "ERC1155",
          "NONSTANDARD_FUNGIBLE",
          "NONSTANDARD_NONFUNGIBLE"
        ],
        "description": "The type of token."
      },
      "DraftVersions": {
        "type": "object",
        "description": "The draft versions supported by the gateway.",
        "properties": {
          "Core": {
            "type": "string",
            "description": "Core functionality or component.",
            "example": "Core"
          },
          "Architecture": {
            "type": "string",
            "description": "System architecture or design.",
            "example": "Architecture"
          },
          "Crash": {
            "type": "string",
            "description": "Crash or failure scenario.",
            "example": "Crash"
          }
        }
      },
      "GatewayIdentity": {
        "type": "object",
        "description": "The identity of the gateway.",
        "required": [
          "id",
          "pubKey",
          "name",
          "version",
          "connectedDLTs",
          "proofID",
          "gatewayServerPort",
          "gatewayClientPort",
          "address"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the gateway."
          },
          "pubKey": {
            "type": "string",
            "description": "The public key of the gateway."
          },
          "name": {
            "type": "string",
            "description": "The name of the gateway."
          },
          "version": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "The draft versions supported by the gateway.",
              "properties": {
                "Core": {
                  "type": "string",
                  "description": "Core functionality or component.",
                  "example": "Core"
                },
                "Architecture": {
                  "type": "string",
                  "description": "System architecture or design.",
                  "example": "Architecture"
                },
                "Crash": {
                  "type": "string",
                  "description": "Crash or failure scenario.",
                  "example": "Crash"
                }
              }
            },
            "description": "The draft versions supported by the gateway."
          },
          "connectedDLTs": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "The network of the DLT being interacted with.",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The network of the DLT being interacted with."
                },
                "ledgerType": {
                  "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                  "type": "string",
                  "enum": [
                    "BESU_1X",
                    "BESU_2X",
                    "BURROW_0X",
                    "CORDA_4X",
                    "ETHEREUM",
                    "FABRIC_2",
                    "SAWTOOTH_1X"
                  ]
                }
              },
              "required": [
                "id",
                "ledgerType"
              ]
            },
            "description": "The list of connected DLT networks."
          },
          "proofID": {
            "type": "string",
            "description": "The proof ID associated with the gateway."
          },
          "gatewayServerPort": {
            "type": "integer",
            "description": "The server port of the gateway."
          },
          "gatewayClientPort": {
            "type": "integer",
            "description": "The client port of the gateway."
          },
          "gatewayOapiPort": {
            "type": "integer",
            "description": "The OpenAPI port of the gateway."
          },
          "gatewayUIPort": {
            "type": "integer",
            "description": "The UI port of the gateway."
          },
          "address": {
            "type": "string",
            "description": "A blockchain address.",
            "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
          }
        }
      },
      "AddCounterpartyGatewayRequest": {
        "type": "object",
        "description": "Request schema for adding a counterparty.",
        "properties": {
          "counterparty": {
            "type": "object",
            "description": "The identity of the gateway.",
            "required": [
              "id",
              "pubKey",
              "name",
              "version",
              "connectedDLTs",
              "proofID",
              "gatewayServerPort",
              "gatewayClientPort",
              "address"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "The unique identifier for the gateway."
              },
              "pubKey": {
                "type": "string",
                "description": "The public key of the gateway."
              },
              "name": {
                "type": "string",
                "description": "The name of the gateway."
              },
              "version": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "The draft versions supported by the gateway.",
                  "properties": {
                    "Core": {
                      "type": "string",
                      "description": "Core functionality or component.",
                      "example": "Core"
                    },
                    "Architecture": {
                      "type": "string",
                      "description": "System architecture or design.",
                      "example": "Architecture"
                    },
                    "Crash": {
                      "type": "string",
                      "description": "Crash or failure scenario.",
                      "example": "Crash"
                    }
                  }
                },
                "description": "The draft versions supported by the gateway."
              },
              "connectedDLTs": {
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "The network of the DLT being interacted with.",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The network of the DLT being interacted with."
                    },
                    "ledgerType": {
                      "description": "Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.",
                      "type": "string",
                      "enum": [
                        "BESU_1X",
                        "BESU_2X",
                        "BURROW_0X",
                        "CORDA_4X",
                        "ETHEREUM",
                        "FABRIC_2",
                        "SAWTOOTH_1X"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "ledgerType"
                  ]
                },
                "description": "The list of connected DLT networks."
              },
              "proofID": {
                "type": "string",
                "description": "The proof ID associated with the gateway."
              },
              "gatewayServerPort": {
                "type": "integer",
                "description": "The server port of the gateway."
              },
              "gatewayClientPort": {
                "type": "integer",
                "description": "The client port of the gateway."
              },
              "gatewayOapiPort": {
                "type": "integer",
                "description": "The OpenAPI port of the gateway."
              },
              "gatewayUIPort": {
                "type": "integer",
                "description": "The UI port of the gateway."
              },
              "address": {
                "type": "string",
                "description": "A blockchain address.",
                "example": "0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7"
              }
            }
          }
        },
        "required": [
          "counterparty"
        ]
      },
      "AddCounterpartyGatewayResponse": {
        "type": "object",
        "description": "Response schema for adding a counterparty.",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "The status of the request."
          }
        }
      }
    }
  }
}
