/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: v0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
)

// checks if the TransactRequestFromToken type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactRequestFromToken{}

// TransactRequestFromToken Metadata detailing a supported token
type TransactRequestFromToken struct {
	// The network of the DLT being interacted with. TODO: implement network identification draft
	ChainID string `json:"chainID"`
	// Supported DLT protocols.
	ChainType string `json:"chainType"`
	// A blockchain address.
	Address string `json:"address"`
	// The name of the token.
	Name *string `json:"name,omitempty"`
	// The symbol of the token.
	Symbol string `json:"symbol"`
	// How many decimals the token supports.
	Decimals int32 `json:"decimals"`
	// The logo of a token, chain, dex etc.
	LogoURI *string `json:"logoURI,omitempty"`
	// List of tags identifiers providing additional context or categorization.
	Tags []string `json:"tags,omitempty"`
	// The current price of the token in USD.
	PriceUSD *string `json:"priceUSD,omitempty"`
	Extensions *TransactRequestFromTokenExtensions `json:"extensions,omitempty"`
}

// NewTransactRequestFromToken instantiates a new TransactRequestFromToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactRequestFromToken(chainID string, chainType string, address string, symbol string, decimals int32) *TransactRequestFromToken {
	this := TransactRequestFromToken{}
	this.ChainID = chainID
	this.ChainType = chainType
	this.Address = address
	this.Symbol = symbol
	this.Decimals = decimals
	return &this
}

// NewTransactRequestFromTokenWithDefaults instantiates a new TransactRequestFromToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactRequestFromTokenWithDefaults() *TransactRequestFromToken {
	this := TransactRequestFromToken{}
	return &this
}

// GetChainID returns the ChainID field value
func (o *TransactRequestFromToken) GetChainID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainID
}

// GetChainIDOk returns a tuple with the ChainID field value
// and a boolean to check if the value has been set.
func (o *TransactRequestFromToken) GetChainIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainID, true
}

// SetChainID sets field value
func (o *TransactRequestFromToken) SetChainID(v string) {
	o.ChainID = v
}

// GetChainType returns the ChainType field value
func (o *TransactRequestFromToken) GetChainType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainType
}

// GetChainTypeOk returns a tuple with the ChainType field value
// and a boolean to check if the value has been set.
func (o *TransactRequestFromToken) GetChainTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainType, true
}

// SetChainType sets field value
func (o *TransactRequestFromToken) SetChainType(v string) {
	o.ChainType = v
}

// GetAddress returns the Address field value
func (o *TransactRequestFromToken) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *TransactRequestFromToken) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *TransactRequestFromToken) SetAddress(v string) {
	o.Address = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TransactRequestFromToken) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactRequestFromToken) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TransactRequestFromToken) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TransactRequestFromToken) SetName(v string) {
	o.Name = &v
}

// GetSymbol returns the Symbol field value
func (o *TransactRequestFromToken) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *TransactRequestFromToken) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *TransactRequestFromToken) SetSymbol(v string) {
	o.Symbol = v
}

// GetDecimals returns the Decimals field value
func (o *TransactRequestFromToken) GetDecimals() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value
// and a boolean to check if the value has been set.
func (o *TransactRequestFromToken) GetDecimalsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Decimals, true
}

// SetDecimals sets field value
func (o *TransactRequestFromToken) SetDecimals(v int32) {
	o.Decimals = v
}

// GetLogoURI returns the LogoURI field value if set, zero value otherwise.
func (o *TransactRequestFromToken) GetLogoURI() string {
	if o == nil || IsNil(o.LogoURI) {
		var ret string
		return ret
	}
	return *o.LogoURI
}

// GetLogoURIOk returns a tuple with the LogoURI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactRequestFromToken) GetLogoURIOk() (*string, bool) {
	if o == nil || IsNil(o.LogoURI) {
		return nil, false
	}
	return o.LogoURI, true
}

// HasLogoURI returns a boolean if a field has been set.
func (o *TransactRequestFromToken) HasLogoURI() bool {
	if o != nil && !IsNil(o.LogoURI) {
		return true
	}

	return false
}

// SetLogoURI gets a reference to the given string and assigns it to the LogoURI field.
func (o *TransactRequestFromToken) SetLogoURI(v string) {
	o.LogoURI = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *TransactRequestFromToken) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactRequestFromToken) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *TransactRequestFromToken) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *TransactRequestFromToken) SetTags(v []string) {
	o.Tags = v
}

// GetPriceUSD returns the PriceUSD field value if set, zero value otherwise.
func (o *TransactRequestFromToken) GetPriceUSD() string {
	if o == nil || IsNil(o.PriceUSD) {
		var ret string
		return ret
	}
	return *o.PriceUSD
}

// GetPriceUSDOk returns a tuple with the PriceUSD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactRequestFromToken) GetPriceUSDOk() (*string, bool) {
	if o == nil || IsNil(o.PriceUSD) {
		return nil, false
	}
	return o.PriceUSD, true
}

// HasPriceUSD returns a boolean if a field has been set.
func (o *TransactRequestFromToken) HasPriceUSD() bool {
	if o != nil && !IsNil(o.PriceUSD) {
		return true
	}

	return false
}

// SetPriceUSD gets a reference to the given string and assigns it to the PriceUSD field.
func (o *TransactRequestFromToken) SetPriceUSD(v string) {
	o.PriceUSD = &v
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *TransactRequestFromToken) GetExtensions() TransactRequestFromTokenExtensions {
	if o == nil || IsNil(o.Extensions) {
		var ret TransactRequestFromTokenExtensions
		return ret
	}
	return *o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactRequestFromToken) GetExtensionsOk() (*TransactRequestFromTokenExtensions, bool) {
	if o == nil || IsNil(o.Extensions) {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *TransactRequestFromToken) HasExtensions() bool {
	if o != nil && !IsNil(o.Extensions) {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given TransactRequestFromTokenExtensions and assigns it to the Extensions field.
func (o *TransactRequestFromToken) SetExtensions(v TransactRequestFromTokenExtensions) {
	o.Extensions = &v
}

func (o TransactRequestFromToken) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactRequestFromToken) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chainID"] = o.ChainID
	toSerialize["chainType"] = o.ChainType
	toSerialize["address"] = o.Address
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["symbol"] = o.Symbol
	toSerialize["decimals"] = o.Decimals
	if !IsNil(o.LogoURI) {
		toSerialize["logoURI"] = o.LogoURI
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.PriceUSD) {
		toSerialize["priceUSD"] = o.PriceUSD
	}
	if !IsNil(o.Extensions) {
		toSerialize["extensions"] = o.Extensions
	}
	return toSerialize, nil
}

type NullableTransactRequestFromToken struct {
	value *TransactRequestFromToken
	isSet bool
}

func (v NullableTransactRequestFromToken) Get() *TransactRequestFromToken {
	return v.value
}

func (v *NullableTransactRequestFromToken) Set(val *TransactRequestFromToken) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactRequestFromToken) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactRequestFromToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactRequestFromToken(val *TransactRequestFromToken) *NullableTransactRequestFromToken {
	return &NullableTransactRequestFromToken{value: val, isSet: true}
}

func (v NullableTransactRequestFromToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactRequestFromToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


