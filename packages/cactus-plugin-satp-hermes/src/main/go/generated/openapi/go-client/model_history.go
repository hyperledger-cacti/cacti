/*
Hyperledger Cactus Plugin - Odap Hermes

Implementation for Odap and Hermes

API version: 2.0.0-rc.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-satp-hermes

import (
	"encoding/json"
)

// checks if the History type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &History{}

// History struct for History
type History struct {
	Transactions []map[string]interface{} `json:"Transactions,omitempty"`
	Actions []map[string]interface{} `json:"Actions,omitempty"`
	Origin *string `json:"Origin,omitempty"`
	Destination *string `json:"Destination,omitempty"`
	Balance *string `json:"Balance,omitempty"`
	CurrentStatus map[string]interface{} `json:"CurrentStatus,omitempty"`
	ApplicationSpecificParameters map[string]interface{} `json:"ApplicationSpecificParameters,omitempty"`
}

// NewHistory instantiates a new History object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistory() *History {
	this := History{}
	return &this
}

// NewHistoryWithDefaults instantiates a new History object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryWithDefaults() *History {
	this := History{}
	return &this
}

// GetTransactions returns the Transactions field value if set, zero value otherwise.
func (o *History) GetTransactions() []map[string]interface{} {
	if o == nil || IsNil(o.Transactions) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *History) GetTransactionsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Transactions) {
		return nil, false
	}
	return o.Transactions, true
}

// HasTransactions returns a boolean if a field has been set.
func (o *History) HasTransactions() bool {
	if o != nil && !IsNil(o.Transactions) {
		return true
	}

	return false
}

// SetTransactions gets a reference to the given []map[string]interface{} and assigns it to the Transactions field.
func (o *History) SetTransactions(v []map[string]interface{}) {
	o.Transactions = v
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *History) GetActions() []map[string]interface{} {
	if o == nil || IsNil(o.Actions) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *History) GetActionsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *History) HasActions() bool {
	if o != nil && !IsNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given []map[string]interface{} and assigns it to the Actions field.
func (o *History) SetActions(v []map[string]interface{}) {
	o.Actions = v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *History) GetOrigin() string {
	if o == nil || IsNil(o.Origin) {
		var ret string
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *History) GetOriginOk() (*string, bool) {
	if o == nil || IsNil(o.Origin) {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *History) HasOrigin() bool {
	if o != nil && !IsNil(o.Origin) {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given string and assigns it to the Origin field.
func (o *History) SetOrigin(v string) {
	o.Origin = &v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *History) GetDestination() string {
	if o == nil || IsNil(o.Destination) {
		var ret string
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *History) GetDestinationOk() (*string, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *History) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given string and assigns it to the Destination field.
func (o *History) SetDestination(v string) {
	o.Destination = &v
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *History) GetBalance() string {
	if o == nil || IsNil(o.Balance) {
		var ret string
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *History) GetBalanceOk() (*string, bool) {
	if o == nil || IsNil(o.Balance) {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *History) HasBalance() bool {
	if o != nil && !IsNil(o.Balance) {
		return true
	}

	return false
}

// SetBalance gets a reference to the given string and assigns it to the Balance field.
func (o *History) SetBalance(v string) {
	o.Balance = &v
}

// GetCurrentStatus returns the CurrentStatus field value if set, zero value otherwise.
func (o *History) GetCurrentStatus() map[string]interface{} {
	if o == nil || IsNil(o.CurrentStatus) {
		var ret map[string]interface{}
		return ret
	}
	return o.CurrentStatus
}

// GetCurrentStatusOk returns a tuple with the CurrentStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *History) GetCurrentStatusOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CurrentStatus) {
		return map[string]interface{}{}, false
	}
	return o.CurrentStatus, true
}

// HasCurrentStatus returns a boolean if a field has been set.
func (o *History) HasCurrentStatus() bool {
	if o != nil && !IsNil(o.CurrentStatus) {
		return true
	}

	return false
}

// SetCurrentStatus gets a reference to the given map[string]interface{} and assigns it to the CurrentStatus field.
func (o *History) SetCurrentStatus(v map[string]interface{}) {
	o.CurrentStatus = v
}

// GetApplicationSpecificParameters returns the ApplicationSpecificParameters field value if set, zero value otherwise.
func (o *History) GetApplicationSpecificParameters() map[string]interface{} {
	if o == nil || IsNil(o.ApplicationSpecificParameters) {
		var ret map[string]interface{}
		return ret
	}
	return o.ApplicationSpecificParameters
}

// GetApplicationSpecificParametersOk returns a tuple with the ApplicationSpecificParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *History) GetApplicationSpecificParametersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ApplicationSpecificParameters) {
		return map[string]interface{}{}, false
	}
	return o.ApplicationSpecificParameters, true
}

// HasApplicationSpecificParameters returns a boolean if a field has been set.
func (o *History) HasApplicationSpecificParameters() bool {
	if o != nil && !IsNil(o.ApplicationSpecificParameters) {
		return true
	}

	return false
}

// SetApplicationSpecificParameters gets a reference to the given map[string]interface{} and assigns it to the ApplicationSpecificParameters field.
func (o *History) SetApplicationSpecificParameters(v map[string]interface{}) {
	o.ApplicationSpecificParameters = v
}

func (o History) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o History) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Transactions) {
		toSerialize["Transactions"] = o.Transactions
	}
	if !IsNil(o.Actions) {
		toSerialize["Actions"] = o.Actions
	}
	if !IsNil(o.Origin) {
		toSerialize["Origin"] = o.Origin
	}
	if !IsNil(o.Destination) {
		toSerialize["Destination"] = o.Destination
	}
	if !IsNil(o.Balance) {
		toSerialize["Balance"] = o.Balance
	}
	if !IsNil(o.CurrentStatus) {
		toSerialize["CurrentStatus"] = o.CurrentStatus
	}
	if !IsNil(o.ApplicationSpecificParameters) {
		toSerialize["ApplicationSpecificParameters"] = o.ApplicationSpecificParameters
	}
	return toSerialize, nil
}

type NullableHistory struct {
	value *History
	isSet bool
}

func (v NullableHistory) Get() *History {
	return v.value
}

func (v *NullableHistory) Set(val *History) {
	v.value = val
	v.isSet = true
}

func (v NullableHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistory(val *History) *NullableHistory {
	return &NullableHistory{value: val, isSet: true}
}

func (v NullableHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


