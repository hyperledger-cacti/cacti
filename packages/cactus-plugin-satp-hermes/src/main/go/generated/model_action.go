/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
)

// checks if the Action type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Action{}

// Action struct for Action
type Action struct {
	FromToken *GetRoutes200ResponseRoutesInnerFromToken `json:"fromToken,omitempty"`
	// The amount of 'fromToken' to be transferred, specified as a string to maintain precision.
	FromAmount *string `json:"fromAmount,omitempty"`
	ToToken *GetRoutes200ResponseRoutesInnerFromToken `json:"toToken,omitempty"`
	// The maximum acceptable difference between the expected price of the 'toToken' and the price at the time of the transfer.
	Slippage *float32 `json:"slippage,omitempty"`
	// A blockchain address.
	FromAddress *string `json:"fromAddress,omitempty"`
	// A blockchain address.
	ToAddress *string `json:"toAddress,omitempty"`
}

// NewAction instantiates a new Action object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAction() *Action {
	this := Action{}
	return &this
}

// NewActionWithDefaults instantiates a new Action object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionWithDefaults() *Action {
	this := Action{}
	return &this
}

// GetFromToken returns the FromToken field value if set, zero value otherwise.
func (o *Action) GetFromToken() GetRoutes200ResponseRoutesInnerFromToken {
	if o == nil || IsNil(o.FromToken) {
		var ret GetRoutes200ResponseRoutesInnerFromToken
		return ret
	}
	return *o.FromToken
}

// GetFromTokenOk returns a tuple with the FromToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetFromTokenOk() (*GetRoutes200ResponseRoutesInnerFromToken, bool) {
	if o == nil || IsNil(o.FromToken) {
		return nil, false
	}
	return o.FromToken, true
}

// HasFromToken returns a boolean if a field has been set.
func (o *Action) HasFromToken() bool {
	if o != nil && !IsNil(o.FromToken) {
		return true
	}

	return false
}

// SetFromToken gets a reference to the given GetRoutes200ResponseRoutesInnerFromToken and assigns it to the FromToken field.
func (o *Action) SetFromToken(v GetRoutes200ResponseRoutesInnerFromToken) {
	o.FromToken = &v
}

// GetFromAmount returns the FromAmount field value if set, zero value otherwise.
func (o *Action) GetFromAmount() string {
	if o == nil || IsNil(o.FromAmount) {
		var ret string
		return ret
	}
	return *o.FromAmount
}

// GetFromAmountOk returns a tuple with the FromAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetFromAmountOk() (*string, bool) {
	if o == nil || IsNil(o.FromAmount) {
		return nil, false
	}
	return o.FromAmount, true
}

// HasFromAmount returns a boolean if a field has been set.
func (o *Action) HasFromAmount() bool {
	if o != nil && !IsNil(o.FromAmount) {
		return true
	}

	return false
}

// SetFromAmount gets a reference to the given string and assigns it to the FromAmount field.
func (o *Action) SetFromAmount(v string) {
	o.FromAmount = &v
}

// GetToToken returns the ToToken field value if set, zero value otherwise.
func (o *Action) GetToToken() GetRoutes200ResponseRoutesInnerFromToken {
	if o == nil || IsNil(o.ToToken) {
		var ret GetRoutes200ResponseRoutesInnerFromToken
		return ret
	}
	return *o.ToToken
}

// GetToTokenOk returns a tuple with the ToToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetToTokenOk() (*GetRoutes200ResponseRoutesInnerFromToken, bool) {
	if o == nil || IsNil(o.ToToken) {
		return nil, false
	}
	return o.ToToken, true
}

// HasToToken returns a boolean if a field has been set.
func (o *Action) HasToToken() bool {
	if o != nil && !IsNil(o.ToToken) {
		return true
	}

	return false
}

// SetToToken gets a reference to the given GetRoutes200ResponseRoutesInnerFromToken and assigns it to the ToToken field.
func (o *Action) SetToToken(v GetRoutes200ResponseRoutesInnerFromToken) {
	o.ToToken = &v
}

// GetSlippage returns the Slippage field value if set, zero value otherwise.
func (o *Action) GetSlippage() float32 {
	if o == nil || IsNil(o.Slippage) {
		var ret float32
		return ret
	}
	return *o.Slippage
}

// GetSlippageOk returns a tuple with the Slippage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetSlippageOk() (*float32, bool) {
	if o == nil || IsNil(o.Slippage) {
		return nil, false
	}
	return o.Slippage, true
}

// HasSlippage returns a boolean if a field has been set.
func (o *Action) HasSlippage() bool {
	if o != nil && !IsNil(o.Slippage) {
		return true
	}

	return false
}

// SetSlippage gets a reference to the given float32 and assigns it to the Slippage field.
func (o *Action) SetSlippage(v float32) {
	o.Slippage = &v
}

// GetFromAddress returns the FromAddress field value if set, zero value otherwise.
func (o *Action) GetFromAddress() string {
	if o == nil || IsNil(o.FromAddress) {
		var ret string
		return ret
	}
	return *o.FromAddress
}

// GetFromAddressOk returns a tuple with the FromAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetFromAddressOk() (*string, bool) {
	if o == nil || IsNil(o.FromAddress) {
		return nil, false
	}
	return o.FromAddress, true
}

// HasFromAddress returns a boolean if a field has been set.
func (o *Action) HasFromAddress() bool {
	if o != nil && !IsNil(o.FromAddress) {
		return true
	}

	return false
}

// SetFromAddress gets a reference to the given string and assigns it to the FromAddress field.
func (o *Action) SetFromAddress(v string) {
	o.FromAddress = &v
}

// GetToAddress returns the ToAddress field value if set, zero value otherwise.
func (o *Action) GetToAddress() string {
	if o == nil || IsNil(o.ToAddress) {
		var ret string
		return ret
	}
	return *o.ToAddress
}

// GetToAddressOk returns a tuple with the ToAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Action) GetToAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ToAddress) {
		return nil, false
	}
	return o.ToAddress, true
}

// HasToAddress returns a boolean if a field has been set.
func (o *Action) HasToAddress() bool {
	if o != nil && !IsNil(o.ToAddress) {
		return true
	}

	return false
}

// SetToAddress gets a reference to the given string and assigns it to the ToAddress field.
func (o *Action) SetToAddress(v string) {
	o.ToAddress = &v
}

func (o Action) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Action) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FromToken) {
		toSerialize["fromToken"] = o.FromToken
	}
	if !IsNil(o.FromAmount) {
		toSerialize["fromAmount"] = o.FromAmount
	}
	if !IsNil(o.ToToken) {
		toSerialize["toToken"] = o.ToToken
	}
	if !IsNil(o.Slippage) {
		toSerialize["slippage"] = o.Slippage
	}
	if !IsNil(o.FromAddress) {
		toSerialize["fromAddress"] = o.FromAddress
	}
	if !IsNil(o.ToAddress) {
		toSerialize["toAddress"] = o.ToAddress
	}
	return toSerialize, nil
}

type NullableAction struct {
	value *Action
	isSet bool
}

func (v NullableAction) Get() *Action {
	return v.value
}

func (v *NullableAction) Set(val *Action) {
	v.value = val
	v.isSet = true
}

func (v NullableAction) IsSet() bool {
	return v.isSet
}

func (v *NullableAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAction(val *Action) *NullableAction {
	return &NullableAction{value: val, isSet: true}
}

func (v NullableAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


