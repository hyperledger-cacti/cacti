/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: v0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
)

// checks if the TransactRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactRequest{}

// TransactRequest struct for TransactRequest
type TransactRequest struct {
	// A unique identifier for the transaction context.
	ContextID string `json:"contextID"`
	// The network of the DLT being interacted with. TODO: implement network identification draft
	FromDLTNetworkID string `json:"fromDLTNetworkID"`
	// The amount in string format including all decimals.
	FromAmount string `json:"fromAmount"`
	FromToken TransactRequestFromToken `json:"fromToken"`
	// The network of the DLT being interacted with. TODO: implement network identification draft
	ToDLTNetworkID string `json:"toDLTNetworkID"`
	// The amount in string format including all decimals.
	ToAmount string `json:"toAmount"`
	ToToken TransactRequestFromToken `json:"toToken"`
}

// NewTransactRequest instantiates a new TransactRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactRequest(contextID string, fromDLTNetworkID string, fromAmount string, fromToken TransactRequestFromToken, toDLTNetworkID string, toAmount string, toToken TransactRequestFromToken) *TransactRequest {
	this := TransactRequest{}
	this.ContextID = contextID
	this.FromDLTNetworkID = fromDLTNetworkID
	this.FromAmount = fromAmount
	this.FromToken = fromToken
	this.ToDLTNetworkID = toDLTNetworkID
	this.ToAmount = toAmount
	this.ToToken = toToken
	return &this
}

// NewTransactRequestWithDefaults instantiates a new TransactRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactRequestWithDefaults() *TransactRequest {
	this := TransactRequest{}
	return &this
}

// GetContextID returns the ContextID field value
func (o *TransactRequest) GetContextID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContextID
}

// GetContextIDOk returns a tuple with the ContextID field value
// and a boolean to check if the value has been set.
func (o *TransactRequest) GetContextIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContextID, true
}

// SetContextID sets field value
func (o *TransactRequest) SetContextID(v string) {
	o.ContextID = v
}

// GetFromDLTNetworkID returns the FromDLTNetworkID field value
func (o *TransactRequest) GetFromDLTNetworkID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromDLTNetworkID
}

// GetFromDLTNetworkIDOk returns a tuple with the FromDLTNetworkID field value
// and a boolean to check if the value has been set.
func (o *TransactRequest) GetFromDLTNetworkIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromDLTNetworkID, true
}

// SetFromDLTNetworkID sets field value
func (o *TransactRequest) SetFromDLTNetworkID(v string) {
	o.FromDLTNetworkID = v
}

// GetFromAmount returns the FromAmount field value
func (o *TransactRequest) GetFromAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromAmount
}

// GetFromAmountOk returns a tuple with the FromAmount field value
// and a boolean to check if the value has been set.
func (o *TransactRequest) GetFromAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromAmount, true
}

// SetFromAmount sets field value
func (o *TransactRequest) SetFromAmount(v string) {
	o.FromAmount = v
}

// GetFromToken returns the FromToken field value
func (o *TransactRequest) GetFromToken() TransactRequestFromToken {
	if o == nil {
		var ret TransactRequestFromToken
		return ret
	}

	return o.FromToken
}

// GetFromTokenOk returns a tuple with the FromToken field value
// and a boolean to check if the value has been set.
func (o *TransactRequest) GetFromTokenOk() (*TransactRequestFromToken, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromToken, true
}

// SetFromToken sets field value
func (o *TransactRequest) SetFromToken(v TransactRequestFromToken) {
	o.FromToken = v
}

// GetToDLTNetworkID returns the ToDLTNetworkID field value
func (o *TransactRequest) GetToDLTNetworkID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToDLTNetworkID
}

// GetToDLTNetworkIDOk returns a tuple with the ToDLTNetworkID field value
// and a boolean to check if the value has been set.
func (o *TransactRequest) GetToDLTNetworkIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToDLTNetworkID, true
}

// SetToDLTNetworkID sets field value
func (o *TransactRequest) SetToDLTNetworkID(v string) {
	o.ToDLTNetworkID = v
}

// GetToAmount returns the ToAmount field value
func (o *TransactRequest) GetToAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToAmount
}

// GetToAmountOk returns a tuple with the ToAmount field value
// and a boolean to check if the value has been set.
func (o *TransactRequest) GetToAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToAmount, true
}

// SetToAmount sets field value
func (o *TransactRequest) SetToAmount(v string) {
	o.ToAmount = v
}

// GetToToken returns the ToToken field value
func (o *TransactRequest) GetToToken() TransactRequestFromToken {
	if o == nil {
		var ret TransactRequestFromToken
		return ret
	}

	return o.ToToken
}

// GetToTokenOk returns a tuple with the ToToken field value
// and a boolean to check if the value has been set.
func (o *TransactRequest) GetToTokenOk() (*TransactRequestFromToken, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToToken, true
}

// SetToToken sets field value
func (o *TransactRequest) SetToToken(v TransactRequestFromToken) {
	o.ToToken = v
}

func (o TransactRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contextID"] = o.ContextID
	toSerialize["fromDLTNetworkID"] = o.FromDLTNetworkID
	toSerialize["fromAmount"] = o.FromAmount
	toSerialize["fromToken"] = o.FromToken
	toSerialize["toDLTNetworkID"] = o.ToDLTNetworkID
	toSerialize["toAmount"] = o.ToAmount
	toSerialize["toToken"] = o.ToToken
	return toSerialize, nil
}

type NullableTransactRequest struct {
	value *TransactRequest
	isSet bool
}

func (v NullableTransactRequest) Get() *TransactRequest {
	return v.value
}

func (v *NullableTransactRequest) Set(val *TransactRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactRequest(val *TransactRequest) *NullableTransactRequest {
	return &NullableTransactRequest{value: val, isSet: true}
}

func (v NullableTransactRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


