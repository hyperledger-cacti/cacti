/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
)

// checks if the GasCost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GasCost{}

// GasCost struct for GasCost
type GasCost struct {
	// The type of the gas cost.
	Type *string `json:"type,omitempty"`
	// The gas price, specified as a string to maintain precision.
	Price *string `json:"price,omitempty"`
	// The estimated gas required, specified as a string to maintain precision.
	Estimate *string `json:"estimate,omitempty"`
	// The gas limit for the transaction, specified as a string to maintain precision.
	Limit *string `json:"limit,omitempty"`
	// The amount of gas required in the gas currency.
	Amount *string `json:"amount,omitempty"`
	// The amount of gas required in USD.
	AmountUSD *string `json:"amountUSD,omitempty"`
	Token *GetRoutes200ResponseRoutesInnerFromToken `json:"token,omitempty"`
}

// NewGasCost instantiates a new GasCost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGasCost() *GasCost {
	this := GasCost{}
	return &this
}

// NewGasCostWithDefaults instantiates a new GasCost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGasCostWithDefaults() *GasCost {
	this := GasCost{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GasCost) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GasCost) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GasCost) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GasCost) SetType(v string) {
	o.Type = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *GasCost) GetPrice() string {
	if o == nil || IsNil(o.Price) {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GasCost) GetPriceOk() (*string, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *GasCost) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *GasCost) SetPrice(v string) {
	o.Price = &v
}

// GetEstimate returns the Estimate field value if set, zero value otherwise.
func (o *GasCost) GetEstimate() string {
	if o == nil || IsNil(o.Estimate) {
		var ret string
		return ret
	}
	return *o.Estimate
}

// GetEstimateOk returns a tuple with the Estimate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GasCost) GetEstimateOk() (*string, bool) {
	if o == nil || IsNil(o.Estimate) {
		return nil, false
	}
	return o.Estimate, true
}

// HasEstimate returns a boolean if a field has been set.
func (o *GasCost) HasEstimate() bool {
	if o != nil && !IsNil(o.Estimate) {
		return true
	}

	return false
}

// SetEstimate gets a reference to the given string and assigns it to the Estimate field.
func (o *GasCost) SetEstimate(v string) {
	o.Estimate = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *GasCost) GetLimit() string {
	if o == nil || IsNil(o.Limit) {
		var ret string
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GasCost) GetLimitOk() (*string, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *GasCost) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given string and assigns it to the Limit field.
func (o *GasCost) SetLimit(v string) {
	o.Limit = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *GasCost) GetAmount() string {
	if o == nil || IsNil(o.Amount) {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GasCost) GetAmountOk() (*string, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *GasCost) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *GasCost) SetAmount(v string) {
	o.Amount = &v
}

// GetAmountUSD returns the AmountUSD field value if set, zero value otherwise.
func (o *GasCost) GetAmountUSD() string {
	if o == nil || IsNil(o.AmountUSD) {
		var ret string
		return ret
	}
	return *o.AmountUSD
}

// GetAmountUSDOk returns a tuple with the AmountUSD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GasCost) GetAmountUSDOk() (*string, bool) {
	if o == nil || IsNil(o.AmountUSD) {
		return nil, false
	}
	return o.AmountUSD, true
}

// HasAmountUSD returns a boolean if a field has been set.
func (o *GasCost) HasAmountUSD() bool {
	if o != nil && !IsNil(o.AmountUSD) {
		return true
	}

	return false
}

// SetAmountUSD gets a reference to the given string and assigns it to the AmountUSD field.
func (o *GasCost) SetAmountUSD(v string) {
	o.AmountUSD = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *GasCost) GetToken() GetRoutes200ResponseRoutesInnerFromToken {
	if o == nil || IsNil(o.Token) {
		var ret GetRoutes200ResponseRoutesInnerFromToken
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GasCost) GetTokenOk() (*GetRoutes200ResponseRoutesInnerFromToken, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *GasCost) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given GetRoutes200ResponseRoutesInnerFromToken and assigns it to the Token field.
func (o *GasCost) SetToken(v GetRoutes200ResponseRoutesInnerFromToken) {
	o.Token = &v
}

func (o GasCost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GasCost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Estimate) {
		toSerialize["estimate"] = o.Estimate
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.AmountUSD) {
		toSerialize["amountUSD"] = o.AmountUSD
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	return toSerialize, nil
}

type NullableGasCost struct {
	value *GasCost
	isSet bool
}

func (v NullableGasCost) Get() *GasCost {
	return v.value
}

func (v *NullableGasCost) Set(val *GasCost) {
	v.value = val
	v.isSet = true
}

func (v NullableGasCost) IsSet() bool {
	return v.isSet
}

func (v *NullableGasCost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGasCost(val *GasCost) *NullableGasCost {
	return &NullableGasCost{value: val, isSet: true}
}

func (v NullableGasCost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGasCost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


