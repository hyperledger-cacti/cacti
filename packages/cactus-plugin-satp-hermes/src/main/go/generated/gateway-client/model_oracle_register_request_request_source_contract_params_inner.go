/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
)

// OracleRegisterRequestRequestSourceContractParamsInner - struct for OracleRegisterRequestRequestSourceContractParamsInner
type OracleRegisterRequestRequestSourceContractParamsInner struct {
	Float32 *float32
	String *string
}

// float32AsOracleRegisterRequestRequestSourceContractParamsInner is a convenience function that returns float32 wrapped in OracleRegisterRequestRequestSourceContractParamsInner
func Float32AsOracleRegisterRequestRequestSourceContractParamsInner(v *float32) OracleRegisterRequestRequestSourceContractParamsInner {
	return OracleRegisterRequestRequestSourceContractParamsInner{
		Float32: v,
	}
}

// stringAsOracleRegisterRequestRequestSourceContractParamsInner is a convenience function that returns string wrapped in OracleRegisterRequestRequestSourceContractParamsInner
func StringAsOracleRegisterRequestRequestSourceContractParamsInner(v *string) OracleRegisterRequestRequestSourceContractParamsInner {
	return OracleRegisterRequestRequestSourceContractParamsInner{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *OracleRegisterRequestRequestSourceContractParamsInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Float32
	err = newStrictDecoder(data).Decode(&dst.Float32)
	if err == nil {
		jsonFloat32, _ := json.Marshal(dst.Float32)
		if string(jsonFloat32) == "{}" { // empty struct
			dst.Float32 = nil
		} else {
			match++
		}
	} else {
		dst.Float32 = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Float32 = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(OracleRegisterRequestRequestSourceContractParamsInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(OracleRegisterRequestRequestSourceContractParamsInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OracleRegisterRequestRequestSourceContractParamsInner) MarshalJSON() ([]byte, error) {
	if src.Float32 != nil {
		return json.Marshal(&src.Float32)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OracleRegisterRequestRequestSourceContractParamsInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Float32 != nil {
		return obj.Float32
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableOracleRegisterRequestRequestSourceContractParamsInner struct {
	value *OracleRegisterRequestRequestSourceContractParamsInner
	isSet bool
}

func (v NullableOracleRegisterRequestRequestSourceContractParamsInner) Get() *OracleRegisterRequestRequestSourceContractParamsInner {
	return v.value
}

func (v *NullableOracleRegisterRequestRequestSourceContractParamsInner) Set(val *OracleRegisterRequestRequestSourceContractParamsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleRegisterRequestRequestSourceContractParamsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleRegisterRequestRequestSourceContractParamsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleRegisterRequestRequestSourceContractParamsInner(val *OracleRegisterRequestRequestSourceContractParamsInner) *NullableOracleRegisterRequestRequestSourceContractParamsInner {
	return &NullableOracleRegisterRequestRequestSourceContractParamsInner{value: val, isSet: true}
}

func (v NullableOracleRegisterRequestRequestSourceContractParamsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleRegisterRequestRequestSourceContractParamsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


