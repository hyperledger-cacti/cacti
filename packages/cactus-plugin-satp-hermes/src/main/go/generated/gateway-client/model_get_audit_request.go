/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
	"time"
)

// checks if the GetAuditRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetAuditRequest{}

// GetAuditRequest Request schema for initiating an audit. Includes the start and end dates for the audit period and an option to include proofs.
type GetAuditRequest struct {
	// The start datetime for the audit.
	AuditStartDate *time.Time `json:"auditStartDate,omitempty"`
	// The end datetime for the audit.
	AuditEndDate *time.Time `json:"auditEndDate,omitempty"`
	// Include proofs generated from each gateway transaction.
	IncludeProofs *bool `json:"includeProofs,omitempty"`
}

// NewGetAuditRequest instantiates a new GetAuditRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetAuditRequest() *GetAuditRequest {
	this := GetAuditRequest{}
	return &this
}

// NewGetAuditRequestWithDefaults instantiates a new GetAuditRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetAuditRequestWithDefaults() *GetAuditRequest {
	this := GetAuditRequest{}
	return &this
}

// GetAuditStartDate returns the AuditStartDate field value if set, zero value otherwise.
func (o *GetAuditRequest) GetAuditStartDate() time.Time {
	if o == nil || IsNil(o.AuditStartDate) {
		var ret time.Time
		return ret
	}
	return *o.AuditStartDate
}

// GetAuditStartDateOk returns a tuple with the AuditStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAuditRequest) GetAuditStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AuditStartDate) {
		return nil, false
	}
	return o.AuditStartDate, true
}

// HasAuditStartDate returns a boolean if a field has been set.
func (o *GetAuditRequest) HasAuditStartDate() bool {
	if o != nil && !IsNil(o.AuditStartDate) {
		return true
	}

	return false
}

// SetAuditStartDate gets a reference to the given time.Time and assigns it to the AuditStartDate field.
func (o *GetAuditRequest) SetAuditStartDate(v time.Time) {
	o.AuditStartDate = &v
}

// GetAuditEndDate returns the AuditEndDate field value if set, zero value otherwise.
func (o *GetAuditRequest) GetAuditEndDate() time.Time {
	if o == nil || IsNil(o.AuditEndDate) {
		var ret time.Time
		return ret
	}
	return *o.AuditEndDate
}

// GetAuditEndDateOk returns a tuple with the AuditEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAuditRequest) GetAuditEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AuditEndDate) {
		return nil, false
	}
	return o.AuditEndDate, true
}

// HasAuditEndDate returns a boolean if a field has been set.
func (o *GetAuditRequest) HasAuditEndDate() bool {
	if o != nil && !IsNil(o.AuditEndDate) {
		return true
	}

	return false
}

// SetAuditEndDate gets a reference to the given time.Time and assigns it to the AuditEndDate field.
func (o *GetAuditRequest) SetAuditEndDate(v time.Time) {
	o.AuditEndDate = &v
}

// GetIncludeProofs returns the IncludeProofs field value if set, zero value otherwise.
func (o *GetAuditRequest) GetIncludeProofs() bool {
	if o == nil || IsNil(o.IncludeProofs) {
		var ret bool
		return ret
	}
	return *o.IncludeProofs
}

// GetIncludeProofsOk returns a tuple with the IncludeProofs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetAuditRequest) GetIncludeProofsOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeProofs) {
		return nil, false
	}
	return o.IncludeProofs, true
}

// HasIncludeProofs returns a boolean if a field has been set.
func (o *GetAuditRequest) HasIncludeProofs() bool {
	if o != nil && !IsNil(o.IncludeProofs) {
		return true
	}

	return false
}

// SetIncludeProofs gets a reference to the given bool and assigns it to the IncludeProofs field.
func (o *GetAuditRequest) SetIncludeProofs(v bool) {
	o.IncludeProofs = &v
}

func (o GetAuditRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetAuditRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuditStartDate) {
		toSerialize["auditStartDate"] = o.AuditStartDate
	}
	if !IsNil(o.AuditEndDate) {
		toSerialize["auditEndDate"] = o.AuditEndDate
	}
	if !IsNil(o.IncludeProofs) {
		toSerialize["includeProofs"] = o.IncludeProofs
	}
	return toSerialize, nil
}

type NullableGetAuditRequest struct {
	value *GetAuditRequest
	isSet bool
}

func (v NullableGetAuditRequest) Get() *GetAuditRequest {
	return v.value
}

func (v *NullableGetAuditRequest) Set(val *GetAuditRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGetAuditRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGetAuditRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetAuditRequest(val *GetAuditRequest) *NullableGetAuditRequest {
	return &NullableGetAuditRequest{value: val, isSet: true}
}

func (v NullableGetAuditRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetAuditRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


