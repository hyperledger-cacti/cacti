/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
)

// checks if the OracleRepeatableTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OracleRepeatableTask{}

// OracleRepeatableTask Represents a repeatable Oracle task with additional properties for mode, polling interval, and source event signature.
type OracleRepeatableTask struct {
	// A unique identifier for the Oracle task.
	Id string `json:"id"`
	// The type of the Oracle task.
	Type *Enum `json:"type,omitempty"`
	SrcNetworkId *TransactRequestSourceAssetNetworkId `json:"srcNetworkId,omitempty"`
	SrcContract *OracleRegisterRequest200ResponseSrcContract `json:"srcContract,omitempty"`
	DstNetworkId *TransactRequestSourceAssetNetworkId `json:"dstNetworkId,omitempty"`
	DstContract *OracleRegisterRequest200ResponseDstContract `json:"dstContract,omitempty"`
	// The timestamp when the Oracle task was created or last updated.
	Timestamp *int64 `json:"timestamp,omitempty"`
	// The list of operations performed by the Oracle task.
	Operations []OracleRegisterRequest200ResponseOperationsInner `json:"operations,omitempty"`
	// The current status of the Oracle task.
	Status *Enum `json:"status,omitempty"`
	// The mode of operation for the repeatable task.
	Mode string `json:"mode"`
	// The interval for polling in milliseconds. Only if taskMode is POLLING.
	PollingInterval *int32 `json:"pollingInterval,omitempty"`
	// The event signature to listen for on the source network.
	SourceEventSignature *string `json:"sourceEventSignature,omitempty"`
}

// NewOracleRepeatableTask instantiates a new OracleRepeatableTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleRepeatableTask(id string, mode string) *OracleRepeatableTask {
	this := OracleRepeatableTask{}
	this.Id = id
	this.Mode = mode
	return &this
}

// NewOracleRepeatableTaskWithDefaults instantiates a new OracleRepeatableTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleRepeatableTaskWithDefaults() *OracleRepeatableTask {
	this := OracleRepeatableTask{}
	return &this
}

// GetId returns the Id field value
func (o *OracleRepeatableTask) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OracleRepeatableTask) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OracleRepeatableTask) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OracleRepeatableTask) GetType() Enum {
	if o == nil || IsNil(o.Type) {
		var ret Enum
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRepeatableTask) GetTypeOk() (*Enum, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OracleRepeatableTask) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given Enum and assigns it to the Type field.
func (o *OracleRepeatableTask) SetType(v Enum) {
	o.Type = &v
}

// GetSrcNetworkId returns the SrcNetworkId field value if set, zero value otherwise.
func (o *OracleRepeatableTask) GetSrcNetworkId() TransactRequestSourceAssetNetworkId {
	if o == nil || IsNil(o.SrcNetworkId) {
		var ret TransactRequestSourceAssetNetworkId
		return ret
	}
	return *o.SrcNetworkId
}

// GetSrcNetworkIdOk returns a tuple with the SrcNetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRepeatableTask) GetSrcNetworkIdOk() (*TransactRequestSourceAssetNetworkId, bool) {
	if o == nil || IsNil(o.SrcNetworkId) {
		return nil, false
	}
	return o.SrcNetworkId, true
}

// HasSrcNetworkId returns a boolean if a field has been set.
func (o *OracleRepeatableTask) HasSrcNetworkId() bool {
	if o != nil && !IsNil(o.SrcNetworkId) {
		return true
	}

	return false
}

// SetSrcNetworkId gets a reference to the given TransactRequestSourceAssetNetworkId and assigns it to the SrcNetworkId field.
func (o *OracleRepeatableTask) SetSrcNetworkId(v TransactRequestSourceAssetNetworkId) {
	o.SrcNetworkId = &v
}

// GetSrcContract returns the SrcContract field value if set, zero value otherwise.
func (o *OracleRepeatableTask) GetSrcContract() OracleRegisterRequest200ResponseSrcContract {
	if o == nil || IsNil(o.SrcContract) {
		var ret OracleRegisterRequest200ResponseSrcContract
		return ret
	}
	return *o.SrcContract
}

// GetSrcContractOk returns a tuple with the SrcContract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRepeatableTask) GetSrcContractOk() (*OracleRegisterRequest200ResponseSrcContract, bool) {
	if o == nil || IsNil(o.SrcContract) {
		return nil, false
	}
	return o.SrcContract, true
}

// HasSrcContract returns a boolean if a field has been set.
func (o *OracleRepeatableTask) HasSrcContract() bool {
	if o != nil && !IsNil(o.SrcContract) {
		return true
	}

	return false
}

// SetSrcContract gets a reference to the given OracleRegisterRequest200ResponseSrcContract and assigns it to the SrcContract field.
func (o *OracleRepeatableTask) SetSrcContract(v OracleRegisterRequest200ResponseSrcContract) {
	o.SrcContract = &v
}

// GetDstNetworkId returns the DstNetworkId field value if set, zero value otherwise.
func (o *OracleRepeatableTask) GetDstNetworkId() TransactRequestSourceAssetNetworkId {
	if o == nil || IsNil(o.DstNetworkId) {
		var ret TransactRequestSourceAssetNetworkId
		return ret
	}
	return *o.DstNetworkId
}

// GetDstNetworkIdOk returns a tuple with the DstNetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRepeatableTask) GetDstNetworkIdOk() (*TransactRequestSourceAssetNetworkId, bool) {
	if o == nil || IsNil(o.DstNetworkId) {
		return nil, false
	}
	return o.DstNetworkId, true
}

// HasDstNetworkId returns a boolean if a field has been set.
func (o *OracleRepeatableTask) HasDstNetworkId() bool {
	if o != nil && !IsNil(o.DstNetworkId) {
		return true
	}

	return false
}

// SetDstNetworkId gets a reference to the given TransactRequestSourceAssetNetworkId and assigns it to the DstNetworkId field.
func (o *OracleRepeatableTask) SetDstNetworkId(v TransactRequestSourceAssetNetworkId) {
	o.DstNetworkId = &v
}

// GetDstContract returns the DstContract field value if set, zero value otherwise.
func (o *OracleRepeatableTask) GetDstContract() OracleRegisterRequest200ResponseDstContract {
	if o == nil || IsNil(o.DstContract) {
		var ret OracleRegisterRequest200ResponseDstContract
		return ret
	}
	return *o.DstContract
}

// GetDstContractOk returns a tuple with the DstContract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRepeatableTask) GetDstContractOk() (*OracleRegisterRequest200ResponseDstContract, bool) {
	if o == nil || IsNil(o.DstContract) {
		return nil, false
	}
	return o.DstContract, true
}

// HasDstContract returns a boolean if a field has been set.
func (o *OracleRepeatableTask) HasDstContract() bool {
	if o != nil && !IsNil(o.DstContract) {
		return true
	}

	return false
}

// SetDstContract gets a reference to the given OracleRegisterRequest200ResponseDstContract and assigns it to the DstContract field.
func (o *OracleRepeatableTask) SetDstContract(v OracleRegisterRequest200ResponseDstContract) {
	o.DstContract = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *OracleRepeatableTask) GetTimestamp() int64 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRepeatableTask) GetTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *OracleRepeatableTask) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *OracleRepeatableTask) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetOperations returns the Operations field value if set, zero value otherwise.
func (o *OracleRepeatableTask) GetOperations() []OracleRegisterRequest200ResponseOperationsInner {
	if o == nil || IsNil(o.Operations) {
		var ret []OracleRegisterRequest200ResponseOperationsInner
		return ret
	}
	return o.Operations
}

// GetOperationsOk returns a tuple with the Operations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRepeatableTask) GetOperationsOk() ([]OracleRegisterRequest200ResponseOperationsInner, bool) {
	if o == nil || IsNil(o.Operations) {
		return nil, false
	}
	return o.Operations, true
}

// HasOperations returns a boolean if a field has been set.
func (o *OracleRepeatableTask) HasOperations() bool {
	if o != nil && !IsNil(o.Operations) {
		return true
	}

	return false
}

// SetOperations gets a reference to the given []OracleRegisterRequest200ResponseOperationsInner and assigns it to the Operations field.
func (o *OracleRepeatableTask) SetOperations(v []OracleRegisterRequest200ResponseOperationsInner) {
	o.Operations = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *OracleRepeatableTask) GetStatus() Enum {
	if o == nil || IsNil(o.Status) {
		var ret Enum
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRepeatableTask) GetStatusOk() (*Enum, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *OracleRepeatableTask) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Enum and assigns it to the Status field.
func (o *OracleRepeatableTask) SetStatus(v Enum) {
	o.Status = &v
}

// GetMode returns the Mode field value
func (o *OracleRepeatableTask) GetMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *OracleRepeatableTask) GetModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *OracleRepeatableTask) SetMode(v string) {
	o.Mode = v
}

// GetPollingInterval returns the PollingInterval field value if set, zero value otherwise.
func (o *OracleRepeatableTask) GetPollingInterval() int32 {
	if o == nil || IsNil(o.PollingInterval) {
		var ret int32
		return ret
	}
	return *o.PollingInterval
}

// GetPollingIntervalOk returns a tuple with the PollingInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRepeatableTask) GetPollingIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.PollingInterval) {
		return nil, false
	}
	return o.PollingInterval, true
}

// HasPollingInterval returns a boolean if a field has been set.
func (o *OracleRepeatableTask) HasPollingInterval() bool {
	if o != nil && !IsNil(o.PollingInterval) {
		return true
	}

	return false
}

// SetPollingInterval gets a reference to the given int32 and assigns it to the PollingInterval field.
func (o *OracleRepeatableTask) SetPollingInterval(v int32) {
	o.PollingInterval = &v
}

// GetSourceEventSignature returns the SourceEventSignature field value if set, zero value otherwise.
func (o *OracleRepeatableTask) GetSourceEventSignature() string {
	if o == nil || IsNil(o.SourceEventSignature) {
		var ret string
		return ret
	}
	return *o.SourceEventSignature
}

// GetSourceEventSignatureOk returns a tuple with the SourceEventSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRepeatableTask) GetSourceEventSignatureOk() (*string, bool) {
	if o == nil || IsNil(o.SourceEventSignature) {
		return nil, false
	}
	return o.SourceEventSignature, true
}

// HasSourceEventSignature returns a boolean if a field has been set.
func (o *OracleRepeatableTask) HasSourceEventSignature() bool {
	if o != nil && !IsNil(o.SourceEventSignature) {
		return true
	}

	return false
}

// SetSourceEventSignature gets a reference to the given string and assigns it to the SourceEventSignature field.
func (o *OracleRepeatableTask) SetSourceEventSignature(v string) {
	o.SourceEventSignature = &v
}

func (o OracleRepeatableTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OracleRepeatableTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.SrcNetworkId) {
		toSerialize["srcNetworkId"] = o.SrcNetworkId
	}
	if !IsNil(o.SrcContract) {
		toSerialize["srcContract"] = o.SrcContract
	}
	if !IsNil(o.DstNetworkId) {
		toSerialize["dstNetworkId"] = o.DstNetworkId
	}
	if !IsNil(o.DstContract) {
		toSerialize["dstContract"] = o.DstContract
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Operations) {
		toSerialize["operations"] = o.Operations
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["mode"] = o.Mode
	if !IsNil(o.PollingInterval) {
		toSerialize["pollingInterval"] = o.PollingInterval
	}
	if !IsNil(o.SourceEventSignature) {
		toSerialize["sourceEventSignature"] = o.SourceEventSignature
	}
	return toSerialize, nil
}

type NullableOracleRepeatableTask struct {
	value *OracleRepeatableTask
	isSet bool
}

func (v NullableOracleRepeatableTask) Get() *OracleRepeatableTask {
	return v.value
}

func (v *NullableOracleRepeatableTask) Set(val *OracleRepeatableTask) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleRepeatableTask) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleRepeatableTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleRepeatableTask(val *OracleRepeatableTask) *NullableOracleRepeatableTask {
	return &NullableOracleRepeatableTask{value: val, isSet: true}
}

func (v NullableOracleRepeatableTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleRepeatableTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


