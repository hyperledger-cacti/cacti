/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
)

// checks if the OracleTaskListeningOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OracleTaskListeningOptions{}

// OracleTaskListeningOptions Options for event listening. Only if taskMode is EVENT_LISTENING.
type OracleTaskListeningOptions struct {
	// The event signature to listen for on the source network. Only if taskMode is EVENT_LISTENING.
	EventSignature *string `json:"eventSignature,omitempty"`
	// The parameters to filter in the captured events.
	FilterParams []string `json:"filterParams,omitempty"`
}

// NewOracleTaskListeningOptions instantiates a new OracleTaskListeningOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleTaskListeningOptions() *OracleTaskListeningOptions {
	this := OracleTaskListeningOptions{}
	return &this
}

// NewOracleTaskListeningOptionsWithDefaults instantiates a new OracleTaskListeningOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleTaskListeningOptionsWithDefaults() *OracleTaskListeningOptions {
	this := OracleTaskListeningOptions{}
	return &this
}

// GetEventSignature returns the EventSignature field value if set, zero value otherwise.
func (o *OracleTaskListeningOptions) GetEventSignature() string {
	if o == nil || IsNil(o.EventSignature) {
		var ret string
		return ret
	}
	return *o.EventSignature
}

// GetEventSignatureOk returns a tuple with the EventSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleTaskListeningOptions) GetEventSignatureOk() (*string, bool) {
	if o == nil || IsNil(o.EventSignature) {
		return nil, false
	}
	return o.EventSignature, true
}

// HasEventSignature returns a boolean if a field has been set.
func (o *OracleTaskListeningOptions) HasEventSignature() bool {
	if o != nil && !IsNil(o.EventSignature) {
		return true
	}

	return false
}

// SetEventSignature gets a reference to the given string and assigns it to the EventSignature field.
func (o *OracleTaskListeningOptions) SetEventSignature(v string) {
	o.EventSignature = &v
}

// GetFilterParams returns the FilterParams field value if set, zero value otherwise.
func (o *OracleTaskListeningOptions) GetFilterParams() []string {
	if o == nil || IsNil(o.FilterParams) {
		var ret []string
		return ret
	}
	return o.FilterParams
}

// GetFilterParamsOk returns a tuple with the FilterParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleTaskListeningOptions) GetFilterParamsOk() ([]string, bool) {
	if o == nil || IsNil(o.FilterParams) {
		return nil, false
	}
	return o.FilterParams, true
}

// HasFilterParams returns a boolean if a field has been set.
func (o *OracleTaskListeningOptions) HasFilterParams() bool {
	if o != nil && !IsNil(o.FilterParams) {
		return true
	}

	return false
}

// SetFilterParams gets a reference to the given []string and assigns it to the FilterParams field.
func (o *OracleTaskListeningOptions) SetFilterParams(v []string) {
	o.FilterParams = v
}

func (o OracleTaskListeningOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OracleTaskListeningOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventSignature) {
		toSerialize["eventSignature"] = o.EventSignature
	}
	if !IsNil(o.FilterParams) {
		toSerialize["filterParams"] = o.FilterParams
	}
	return toSerialize, nil
}

type NullableOracleTaskListeningOptions struct {
	value *OracleTaskListeningOptions
	isSet bool
}

func (v NullableOracleTaskListeningOptions) Get() *OracleTaskListeningOptions {
	return v.value
}

func (v *NullableOracleTaskListeningOptions) Set(val *OracleTaskListeningOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleTaskListeningOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleTaskListeningOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleTaskListeningOptions(val *OracleTaskListeningOptions) *NullableOracleTaskListeningOptions {
	return &NullableOracleTaskListeningOptions{value: val, isSet: true}
}

func (v NullableOracleTaskListeningOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleTaskListeningOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


