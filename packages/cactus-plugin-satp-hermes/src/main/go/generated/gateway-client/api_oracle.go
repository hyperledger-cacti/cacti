/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type OracleApi interface {

	/*
	ExecuteOracleTask Execute data transfer task

	Execute a registered data transfer task from source to target blockchain

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiExecuteOracleTaskRequest
	*/
	ExecuteOracleTask(ctx context.Context) ApiExecuteOracleTaskRequest

	// ExecuteOracleTaskExecute executes the request
	//  @return ExecuteOracleTask200Response
	ExecuteOracleTaskExecute(r ApiExecuteOracleTaskRequest) (*ExecuteOracleTask200Response, *http.Response, error)

	/*
	GetOracleTaskStatus Get oracle task status

	Retrieve the status of an oracle task

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetOracleTaskStatusRequest
	*/
	GetOracleTaskStatus(ctx context.Context) ApiGetOracleTaskStatusRequest

	// GetOracleTaskStatusExecute executes the request
	//  @return GetOracleTaskStatus200Response
	GetOracleTaskStatusExecute(r ApiGetOracleTaskStatusRequest) (*GetOracleTaskStatus200Response, *http.Response, error)

	/*
	RegisterOracleTask Register data transfer task

	Register data transfer from source to target blockchain

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiRegisterOracleTaskRequest
	*/
	RegisterOracleTask(ctx context.Context) ApiRegisterOracleTaskRequest

	// RegisterOracleTaskExecute executes the request
	//  @return RegisterOracleTask200Response
	RegisterOracleTaskExecute(r ApiRegisterOracleTaskRequest) (*RegisterOracleTask200Response, *http.Response, error)

	/*
	UnregisterOracleTask Unregister data transfer task

	Unregister data transfer task from source to target blockchain

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUnregisterOracleTaskRequest
	*/
	UnregisterOracleTask(ctx context.Context) ApiUnregisterOracleTaskRequest

	// UnregisterOracleTaskExecute executes the request
	//  @return UnregisterOracleTask200Response
	UnregisterOracleTaskExecute(r ApiUnregisterOracleTaskRequest) (*UnregisterOracleTask200Response, *http.Response, error)
}

// OracleApiService OracleApi service
type OracleApiService service

type ApiExecuteOracleTaskRequest struct {
	ctx context.Context
	ApiService OracleApi
	executeOracleTaskRequest *ExecuteOracleTaskRequest
}

func (r ApiExecuteOracleTaskRequest) ExecuteOracleTaskRequest(executeOracleTaskRequest ExecuteOracleTaskRequest) ApiExecuteOracleTaskRequest {
	r.executeOracleTaskRequest = &executeOracleTaskRequest
	return r
}

func (r ApiExecuteOracleTaskRequest) Execute() (*ExecuteOracleTask200Response, *http.Response, error) {
	return r.ApiService.ExecuteOracleTaskExecute(r)
}

/*
ExecuteOracleTask Execute data transfer task

Execute a registered data transfer task from source to target blockchain

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExecuteOracleTaskRequest
*/
func (a *OracleApiService) ExecuteOracleTask(ctx context.Context) ApiExecuteOracleTaskRequest {
	return ApiExecuteOracleTaskRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ExecuteOracleTask200Response
func (a *OracleApiService) ExecuteOracleTaskExecute(r ApiExecuteOracleTaskRequest) (*ExecuteOracleTask200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExecuteOracleTask200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OracleApiService.ExecuteOracleTask")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/@hyperledger/cactus-plugin-satp-hermes/oracle/execute"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.executeOracleTaskRequest == nil {
		return localVarReturnValue, nil, reportError("executeOracleTaskRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.executeOracleTaskRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOracleTaskStatusRequest struct {
	ctx context.Context
	ApiService OracleApi
	taskID *string
}

// Unique identifier for the task.
func (r ApiGetOracleTaskStatusRequest) TaskID(taskID string) ApiGetOracleTaskStatusRequest {
	r.taskID = &taskID
	return r
}

func (r ApiGetOracleTaskStatusRequest) Execute() (*GetOracleTaskStatus200Response, *http.Response, error) {
	return r.ApiService.GetOracleTaskStatusExecute(r)
}

/*
GetOracleTaskStatus Get oracle task status

Retrieve the status of an oracle task

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetOracleTaskStatusRequest
*/
func (a *OracleApiService) GetOracleTaskStatus(ctx context.Context) ApiGetOracleTaskStatusRequest {
	return ApiGetOracleTaskStatusRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetOracleTaskStatus200Response
func (a *OracleApiService) GetOracleTaskStatusExecute(r ApiGetOracleTaskStatusRequest) (*GetOracleTaskStatus200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetOracleTaskStatus200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OracleApiService.GetOracleTaskStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/@hyperledger/cactus-plugin-satp-hermes/oracle/status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.taskID == nil {
		return localVarReturnValue, nil, reportError("taskID is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "taskID", r.taskID, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRegisterOracleTaskRequest struct {
	ctx context.Context
	ApiService OracleApi
	registerOracleTaskRequest *RegisterOracleTaskRequest
}

func (r ApiRegisterOracleTaskRequest) RegisterOracleTaskRequest(registerOracleTaskRequest RegisterOracleTaskRequest) ApiRegisterOracleTaskRequest {
	r.registerOracleTaskRequest = &registerOracleTaskRequest
	return r
}

func (r ApiRegisterOracleTaskRequest) Execute() (*RegisterOracleTask200Response, *http.Response, error) {
	return r.ApiService.RegisterOracleTaskExecute(r)
}

/*
RegisterOracleTask Register data transfer task

Register data transfer from source to target blockchain

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRegisterOracleTaskRequest
*/
func (a *OracleApiService) RegisterOracleTask(ctx context.Context) ApiRegisterOracleTaskRequest {
	return ApiRegisterOracleTaskRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RegisterOracleTask200Response
func (a *OracleApiService) RegisterOracleTaskExecute(r ApiRegisterOracleTaskRequest) (*RegisterOracleTask200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RegisterOracleTask200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OracleApiService.RegisterOracleTask")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/@hyperledger/cactus-plugin-satp-hermes/oracle/register"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.registerOracleTaskRequest == nil {
		return localVarReturnValue, nil, reportError("registerOracleTaskRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.registerOracleTaskRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUnregisterOracleTaskRequest struct {
	ctx context.Context
	ApiService OracleApi
	taskID *string
}

// Unique identifier for the task.
func (r ApiUnregisterOracleTaskRequest) TaskID(taskID string) ApiUnregisterOracleTaskRequest {
	r.taskID = &taskID
	return r
}

func (r ApiUnregisterOracleTaskRequest) Execute() (*UnregisterOracleTask200Response, *http.Response, error) {
	return r.ApiService.UnregisterOracleTaskExecute(r)
}

/*
UnregisterOracleTask Unregister data transfer task

Unregister data transfer task from source to target blockchain

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUnregisterOracleTaskRequest
*/
func (a *OracleApiService) UnregisterOracleTask(ctx context.Context) ApiUnregisterOracleTaskRequest {
	return ApiUnregisterOracleTaskRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UnregisterOracleTask200Response
func (a *OracleApiService) UnregisterOracleTaskExecute(r ApiUnregisterOracleTaskRequest) (*UnregisterOracleTask200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UnregisterOracleTask200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OracleApiService.UnregisterOracleTask")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/@hyperledger/cactus-plugin-satp-hermes/oracle/unregister"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.taskID == nil {
		return localVarReturnValue, nil, reportError("taskID is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "taskID", r.taskID, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
