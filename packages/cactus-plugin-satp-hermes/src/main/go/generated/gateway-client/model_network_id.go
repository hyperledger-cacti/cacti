/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
)

// checks if the NetworkId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkId{}

// NetworkId The network of the DLT being interacted with.
type NetworkId struct {
	// The network of the DLT being interacted with.
	Id string `json:"id"`
	// Enumerates the different ledger vendors and their major versions encoded within the name of the LedgerType. For example \"BESU_1X\" involves all of the [1.0.0;2.0.0) where 1.0.0 is included and anything up until, but not 2.0.0. See: https://stackoverflow.com/a/4396303/698470 for further explanation.
	LedgerType string `json:"ledgerType"`
}

// NewNetworkId instantiates a new NetworkId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkId(id string, ledgerType string) *NetworkId {
	this := NetworkId{}
	this.Id = id
	this.LedgerType = ledgerType
	return &this
}

// NewNetworkIdWithDefaults instantiates a new NetworkId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkIdWithDefaults() *NetworkId {
	this := NetworkId{}
	return &this
}

// GetId returns the Id field value
func (o *NetworkId) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NetworkId) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NetworkId) SetId(v string) {
	o.Id = v
}

// GetLedgerType returns the LedgerType field value
func (o *NetworkId) GetLedgerType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LedgerType
}

// GetLedgerTypeOk returns a tuple with the LedgerType field value
// and a boolean to check if the value has been set.
func (o *NetworkId) GetLedgerTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LedgerType, true
}

// SetLedgerType sets field value
func (o *NetworkId) SetLedgerType(v string) {
	o.LedgerType = v
}

func (o NetworkId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["ledgerType"] = o.LedgerType
	return toSerialize, nil
}

type NullableNetworkId struct {
	value *NetworkId
	isSet bool
}

func (v NullableNetworkId) Get() *NetworkId {
	return v.value
}

func (v *NullableNetworkId) Set(val *NetworkId) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkId) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkId(val *NetworkId) *NullableNetworkId {
	return &NullableNetworkId{value: val, isSet: true}
}

func (v NullableNetworkId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


