/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
)

// checks if the OracleRepeatableTaskAllOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OracleRepeatableTaskAllOf1{}

// OracleRepeatableTaskAllOf1 struct for OracleRepeatableTaskAllOf1
type OracleRepeatableTaskAllOf1 struct {
	// The mode of operation for the repeatable task.
	TaskMode *Enum `json:"taskMode,omitempty"`
	// The interval for polling in milliseconds.
	PollingInterval *int32 `json:"pollingInterval,omitempty"`
	// The event signature to listen for on the source network.
	SourceEventSignature *string `json:"sourceEventSignature,omitempty"`
}

// NewOracleRepeatableTaskAllOf1 instantiates a new OracleRepeatableTaskAllOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleRepeatableTaskAllOf1() *OracleRepeatableTaskAllOf1 {
	this := OracleRepeatableTaskAllOf1{}
	return &this
}

// NewOracleRepeatableTaskAllOf1WithDefaults instantiates a new OracleRepeatableTaskAllOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleRepeatableTaskAllOf1WithDefaults() *OracleRepeatableTaskAllOf1 {
	this := OracleRepeatableTaskAllOf1{}
	return &this
}

// GetTaskMode returns the TaskMode field value if set, zero value otherwise.
func (o *OracleRepeatableTaskAllOf1) GetTaskMode() Enum {
	if o == nil || IsNil(o.TaskMode) {
		var ret Enum
		return ret
	}
	return *o.TaskMode
}

// GetTaskModeOk returns a tuple with the TaskMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRepeatableTaskAllOf1) GetTaskModeOk() (*Enum, bool) {
	if o == nil || IsNil(o.TaskMode) {
		return nil, false
	}
	return o.TaskMode, true
}

// HasTaskMode returns a boolean if a field has been set.
func (o *OracleRepeatableTaskAllOf1) HasTaskMode() bool {
	if o != nil && !IsNil(o.TaskMode) {
		return true
	}

	return false
}

// SetTaskMode gets a reference to the given Enum and assigns it to the TaskMode field.
func (o *OracleRepeatableTaskAllOf1) SetTaskMode(v Enum) {
	o.TaskMode = &v
}

// GetPollingInterval returns the PollingInterval field value if set, zero value otherwise.
func (o *OracleRepeatableTaskAllOf1) GetPollingInterval() int32 {
	if o == nil || IsNil(o.PollingInterval) {
		var ret int32
		return ret
	}
	return *o.PollingInterval
}

// GetPollingIntervalOk returns a tuple with the PollingInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRepeatableTaskAllOf1) GetPollingIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.PollingInterval) {
		return nil, false
	}
	return o.PollingInterval, true
}

// HasPollingInterval returns a boolean if a field has been set.
func (o *OracleRepeatableTaskAllOf1) HasPollingInterval() bool {
	if o != nil && !IsNil(o.PollingInterval) {
		return true
	}

	return false
}

// SetPollingInterval gets a reference to the given int32 and assigns it to the PollingInterval field.
func (o *OracleRepeatableTaskAllOf1) SetPollingInterval(v int32) {
	o.PollingInterval = &v
}

// GetSourceEventSignature returns the SourceEventSignature field value if set, zero value otherwise.
func (o *OracleRepeatableTaskAllOf1) GetSourceEventSignature() string {
	if o == nil || IsNil(o.SourceEventSignature) {
		var ret string
		return ret
	}
	return *o.SourceEventSignature
}

// GetSourceEventSignatureOk returns a tuple with the SourceEventSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRepeatableTaskAllOf1) GetSourceEventSignatureOk() (*string, bool) {
	if o == nil || IsNil(o.SourceEventSignature) {
		return nil, false
	}
	return o.SourceEventSignature, true
}

// HasSourceEventSignature returns a boolean if a field has been set.
func (o *OracleRepeatableTaskAllOf1) HasSourceEventSignature() bool {
	if o != nil && !IsNil(o.SourceEventSignature) {
		return true
	}

	return false
}

// SetSourceEventSignature gets a reference to the given string and assigns it to the SourceEventSignature field.
func (o *OracleRepeatableTaskAllOf1) SetSourceEventSignature(v string) {
	o.SourceEventSignature = &v
}

func (o OracleRepeatableTaskAllOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OracleRepeatableTaskAllOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TaskMode) {
		toSerialize["taskMode"] = o.TaskMode
	}
	if !IsNil(o.PollingInterval) {
		toSerialize["pollingInterval"] = o.PollingInterval
	}
	if !IsNil(o.SourceEventSignature) {
		toSerialize["sourceEventSignature"] = o.SourceEventSignature
	}
	return toSerialize, nil
}

type NullableOracleRepeatableTaskAllOf1 struct {
	value *OracleRepeatableTaskAllOf1
	isSet bool
}

func (v NullableOracleRepeatableTaskAllOf1) Get() *OracleRepeatableTaskAllOf1 {
	return v.value
}

func (v *NullableOracleRepeatableTaskAllOf1) Set(val *OracleRepeatableTaskAllOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleRepeatableTaskAllOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleRepeatableTaskAllOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleRepeatableTaskAllOf1(val *OracleRepeatableTaskAllOf1) *NullableOracleRepeatableTaskAllOf1 {
	return &NullableOracleRepeatableTaskAllOf1{value: val, isSet: true}
}

func (v NullableOracleRepeatableTaskAllOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleRepeatableTaskAllOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


