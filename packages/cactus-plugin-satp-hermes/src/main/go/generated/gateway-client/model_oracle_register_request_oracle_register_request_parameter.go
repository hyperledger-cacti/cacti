/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
)

// checks if the OracleRegisterRequestOracleRegisterRequestParameter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OracleRegisterRequestOracleRegisterRequestParameter{}

// OracleRegisterRequestOracleRegisterRequestParameter Request schema for registering a data transfer task. Includes details such as the source and destination DLT networks and contracts.
type OracleRegisterRequestOracleRegisterRequestParameter struct {
	// The source blockchain network identifier. Only if taskType is READ or READ_AND_UPDATE.
	SourceNetwork *string `json:"sourceNetwork,omitempty"`
	// The target blockchain network identifier. Only if taskType is UPDATE or READ_AND_UPDATE.
	TargetNetwork *string `json:"targetNetwork,omitempty"`
	// The contract address on the source blockchain. Only if taskType is READ or READ_AND_UPDATE.
	OriginContract *string `json:"originContract,omitempty"`
	// The contract address on the destination blockchain. Only if taskType is UPDATE or READ_AND_UPDATE.
	DestinationContract *string `json:"destinationContract,omitempty"`
	// The signature of the event of interest on the source blockchain. Only if taskType is READ or READ_AND_UPDATE.
	EventSignature *string `json:"eventSignature,omitempty"`
	// The function to be called on the source blockchain. Only if taskType is READ or READ_AND_UPDATE.
	ReadFunction *string `json:"readFunction,omitempty"`
	// The function to be called on the destination blockchain. Only if taskType is UPDATE or READ_AND_UPDATE.
	WriteFunction *string `json:"writeFunction,omitempty"`
	// The mode of operation for the task.
	TaskMode string `json:"taskMode"`
	// The interval for polling in milliseconds. Only if taskMode is POLLING.
	TaskInterval *int32 `json:"taskInterval,omitempty"`
	// The type of task to be registered.
	TaskType string `json:"taskType"`
}

// NewOracleRegisterRequestOracleRegisterRequestParameter instantiates a new OracleRegisterRequestOracleRegisterRequestParameter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleRegisterRequestOracleRegisterRequestParameter(taskMode string, taskType string) *OracleRegisterRequestOracleRegisterRequestParameter {
	this := OracleRegisterRequestOracleRegisterRequestParameter{}
	this.TaskMode = taskMode
	this.TaskType = taskType
	return &this
}

// NewOracleRegisterRequestOracleRegisterRequestParameterWithDefaults instantiates a new OracleRegisterRequestOracleRegisterRequestParameter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleRegisterRequestOracleRegisterRequestParameterWithDefaults() *OracleRegisterRequestOracleRegisterRequestParameter {
	this := OracleRegisterRequestOracleRegisterRequestParameter{}
	return &this
}

// GetSourceNetwork returns the SourceNetwork field value if set, zero value otherwise.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) GetSourceNetwork() string {
	if o == nil || IsNil(o.SourceNetwork) {
		var ret string
		return ret
	}
	return *o.SourceNetwork
}

// GetSourceNetworkOk returns a tuple with the SourceNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) GetSourceNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.SourceNetwork) {
		return nil, false
	}
	return o.SourceNetwork, true
}

// HasSourceNetwork returns a boolean if a field has been set.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) HasSourceNetwork() bool {
	if o != nil && !IsNil(o.SourceNetwork) {
		return true
	}

	return false
}

// SetSourceNetwork gets a reference to the given string and assigns it to the SourceNetwork field.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) SetSourceNetwork(v string) {
	o.SourceNetwork = &v
}

// GetTargetNetwork returns the TargetNetwork field value if set, zero value otherwise.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) GetTargetNetwork() string {
	if o == nil || IsNil(o.TargetNetwork) {
		var ret string
		return ret
	}
	return *o.TargetNetwork
}

// GetTargetNetworkOk returns a tuple with the TargetNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) GetTargetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.TargetNetwork) {
		return nil, false
	}
	return o.TargetNetwork, true
}

// HasTargetNetwork returns a boolean if a field has been set.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) HasTargetNetwork() bool {
	if o != nil && !IsNil(o.TargetNetwork) {
		return true
	}

	return false
}

// SetTargetNetwork gets a reference to the given string and assigns it to the TargetNetwork field.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) SetTargetNetwork(v string) {
	o.TargetNetwork = &v
}

// GetOriginContract returns the OriginContract field value if set, zero value otherwise.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) GetOriginContract() string {
	if o == nil || IsNil(o.OriginContract) {
		var ret string
		return ret
	}
	return *o.OriginContract
}

// GetOriginContractOk returns a tuple with the OriginContract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) GetOriginContractOk() (*string, bool) {
	if o == nil || IsNil(o.OriginContract) {
		return nil, false
	}
	return o.OriginContract, true
}

// HasOriginContract returns a boolean if a field has been set.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) HasOriginContract() bool {
	if o != nil && !IsNil(o.OriginContract) {
		return true
	}

	return false
}

// SetOriginContract gets a reference to the given string and assigns it to the OriginContract field.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) SetOriginContract(v string) {
	o.OriginContract = &v
}

// GetDestinationContract returns the DestinationContract field value if set, zero value otherwise.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) GetDestinationContract() string {
	if o == nil || IsNil(o.DestinationContract) {
		var ret string
		return ret
	}
	return *o.DestinationContract
}

// GetDestinationContractOk returns a tuple with the DestinationContract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) GetDestinationContractOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationContract) {
		return nil, false
	}
	return o.DestinationContract, true
}

// HasDestinationContract returns a boolean if a field has been set.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) HasDestinationContract() bool {
	if o != nil && !IsNil(o.DestinationContract) {
		return true
	}

	return false
}

// SetDestinationContract gets a reference to the given string and assigns it to the DestinationContract field.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) SetDestinationContract(v string) {
	o.DestinationContract = &v
}

// GetEventSignature returns the EventSignature field value if set, zero value otherwise.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) GetEventSignature() string {
	if o == nil || IsNil(o.EventSignature) {
		var ret string
		return ret
	}
	return *o.EventSignature
}

// GetEventSignatureOk returns a tuple with the EventSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) GetEventSignatureOk() (*string, bool) {
	if o == nil || IsNil(o.EventSignature) {
		return nil, false
	}
	return o.EventSignature, true
}

// HasEventSignature returns a boolean if a field has been set.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) HasEventSignature() bool {
	if o != nil && !IsNil(o.EventSignature) {
		return true
	}

	return false
}

// SetEventSignature gets a reference to the given string and assigns it to the EventSignature field.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) SetEventSignature(v string) {
	o.EventSignature = &v
}

// GetReadFunction returns the ReadFunction field value if set, zero value otherwise.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) GetReadFunction() string {
	if o == nil || IsNil(o.ReadFunction) {
		var ret string
		return ret
	}
	return *o.ReadFunction
}

// GetReadFunctionOk returns a tuple with the ReadFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) GetReadFunctionOk() (*string, bool) {
	if o == nil || IsNil(o.ReadFunction) {
		return nil, false
	}
	return o.ReadFunction, true
}

// HasReadFunction returns a boolean if a field has been set.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) HasReadFunction() bool {
	if o != nil && !IsNil(o.ReadFunction) {
		return true
	}

	return false
}

// SetReadFunction gets a reference to the given string and assigns it to the ReadFunction field.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) SetReadFunction(v string) {
	o.ReadFunction = &v
}

// GetWriteFunction returns the WriteFunction field value if set, zero value otherwise.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) GetWriteFunction() string {
	if o == nil || IsNil(o.WriteFunction) {
		var ret string
		return ret
	}
	return *o.WriteFunction
}

// GetWriteFunctionOk returns a tuple with the WriteFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) GetWriteFunctionOk() (*string, bool) {
	if o == nil || IsNil(o.WriteFunction) {
		return nil, false
	}
	return o.WriteFunction, true
}

// HasWriteFunction returns a boolean if a field has been set.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) HasWriteFunction() bool {
	if o != nil && !IsNil(o.WriteFunction) {
		return true
	}

	return false
}

// SetWriteFunction gets a reference to the given string and assigns it to the WriteFunction field.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) SetWriteFunction(v string) {
	o.WriteFunction = &v
}

// GetTaskMode returns the TaskMode field value
func (o *OracleRegisterRequestOracleRegisterRequestParameter) GetTaskMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaskMode
}

// GetTaskModeOk returns a tuple with the TaskMode field value
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) GetTaskModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskMode, true
}

// SetTaskMode sets field value
func (o *OracleRegisterRequestOracleRegisterRequestParameter) SetTaskMode(v string) {
	o.TaskMode = v
}

// GetTaskInterval returns the TaskInterval field value if set, zero value otherwise.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) GetTaskInterval() int32 {
	if o == nil || IsNil(o.TaskInterval) {
		var ret int32
		return ret
	}
	return *o.TaskInterval
}

// GetTaskIntervalOk returns a tuple with the TaskInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) GetTaskIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.TaskInterval) {
		return nil, false
	}
	return o.TaskInterval, true
}

// HasTaskInterval returns a boolean if a field has been set.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) HasTaskInterval() bool {
	if o != nil && !IsNil(o.TaskInterval) {
		return true
	}

	return false
}

// SetTaskInterval gets a reference to the given int32 and assigns it to the TaskInterval field.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) SetTaskInterval(v int32) {
	o.TaskInterval = &v
}

// GetTaskType returns the TaskType field value
func (o *OracleRegisterRequestOracleRegisterRequestParameter) GetTaskType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaskType
}

// GetTaskTypeOk returns a tuple with the TaskType field value
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequestOracleRegisterRequestParameter) GetTaskTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskType, true
}

// SetTaskType sets field value
func (o *OracleRegisterRequestOracleRegisterRequestParameter) SetTaskType(v string) {
	o.TaskType = v
}

func (o OracleRegisterRequestOracleRegisterRequestParameter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OracleRegisterRequestOracleRegisterRequestParameter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SourceNetwork) {
		toSerialize["sourceNetwork"] = o.SourceNetwork
	}
	if !IsNil(o.TargetNetwork) {
		toSerialize["targetNetwork"] = o.TargetNetwork
	}
	if !IsNil(o.OriginContract) {
		toSerialize["originContract"] = o.OriginContract
	}
	if !IsNil(o.DestinationContract) {
		toSerialize["destinationContract"] = o.DestinationContract
	}
	if !IsNil(o.EventSignature) {
		toSerialize["eventSignature"] = o.EventSignature
	}
	if !IsNil(o.ReadFunction) {
		toSerialize["readFunction"] = o.ReadFunction
	}
	if !IsNil(o.WriteFunction) {
		toSerialize["writeFunction"] = o.WriteFunction
	}
	toSerialize["taskMode"] = o.TaskMode
	if !IsNil(o.TaskInterval) {
		toSerialize["taskInterval"] = o.TaskInterval
	}
	toSerialize["taskType"] = o.TaskType
	return toSerialize, nil
}

type NullableOracleRegisterRequestOracleRegisterRequestParameter struct {
	value *OracleRegisterRequestOracleRegisterRequestParameter
	isSet bool
}

func (v NullableOracleRegisterRequestOracleRegisterRequestParameter) Get() *OracleRegisterRequestOracleRegisterRequestParameter {
	return v.value
}

func (v *NullableOracleRegisterRequestOracleRegisterRequestParameter) Set(val *OracleRegisterRequestOracleRegisterRequestParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleRegisterRequestOracleRegisterRequestParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleRegisterRequestOracleRegisterRequestParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleRegisterRequestOracleRegisterRequestParameter(val *OracleRegisterRequestOracleRegisterRequestParameter) *NullableOracleRegisterRequestOracleRegisterRequestParameter {
	return &NullableOracleRegisterRequestOracleRegisterRequestParameter{value: val, isSet: true}
}

func (v NullableOracleRegisterRequestOracleRegisterRequestParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleRegisterRequestOracleRegisterRequestParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


