/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
)

// TokenType The type of token.
type TokenType string

// List of TokenType
const (
	ERC20 TokenType = "ERC20"
	ERC721 TokenType = "ERC721"
	ERC1155 TokenType = "ERC1155"
	NONSTANDARD_FUNGIBLE TokenType = "NONSTANDARD_FUNGIBLE"
	NONSTANDARD_NONFUNGIBLE TokenType = "NONSTANDARD_NONFUNGIBLE"
)

// All allowed values of TokenType enum
var AllowedTokenTypeEnumValues = []TokenType{
	"ERC20",
	"ERC721",
	"ERC1155",
	"NONSTANDARD_FUNGIBLE",
	"NONSTANDARD_NONFUNGIBLE",
}

func (v *TokenType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TokenType(value)
	for _, existing := range AllowedTokenTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TokenType", value)
}

// NewTokenTypeFromValue returns a pointer to a valid TokenType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTokenTypeFromValue(v string) (*TokenType, error) {
	ev := TokenType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TokenType: valid values are %v", v, AllowedTokenTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TokenType) IsValid() bool {
	for _, existing := range AllowedTokenTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TokenType value
func (v TokenType) Ptr() *TokenType {
	return &v
}

type NullableTokenType struct {
	value *TokenType
	isSet bool
}

func (v NullableTokenType) Get() *TokenType {
	return v.value
}

func (v *NullableTokenType) Set(val *TokenType) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenType) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenType(val *TokenType) *NullableTokenType {
	return &NullableTokenType{value: val, isSet: true}
}

func (v NullableTokenType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

