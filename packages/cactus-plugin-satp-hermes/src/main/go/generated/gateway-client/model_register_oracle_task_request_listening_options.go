/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
)

// checks if the RegisterOracleTaskRequestListeningOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterOracleTaskRequestListeningOptions{}

// RegisterOracleTaskRequestListeningOptions Options for event listening. Only if taskMode is EVENT_LISTENING.
type RegisterOracleTaskRequestListeningOptions struct {
	// The event signature to listen for on the source network. Only if taskMode is EVENT_LISTENING.
	EventSignature string `json:"eventSignature"`
	// The parameters to filter in the captured events.
	FilterParams []string `json:"filterParams,omitempty"`
}

// NewRegisterOracleTaskRequestListeningOptions instantiates a new RegisterOracleTaskRequestListeningOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterOracleTaskRequestListeningOptions(eventSignature string) *RegisterOracleTaskRequestListeningOptions {
	this := RegisterOracleTaskRequestListeningOptions{}
	this.EventSignature = eventSignature
	return &this
}

// NewRegisterOracleTaskRequestListeningOptionsWithDefaults instantiates a new RegisterOracleTaskRequestListeningOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterOracleTaskRequestListeningOptionsWithDefaults() *RegisterOracleTaskRequestListeningOptions {
	this := RegisterOracleTaskRequestListeningOptions{}
	return &this
}

// GetEventSignature returns the EventSignature field value
func (o *RegisterOracleTaskRequestListeningOptions) GetEventSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventSignature
}

// GetEventSignatureOk returns a tuple with the EventSignature field value
// and a boolean to check if the value has been set.
func (o *RegisterOracleTaskRequestListeningOptions) GetEventSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventSignature, true
}

// SetEventSignature sets field value
func (o *RegisterOracleTaskRequestListeningOptions) SetEventSignature(v string) {
	o.EventSignature = v
}

// GetFilterParams returns the FilterParams field value if set, zero value otherwise.
func (o *RegisterOracleTaskRequestListeningOptions) GetFilterParams() []string {
	if o == nil || IsNil(o.FilterParams) {
		var ret []string
		return ret
	}
	return o.FilterParams
}

// GetFilterParamsOk returns a tuple with the FilterParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterOracleTaskRequestListeningOptions) GetFilterParamsOk() ([]string, bool) {
	if o == nil || IsNil(o.FilterParams) {
		return nil, false
	}
	return o.FilterParams, true
}

// HasFilterParams returns a boolean if a field has been set.
func (o *RegisterOracleTaskRequestListeningOptions) HasFilterParams() bool {
	if o != nil && !IsNil(o.FilterParams) {
		return true
	}

	return false
}

// SetFilterParams gets a reference to the given []string and assigns it to the FilterParams field.
func (o *RegisterOracleTaskRequestListeningOptions) SetFilterParams(v []string) {
	o.FilterParams = v
}

func (o RegisterOracleTaskRequestListeningOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterOracleTaskRequestListeningOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eventSignature"] = o.EventSignature
	if !IsNil(o.FilterParams) {
		toSerialize["filterParams"] = o.FilterParams
	}
	return toSerialize, nil
}

type NullableRegisterOracleTaskRequestListeningOptions struct {
	value *RegisterOracleTaskRequestListeningOptions
	isSet bool
}

func (v NullableRegisterOracleTaskRequestListeningOptions) Get() *RegisterOracleTaskRequestListeningOptions {
	return v.value
}

func (v *NullableRegisterOracleTaskRequestListeningOptions) Set(val *RegisterOracleTaskRequestListeningOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterOracleTaskRequestListeningOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterOracleTaskRequestListeningOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterOracleTaskRequestListeningOptions(val *RegisterOracleTaskRequestListeningOptions) *NullableRegisterOracleTaskRequestListeningOptions {
	return &NullableRegisterOracleTaskRequestListeningOptions{value: val, isSet: true}
}

func (v NullableRegisterOracleTaskRequestListeningOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterOracleTaskRequestListeningOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


