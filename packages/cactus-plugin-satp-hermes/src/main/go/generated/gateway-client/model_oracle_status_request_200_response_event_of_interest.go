/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
)

// checks if the OracleStatusRequest200ResponseEventOfInterest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OracleStatusRequest200ResponseEventOfInterest{}

// OracleStatusRequest200ResponseEventOfInterest Details about the event of interest in the origin contract for the data transfer task.
type OracleStatusRequest200ResponseEventOfInterest struct {
	// The name of the event of interest.
	EventName *string `json:"eventName,omitempty"`
	// The signature of the event of interest.
	EventSignature *string `json:"eventSignature,omitempty"`
}

// NewOracleStatusRequest200ResponseEventOfInterest instantiates a new OracleStatusRequest200ResponseEventOfInterest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleStatusRequest200ResponseEventOfInterest() *OracleStatusRequest200ResponseEventOfInterest {
	this := OracleStatusRequest200ResponseEventOfInterest{}
	return &this
}

// NewOracleStatusRequest200ResponseEventOfInterestWithDefaults instantiates a new OracleStatusRequest200ResponseEventOfInterest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleStatusRequest200ResponseEventOfInterestWithDefaults() *OracleStatusRequest200ResponseEventOfInterest {
	this := OracleStatusRequest200ResponseEventOfInterest{}
	return &this
}

// GetEventName returns the EventName field value if set, zero value otherwise.
func (o *OracleStatusRequest200ResponseEventOfInterest) GetEventName() string {
	if o == nil || IsNil(o.EventName) {
		var ret string
		return ret
	}
	return *o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleStatusRequest200ResponseEventOfInterest) GetEventNameOk() (*string, bool) {
	if o == nil || IsNil(o.EventName) {
		return nil, false
	}
	return o.EventName, true
}

// HasEventName returns a boolean if a field has been set.
func (o *OracleStatusRequest200ResponseEventOfInterest) HasEventName() bool {
	if o != nil && !IsNil(o.EventName) {
		return true
	}

	return false
}

// SetEventName gets a reference to the given string and assigns it to the EventName field.
func (o *OracleStatusRequest200ResponseEventOfInterest) SetEventName(v string) {
	o.EventName = &v
}

// GetEventSignature returns the EventSignature field value if set, zero value otherwise.
func (o *OracleStatusRequest200ResponseEventOfInterest) GetEventSignature() string {
	if o == nil || IsNil(o.EventSignature) {
		var ret string
		return ret
	}
	return *o.EventSignature
}

// GetEventSignatureOk returns a tuple with the EventSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleStatusRequest200ResponseEventOfInterest) GetEventSignatureOk() (*string, bool) {
	if o == nil || IsNil(o.EventSignature) {
		return nil, false
	}
	return o.EventSignature, true
}

// HasEventSignature returns a boolean if a field has been set.
func (o *OracleStatusRequest200ResponseEventOfInterest) HasEventSignature() bool {
	if o != nil && !IsNil(o.EventSignature) {
		return true
	}

	return false
}

// SetEventSignature gets a reference to the given string and assigns it to the EventSignature field.
func (o *OracleStatusRequest200ResponseEventOfInterest) SetEventSignature(v string) {
	o.EventSignature = &v
}

func (o OracleStatusRequest200ResponseEventOfInterest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OracleStatusRequest200ResponseEventOfInterest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventName) {
		toSerialize["eventName"] = o.EventName
	}
	if !IsNil(o.EventSignature) {
		toSerialize["eventSignature"] = o.EventSignature
	}
	return toSerialize, nil
}

type NullableOracleStatusRequest200ResponseEventOfInterest struct {
	value *OracleStatusRequest200ResponseEventOfInterest
	isSet bool
}

func (v NullableOracleStatusRequest200ResponseEventOfInterest) Get() *OracleStatusRequest200ResponseEventOfInterest {
	return v.value
}

func (v *NullableOracleStatusRequest200ResponseEventOfInterest) Set(val *OracleStatusRequest200ResponseEventOfInterest) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleStatusRequest200ResponseEventOfInterest) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleStatusRequest200ResponseEventOfInterest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleStatusRequest200ResponseEventOfInterest(val *OracleStatusRequest200ResponseEventOfInterest) *NullableOracleStatusRequest200ResponseEventOfInterest {
	return &NullableOracleStatusRequest200ResponseEventOfInterest{value: val, isSet: true}
}

func (v NullableOracleStatusRequest200ResponseEventOfInterest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleStatusRequest200ResponseEventOfInterest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


