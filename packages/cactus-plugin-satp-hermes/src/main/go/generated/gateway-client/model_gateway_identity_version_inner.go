/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
)

// checks if the GatewayIdentityVersionInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GatewayIdentityVersionInner{}

// GatewayIdentityVersionInner The draft versions supported by the gateway.
type GatewayIdentityVersionInner struct {
	// Core functionality or component.
	Core *string `json:"Core,omitempty"`
	// System architecture or design.
	Architecture *string `json:"Architecture,omitempty"`
	// Crash or failure scenario.
	Crash *string `json:"Crash,omitempty"`
}

// NewGatewayIdentityVersionInner instantiates a new GatewayIdentityVersionInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGatewayIdentityVersionInner() *GatewayIdentityVersionInner {
	this := GatewayIdentityVersionInner{}
	return &this
}

// NewGatewayIdentityVersionInnerWithDefaults instantiates a new GatewayIdentityVersionInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGatewayIdentityVersionInnerWithDefaults() *GatewayIdentityVersionInner {
	this := GatewayIdentityVersionInner{}
	return &this
}

// GetCore returns the Core field value if set, zero value otherwise.
func (o *GatewayIdentityVersionInner) GetCore() string {
	if o == nil || IsNil(o.Core) {
		var ret string
		return ret
	}
	return *o.Core
}

// GetCoreOk returns a tuple with the Core field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatewayIdentityVersionInner) GetCoreOk() (*string, bool) {
	if o == nil || IsNil(o.Core) {
		return nil, false
	}
	return o.Core, true
}

// HasCore returns a boolean if a field has been set.
func (o *GatewayIdentityVersionInner) HasCore() bool {
	if o != nil && !IsNil(o.Core) {
		return true
	}

	return false
}

// SetCore gets a reference to the given string and assigns it to the Core field.
func (o *GatewayIdentityVersionInner) SetCore(v string) {
	o.Core = &v
}

// GetArchitecture returns the Architecture field value if set, zero value otherwise.
func (o *GatewayIdentityVersionInner) GetArchitecture() string {
	if o == nil || IsNil(o.Architecture) {
		var ret string
		return ret
	}
	return *o.Architecture
}

// GetArchitectureOk returns a tuple with the Architecture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatewayIdentityVersionInner) GetArchitectureOk() (*string, bool) {
	if o == nil || IsNil(o.Architecture) {
		return nil, false
	}
	return o.Architecture, true
}

// HasArchitecture returns a boolean if a field has been set.
func (o *GatewayIdentityVersionInner) HasArchitecture() bool {
	if o != nil && !IsNil(o.Architecture) {
		return true
	}

	return false
}

// SetArchitecture gets a reference to the given string and assigns it to the Architecture field.
func (o *GatewayIdentityVersionInner) SetArchitecture(v string) {
	o.Architecture = &v
}

// GetCrash returns the Crash field value if set, zero value otherwise.
func (o *GatewayIdentityVersionInner) GetCrash() string {
	if o == nil || IsNil(o.Crash) {
		var ret string
		return ret
	}
	return *o.Crash
}

// GetCrashOk returns a tuple with the Crash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatewayIdentityVersionInner) GetCrashOk() (*string, bool) {
	if o == nil || IsNil(o.Crash) {
		return nil, false
	}
	return o.Crash, true
}

// HasCrash returns a boolean if a field has been set.
func (o *GatewayIdentityVersionInner) HasCrash() bool {
	if o != nil && !IsNil(o.Crash) {
		return true
	}

	return false
}

// SetCrash gets a reference to the given string and assigns it to the Crash field.
func (o *GatewayIdentityVersionInner) SetCrash(v string) {
	o.Crash = &v
}

func (o GatewayIdentityVersionInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GatewayIdentityVersionInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Core) {
		toSerialize["Core"] = o.Core
	}
	if !IsNil(o.Architecture) {
		toSerialize["Architecture"] = o.Architecture
	}
	if !IsNil(o.Crash) {
		toSerialize["Crash"] = o.Crash
	}
	return toSerialize, nil
}

type NullableGatewayIdentityVersionInner struct {
	value *GatewayIdentityVersionInner
	isSet bool
}

func (v NullableGatewayIdentityVersionInner) Get() *GatewayIdentityVersionInner {
	return v.value
}

func (v *NullableGatewayIdentityVersionInner) Set(val *GatewayIdentityVersionInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGatewayIdentityVersionInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGatewayIdentityVersionInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGatewayIdentityVersionInner(val *GatewayIdentityVersionInner) *NullableGatewayIdentityVersionInner {
	return &NullableGatewayIdentityVersionInner{value: val, isSet: true}
}

func (v NullableGatewayIdentityVersionInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGatewayIdentityVersionInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


