/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
)

// checks if the OracleRegisterRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OracleRegisterRequest{}

// OracleRegisterRequest Request schema for registering a repeatable task.
type OracleRegisterRequest struct {
	SourceNetworkId *TransactRequestSourceAssetNetworkId `json:"sourceNetworkId,omitempty"`
	DestinationNetworkId *TransactRequestSourceAssetNetworkId `json:"destinationNetworkId,omitempty"`
	SourceContract *RegisterOracleTaskRequestSourceContract `json:"sourceContract,omitempty"`
	DestinationContract *RegisterOracleTaskRequestDestinationContract `json:"destinationContract,omitempty"`
	// The mode of operation for the repeatable task.
	TaskMode string `json:"taskMode"`
	// The interval for polling in milliseconds. Only if taskMode is POLLING.
	PollingInterval *int32 `json:"pollingInterval,omitempty"`
	ListeningOptions *RegisterOracleTaskRequestListeningOptions `json:"listeningOptions,omitempty"`
	// The type of task to be registered.
	TaskType string `json:"taskType"`
}

// NewOracleRegisterRequest instantiates a new OracleRegisterRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleRegisterRequest(taskMode string, taskType string) *OracleRegisterRequest {
	this := OracleRegisterRequest{}
	this.TaskMode = taskMode
	this.TaskType = taskType
	return &this
}

// NewOracleRegisterRequestWithDefaults instantiates a new OracleRegisterRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleRegisterRequestWithDefaults() *OracleRegisterRequest {
	this := OracleRegisterRequest{}
	return &this
}

// GetSourceNetworkId returns the SourceNetworkId field value if set, zero value otherwise.
func (o *OracleRegisterRequest) GetSourceNetworkId() TransactRequestSourceAssetNetworkId {
	if o == nil || IsNil(o.SourceNetworkId) {
		var ret TransactRequestSourceAssetNetworkId
		return ret
	}
	return *o.SourceNetworkId
}

// GetSourceNetworkIdOk returns a tuple with the SourceNetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequest) GetSourceNetworkIdOk() (*TransactRequestSourceAssetNetworkId, bool) {
	if o == nil || IsNil(o.SourceNetworkId) {
		return nil, false
	}
	return o.SourceNetworkId, true
}

// HasSourceNetworkId returns a boolean if a field has been set.
func (o *OracleRegisterRequest) HasSourceNetworkId() bool {
	if o != nil && !IsNil(o.SourceNetworkId) {
		return true
	}

	return false
}

// SetSourceNetworkId gets a reference to the given TransactRequestSourceAssetNetworkId and assigns it to the SourceNetworkId field.
func (o *OracleRegisterRequest) SetSourceNetworkId(v TransactRequestSourceAssetNetworkId) {
	o.SourceNetworkId = &v
}

// GetDestinationNetworkId returns the DestinationNetworkId field value if set, zero value otherwise.
func (o *OracleRegisterRequest) GetDestinationNetworkId() TransactRequestSourceAssetNetworkId {
	if o == nil || IsNil(o.DestinationNetworkId) {
		var ret TransactRequestSourceAssetNetworkId
		return ret
	}
	return *o.DestinationNetworkId
}

// GetDestinationNetworkIdOk returns a tuple with the DestinationNetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequest) GetDestinationNetworkIdOk() (*TransactRequestSourceAssetNetworkId, bool) {
	if o == nil || IsNil(o.DestinationNetworkId) {
		return nil, false
	}
	return o.DestinationNetworkId, true
}

// HasDestinationNetworkId returns a boolean if a field has been set.
func (o *OracleRegisterRequest) HasDestinationNetworkId() bool {
	if o != nil && !IsNil(o.DestinationNetworkId) {
		return true
	}

	return false
}

// SetDestinationNetworkId gets a reference to the given TransactRequestSourceAssetNetworkId and assigns it to the DestinationNetworkId field.
func (o *OracleRegisterRequest) SetDestinationNetworkId(v TransactRequestSourceAssetNetworkId) {
	o.DestinationNetworkId = &v
}

// GetSourceContract returns the SourceContract field value if set, zero value otherwise.
func (o *OracleRegisterRequest) GetSourceContract() RegisterOracleTaskRequestSourceContract {
	if o == nil || IsNil(o.SourceContract) {
		var ret RegisterOracleTaskRequestSourceContract
		return ret
	}
	return *o.SourceContract
}

// GetSourceContractOk returns a tuple with the SourceContract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequest) GetSourceContractOk() (*RegisterOracleTaskRequestSourceContract, bool) {
	if o == nil || IsNil(o.SourceContract) {
		return nil, false
	}
	return o.SourceContract, true
}

// HasSourceContract returns a boolean if a field has been set.
func (o *OracleRegisterRequest) HasSourceContract() bool {
	if o != nil && !IsNil(o.SourceContract) {
		return true
	}

	return false
}

// SetSourceContract gets a reference to the given RegisterOracleTaskRequestSourceContract and assigns it to the SourceContract field.
func (o *OracleRegisterRequest) SetSourceContract(v RegisterOracleTaskRequestSourceContract) {
	o.SourceContract = &v
}

// GetDestinationContract returns the DestinationContract field value if set, zero value otherwise.
func (o *OracleRegisterRequest) GetDestinationContract() RegisterOracleTaskRequestDestinationContract {
	if o == nil || IsNil(o.DestinationContract) {
		var ret RegisterOracleTaskRequestDestinationContract
		return ret
	}
	return *o.DestinationContract
}

// GetDestinationContractOk returns a tuple with the DestinationContract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequest) GetDestinationContractOk() (*RegisterOracleTaskRequestDestinationContract, bool) {
	if o == nil || IsNil(o.DestinationContract) {
		return nil, false
	}
	return o.DestinationContract, true
}

// HasDestinationContract returns a boolean if a field has been set.
func (o *OracleRegisterRequest) HasDestinationContract() bool {
	if o != nil && !IsNil(o.DestinationContract) {
		return true
	}

	return false
}

// SetDestinationContract gets a reference to the given RegisterOracleTaskRequestDestinationContract and assigns it to the DestinationContract field.
func (o *OracleRegisterRequest) SetDestinationContract(v RegisterOracleTaskRequestDestinationContract) {
	o.DestinationContract = &v
}

// GetTaskMode returns the TaskMode field value
func (o *OracleRegisterRequest) GetTaskMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaskMode
}

// GetTaskModeOk returns a tuple with the TaskMode field value
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequest) GetTaskModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskMode, true
}

// SetTaskMode sets field value
func (o *OracleRegisterRequest) SetTaskMode(v string) {
	o.TaskMode = v
}

// GetPollingInterval returns the PollingInterval field value if set, zero value otherwise.
func (o *OracleRegisterRequest) GetPollingInterval() int32 {
	if o == nil || IsNil(o.PollingInterval) {
		var ret int32
		return ret
	}
	return *o.PollingInterval
}

// GetPollingIntervalOk returns a tuple with the PollingInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequest) GetPollingIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.PollingInterval) {
		return nil, false
	}
	return o.PollingInterval, true
}

// HasPollingInterval returns a boolean if a field has been set.
func (o *OracleRegisterRequest) HasPollingInterval() bool {
	if o != nil && !IsNil(o.PollingInterval) {
		return true
	}

	return false
}

// SetPollingInterval gets a reference to the given int32 and assigns it to the PollingInterval field.
func (o *OracleRegisterRequest) SetPollingInterval(v int32) {
	o.PollingInterval = &v
}

// GetListeningOptions returns the ListeningOptions field value if set, zero value otherwise.
func (o *OracleRegisterRequest) GetListeningOptions() RegisterOracleTaskRequestListeningOptions {
	if o == nil || IsNil(o.ListeningOptions) {
		var ret RegisterOracleTaskRequestListeningOptions
		return ret
	}
	return *o.ListeningOptions
}

// GetListeningOptionsOk returns a tuple with the ListeningOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequest) GetListeningOptionsOk() (*RegisterOracleTaskRequestListeningOptions, bool) {
	if o == nil || IsNil(o.ListeningOptions) {
		return nil, false
	}
	return o.ListeningOptions, true
}

// HasListeningOptions returns a boolean if a field has been set.
func (o *OracleRegisterRequest) HasListeningOptions() bool {
	if o != nil && !IsNil(o.ListeningOptions) {
		return true
	}

	return false
}

// SetListeningOptions gets a reference to the given RegisterOracleTaskRequestListeningOptions and assigns it to the ListeningOptions field.
func (o *OracleRegisterRequest) SetListeningOptions(v RegisterOracleTaskRequestListeningOptions) {
	o.ListeningOptions = &v
}

// GetTaskType returns the TaskType field value
func (o *OracleRegisterRequest) GetTaskType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TaskType
}

// GetTaskTypeOk returns a tuple with the TaskType field value
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequest) GetTaskTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskType, true
}

// SetTaskType sets field value
func (o *OracleRegisterRequest) SetTaskType(v string) {
	o.TaskType = v
}

func (o OracleRegisterRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OracleRegisterRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SourceNetworkId) {
		toSerialize["sourceNetworkId"] = o.SourceNetworkId
	}
	if !IsNil(o.DestinationNetworkId) {
		toSerialize["destinationNetworkId"] = o.DestinationNetworkId
	}
	if !IsNil(o.SourceContract) {
		toSerialize["sourceContract"] = o.SourceContract
	}
	if !IsNil(o.DestinationContract) {
		toSerialize["destinationContract"] = o.DestinationContract
	}
	toSerialize["taskMode"] = o.TaskMode
	if !IsNil(o.PollingInterval) {
		toSerialize["pollingInterval"] = o.PollingInterval
	}
	if !IsNil(o.ListeningOptions) {
		toSerialize["listeningOptions"] = o.ListeningOptions
	}
	toSerialize["taskType"] = o.TaskType
	return toSerialize, nil
}

type NullableOracleRegisterRequest struct {
	value *OracleRegisterRequest
	isSet bool
}

func (v NullableOracleRegisterRequest) Get() *OracleRegisterRequest {
	return v.value
}

func (v *NullableOracleRegisterRequest) Set(val *OracleRegisterRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleRegisterRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleRegisterRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleRegisterRequest(val *OracleRegisterRequest) *NullableOracleRegisterRequest {
	return &NullableOracleRegisterRequest{value: val, isSet: true}
}

func (v NullableOracleRegisterRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleRegisterRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


