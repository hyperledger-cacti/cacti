/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
)

// checks if the OracleRegisterRequestOriginContract type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OracleRegisterRequestOriginContract{}

// OracleRegisterRequestOriginContract struct for OracleRegisterRequestOriginContract
type OracleRegisterRequestOriginContract struct {
	// The address of the contract on the origin network.
	ContractAddress *string `json:"contractAddress,omitempty"`
	// The name of the contract on the origin network.
	ContractName *string `json:"contractName,omitempty"`
}

// NewOracleRegisterRequestOriginContract instantiates a new OracleRegisterRequestOriginContract object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleRegisterRequestOriginContract() *OracleRegisterRequestOriginContract {
	this := OracleRegisterRequestOriginContract{}
	return &this
}

// NewOracleRegisterRequestOriginContractWithDefaults instantiates a new OracleRegisterRequestOriginContract object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleRegisterRequestOriginContractWithDefaults() *OracleRegisterRequestOriginContract {
	this := OracleRegisterRequestOriginContract{}
	return &this
}

// GetContractAddress returns the ContractAddress field value if set, zero value otherwise.
func (o *OracleRegisterRequestOriginContract) GetContractAddress() string {
	if o == nil || IsNil(o.ContractAddress) {
		var ret string
		return ret
	}
	return *o.ContractAddress
}

// GetContractAddressOk returns a tuple with the ContractAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequestOriginContract) GetContractAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ContractAddress) {
		return nil, false
	}
	return o.ContractAddress, true
}

// HasContractAddress returns a boolean if a field has been set.
func (o *OracleRegisterRequestOriginContract) HasContractAddress() bool {
	if o != nil && !IsNil(o.ContractAddress) {
		return true
	}

	return false
}

// SetContractAddress gets a reference to the given string and assigns it to the ContractAddress field.
func (o *OracleRegisterRequestOriginContract) SetContractAddress(v string) {
	o.ContractAddress = &v
}

// GetContractName returns the ContractName field value if set, zero value otherwise.
func (o *OracleRegisterRequestOriginContract) GetContractName() string {
	if o == nil || IsNil(o.ContractName) {
		var ret string
		return ret
	}
	return *o.ContractName
}

// GetContractNameOk returns a tuple with the ContractName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegisterRequestOriginContract) GetContractNameOk() (*string, bool) {
	if o == nil || IsNil(o.ContractName) {
		return nil, false
	}
	return o.ContractName, true
}

// HasContractName returns a boolean if a field has been set.
func (o *OracleRegisterRequestOriginContract) HasContractName() bool {
	if o != nil && !IsNil(o.ContractName) {
		return true
	}

	return false
}

// SetContractName gets a reference to the given string and assigns it to the ContractName field.
func (o *OracleRegisterRequestOriginContract) SetContractName(v string) {
	o.ContractName = &v
}

func (o OracleRegisterRequestOriginContract) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OracleRegisterRequestOriginContract) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContractAddress) {
		toSerialize["contractAddress"] = o.ContractAddress
	}
	if !IsNil(o.ContractName) {
		toSerialize["contractName"] = o.ContractName
	}
	return toSerialize, nil
}

type NullableOracleRegisterRequestOriginContract struct {
	value *OracleRegisterRequestOriginContract
	isSet bool
}

func (v NullableOracleRegisterRequestOriginContract) Get() *OracleRegisterRequestOriginContract {
	return v.value
}

func (v *NullableOracleRegisterRequestOriginContract) Set(val *OracleRegisterRequestOriginContract) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleRegisterRequestOriginContract) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleRegisterRequestOriginContract) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleRegisterRequestOriginContract(val *OracleRegisterRequestOriginContract) *NullableOracleRegisterRequestOriginContract {
	return &NullableOracleRegisterRequestOriginContract{value: val, isSet: true}
}

func (v NullableOracleRegisterRequestOriginContract) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleRegisterRequestOriginContract) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


