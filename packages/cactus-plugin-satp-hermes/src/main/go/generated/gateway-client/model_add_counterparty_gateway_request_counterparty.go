/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
)

// checks if the AddCounterpartyGatewayRequestCounterparty type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddCounterpartyGatewayRequestCounterparty{}

// AddCounterpartyGatewayRequestCounterparty The identity of the gateway.
type AddCounterpartyGatewayRequestCounterparty struct {
	// The unique identifier for the gateway.
	Id string `json:"id"`
	// The public key of the gateway.
	PubKey string `json:"pubKey"`
	// The name of the gateway.
	Name string `json:"name"`
	// The draft versions supported by the gateway.
	Version []GatewayIdentityVersionInner `json:"version"`
	// The list of connected DLT networks.
	ConnectedDLTs []TransactRequestSourceAssetNetworkId `json:"connectedDLTs"`
	// The proof ID associated with the gateway.
	ProofID string `json:"proofID"`
	// The server port of the gateway.
	GatewayServerPort int32 `json:"gatewayServerPort"`
	// The client port of the gateway.
	GatewayClientPort int32 `json:"gatewayClientPort"`
	// The OpenAPI port of the gateway.
	GatewayOapiPort *int32 `json:"gatewayOapiPort,omitempty"`
	// The UI port of the gateway.
	GatewayUIPort *int32 `json:"gatewayUIPort,omitempty"`
	// A blockchain address.
	Address string `json:"address"`
}

// NewAddCounterpartyGatewayRequestCounterparty instantiates a new AddCounterpartyGatewayRequestCounterparty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddCounterpartyGatewayRequestCounterparty(id string, pubKey string, name string, version []GatewayIdentityVersionInner, connectedDLTs []TransactRequestSourceAssetNetworkId, proofID string, gatewayServerPort int32, gatewayClientPort int32, address string) *AddCounterpartyGatewayRequestCounterparty {
	this := AddCounterpartyGatewayRequestCounterparty{}
	this.Id = id
	this.PubKey = pubKey
	this.Name = name
	this.Version = version
	this.ConnectedDLTs = connectedDLTs
	this.ProofID = proofID
	this.GatewayServerPort = gatewayServerPort
	this.GatewayClientPort = gatewayClientPort
	this.Address = address
	return &this
}

// NewAddCounterpartyGatewayRequestCounterpartyWithDefaults instantiates a new AddCounterpartyGatewayRequestCounterparty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddCounterpartyGatewayRequestCounterpartyWithDefaults() *AddCounterpartyGatewayRequestCounterparty {
	this := AddCounterpartyGatewayRequestCounterparty{}
	return &this
}

// GetId returns the Id field value
func (o *AddCounterpartyGatewayRequestCounterparty) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AddCounterpartyGatewayRequestCounterparty) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AddCounterpartyGatewayRequestCounterparty) SetId(v string) {
	o.Id = v
}

// GetPubKey returns the PubKey field value
func (o *AddCounterpartyGatewayRequestCounterparty) GetPubKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PubKey
}

// GetPubKeyOk returns a tuple with the PubKey field value
// and a boolean to check if the value has been set.
func (o *AddCounterpartyGatewayRequestCounterparty) GetPubKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PubKey, true
}

// SetPubKey sets field value
func (o *AddCounterpartyGatewayRequestCounterparty) SetPubKey(v string) {
	o.PubKey = v
}

// GetName returns the Name field value
func (o *AddCounterpartyGatewayRequestCounterparty) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AddCounterpartyGatewayRequestCounterparty) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AddCounterpartyGatewayRequestCounterparty) SetName(v string) {
	o.Name = v
}

// GetVersion returns the Version field value
func (o *AddCounterpartyGatewayRequestCounterparty) GetVersion() []GatewayIdentityVersionInner {
	if o == nil {
		var ret []GatewayIdentityVersionInner
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *AddCounterpartyGatewayRequestCounterparty) GetVersionOk() ([]GatewayIdentityVersionInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version, true
}

// SetVersion sets field value
func (o *AddCounterpartyGatewayRequestCounterparty) SetVersion(v []GatewayIdentityVersionInner) {
	o.Version = v
}

// GetConnectedDLTs returns the ConnectedDLTs field value
func (o *AddCounterpartyGatewayRequestCounterparty) GetConnectedDLTs() []TransactRequestSourceAssetNetworkId {
	if o == nil {
		var ret []TransactRequestSourceAssetNetworkId
		return ret
	}

	return o.ConnectedDLTs
}

// GetConnectedDLTsOk returns a tuple with the ConnectedDLTs field value
// and a boolean to check if the value has been set.
func (o *AddCounterpartyGatewayRequestCounterparty) GetConnectedDLTsOk() ([]TransactRequestSourceAssetNetworkId, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectedDLTs, true
}

// SetConnectedDLTs sets field value
func (o *AddCounterpartyGatewayRequestCounterparty) SetConnectedDLTs(v []TransactRequestSourceAssetNetworkId) {
	o.ConnectedDLTs = v
}

// GetProofID returns the ProofID field value
func (o *AddCounterpartyGatewayRequestCounterparty) GetProofID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProofID
}

// GetProofIDOk returns a tuple with the ProofID field value
// and a boolean to check if the value has been set.
func (o *AddCounterpartyGatewayRequestCounterparty) GetProofIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProofID, true
}

// SetProofID sets field value
func (o *AddCounterpartyGatewayRequestCounterparty) SetProofID(v string) {
	o.ProofID = v
}

// GetGatewayServerPort returns the GatewayServerPort field value
func (o *AddCounterpartyGatewayRequestCounterparty) GetGatewayServerPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GatewayServerPort
}

// GetGatewayServerPortOk returns a tuple with the GatewayServerPort field value
// and a boolean to check if the value has been set.
func (o *AddCounterpartyGatewayRequestCounterparty) GetGatewayServerPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GatewayServerPort, true
}

// SetGatewayServerPort sets field value
func (o *AddCounterpartyGatewayRequestCounterparty) SetGatewayServerPort(v int32) {
	o.GatewayServerPort = v
}

// GetGatewayClientPort returns the GatewayClientPort field value
func (o *AddCounterpartyGatewayRequestCounterparty) GetGatewayClientPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GatewayClientPort
}

// GetGatewayClientPortOk returns a tuple with the GatewayClientPort field value
// and a boolean to check if the value has been set.
func (o *AddCounterpartyGatewayRequestCounterparty) GetGatewayClientPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GatewayClientPort, true
}

// SetGatewayClientPort sets field value
func (o *AddCounterpartyGatewayRequestCounterparty) SetGatewayClientPort(v int32) {
	o.GatewayClientPort = v
}

// GetGatewayOapiPort returns the GatewayOapiPort field value if set, zero value otherwise.
func (o *AddCounterpartyGatewayRequestCounterparty) GetGatewayOapiPort() int32 {
	if o == nil || IsNil(o.GatewayOapiPort) {
		var ret int32
		return ret
	}
	return *o.GatewayOapiPort
}

// GetGatewayOapiPortOk returns a tuple with the GatewayOapiPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCounterpartyGatewayRequestCounterparty) GetGatewayOapiPortOk() (*int32, bool) {
	if o == nil || IsNil(o.GatewayOapiPort) {
		return nil, false
	}
	return o.GatewayOapiPort, true
}

// HasGatewayOapiPort returns a boolean if a field has been set.
func (o *AddCounterpartyGatewayRequestCounterparty) HasGatewayOapiPort() bool {
	if o != nil && !IsNil(o.GatewayOapiPort) {
		return true
	}

	return false
}

// SetGatewayOapiPort gets a reference to the given int32 and assigns it to the GatewayOapiPort field.
func (o *AddCounterpartyGatewayRequestCounterparty) SetGatewayOapiPort(v int32) {
	o.GatewayOapiPort = &v
}

// GetGatewayUIPort returns the GatewayUIPort field value if set, zero value otherwise.
func (o *AddCounterpartyGatewayRequestCounterparty) GetGatewayUIPort() int32 {
	if o == nil || IsNil(o.GatewayUIPort) {
		var ret int32
		return ret
	}
	return *o.GatewayUIPort
}

// GetGatewayUIPortOk returns a tuple with the GatewayUIPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCounterpartyGatewayRequestCounterparty) GetGatewayUIPortOk() (*int32, bool) {
	if o == nil || IsNil(o.GatewayUIPort) {
		return nil, false
	}
	return o.GatewayUIPort, true
}

// HasGatewayUIPort returns a boolean if a field has been set.
func (o *AddCounterpartyGatewayRequestCounterparty) HasGatewayUIPort() bool {
	if o != nil && !IsNil(o.GatewayUIPort) {
		return true
	}

	return false
}

// SetGatewayUIPort gets a reference to the given int32 and assigns it to the GatewayUIPort field.
func (o *AddCounterpartyGatewayRequestCounterparty) SetGatewayUIPort(v int32) {
	o.GatewayUIPort = &v
}

// GetAddress returns the Address field value
func (o *AddCounterpartyGatewayRequestCounterparty) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *AddCounterpartyGatewayRequestCounterparty) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *AddCounterpartyGatewayRequestCounterparty) SetAddress(v string) {
	o.Address = v
}

func (o AddCounterpartyGatewayRequestCounterparty) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddCounterpartyGatewayRequestCounterparty) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["pubKey"] = o.PubKey
	toSerialize["name"] = o.Name
	toSerialize["version"] = o.Version
	toSerialize["connectedDLTs"] = o.ConnectedDLTs
	toSerialize["proofID"] = o.ProofID
	toSerialize["gatewayServerPort"] = o.GatewayServerPort
	toSerialize["gatewayClientPort"] = o.GatewayClientPort
	if !IsNil(o.GatewayOapiPort) {
		toSerialize["gatewayOapiPort"] = o.GatewayOapiPort
	}
	if !IsNil(o.GatewayUIPort) {
		toSerialize["gatewayUIPort"] = o.GatewayUIPort
	}
	toSerialize["address"] = o.Address
	return toSerialize, nil
}

type NullableAddCounterpartyGatewayRequestCounterparty struct {
	value *AddCounterpartyGatewayRequestCounterparty
	isSet bool
}

func (v NullableAddCounterpartyGatewayRequestCounterparty) Get() *AddCounterpartyGatewayRequestCounterparty {
	return v.value
}

func (v *NullableAddCounterpartyGatewayRequestCounterparty) Set(val *AddCounterpartyGatewayRequestCounterparty) {
	v.value = val
	v.isSet = true
}

func (v NullableAddCounterpartyGatewayRequestCounterparty) IsSet() bool {
	return v.isSet
}

func (v *NullableAddCounterpartyGatewayRequestCounterparty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddCounterpartyGatewayRequestCounterparty(val *AddCounterpartyGatewayRequestCounterparty) *NullableAddCounterpartyGatewayRequestCounterparty {
	return &NullableAddCounterpartyGatewayRequestCounterparty{value: val, isSet: true}
}

func (v NullableAddCounterpartyGatewayRequestCounterparty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddCounterpartyGatewayRequestCounterparty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


