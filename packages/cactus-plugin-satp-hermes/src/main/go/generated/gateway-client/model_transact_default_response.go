/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
)

// checks if the TransactDefaultResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactDefaultResponse{}

// TransactDefaultResponse An Error
type TransactDefaultResponse struct {
	// HTTP error type
	Type string `json:"type"`
	// Numeric error code
	Code int32 `json:"code"`
	// HTTP status of the error
	Status int32 `json:"status"`
	// Long error description
	Message string `json:"message"`
	// Timestamp of the error
	Timestamp string `json:"timestamp"`
}

// NewTransactDefaultResponse instantiates a new TransactDefaultResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactDefaultResponse(type_ string, code int32, status int32, message string, timestamp string) *TransactDefaultResponse {
	this := TransactDefaultResponse{}
	this.Type = type_
	this.Code = code
	this.Status = status
	this.Message = message
	this.Timestamp = timestamp
	return &this
}

// NewTransactDefaultResponseWithDefaults instantiates a new TransactDefaultResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactDefaultResponseWithDefaults() *TransactDefaultResponse {
	this := TransactDefaultResponse{}
	return &this
}

// GetType returns the Type field value
func (o *TransactDefaultResponse) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TransactDefaultResponse) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TransactDefaultResponse) SetType(v string) {
	o.Type = v
}

// GetCode returns the Code field value
func (o *TransactDefaultResponse) GetCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *TransactDefaultResponse) GetCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *TransactDefaultResponse) SetCode(v int32) {
	o.Code = v
}

// GetStatus returns the Status field value
func (o *TransactDefaultResponse) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TransactDefaultResponse) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TransactDefaultResponse) SetStatus(v int32) {
	o.Status = v
}

// GetMessage returns the Message field value
func (o *TransactDefaultResponse) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *TransactDefaultResponse) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *TransactDefaultResponse) SetMessage(v string) {
	o.Message = v
}

// GetTimestamp returns the Timestamp field value
func (o *TransactDefaultResponse) GetTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *TransactDefaultResponse) GetTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *TransactDefaultResponse) SetTimestamp(v string) {
	o.Timestamp = v
}

func (o TransactDefaultResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactDefaultResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["code"] = o.Code
	toSerialize["status"] = o.Status
	toSerialize["message"] = o.Message
	toSerialize["timestamp"] = o.Timestamp
	return toSerialize, nil
}

type NullableTransactDefaultResponse struct {
	value *TransactDefaultResponse
	isSet bool
}

func (v NullableTransactDefaultResponse) Get() *TransactDefaultResponse {
	return v.value
}

func (v *NullableTransactDefaultResponse) Set(val *TransactDefaultResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactDefaultResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactDefaultResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactDefaultResponse(val *TransactDefaultResponse) *NullableTransactDefaultResponse {
	return &NullableTransactDefaultResponse{value: val, isSet: true}
}

func (v NullableTransactDefaultResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactDefaultResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


