/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
)

// checks if the AuditResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditResponse{}

// AuditResponse Response schema for an audit request. Contains the proofs generated during the audit period and the start and end datetimes.
type AuditResponse struct {
	Sessions []string `json:"sessions,omitempty"`
	// The start timestamp for the audit period, as a Unix timestamp (milliseconds since epoch).
	StartTimestamp *int64 `json:"startTimestamp,omitempty"`
	// The end timestamp for the audit period, as a Unix timestamp (milliseconds since epoch).
	EndTimestamp *int64 `json:"endTimestamp,omitempty"`
}

// NewAuditResponse instantiates a new AuditResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditResponse() *AuditResponse {
	this := AuditResponse{}
	return &this
}

// NewAuditResponseWithDefaults instantiates a new AuditResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditResponseWithDefaults() *AuditResponse {
	this := AuditResponse{}
	return &this
}

// GetSessions returns the Sessions field value if set, zero value otherwise.
func (o *AuditResponse) GetSessions() []string {
	if o == nil || IsNil(o.Sessions) {
		var ret []string
		return ret
	}
	return o.Sessions
}

// GetSessionsOk returns a tuple with the Sessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditResponse) GetSessionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Sessions) {
		return nil, false
	}
	return o.Sessions, true
}

// HasSessions returns a boolean if a field has been set.
func (o *AuditResponse) HasSessions() bool {
	if o != nil && !IsNil(o.Sessions) {
		return true
	}

	return false
}

// SetSessions gets a reference to the given []string and assigns it to the Sessions field.
func (o *AuditResponse) SetSessions(v []string) {
	o.Sessions = v
}

// GetStartTimestamp returns the StartTimestamp field value if set, zero value otherwise.
func (o *AuditResponse) GetStartTimestamp() int64 {
	if o == nil || IsNil(o.StartTimestamp) {
		var ret int64
		return ret
	}
	return *o.StartTimestamp
}

// GetStartTimestampOk returns a tuple with the StartTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditResponse) GetStartTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.StartTimestamp) {
		return nil, false
	}
	return o.StartTimestamp, true
}

// HasStartTimestamp returns a boolean if a field has been set.
func (o *AuditResponse) HasStartTimestamp() bool {
	if o != nil && !IsNil(o.StartTimestamp) {
		return true
	}

	return false
}

// SetStartTimestamp gets a reference to the given int64 and assigns it to the StartTimestamp field.
func (o *AuditResponse) SetStartTimestamp(v int64) {
	o.StartTimestamp = &v
}

// GetEndTimestamp returns the EndTimestamp field value if set, zero value otherwise.
func (o *AuditResponse) GetEndTimestamp() int64 {
	if o == nil || IsNil(o.EndTimestamp) {
		var ret int64
		return ret
	}
	return *o.EndTimestamp
}

// GetEndTimestampOk returns a tuple with the EndTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditResponse) GetEndTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.EndTimestamp) {
		return nil, false
	}
	return o.EndTimestamp, true
}

// HasEndTimestamp returns a boolean if a field has been set.
func (o *AuditResponse) HasEndTimestamp() bool {
	if o != nil && !IsNil(o.EndTimestamp) {
		return true
	}

	return false
}

// SetEndTimestamp gets a reference to the given int64 and assigns it to the EndTimestamp field.
func (o *AuditResponse) SetEndTimestamp(v int64) {
	o.EndTimestamp = &v
}

func (o AuditResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Sessions) {
		toSerialize["sessions"] = o.Sessions
	}
	if !IsNil(o.StartTimestamp) {
		toSerialize["startTimestamp"] = o.StartTimestamp
	}
	if !IsNil(o.EndTimestamp) {
		toSerialize["endTimestamp"] = o.EndTimestamp
	}
	return toSerialize, nil
}

type NullableAuditResponse struct {
	value *AuditResponse
	isSet bool
}

func (v NullableAuditResponse) Get() *AuditResponse {
	return v.value
}

func (v *NullableAuditResponse) Set(val *AuditResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditResponse(val *AuditResponse) *NullableAuditResponse {
	return &NullableAuditResponse{value: val, isSet: true}
}

func (v NullableAuditResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


