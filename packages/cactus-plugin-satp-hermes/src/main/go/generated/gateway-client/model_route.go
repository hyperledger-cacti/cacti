/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
)

// checks if the Route type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Route{}

// Route struct for Route
type Route struct {
	// A unique identifier of the route.
	Id string `json:"id"`
	// A unique identifier for the gateway.
	GatewayID string `json:"gatewayID"`
	// The mode of operation for this route - 'data' for arbitrary payload handling, 'transfer' for asset transfer.
	Mode string `json:"mode"`
	// The ID of the DLT Network where the operation will originate.
	FromDLTNetworkID *string `json:"fromDLTNetworkID,omitempty"`
	// The amount of 'fromToken' to be transferred in USD, specified as a string to maintain precision.
	FromAmountUSD *float64 `json:"fromAmountUSD,omitempty"`
	// The amount that should be sent including all decimals (e.g., 1000000 for 1 USDC (6 decimals)).
	FromAmount *string `json:"fromAmount,omitempty"`
	FromToken *GetRoutes200ResponseRoutesInnerFromToken `json:"fromToken,omitempty"`
	// The ID of the DLT Network where the operation will end.
	ToDLTNetworkID *string `json:"toDLTNetworkID,omitempty"`
	// The expected amount to be received in USD.
	ToAmountUSD *string `json:"toAmountUSD,omitempty"`
	// The expected amount to be received including all decimals (e.g., 1000000 for 1 USDC (6 decimals)).
	ToAmount *string `json:"toAmount,omitempty"`
	// The minimum expected amount to be received including all decimals (e.g., 1000000 for 1 USDC (6 decimals)).
	ToAmountMin *string `json:"toAmountMin,omitempty"`
	ToToken *GetRoutes200ResponseRoutesInnerFromToken `json:"toToken,omitempty"`
	// The expected gas cost in USD.
	GasCostUSD *string `json:"gasCostUSD,omitempty"`
	// Whether chain switching is enabled or not.
	ContainsSwitchChain *bool `json:"containsSwitchChain,omitempty"`
	// List of steps involved in this route, adjusted for mode.
	Steps []GetRoutes200ResponseRoutesInnerStepsInner `json:"steps,omitempty"`
	Insurance *GetRoutes200ResponseRoutesInnerInsurance `json:"insurance,omitempty"`
	// List of tags identifiers providing additional context or categorization.
	Tags []string `json:"tags,omitempty"`
}

// NewRoute instantiates a new Route object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoute(id string, gatewayID string, mode string) *Route {
	this := Route{}
	this.Id = id
	this.GatewayID = gatewayID
	this.Mode = mode
	return &this
}

// NewRouteWithDefaults instantiates a new Route object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteWithDefaults() *Route {
	this := Route{}
	return &this
}

// GetId returns the Id field value
func (o *Route) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Route) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Route) SetId(v string) {
	o.Id = v
}

// GetGatewayID returns the GatewayID field value
func (o *Route) GetGatewayID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GatewayID
}

// GetGatewayIDOk returns a tuple with the GatewayID field value
// and a boolean to check if the value has been set.
func (o *Route) GetGatewayIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GatewayID, true
}

// SetGatewayID sets field value
func (o *Route) SetGatewayID(v string) {
	o.GatewayID = v
}

// GetMode returns the Mode field value
func (o *Route) GetMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *Route) GetModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *Route) SetMode(v string) {
	o.Mode = v
}

// GetFromDLTNetworkID returns the FromDLTNetworkID field value if set, zero value otherwise.
func (o *Route) GetFromDLTNetworkID() string {
	if o == nil || IsNil(o.FromDLTNetworkID) {
		var ret string
		return ret
	}
	return *o.FromDLTNetworkID
}

// GetFromDLTNetworkIDOk returns a tuple with the FromDLTNetworkID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetFromDLTNetworkIDOk() (*string, bool) {
	if o == nil || IsNil(o.FromDLTNetworkID) {
		return nil, false
	}
	return o.FromDLTNetworkID, true
}

// HasFromDLTNetworkID returns a boolean if a field has been set.
func (o *Route) HasFromDLTNetworkID() bool {
	if o != nil && !IsNil(o.FromDLTNetworkID) {
		return true
	}

	return false
}

// SetFromDLTNetworkID gets a reference to the given string and assigns it to the FromDLTNetworkID field.
func (o *Route) SetFromDLTNetworkID(v string) {
	o.FromDLTNetworkID = &v
}

// GetFromAmountUSD returns the FromAmountUSD field value if set, zero value otherwise.
func (o *Route) GetFromAmountUSD() float64 {
	if o == nil || IsNil(o.FromAmountUSD) {
		var ret float64
		return ret
	}
	return *o.FromAmountUSD
}

// GetFromAmountUSDOk returns a tuple with the FromAmountUSD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetFromAmountUSDOk() (*float64, bool) {
	if o == nil || IsNil(o.FromAmountUSD) {
		return nil, false
	}
	return o.FromAmountUSD, true
}

// HasFromAmountUSD returns a boolean if a field has been set.
func (o *Route) HasFromAmountUSD() bool {
	if o != nil && !IsNil(o.FromAmountUSD) {
		return true
	}

	return false
}

// SetFromAmountUSD gets a reference to the given float64 and assigns it to the FromAmountUSD field.
func (o *Route) SetFromAmountUSD(v float64) {
	o.FromAmountUSD = &v
}

// GetFromAmount returns the FromAmount field value if set, zero value otherwise.
func (o *Route) GetFromAmount() string {
	if o == nil || IsNil(o.FromAmount) {
		var ret string
		return ret
	}
	return *o.FromAmount
}

// GetFromAmountOk returns a tuple with the FromAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetFromAmountOk() (*string, bool) {
	if o == nil || IsNil(o.FromAmount) {
		return nil, false
	}
	return o.FromAmount, true
}

// HasFromAmount returns a boolean if a field has been set.
func (o *Route) HasFromAmount() bool {
	if o != nil && !IsNil(o.FromAmount) {
		return true
	}

	return false
}

// SetFromAmount gets a reference to the given string and assigns it to the FromAmount field.
func (o *Route) SetFromAmount(v string) {
	o.FromAmount = &v
}

// GetFromToken returns the FromToken field value if set, zero value otherwise.
func (o *Route) GetFromToken() GetRoutes200ResponseRoutesInnerFromToken {
	if o == nil || IsNil(o.FromToken) {
		var ret GetRoutes200ResponseRoutesInnerFromToken
		return ret
	}
	return *o.FromToken
}

// GetFromTokenOk returns a tuple with the FromToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetFromTokenOk() (*GetRoutes200ResponseRoutesInnerFromToken, bool) {
	if o == nil || IsNil(o.FromToken) {
		return nil, false
	}
	return o.FromToken, true
}

// HasFromToken returns a boolean if a field has been set.
func (o *Route) HasFromToken() bool {
	if o != nil && !IsNil(o.FromToken) {
		return true
	}

	return false
}

// SetFromToken gets a reference to the given GetRoutes200ResponseRoutesInnerFromToken and assigns it to the FromToken field.
func (o *Route) SetFromToken(v GetRoutes200ResponseRoutesInnerFromToken) {
	o.FromToken = &v
}

// GetToDLTNetworkID returns the ToDLTNetworkID field value if set, zero value otherwise.
func (o *Route) GetToDLTNetworkID() string {
	if o == nil || IsNil(o.ToDLTNetworkID) {
		var ret string
		return ret
	}
	return *o.ToDLTNetworkID
}

// GetToDLTNetworkIDOk returns a tuple with the ToDLTNetworkID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetToDLTNetworkIDOk() (*string, bool) {
	if o == nil || IsNil(o.ToDLTNetworkID) {
		return nil, false
	}
	return o.ToDLTNetworkID, true
}

// HasToDLTNetworkID returns a boolean if a field has been set.
func (o *Route) HasToDLTNetworkID() bool {
	if o != nil && !IsNil(o.ToDLTNetworkID) {
		return true
	}

	return false
}

// SetToDLTNetworkID gets a reference to the given string and assigns it to the ToDLTNetworkID field.
func (o *Route) SetToDLTNetworkID(v string) {
	o.ToDLTNetworkID = &v
}

// GetToAmountUSD returns the ToAmountUSD field value if set, zero value otherwise.
func (o *Route) GetToAmountUSD() string {
	if o == nil || IsNil(o.ToAmountUSD) {
		var ret string
		return ret
	}
	return *o.ToAmountUSD
}

// GetToAmountUSDOk returns a tuple with the ToAmountUSD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetToAmountUSDOk() (*string, bool) {
	if o == nil || IsNil(o.ToAmountUSD) {
		return nil, false
	}
	return o.ToAmountUSD, true
}

// HasToAmountUSD returns a boolean if a field has been set.
func (o *Route) HasToAmountUSD() bool {
	if o != nil && !IsNil(o.ToAmountUSD) {
		return true
	}

	return false
}

// SetToAmountUSD gets a reference to the given string and assigns it to the ToAmountUSD field.
func (o *Route) SetToAmountUSD(v string) {
	o.ToAmountUSD = &v
}

// GetToAmount returns the ToAmount field value if set, zero value otherwise.
func (o *Route) GetToAmount() string {
	if o == nil || IsNil(o.ToAmount) {
		var ret string
		return ret
	}
	return *o.ToAmount
}

// GetToAmountOk returns a tuple with the ToAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetToAmountOk() (*string, bool) {
	if o == nil || IsNil(o.ToAmount) {
		return nil, false
	}
	return o.ToAmount, true
}

// HasToAmount returns a boolean if a field has been set.
func (o *Route) HasToAmount() bool {
	if o != nil && !IsNil(o.ToAmount) {
		return true
	}

	return false
}

// SetToAmount gets a reference to the given string and assigns it to the ToAmount field.
func (o *Route) SetToAmount(v string) {
	o.ToAmount = &v
}

// GetToAmountMin returns the ToAmountMin field value if set, zero value otherwise.
func (o *Route) GetToAmountMin() string {
	if o == nil || IsNil(o.ToAmountMin) {
		var ret string
		return ret
	}
	return *o.ToAmountMin
}

// GetToAmountMinOk returns a tuple with the ToAmountMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetToAmountMinOk() (*string, bool) {
	if o == nil || IsNil(o.ToAmountMin) {
		return nil, false
	}
	return o.ToAmountMin, true
}

// HasToAmountMin returns a boolean if a field has been set.
func (o *Route) HasToAmountMin() bool {
	if o != nil && !IsNil(o.ToAmountMin) {
		return true
	}

	return false
}

// SetToAmountMin gets a reference to the given string and assigns it to the ToAmountMin field.
func (o *Route) SetToAmountMin(v string) {
	o.ToAmountMin = &v
}

// GetToToken returns the ToToken field value if set, zero value otherwise.
func (o *Route) GetToToken() GetRoutes200ResponseRoutesInnerFromToken {
	if o == nil || IsNil(o.ToToken) {
		var ret GetRoutes200ResponseRoutesInnerFromToken
		return ret
	}
	return *o.ToToken
}

// GetToTokenOk returns a tuple with the ToToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetToTokenOk() (*GetRoutes200ResponseRoutesInnerFromToken, bool) {
	if o == nil || IsNil(o.ToToken) {
		return nil, false
	}
	return o.ToToken, true
}

// HasToToken returns a boolean if a field has been set.
func (o *Route) HasToToken() bool {
	if o != nil && !IsNil(o.ToToken) {
		return true
	}

	return false
}

// SetToToken gets a reference to the given GetRoutes200ResponseRoutesInnerFromToken and assigns it to the ToToken field.
func (o *Route) SetToToken(v GetRoutes200ResponseRoutesInnerFromToken) {
	o.ToToken = &v
}

// GetGasCostUSD returns the GasCostUSD field value if set, zero value otherwise.
func (o *Route) GetGasCostUSD() string {
	if o == nil || IsNil(o.GasCostUSD) {
		var ret string
		return ret
	}
	return *o.GasCostUSD
}

// GetGasCostUSDOk returns a tuple with the GasCostUSD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetGasCostUSDOk() (*string, bool) {
	if o == nil || IsNil(o.GasCostUSD) {
		return nil, false
	}
	return o.GasCostUSD, true
}

// HasGasCostUSD returns a boolean if a field has been set.
func (o *Route) HasGasCostUSD() bool {
	if o != nil && !IsNil(o.GasCostUSD) {
		return true
	}

	return false
}

// SetGasCostUSD gets a reference to the given string and assigns it to the GasCostUSD field.
func (o *Route) SetGasCostUSD(v string) {
	o.GasCostUSD = &v
}

// GetContainsSwitchChain returns the ContainsSwitchChain field value if set, zero value otherwise.
func (o *Route) GetContainsSwitchChain() bool {
	if o == nil || IsNil(o.ContainsSwitchChain) {
		var ret bool
		return ret
	}
	return *o.ContainsSwitchChain
}

// GetContainsSwitchChainOk returns a tuple with the ContainsSwitchChain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetContainsSwitchChainOk() (*bool, bool) {
	if o == nil || IsNil(o.ContainsSwitchChain) {
		return nil, false
	}
	return o.ContainsSwitchChain, true
}

// HasContainsSwitchChain returns a boolean if a field has been set.
func (o *Route) HasContainsSwitchChain() bool {
	if o != nil && !IsNil(o.ContainsSwitchChain) {
		return true
	}

	return false
}

// SetContainsSwitchChain gets a reference to the given bool and assigns it to the ContainsSwitchChain field.
func (o *Route) SetContainsSwitchChain(v bool) {
	o.ContainsSwitchChain = &v
}

// GetSteps returns the Steps field value if set, zero value otherwise.
func (o *Route) GetSteps() []GetRoutes200ResponseRoutesInnerStepsInner {
	if o == nil || IsNil(o.Steps) {
		var ret []GetRoutes200ResponseRoutesInnerStepsInner
		return ret
	}
	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetStepsOk() ([]GetRoutes200ResponseRoutesInnerStepsInner, bool) {
	if o == nil || IsNil(o.Steps) {
		return nil, false
	}
	return o.Steps, true
}

// HasSteps returns a boolean if a field has been set.
func (o *Route) HasSteps() bool {
	if o != nil && !IsNil(o.Steps) {
		return true
	}

	return false
}

// SetSteps gets a reference to the given []GetRoutes200ResponseRoutesInnerStepsInner and assigns it to the Steps field.
func (o *Route) SetSteps(v []GetRoutes200ResponseRoutesInnerStepsInner) {
	o.Steps = v
}

// GetInsurance returns the Insurance field value if set, zero value otherwise.
func (o *Route) GetInsurance() GetRoutes200ResponseRoutesInnerInsurance {
	if o == nil || IsNil(o.Insurance) {
		var ret GetRoutes200ResponseRoutesInnerInsurance
		return ret
	}
	return *o.Insurance
}

// GetInsuranceOk returns a tuple with the Insurance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetInsuranceOk() (*GetRoutes200ResponseRoutesInnerInsurance, bool) {
	if o == nil || IsNil(o.Insurance) {
		return nil, false
	}
	return o.Insurance, true
}

// HasInsurance returns a boolean if a field has been set.
func (o *Route) HasInsurance() bool {
	if o != nil && !IsNil(o.Insurance) {
		return true
	}

	return false
}

// SetInsurance gets a reference to the given GetRoutes200ResponseRoutesInnerInsurance and assigns it to the Insurance field.
func (o *Route) SetInsurance(v GetRoutes200ResponseRoutesInnerInsurance) {
	o.Insurance = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Route) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Route) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Route) SetTags(v []string) {
	o.Tags = v
}

func (o Route) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Route) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["gatewayID"] = o.GatewayID
	toSerialize["mode"] = o.Mode
	if !IsNil(o.FromDLTNetworkID) {
		toSerialize["fromDLTNetworkID"] = o.FromDLTNetworkID
	}
	if !IsNil(o.FromAmountUSD) {
		toSerialize["fromAmountUSD"] = o.FromAmountUSD
	}
	if !IsNil(o.FromAmount) {
		toSerialize["fromAmount"] = o.FromAmount
	}
	if !IsNil(o.FromToken) {
		toSerialize["fromToken"] = o.FromToken
	}
	if !IsNil(o.ToDLTNetworkID) {
		toSerialize["toDLTNetworkID"] = o.ToDLTNetworkID
	}
	if !IsNil(o.ToAmountUSD) {
		toSerialize["toAmountUSD"] = o.ToAmountUSD
	}
	if !IsNil(o.ToAmount) {
		toSerialize["toAmount"] = o.ToAmount
	}
	if !IsNil(o.ToAmountMin) {
		toSerialize["toAmountMin"] = o.ToAmountMin
	}
	if !IsNil(o.ToToken) {
		toSerialize["toToken"] = o.ToToken
	}
	if !IsNil(o.GasCostUSD) {
		toSerialize["gasCostUSD"] = o.GasCostUSD
	}
	if !IsNil(o.ContainsSwitchChain) {
		toSerialize["containsSwitchChain"] = o.ContainsSwitchChain
	}
	if !IsNil(o.Steps) {
		toSerialize["steps"] = o.Steps
	}
	if !IsNil(o.Insurance) {
		toSerialize["insurance"] = o.Insurance
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableRoute struct {
	value *Route
	isSet bool
}

func (v NullableRoute) Get() *Route {
	return v.value
}

func (v *NullableRoute) Set(val *Route) {
	v.value = val
	v.isSet = true
}

func (v NullableRoute) IsSet() bool {
	return v.isSet
}

func (v *NullableRoute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoute(val *Route) *NullableRoute {
	return &NullableRoute{value: val, isSet: true}
}

func (v NullableRoute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


