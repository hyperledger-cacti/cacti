/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
)

// checks if the RegisterOracleTask200ResponseAllOfOperationsInnerOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterOracleTask200ResponseAllOfOperationsInnerOutput{}

// RegisterOracleTask200ResponseAllOfOperationsInnerOutput Optional output generated by the Oracle operation.
type RegisterOracleTask200ResponseAllOfOperationsInnerOutput struct {
	// The unique identifier for the transaction.
	TransactionId *string `json:"transactionId,omitempty"`
	// The receipt of the transaction, providing proof of execution.
	TransactionReceipt map[string]interface{} `json:"transactionReceipt,omitempty"`
	// The output of the Oracle operation execution.
	Output *string `json:"output,omitempty"`
	// Proof of the Oracle operation execution.
	Proof map[string]interface{} `json:"proof,omitempty"`
}

// NewRegisterOracleTask200ResponseAllOfOperationsInnerOutput instantiates a new RegisterOracleTask200ResponseAllOfOperationsInnerOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterOracleTask200ResponseAllOfOperationsInnerOutput() *RegisterOracleTask200ResponseAllOfOperationsInnerOutput {
	this := RegisterOracleTask200ResponseAllOfOperationsInnerOutput{}
	return &this
}

// NewRegisterOracleTask200ResponseAllOfOperationsInnerOutputWithDefaults instantiates a new RegisterOracleTask200ResponseAllOfOperationsInnerOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterOracleTask200ResponseAllOfOperationsInnerOutputWithDefaults() *RegisterOracleTask200ResponseAllOfOperationsInnerOutput {
	this := RegisterOracleTask200ResponseAllOfOperationsInnerOutput{}
	return &this
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *RegisterOracleTask200ResponseAllOfOperationsInnerOutput) GetTransactionId() string {
	if o == nil || IsNil(o.TransactionId) {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterOracleTask200ResponseAllOfOperationsInnerOutput) GetTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionId) {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *RegisterOracleTask200ResponseAllOfOperationsInnerOutput) HasTransactionId() bool {
	if o != nil && !IsNil(o.TransactionId) {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *RegisterOracleTask200ResponseAllOfOperationsInnerOutput) SetTransactionId(v string) {
	o.TransactionId = &v
}

// GetTransactionReceipt returns the TransactionReceipt field value if set, zero value otherwise.
func (o *RegisterOracleTask200ResponseAllOfOperationsInnerOutput) GetTransactionReceipt() map[string]interface{} {
	if o == nil || IsNil(o.TransactionReceipt) {
		var ret map[string]interface{}
		return ret
	}
	return o.TransactionReceipt
}

// GetTransactionReceiptOk returns a tuple with the TransactionReceipt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterOracleTask200ResponseAllOfOperationsInnerOutput) GetTransactionReceiptOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.TransactionReceipt) {
		return map[string]interface{}{}, false
	}
	return o.TransactionReceipt, true
}

// HasTransactionReceipt returns a boolean if a field has been set.
func (o *RegisterOracleTask200ResponseAllOfOperationsInnerOutput) HasTransactionReceipt() bool {
	if o != nil && !IsNil(o.TransactionReceipt) {
		return true
	}

	return false
}

// SetTransactionReceipt gets a reference to the given map[string]interface{} and assigns it to the TransactionReceipt field.
func (o *RegisterOracleTask200ResponseAllOfOperationsInnerOutput) SetTransactionReceipt(v map[string]interface{}) {
	o.TransactionReceipt = v
}

// GetOutput returns the Output field value if set, zero value otherwise.
func (o *RegisterOracleTask200ResponseAllOfOperationsInnerOutput) GetOutput() string {
	if o == nil || IsNil(o.Output) {
		var ret string
		return ret
	}
	return *o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterOracleTask200ResponseAllOfOperationsInnerOutput) GetOutputOk() (*string, bool) {
	if o == nil || IsNil(o.Output) {
		return nil, false
	}
	return o.Output, true
}

// HasOutput returns a boolean if a field has been set.
func (o *RegisterOracleTask200ResponseAllOfOperationsInnerOutput) HasOutput() bool {
	if o != nil && !IsNil(o.Output) {
		return true
	}

	return false
}

// SetOutput gets a reference to the given string and assigns it to the Output field.
func (o *RegisterOracleTask200ResponseAllOfOperationsInnerOutput) SetOutput(v string) {
	o.Output = &v
}

// GetProof returns the Proof field value if set, zero value otherwise.
func (o *RegisterOracleTask200ResponseAllOfOperationsInnerOutput) GetProof() map[string]interface{} {
	if o == nil || IsNil(o.Proof) {
		var ret map[string]interface{}
		return ret
	}
	return o.Proof
}

// GetProofOk returns a tuple with the Proof field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterOracleTask200ResponseAllOfOperationsInnerOutput) GetProofOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Proof) {
		return map[string]interface{}{}, false
	}
	return o.Proof, true
}

// HasProof returns a boolean if a field has been set.
func (o *RegisterOracleTask200ResponseAllOfOperationsInnerOutput) HasProof() bool {
	if o != nil && !IsNil(o.Proof) {
		return true
	}

	return false
}

// SetProof gets a reference to the given map[string]interface{} and assigns it to the Proof field.
func (o *RegisterOracleTask200ResponseAllOfOperationsInnerOutput) SetProof(v map[string]interface{}) {
	o.Proof = v
}

func (o RegisterOracleTask200ResponseAllOfOperationsInnerOutput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterOracleTask200ResponseAllOfOperationsInnerOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TransactionId) {
		toSerialize["transactionId"] = o.TransactionId
	}
	if !IsNil(o.TransactionReceipt) {
		toSerialize["transactionReceipt"] = o.TransactionReceipt
	}
	if !IsNil(o.Output) {
		toSerialize["output"] = o.Output
	}
	if !IsNil(o.Proof) {
		toSerialize["proof"] = o.Proof
	}
	return toSerialize, nil
}

type NullableRegisterOracleTask200ResponseAllOfOperationsInnerOutput struct {
	value *RegisterOracleTask200ResponseAllOfOperationsInnerOutput
	isSet bool
}

func (v NullableRegisterOracleTask200ResponseAllOfOperationsInnerOutput) Get() *RegisterOracleTask200ResponseAllOfOperationsInnerOutput {
	return v.value
}

func (v *NullableRegisterOracleTask200ResponseAllOfOperationsInnerOutput) Set(val *RegisterOracleTask200ResponseAllOfOperationsInnerOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterOracleTask200ResponseAllOfOperationsInnerOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterOracleTask200ResponseAllOfOperationsInnerOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterOracleTask200ResponseAllOfOperationsInnerOutput(val *RegisterOracleTask200ResponseAllOfOperationsInnerOutput) *NullableRegisterOracleTask200ResponseAllOfOperationsInnerOutput {
	return &NullableRegisterOracleTask200ResponseAllOfOperationsInnerOutput{value: val, isSet: true}
}

func (v NullableRegisterOracleTask200ResponseAllOfOperationsInnerOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterOracleTask200ResponseAllOfOperationsInnerOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


