/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type GetApproveAddressApi interface {

	/*
	GetApproveAddress Get approve address

	Get approve address for the token transfer

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetApproveAddressRequest
	*/
	GetApproveAddress(ctx context.Context) ApiGetApproveAddressRequest

	// GetApproveAddressExecute executes the request
	//  @return GetApproveAddress200Response
	GetApproveAddressExecute(r ApiGetApproveAddressRequest) (*GetApproveAddress200Response, *http.Response, error)
}

// GetApproveAddressApiService GetApproveAddressApi service
type GetApproveAddressApiService service

type ApiGetApproveAddressRequest struct {
	ctx context.Context
	ApiService GetApproveAddressApi
	networkId *TransactRequestSourceAssetNetworkId
	tokenType *string
}

func (r ApiGetApproveAddressRequest) NetworkId(networkId TransactRequestSourceAssetNetworkId) ApiGetApproveAddressRequest {
	r.networkId = &networkId
	return r
}

func (r ApiGetApproveAddressRequest) TokenType(tokenType string) ApiGetApproveAddressRequest {
	r.tokenType = &tokenType
	return r
}

func (r ApiGetApproveAddressRequest) Execute() (*GetApproveAddress200Response, *http.Response, error) {
	return r.ApiService.GetApproveAddressExecute(r)
}

/*
GetApproveAddress Get approve address

Get approve address for the token transfer

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetApproveAddressRequest
*/
func (a *GetApproveAddressApiService) GetApproveAddress(ctx context.Context) ApiGetApproveAddressRequest {
	return ApiGetApproveAddressRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetApproveAddress200Response
func (a *GetApproveAddressApiService) GetApproveAddressExecute(r ApiGetApproveAddressRequest) (*GetApproveAddress200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetApproveAddress200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GetApproveAddressApiService.GetApproveAddress")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/@hyperledger/cactus-plugin-satp-hermes/approve-address"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.networkId == nil {
		return localVarReturnValue, nil, reportError("networkId is required and must be specified")
	}
	if r.tokenType == nil {
		return localVarReturnValue, nil, reportError("tokenType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "networkId", r.networkId, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "tokenType", r.tokenType, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
