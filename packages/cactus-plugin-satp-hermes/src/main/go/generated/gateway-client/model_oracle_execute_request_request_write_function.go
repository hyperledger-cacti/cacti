/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
)

// checks if the OracleExecuteRequestRequestWriteFunction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OracleExecuteRequestRequestWriteFunction{}

// OracleExecuteRequestRequestWriteFunction Details about the write function in the destination contract for the data transfer task.
type OracleExecuteRequestRequestWriteFunction struct {
	// The name of the write function.
	FunctionName *string `json:"functionName,omitempty"`
	// The signature of the write function.
	FunctionSignature *string `json:"functionSignature,omitempty"`
}

// NewOracleExecuteRequestRequestWriteFunction instantiates a new OracleExecuteRequestRequestWriteFunction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleExecuteRequestRequestWriteFunction() *OracleExecuteRequestRequestWriteFunction {
	this := OracleExecuteRequestRequestWriteFunction{}
	return &this
}

// NewOracleExecuteRequestRequestWriteFunctionWithDefaults instantiates a new OracleExecuteRequestRequestWriteFunction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleExecuteRequestRequestWriteFunctionWithDefaults() *OracleExecuteRequestRequestWriteFunction {
	this := OracleExecuteRequestRequestWriteFunction{}
	return &this
}

// GetFunctionName returns the FunctionName field value if set, zero value otherwise.
func (o *OracleExecuteRequestRequestWriteFunction) GetFunctionName() string {
	if o == nil || IsNil(o.FunctionName) {
		var ret string
		return ret
	}
	return *o.FunctionName
}

// GetFunctionNameOk returns a tuple with the FunctionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleExecuteRequestRequestWriteFunction) GetFunctionNameOk() (*string, bool) {
	if o == nil || IsNil(o.FunctionName) {
		return nil, false
	}
	return o.FunctionName, true
}

// HasFunctionName returns a boolean if a field has been set.
func (o *OracleExecuteRequestRequestWriteFunction) HasFunctionName() bool {
	if o != nil && !IsNil(o.FunctionName) {
		return true
	}

	return false
}

// SetFunctionName gets a reference to the given string and assigns it to the FunctionName field.
func (o *OracleExecuteRequestRequestWriteFunction) SetFunctionName(v string) {
	o.FunctionName = &v
}

// GetFunctionSignature returns the FunctionSignature field value if set, zero value otherwise.
func (o *OracleExecuteRequestRequestWriteFunction) GetFunctionSignature() string {
	if o == nil || IsNil(o.FunctionSignature) {
		var ret string
		return ret
	}
	return *o.FunctionSignature
}

// GetFunctionSignatureOk returns a tuple with the FunctionSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleExecuteRequestRequestWriteFunction) GetFunctionSignatureOk() (*string, bool) {
	if o == nil || IsNil(o.FunctionSignature) {
		return nil, false
	}
	return o.FunctionSignature, true
}

// HasFunctionSignature returns a boolean if a field has been set.
func (o *OracleExecuteRequestRequestWriteFunction) HasFunctionSignature() bool {
	if o != nil && !IsNil(o.FunctionSignature) {
		return true
	}

	return false
}

// SetFunctionSignature gets a reference to the given string and assigns it to the FunctionSignature field.
func (o *OracleExecuteRequestRequestWriteFunction) SetFunctionSignature(v string) {
	o.FunctionSignature = &v
}

func (o OracleExecuteRequestRequestWriteFunction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OracleExecuteRequestRequestWriteFunction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FunctionName) {
		toSerialize["functionName"] = o.FunctionName
	}
	if !IsNil(o.FunctionSignature) {
		toSerialize["functionSignature"] = o.FunctionSignature
	}
	return toSerialize, nil
}

type NullableOracleExecuteRequestRequestWriteFunction struct {
	value *OracleExecuteRequestRequestWriteFunction
	isSet bool
}

func (v NullableOracleExecuteRequestRequestWriteFunction) Get() *OracleExecuteRequestRequestWriteFunction {
	return v.value
}

func (v *NullableOracleExecuteRequestRequestWriteFunction) Set(val *OracleExecuteRequestRequestWriteFunction) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleExecuteRequestRequestWriteFunction) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleExecuteRequestRequestWriteFunction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleExecuteRequestRequestWriteFunction(val *OracleExecuteRequestRequestWriteFunction) *NullableOracleExecuteRequestRequestWriteFunction {
	return &NullableOracleExecuteRequestRequestWriteFunction{value: val, isSet: true}
}

func (v NullableOracleExecuteRequestRequestWriteFunction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleExecuteRequestRequestWriteFunction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


