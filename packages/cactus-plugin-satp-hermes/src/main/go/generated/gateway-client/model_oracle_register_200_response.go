/*
SATP Gateway Client (Business Logic Orchestrator)

SATP is a protocol operating between two gateways that conducts the transfer of a digital asset from one gateway to another. The protocol establishes a secure channel between the endpoints and implements a 2-phase commit to ensure the properties of transfer atomicity, consistency, isolation and durability.  This API defines the gateway client facing API (business logic orchestrator, or BLO), which is named API-Type 1 in the SATP-Core specification.  **Additional Resources**: - [Proposed SATP Charter](https://datatracker.ietf.org/doc/charter-ietf-satp/) - [SATP Core draft](https://datatracker.ietf.org/doc/draft-ietf-satp-core) - [SATP Crash Recovery draft](https://datatracker.ietf.org/doc/draft-belchior-satp-gateway-recovery/) - [SATP Architecture draft](https://datatracker.ietf.org/doc/draft-ietf-satp-architecture/) - [SATP Use-Cases draft](https://datatracker.ietf.org/doc/draft-ramakrishna-sat-use-cases/) - [SATP Data sharing draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-data-sharing) - [SATP View Addresses draft](https://datatracker.ietf.org/doc/draft-ramakrishna-satp-views-addresses)

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package generated

import (
	"encoding/json"
)

// checks if the OracleRegister200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OracleRegister200Response{}

// OracleRegister200Response Represents a repeatable Oracle task with additional properties for mode, polling interval, and source event signature.
type OracleRegister200Response struct {
	// A unique identifier for the Oracle task.
	Id string `json:"id"`
	// The type of the Oracle task.
	Type Enum `json:"type"`
	SrcNetworkId *TransactRequestSourceAssetNetworkId `json:"srcNetworkId,omitempty"`
	SrcContract OracleRegister200ResponseSrcContract `json:"srcContract"`
	DstNetworkId *TransactRequestSourceAssetNetworkId `json:"dstNetworkId,omitempty"`
	DstContract OracleRegister200ResponseDstContract `json:"dstContract"`
	// The timestamp when the Oracle task was created or last updated.
	Timestamp int64 `json:"timestamp"`
	// The list of operations performed by the Oracle task.
	Operations []OracleRegister200ResponseOperationsInner `json:"operations"`
	// The current status of the Oracle task.
	Status Enum `json:"status"`
	// The mode of operation for registered tasks.
	Mode string `json:"mode"`
	// The interval for polling in milliseconds. Only if taskMode is POLLING.
	PollingInterval *int32 `json:"pollingInterval,omitempty"`
}

// NewOracleRegister200Response instantiates a new OracleRegister200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleRegister200Response(id string, type_ Enum, srcContract OracleRegister200ResponseSrcContract, dstContract OracleRegister200ResponseDstContract, timestamp int64, operations []OracleRegister200ResponseOperationsInner, status Enum, mode string) *OracleRegister200Response {
	this := OracleRegister200Response{}
	this.Id = id
	this.Type = type_
	this.SrcContract = srcContract
	this.DstContract = dstContract
	this.Timestamp = timestamp
	this.Operations = operations
	this.Status = status
	this.Mode = mode
	return &this
}

// NewOracleRegister200ResponseWithDefaults instantiates a new OracleRegister200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleRegister200ResponseWithDefaults() *OracleRegister200Response {
	this := OracleRegister200Response{}
	return &this
}

// GetId returns the Id field value
func (o *OracleRegister200Response) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OracleRegister200Response) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OracleRegister200Response) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *OracleRegister200Response) GetType() Enum {
	if o == nil {
		var ret Enum
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *OracleRegister200Response) GetTypeOk() (*Enum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *OracleRegister200Response) SetType(v Enum) {
	o.Type = v
}

// GetSrcNetworkId returns the SrcNetworkId field value if set, zero value otherwise.
func (o *OracleRegister200Response) GetSrcNetworkId() TransactRequestSourceAssetNetworkId {
	if o == nil || IsNil(o.SrcNetworkId) {
		var ret TransactRequestSourceAssetNetworkId
		return ret
	}
	return *o.SrcNetworkId
}

// GetSrcNetworkIdOk returns a tuple with the SrcNetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegister200Response) GetSrcNetworkIdOk() (*TransactRequestSourceAssetNetworkId, bool) {
	if o == nil || IsNil(o.SrcNetworkId) {
		return nil, false
	}
	return o.SrcNetworkId, true
}

// HasSrcNetworkId returns a boolean if a field has been set.
func (o *OracleRegister200Response) HasSrcNetworkId() bool {
	if o != nil && !IsNil(o.SrcNetworkId) {
		return true
	}

	return false
}

// SetSrcNetworkId gets a reference to the given TransactRequestSourceAssetNetworkId and assigns it to the SrcNetworkId field.
func (o *OracleRegister200Response) SetSrcNetworkId(v TransactRequestSourceAssetNetworkId) {
	o.SrcNetworkId = &v
}

// GetSrcContract returns the SrcContract field value
func (o *OracleRegister200Response) GetSrcContract() OracleRegister200ResponseSrcContract {
	if o == nil {
		var ret OracleRegister200ResponseSrcContract
		return ret
	}

	return o.SrcContract
}

// GetSrcContractOk returns a tuple with the SrcContract field value
// and a boolean to check if the value has been set.
func (o *OracleRegister200Response) GetSrcContractOk() (*OracleRegister200ResponseSrcContract, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SrcContract, true
}

// SetSrcContract sets field value
func (o *OracleRegister200Response) SetSrcContract(v OracleRegister200ResponseSrcContract) {
	o.SrcContract = v
}

// GetDstNetworkId returns the DstNetworkId field value if set, zero value otherwise.
func (o *OracleRegister200Response) GetDstNetworkId() TransactRequestSourceAssetNetworkId {
	if o == nil || IsNil(o.DstNetworkId) {
		var ret TransactRequestSourceAssetNetworkId
		return ret
	}
	return *o.DstNetworkId
}

// GetDstNetworkIdOk returns a tuple with the DstNetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegister200Response) GetDstNetworkIdOk() (*TransactRequestSourceAssetNetworkId, bool) {
	if o == nil || IsNil(o.DstNetworkId) {
		return nil, false
	}
	return o.DstNetworkId, true
}

// HasDstNetworkId returns a boolean if a field has been set.
func (o *OracleRegister200Response) HasDstNetworkId() bool {
	if o != nil && !IsNil(o.DstNetworkId) {
		return true
	}

	return false
}

// SetDstNetworkId gets a reference to the given TransactRequestSourceAssetNetworkId and assigns it to the DstNetworkId field.
func (o *OracleRegister200Response) SetDstNetworkId(v TransactRequestSourceAssetNetworkId) {
	o.DstNetworkId = &v
}

// GetDstContract returns the DstContract field value
func (o *OracleRegister200Response) GetDstContract() OracleRegister200ResponseDstContract {
	if o == nil {
		var ret OracleRegister200ResponseDstContract
		return ret
	}

	return o.DstContract
}

// GetDstContractOk returns a tuple with the DstContract field value
// and a boolean to check if the value has been set.
func (o *OracleRegister200Response) GetDstContractOk() (*OracleRegister200ResponseDstContract, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DstContract, true
}

// SetDstContract sets field value
func (o *OracleRegister200Response) SetDstContract(v OracleRegister200ResponseDstContract) {
	o.DstContract = v
}

// GetTimestamp returns the Timestamp field value
func (o *OracleRegister200Response) GetTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *OracleRegister200Response) GetTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *OracleRegister200Response) SetTimestamp(v int64) {
	o.Timestamp = v
}

// GetOperations returns the Operations field value
func (o *OracleRegister200Response) GetOperations() []OracleRegister200ResponseOperationsInner {
	if o == nil {
		var ret []OracleRegister200ResponseOperationsInner
		return ret
	}

	return o.Operations
}

// GetOperationsOk returns a tuple with the Operations field value
// and a boolean to check if the value has been set.
func (o *OracleRegister200Response) GetOperationsOk() ([]OracleRegister200ResponseOperationsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Operations, true
}

// SetOperations sets field value
func (o *OracleRegister200Response) SetOperations(v []OracleRegister200ResponseOperationsInner) {
	o.Operations = v
}

// GetStatus returns the Status field value
func (o *OracleRegister200Response) GetStatus() Enum {
	if o == nil {
		var ret Enum
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *OracleRegister200Response) GetStatusOk() (*Enum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *OracleRegister200Response) SetStatus(v Enum) {
	o.Status = v
}

// GetMode returns the Mode field value
func (o *OracleRegister200Response) GetMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *OracleRegister200Response) GetModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *OracleRegister200Response) SetMode(v string) {
	o.Mode = v
}

// GetPollingInterval returns the PollingInterval field value if set, zero value otherwise.
func (o *OracleRegister200Response) GetPollingInterval() int32 {
	if o == nil || IsNil(o.PollingInterval) {
		var ret int32
		return ret
	}
	return *o.PollingInterval
}

// GetPollingIntervalOk returns a tuple with the PollingInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRegister200Response) GetPollingIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.PollingInterval) {
		return nil, false
	}
	return o.PollingInterval, true
}

// HasPollingInterval returns a boolean if a field has been set.
func (o *OracleRegister200Response) HasPollingInterval() bool {
	if o != nil && !IsNil(o.PollingInterval) {
		return true
	}

	return false
}

// SetPollingInterval gets a reference to the given int32 and assigns it to the PollingInterval field.
func (o *OracleRegister200Response) SetPollingInterval(v int32) {
	o.PollingInterval = &v
}

func (o OracleRegister200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OracleRegister200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	if !IsNil(o.SrcNetworkId) {
		toSerialize["srcNetworkId"] = o.SrcNetworkId
	}
	toSerialize["srcContract"] = o.SrcContract
	if !IsNil(o.DstNetworkId) {
		toSerialize["dstNetworkId"] = o.DstNetworkId
	}
	toSerialize["dstContract"] = o.DstContract
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["operations"] = o.Operations
	toSerialize["status"] = o.Status
	toSerialize["mode"] = o.Mode
	if !IsNil(o.PollingInterval) {
		toSerialize["pollingInterval"] = o.PollingInterval
	}
	return toSerialize, nil
}

type NullableOracleRegister200Response struct {
	value *OracleRegister200Response
	isSet bool
}

func (v NullableOracleRegister200Response) Get() *OracleRegister200Response {
	return v.value
}

func (v *NullableOracleRegister200Response) Set(val *OracleRegister200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleRegister200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleRegister200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleRegister200Response(val *OracleRegister200Response) *NullableOracleRegister200Response {
	return &NullableOracleRegister200Response{value: val, isSet: true}
}

func (v NullableOracleRegister200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleRegister200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


