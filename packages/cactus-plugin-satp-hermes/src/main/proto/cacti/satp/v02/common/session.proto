syntax = "proto3";
package cacti.satp.v02.common;

import "google/protobuf/empty.proto";

import "cacti/satp/v02/common/message.proto";



message SessionData {
    string id = 1;
    string version = 2;
    string transfer_context_id = 3;
    MessageStagesHashes hashes = 4;
    cacti.satp.v02.common.PayloadProfile payload_profile = 5;
    MessageStagesSignatures signatures = 6;
    string max_retries = 7;
    string max_timeout = 8;
    string logging_profile = 9;
    string recipient_base_path = 10;
    string source_base_path = 11;
    string access_control_profile = 12;
    string application_profile = 13;
    int64 last_sequence_number = 14;
    string sender_gateway_network_id = 15;
    string recipient_gateway_network_id = 16;
    string source_ledger_asset_id = 17; 
    string recipient_ledger_asset_id = 18;
    string server_gateway_pubkey = 19;
    string client_gateway_pubkey = 20;
    string verified_originator_entity_id = 21; 
    string verified_beneficiary_entity_id = 22;
    string asset_profile_id = 23;
    string digital_asset_id = 24;
    string originator_pubkey = 25;
    string beneficiary_pubkey = 26;
    string sender_gateway_owner_id = 27;
    string receiver_gateway_owner_id = 28;
    string hash_transfer_init_claims = 29;
    string proposed_transfer_init_claims = 30;
    cacti.satp.v02.common.SignatureAlgorithm signature_algorithm = 31;
    cacti.satp.v02.common.LockType lock_type = 32;
    uint64 lock_expiration_time = 33;
    cacti.satp.v02.common.Permissions permissions = 34;
    string developer_urn = 35;
    cacti.satp.v02.common.CredentialProfile credential_profile = 36;
    cacti.satp.v02.common.SubsequentCalls subsequent_calls = 37;
    repeated cacti.satp.v02.common.History history = 38;
    bool multiple_claims_allowed = 39;
    bool multiple_cancels_allowed = 40;
    string last_message_received_timestamp = 41;
    MessageStagesTimestamps processed_timestamps = 42;
    MessageStagesTimestamps received_timestamps = 43;
    cacti.satp.v02.common.LockAssertionClaim lock_assertion_claim = 44;
    cacti.satp.v02.common.LockAssertionFormat lock_assertion_format = 45;
    cacti.satp.v02.common.MintAssertionClaims mint_assertion_claims = 46;
    cacti.satp.v02.common.MintAssertionClaimsFormat mint_assertion_claims_format = 47;
    cacti.satp.v02.common.BurnAssertionClaim burn_assertion_claim = 48;
    cacti.satp.v02.common.BurnAssertionClaimFormat burn_assertion_claim_format = 49;
    cacti.satp.v02.common.AssignmentAssertionClaim assignment_assertion_claim = 50;
    cacti.satp.v02.common.AssignmentAssertionClaimFormat assignment_assertion_claim_format = 51;
    bool completed = 52;
    ACCEPTANCE acceptance = 53;
    string last_message_hash = 54;
    cacti.satp.v02.common.TransferClaimsFormat transfer_claims_format = 55;
}



message MessageStagesHashes {
    Stage1Hashes stage1 = 1;
    Stage2Hashes stage2 = 2;
    Stage3Hashes stage3 = 3;  
}

message Stage1Hashes {
    string transfer_proposal_request_message_hash = 1;
    string transfer_proposal_receipt_message_hash = 2;
    string transfer_proposal_reject_message_hash = 3;
    string transfer_commence_request_message_hash = 4;
    string transfer_commence_response_message_hash = 5;
}

message Stage2Hashes {
    string lock_assertion_request_message_hash = 1;
    string lock_assertion_receipt_message_hash = 2;
}

message Stage3Hashes {
    string commit_preparation_request_message_hash = 1;
    string commit_ready_response_message_hash = 2;
    string commit_final_assertion_request_message_hash = 3;
    string commit_final_acknowledgement_receipt_response_message_hash = 4;
    string transfer_complete_message_hash = 5;
}

message MessageStagesSignatures {
    Stage1Signatures stage1 = 1;
    Stage2Signatures stage2 = 2;
    Stage3Signatures stage3 = 3;  
}

message Stage1Signatures {
    string transfer_proposal_request_message_signature = 1;
    string transfer_proposal_receipt_message_signature = 2;
    string transfer_proposal_reject_message_signature = 3;
    string transfer_commence_request_message_signature = 4;
    string transfer_commence_response_message_signature = 5;
}

message Stage2Signatures {
    string lock_assertion_request_message_signature = 1;
    string lock_assertion_receipt_message_signature = 2;
}

message Stage3Signatures {
    string commit_preparation_request_message_signature = 1;
    string commit_ready_response_message_signature = 2;
    string commit_final_assertion_request_message_signature = 3;
    string commit_final_acknowledgement_receipt_response_message_signature = 4;
    string transfer_complete_message_signature = 5;
}

message MessageStagesTimestamps {
    Stage1Timestamps stage1 = 1;
    Stage2Timestamps stage2 = 2;
    Stage3Timestamps stage3 = 3;  
}

message Stage1Timestamps {
    string transfer_proposal_request_message_timestamp = 1;
    string transfer_proposal_receipt_message_timestamp = 2;
    string transfer_proposal_reject_message_timestamp = 3;
    string transfer_commence_request_message_timestamp = 4;
    string transfer_commence_response_message_timestamp = 5;
}

message Stage2Timestamps {
    string lock_assertion_request_message_timestamp = 1;
    string lock_assertion_receipt_message_timestamp = 2;
}

message Stage3Timestamps {
    string commit_preparation_request_message_timestamp = 1;
    string commit_ready_response_message_timestamp = 2;
    string commit_final_assertion_request_message_timestamp = 3;
    string commit_final_acknowledgement_receipt_response_message_timestamp = 4;
    string transfer_complete_message_timestamp = 5;
}

enum ACCEPTANCE {
    ACCEPTANCE_REJECTED = 0;
    ACCEPTANCE_ACCEPTED = 1;
    ACCEPTANCE_CONDITIONAL = 2;
}

message SendStatusRequest {
    string status = 1;
    bool has_backup = 2;
}

message SendStatusResponse {
    string status = 1;
    bool has_backup = 2;
}


service SessionStatusService {
    rpc GetStatus(google.protobuf.Empty) returns (SendStatusResponse) {}
    rpc SendStatus(SendStatusRequest) returns (google.protobuf.Empty) {}
}

// TODO: define common RPC methods for each step. This is a draft
service CommonService {
    rpc Ping(google.protobuf.Empty) returns (cacti.satp.v02.common.MessageCore) {}
    rpc Rollback(google.protobuf.Empty) returns (cacti.satp.v02.common.RollbackMessageCore) {}
    rpc GetStageVersion(google.protobuf.Empty) returns (cacti.satp.v02.common.Ack) {};
}
