AuthzScope:
  type: string
  enum:
    - group:admin
    - group:user
  x-enum-descriptions:
    - Identities with the group:admin scope are administrators of the system.
    - Identities with the group:user scope are end users of the system who only have authorization to perform a limited set of actions.
  x-enum-varnames:
    - GroupAdmin
    - GroupUser
AuthzJwtClaim:
  description: 'Stores global constants related to the authorization of the application. Specifically enumerates the claims to validate for as per RFC 7519, section 4.1. See: https://tools.ietf.org/html/rfc7519#section-4.1'
  type: string
  enum:
    - Hyperledger Labs - Carbon Accounting Tool
  x-enum-descriptions:
    - The "iss" (issuer) claim identifies the principal that issued the JWT. The processing of this claim is generally application specific. The "iss" value is a case-sensitive string containing a StringOrURI value. Use of this claim is OPTIONAL.
  x-enum-varnames:
    - iss
CredentialProfile:
  type: string
  enum:
    - SAML
    - OAUTH
    - X509
getAuditRequest:
  type: object
  x-category: request
  properties:
    auditStartDate:
      type: string
      format: date-time
      description: The start datetime for the audit.
    auditEndDate:
      type: string
      format: date-time
      description: The end datetime for the audit.
    includeProofs:
      type: boolean
      description: Include proofs generated from each gateway transaction.
getAuditResponse:
  type: object
  x-category: response
  properties:
    proofs:
      type: array
      items:
        type: string
      description: An array of strings representing proofs.
    auditStartTime:
      type: string
      format: date-time
      description: The start datetime of the audit period.
    auditEndTime:
      type: string
      format: date-time
      description: The end datetime of the audit period.
StatusResponse:
  type: object
  x-category: response
  required:
    - status
    - substatus
    - stage
    - step
    - startTime
  properties:
    status:
      type: string
      enum:
        - NOT_FOUND
        - INVALID
        - PENDING
        - DONE
        - FAILED
      description: Current status of the SATP session.
    substatus:
      type: string
      enum:
        - WAIT_SOURCE_CONFIRMATIONS
        - WAIT_DESTINATION_TRANSACTION
        - BRIDGE_NOT_AVAILABLE
        - CHAIN_NOT_AVAILABLE
        - REFUND_IN_PROGRESS
        - UNKNOWN_ERROR
        - COMPLETED
        - PARTIAL
        - REFUNDED
        - NOT_PROCESSABLE_REFUND_NEEDED
      description: More detailed status of the SATP session.
    stage:
      type: string
      enum:
        - STAGE0
        - STAGE1
        - STAGE2
        - STAGE3
      description: Current stage of the SATP session.
    step:
      type: string
      enum:
        - transfer-initialization-claims
        - conveyance-of-network-capabilities-and-parameters
        - transfer-proposal-message
        - transfer-proposal-receipt-message
        - transfer-proposal-reject-and-conditional-reject-message
        - transfer-commence-message
        - commence-response-message
        - lock-assertion-message
        - lock-assertion-receipt-message
        - commit-preparation-message
        - commit-ready-message
        - commit-final-assertion-message
        - commit-final-acknowledgement-receipt-message
        - transfer-complete-message
        - rollback-transfer-initialization-claims
        - rollback-conveyance-of-network-capabilities-and-parameters
        - rollback-transfer-proposal-message
        - rollback-transfer-proposal-receipt-message
        - rollback-transfer-proposal-reject-and-conditional-reject-message
        - rollback-transfer-commence-message
        - rollback-commence-response-message
        - rollback-lock-assertion-message
        - rollback-lock-assertion-receipt-message
        - rollback-commit-preparation-message
        - rollback-commit-ready-message
        - rollback-commit-final-assertion-message
        - rollback-commit-final-acknowledgement-receipt-message
        - rollback-transfer-complete-message
      description: Current step within the stage of the SATP session.
    startTime:
      type: string
      format: date-time
      description: The start time of the SATP session.
PauseRequest:
  type: object
  properties:
    sessionId:
      type: string
      format: uuid
      description: A unique identifier for the transaction session to be paused.
    contextId:
      type: string
      format: uuid
      description: A unique identifier for the transaction context.
  required:
    - sessionId
    - contextId
  description: Schema for a request to pause a transaction session.
PauseResponse:
  type: object
  description: Response schema for a pause request, returning the status of the SATP session.
  properties:
    statusResponse:
      $ref: ./schemas.yml#/StatusResponse
  required:
    - statusResponse
StatusRequest:
  type: object
  x-category: request
  required:
    - sessionID
  properties:
    sessionID:
      type: string
      description: The ID of the session for which the status is being requested.
TransactRequest:
  type: object
  properties:
    contextID:
      type: string
      format: uuid
      description: A unique identifier for the transaction context.
    mode:
      type: string
      enum:
        - data
        - transfer
      description: The mode of transaction - 'data' for arbitrary payload or 'transfer' for asset transfer.
    payload:
      type: string
      description: A string containing all transaction details required for processing in 'data' mode. Required if mode is 'data'.
    fromDLTNetworkID:
      type: string
      description: The ID of the DLT Network from which the asset will be transferred. Required if mode is 'transfer'.
    toDLTNetworkID:
      type: string
      description: The ID of the DLT Network to which the asset will be transferred. Required if mode is 'transfer'.
    fromAmount:
      type: string
      description: Required if mode is 'transfer'.
    fromToken:
      type: string
      description: Required if mode is 'transfer'.
    toAmount:
      type: string
      description: Required if mode is 'transfer'.
    toToken:
      type: string
      description: Required if mode is 'transfer'.
  required:
    - contextID
    - mode
TransactResponse:
  type: object
  properties:
    sessionID:
      $ref: ./schemas.yml#/SessionID
    statusResponse:
      $ref: ./schemas.yml#/StatusResponse
  required:
    - sessionID
    - statusResponse
CancelRequest:
  type: object
  properties:
    sessionID:
      $ref: ./schemas.yml#/SessionID
  required:
    - sessionID
CancelResponse:
  type: object
  properties:
    statusResponse:
      $ref: ./schemas.yml#/StatusResponse
    cancelSuccessful:
      type: boolean
      description: Indicates whether the cancel operation was successful.
  required:
    - statusResponse
    - cancelSuccessful
APIError:
  x-category: response
  type: object
  x-go-type: ApiError
  x-go-name: ApiError
  description: An Error
  required:
    - message
    - type
    - code
    - status
    - timestamp
  properties:
    type:
      type: string
      description: HTTP error type
      example: bad-request
    code:
      type: integer
      description: Numeric error code
      example: 16384
    status:
      type: integer
      description: HTTP status of the error
      example: 500
    message:
      type: string
      description: Long error description
      example: Oops there's been an internal error handling
    timestamp:
      type: string
      description: Timestamp of the error
      example: '2021-07-21T17:32:28Z'
DLTProtocol:
  x-category: satp-core
  type: string
  enum:
    - HyperledgerFabric
    - HyperledgerBesu
  description: Supported DLT protocols.
DLTNetworkID:
  x-category: satp-core
  type: string
  description: 'The network of the DLT being interacted with. TODO: implement network identification draft'
DLTSubnetworkID:
  x-category: satp-core
  type: string
  description: 'The subnetwork of the DLT being interacted with. TODO: implement network identification draft'
SessionID:
  x-category: satp-core
  type: string
  description: Unique identifier (UUID) for the session.
  example: 000003e8-e0b8-21ee-ba00-325096b39f47
Address:
  type: string
  description: A blockchain address.
  example: '0x102A0F6D9F0F507288fE1e26740cFaD61184CCC7'
AmountString:
  type: string
  description: The amount in string format including all decimals.
  pattern: ^([1-9][0-9]*|0)(\.[0-9]+)?$
  example: '1000000000000000000'
AmountDecimal:
  type: number
  format: float
  description: Amount value with decimal places
  example: 100.33
TokenSymbol:
  type: string
  description: The symbol of a token
  example: ETH
LogoURI:
  type: string
  description: The logo of a token, chain, dex etc.
  format: uri
RoutesResponse:
  type: object
  description: A collection of available and unavailable routes
  required:
    - routes
  properties:
    routes:
      type: array
      description: A collection of route objects
      items:
        $ref: ./schemas.yml#/Route
Route:
  type: object
  properties:
    id:
      type: string
      description: A unique identifier of the route.
    gatewayID:
      type: string
      format: uuid
      description: A unique identifier for the gateway.
    mode:
      type: string
      enum:
        - data
        - transfer
      description: The mode of operation for this route - 'data' for arbitrary payload handling, 'transfer' for asset transfer.
    fromDLTNetworkID:
      type: string
      description: The ID of the DLT Network where the operation will originate.
    fromAmountUSD:
      type: string
      format: double
      description: The amount of 'fromToken' to be transferred in USD, specified as a string to maintain precision.
    fromAmount:
      type: string
      description: The amount that should be sent including all decimals (e.g., 1000000 for 1 USDC (6 decimals)).
      pattern: ^[1-9][0-9]*$
    fromToken:
      $ref: ./schemas.yml#/Token
    toDLTNetworkID:
      type: string
      description: The ID of the DLT Network where the operation will end.
    toAmountUSD:
      type: string
      description: The expected amount to be received in USD.
    toAmount:
      type: string
      description: The expected amount to be received including all decimals (e.g., 1000000 for 1 USDC (6 decimals)).
    toAmountMin:
      type: string
      description: The minimum expected amount to be received including all decimals (e.g., 1000000 for 1 USDC (6 decimals)).
    toToken:
      $ref: ./schemas.yml#/Token
    gasCostUSD:
      type: string
      description: The expected gas cost in USD.
    containsSwitchChain:
      type: boolean
      description: Whether chain switching is enabled or not.
    steps:
      type: array
      description: List of steps involved in this route, adjusted for mode.
      items:
        $ref: ./schemas.yml#/IncludedStep
    insurance:
      $ref: ./schemas.yml#/Insurance
    tags:
      $ref: ./schemas.yml#/Tags
  required:
    - id
    - gatewayID
    - mode
ContinueRequest:
  type: object
  properties:
    sessionId:
      type: string
      format: uuid
      description: A unique identifier for the transaction session to be continued.
    contextId:
      type: string
      format: uuid
      description: A unique identifier for the transaction context.
  required:
    - sessionId
    - contextId
  description: Schema for a request to continue a paused transaction session.
ContinueResponse:
  type: object
  description: Response schema for a continue request, returning the status of the SATP session.
  properties:
    statusResponse:
      $ref: ./schemas.yml#/StatusResponse
  required:
    - statusResponse
Chain:
  type: object
  properties:
    chainId:
      type: string
      description: A unique identifier for the blockchain network.
    chainName:
      type: string
      description: The name of the blockchain network.
    chainType:
      type: string
      description: The type of blockchain network (e.g., 'evm', 'fabric').
    networkName:
      type: string
      description: The specific network name within the blockchain (e.g., 'mainnet', 'testnet').
  required:
    - chainId
    - chainName
    - chainType
    - networkName
Chains:
  type: array
  description: List of chains and related metadata
  items:
    $ref: ./schemas.yml#/Chain
Token:
  type: object
  description: Metadata detailing a supported token
  required:
    - chainID
    - chainType
    - address
    - symbol
    - decimals
  properties:
    chainID:
      $ref: ./schemas.yml#/DLTNetworkID
    chainType:
      $ref: ./schemas.yml#/DLTProtocol
    address:
      $ref: ./schemas.yml#/Address
    name:
      type: string
      description: The name of the token.
    symbol:
      type: string
      description: The symbol of the token.
    decimals:
      type: integer
      description: How many decimals the token supports.
      minimum: 1
    logoURI:
      $ref: ./schemas.yml#/LogoURI
    tags:
      $ref: ./schemas.yml#/Tags
    priceUSD:
      type: string
      description: The current price of the token in USD.
    extensions:
      type: object
      properties:
        bridgeInfo:
          type: object
          additionalProperties:
            $ref: ./schemas.yml#/BridgeInfo
        verified:
          type: boolean
          description: Indicates whether the token is verified.
Tags:
  type: array
  description: List of tags identifiers providing additional context or categorization.
  items:
    type: string
  example:
    - satp
    - hyperledger
BridgeInfo:
  type: object
  description: Information about the bridge used for the token transfer.
  properties:
    tokenAddress:
      type: string
      description: The address of the token being transferred.
      example: 0x...
IncludedStep:
  type: object
  description: Details a single step within a route including actions and estimates.
  properties:
    id:
      type: string
      description: Id of the step
    type:
      type: string
      description: Type of the step, typically describing the action, e.g., 'swap'.
    tool:
      type: string
      description: Tool used in the step, e.g., 'stargate'.
    action:
      $ref: ./schemas.yml#/Action
    estimate:
      $ref: ./schemas.yml#/Estimate
    toolDetails:
      $ref: ./schemas.yml#/IntegrationDetails
    integrationDetails:
      $ref: ./schemas.yml#/IntegrationDetails
    includedStepIds:
      type: array
      description: IDs of further steps included within this step, allowing for nested actions without direct recursion.
      items:
        type: string
Insurance:
  type: object
  properties:
    state:
      type: string
      description: The state of insurance applicability for the transaction.
      example: NOT_INSURABLE
      enum:
        - NOT_INSURABLE
        - INSURABLE
        - INSURED
    feeAmountUsd:
      type: string
      description: The fee amount for insurance, represented in USD.
      example: '10.00'
      pattern: ^(0|[1-9]\d*)(\.\d+)?$
Action:
  type: object
  properties:
    fromToken:
      $ref: ./schemas.yml#/Token
    fromAmount:
      type: string
      description: The amount of 'fromToken' to be transferred, specified as a string to maintain precision.
      example: '1000000000000000000'
      pattern: ^[1-9][0-9]*$
    toToken:
      $ref: ./schemas.yml#/Token
    slippage:
      type: number
      format: float
      description: The maximum acceptable difference between the expected price of the 'toToken' and the price at the time of the transfer.
      example: 0.005
    fromAddress:
      $ref: ./schemas.yml#/Address
    toAddress:
      $ref: ./schemas.yml#/Address
IntegrationDetails:
  type: object
  description: Describes integration or tool details such as bridges or exchanges involved in the transaction.
  required:
    - key
    - name
    - logoURI
  properties:
    key:
      type: string
      description: A unique identifier for the integration or tool.
      example: 1inch
    name:
      type: string
      description: The name of the integration or tool.
      example: 1inch Exchange
    logoURI:
      type: string
      format: uri
      description: URL to the logo of the integration or tool.
      example: https://cdn.example.com/logos/1inch.png
Estimate:
  type: object
  description: Provides an estimation for a transaction, including costs, amounts, and execution duration.
  properties:
    approvalAddress:
      $ref: ./schemas.yml#/Address
    toAmountMin:
      $ref: ./schemas.yml#/AmountString
    toAmount:
      $ref: ./schemas.yml#/AmountString
    fromAmount:
      $ref: ./schemas.yml#/AmountString
    feeCosts:
      type: array
      description: A collection of fee costs associated with the transaction.
      items:
        $ref: ./schemas.yml#/FeeCost
    gasCosts:
      type: array
      description: A collection of estimated gas costs for executing the transaction.
      items:
        $ref: ./schemas.yml#/GasCost
    executionDuration:
      type: integer
      description: The estimated duration for the transaction execution in seconds.
      example: 30
    fromAmountUSD:
      $ref: ./schemas.yml#/AmountString
    toAmountUSD:
      $ref: ./schemas.yml#/AmountString
    tool:
      type: string
      description: The tool or service used to generate this estimate.
      example: satp
FeeCost:
  type: object
  description: Details about a specific fee cost associated with the transaction.
  properties:
    name:
      type: string
      description: Name of the fee cost.
      example: Network Fee
    amount:
      $ref: ./schemas.yml#/AmountString
    amountUSD:
      $ref: ./schemas.yml#/AmountString
    token:
      $ref: ./schemas.yml#/TokenSymbol
    included:
      type: boolean
      description: Indicates if the fee is included in the transaction amount.
GasCost:
  type: object
  properties:
    type:
      type: string
      description: The type of the gas cost.
      example: SEND
    price:
      type: string
      description: The gas price, specified as a string to maintain precision.
      example: '19236858243'
    estimate:
      type: string
      description: The estimated gas required, specified as a string to maintain precision.
      example: '445393'
    limit:
      type: string
      description: The gas limit for the transaction, specified as a string to maintain precision.
      example: '579011'
      pattern: ^[1-9][0-9]*$
    amount:
      type: string
      description: The amount of gas required in the gas currency.
      example: '8567962003424499'
      pattern: ^[1-9][0-9]*$
    amountUSD:
      type: string
      description: The amount of gas required in USD.
      example: '16.05'
      pattern: ^(0(\.[0-9]+)?|[1-9][0-9]*(\.[0-9]+)?)$
    token:
      $ref: ./schemas.yml#/Token
