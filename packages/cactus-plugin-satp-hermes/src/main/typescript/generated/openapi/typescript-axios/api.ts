/* tslint:disable */
/* eslint-disable */
/**
 * Hyperledger Cactus Plugin - Odap Hermes
 * Implementation for Odap and Hermes
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AssetProfile
 */
export interface AssetProfile {
    /**
     * 
     * @type {string}
     * @memberof AssetProfile
     */
    'issuer'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetProfile
     */
    'assetCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetProfile
     */
    'assetCodeType'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetProfile
     */
    'issuanceDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetProfile
     */
    'expirationDate': string;
    /**
     * 
     * @type {string}
     * @memberof AssetProfile
     */
    'verificationEndPoint'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetProfile
     */
    'digitalSignature'?: string;
    /**
     * 
     * @type {string}
     * @memberof AssetProfile
     */
    'prospectusLink'?: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof AssetProfile
     */
    'keyInformationLink'?: Array<any>;
    /**
     * 
     * @type {Array<any>}
     * @memberof AssetProfile
     */
    'keyWord'?: Array<any>;
    /**
     * 
     * @type {Array<any>}
     * @memberof AssetProfile
     */
    'transferRestriction'?: Array<any>;
    /**
     * 
     * @type {Array<any>}
     * @memberof AssetProfile
     */
    'ledgerRequirements'?: Array<any>;
}
/**
 * 
 * @export
 * @interface ClientRequestV1Request
 */
export interface ClientRequestV1Request {
    /**
     * 
     * @type {string}
     * @memberof ClientRequestV1Request
     */
    'version': string;
    /**
     * 
     * @type {string}
     * @memberof ClientRequestV1Request
     */
    'loggingProfile': string;
    /**
     * 
     * @type {string}
     * @memberof ClientRequestV1Request
     */
    'accessControlProfile': string;
    /**
     * 
     * @type {string}
     * @memberof ClientRequestV1Request
     */
    'assetControlProfile': string;
    /**
     * 
     * @type {string}
     * @memberof ClientRequestV1Request
     */
    'applicationProfile': string;
    /**
     * 
     * @type {Phase1TransferInitiationRequestV1RequestPayloadProfileAssetProfile}
     * @memberof ClientRequestV1Request
     */
    'assetProfile': Phase1TransferInitiationRequestV1RequestPayloadProfileAssetProfile;
    /**
     * 
     * @type {Phase1TransferInitiationRequestV1RequestPayloadProfile}
     * @memberof ClientRequestV1Request
     */
    'payloadProfile': Phase1TransferInitiationRequestV1RequestPayloadProfile;
    /**
     * 
     * @type {string}
     * @memberof ClientRequestV1Request
     */
    'sourceGatewayDltSystem': string;
    /**
     * 
     * @type {string}
     * @memberof ClientRequestV1Request
     */
    'recipientGatewayDltSystem': string;
    /**
     * 
     * @type {string}
     * @memberof ClientRequestV1Request
     */
    'recipientGatewayPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof ClientRequestV1Request
     */
    'originatorPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof ClientRequestV1Request
     */
    'beneficiaryPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof ClientRequestV1Request
     */
    'clientIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof ClientRequestV1Request
     */
    'serverIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof ClientRequestV1Request
     */
    'clientDltSystem': string;
    /**
     * 
     * @type {string}
     * @memberof ClientRequestV1Request
     */
    'serverDltSystem': string;
    /**
     * 
     * @type {ClientRequestV1RequestClientGatewayConfiguration}
     * @memberof ClientRequestV1Request
     */
    'clientGatewayConfiguration': ClientRequestV1RequestClientGatewayConfiguration;
    /**
     * 
     * @type {ClientRequestV1RequestClientGatewayConfiguration}
     * @memberof ClientRequestV1Request
     */
    'serverGatewayConfiguration': ClientRequestV1RequestClientGatewayConfiguration;
    /**
     * 
     * @type {number}
     * @memberof ClientRequestV1Request
     */
    'maxRetries': number;
    /**
     * 
     * @type {number}
     * @memberof ClientRequestV1Request
     */
    'maxTimeout': number;
    /**
     * 
     * @type {string}
     * @memberof ClientRequestV1Request
     */
    'sourceLedgerAssetID': string;
    /**
     * 
     * @type {string}
     * @memberof ClientRequestV1Request
     */
    'recipientLedgerAssetID': string;
}
/**
 * 
 * @export
 * @interface ClientRequestV1RequestClientGatewayConfiguration
 */
export interface ClientRequestV1RequestClientGatewayConfiguration {
    /**
     * 
     * @type {string}
     * @memberof ClientRequestV1RequestClientGatewayConfiguration
     */
    'apiHost': string;
}
/**
 * 
 * @export
 * @interface ClientV1Request
 */
export interface ClientV1Request {
    /**
     * 
     * @type {string}
     * @memberof ClientV1Request
     */
    'version': string;
    /**
     * 
     * @type {string}
     * @memberof ClientV1Request
     */
    'loggingProfile': string;
    /**
     * 
     * @type {string}
     * @memberof ClientV1Request
     */
    'accessControlProfile': string;
    /**
     * 
     * @type {string}
     * @memberof ClientV1Request
     */
    'assetControlProfile': string;
    /**
     * 
     * @type {string}
     * @memberof ClientV1Request
     */
    'applicationProfile': string;
    /**
     * 
     * @type {Phase1TransferInitiationRequestV1RequestPayloadProfileAssetProfile}
     * @memberof ClientV1Request
     */
    'assetProfile': Phase1TransferInitiationRequestV1RequestPayloadProfileAssetProfile;
    /**
     * 
     * @type {Phase1TransferInitiationRequestV1RequestPayloadProfile}
     * @memberof ClientV1Request
     */
    'payloadProfile': Phase1TransferInitiationRequestV1RequestPayloadProfile;
    /**
     * 
     * @type {string}
     * @memberof ClientV1Request
     */
    'sourceGatewayDltSystem': string;
    /**
     * 
     * @type {string}
     * @memberof ClientV1Request
     */
    'recipientGatewayDltSystem': string;
    /**
     * 
     * @type {string}
     * @memberof ClientV1Request
     */
    'recipientGatewayPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof ClientV1Request
     */
    'originatorPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof ClientV1Request
     */
    'beneficiaryPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof ClientV1Request
     */
    'clientIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof ClientV1Request
     */
    'serverIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof ClientV1Request
     */
    'clientDltSystem': string;
    /**
     * 
     * @type {string}
     * @memberof ClientV1Request
     */
    'serverDltSystem': string;
    /**
     * 
     * @type {ClientRequestV1RequestClientGatewayConfiguration}
     * @memberof ClientV1Request
     */
    'clientGatewayConfiguration': ClientRequestV1RequestClientGatewayConfiguration;
    /**
     * 
     * @type {ClientRequestV1RequestClientGatewayConfiguration}
     * @memberof ClientV1Request
     */
    'serverGatewayConfiguration': ClientRequestV1RequestClientGatewayConfiguration;
    /**
     * 
     * @type {number}
     * @memberof ClientV1Request
     */
    'maxRetries': number;
    /**
     * 
     * @type {number}
     * @memberof ClientV1Request
     */
    'maxTimeout': number;
    /**
     * 
     * @type {string}
     * @memberof ClientV1Request
     */
    'sourceLedgerAssetID': string;
    /**
     * 
     * @type {string}
     * @memberof ClientV1Request
     */
    'recipientLedgerAssetID': string;
}
/**
 * 
 * @export
 * @interface CommitFinalV1Request
 */
export interface CommitFinalV1Request {
    /**
     * 
     * @type {string}
     * @memberof CommitFinalV1Request
     */
    'sessionID': string;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalV1Request
     */
    'messageType': string;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalV1Request
     */
    'clientIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalV1Request
     */
    'serverIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalV1Request
     */
    'commitFinalClaim': string;
    /**
     * 
     * @type {object}
     * @memberof CommitFinalV1Request
     */
    'commitFinalClaimFormat'?: object;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalV1Request
     */
    'hashCommitPrepareAck': string;
    /**
     * 
     * @type {number}
     * @memberof CommitFinalV1Request
     */
    'clientTransferNumber'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalV1Request
     */
    'signature': string;
    /**
     * 
     * @type {number}
     * @memberof CommitFinalV1Request
     */
    'sequenceNumber': number;
}
/**
 * 
 * @export
 * @interface CommitFinalV1Response
 */
export interface CommitFinalV1Response {
    /**
     * 
     * @type {string}
     * @memberof CommitFinalV1Response
     */
    'sessionID': string;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalV1Response
     */
    'messageType': string;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalV1Response
     */
    'clientIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalV1Response
     */
    'serverIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalV1Response
     */
    'commitAcknowledgementClaim': string;
    /**
     * 
     * @type {object}
     * @memberof CommitFinalV1Response
     */
    'commitAcknowledgementClaimFormat'?: object;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalV1Response
     */
    'hashCommitFinal': string;
    /**
     * 
     * @type {number}
     * @memberof CommitFinalV1Response
     */
    'serverTransferNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof CommitFinalV1Response
     */
    'signature': string;
    /**
     * 
     * @type {number}
     * @memberof CommitFinalV1Response
     */
    'sequenceNumber': number;
}
/**
 * 
 * @export
 * @interface CommitPreparationV1Request
 */
export interface CommitPreparationV1Request {
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationV1Request
     */
    'sessionID': string;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationV1Request
     */
    'messageType': string;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationV1Request
     */
    'clientIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationV1Request
     */
    'serverIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationV1Request
     */
    'hashLockEvidenceAck': string;
    /**
     * 
     * @type {number}
     * @memberof CommitPreparationV1Request
     */
    'clientTransferNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationV1Request
     */
    'signature': string;
    /**
     * 
     * @type {number}
     * @memberof CommitPreparationV1Request
     */
    'sequenceNumber': number;
}
/**
 * 
 * @export
 * @interface CommitPreparationV1Response
 */
export interface CommitPreparationV1Response {
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationV1Response
     */
    'sessionID': string;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationV1Response
     */
    'messageType': string;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationV1Response
     */
    'clientIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationV1Response
     */
    'serverIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationV1Response
     */
    'hashCommitPrep': string;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationV1Response
     */
    'serverTransferNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitPreparationV1Response
     */
    'signature': string;
    /**
     * 
     * @type {number}
     * @memberof CommitPreparationV1Response
     */
    'sequenceNumber': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const CredentialProfile = {
    Saml: 'SAML',
    Oauth: 'OAUTH',
    X509: 'X509'
} as const;

export type CredentialProfile = typeof CredentialProfile[keyof typeof CredentialProfile];


/**
 * 
 * @export
 * @interface History
 */
export interface History {
    /**
     * 
     * @type {Array<object>}
     * @memberof History
     */
    'Transactions'?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof History
     */
    'Actions'?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof History
     */
    'Origin'?: string;
    /**
     * 
     * @type {string}
     * @memberof History
     */
    'Destination'?: string;
    /**
     * 
     * @type {string}
     * @memberof History
     */
    'Balance'?: string;
    /**
     * 
     * @type {object}
     * @memberof History
     */
    'CurrentStatus'?: object;
    /**
     * 
     * @type {object}
     * @memberof History
     */
    'ApplicationSpecificParameters'?: object;
}
/**
 * 
 * @export
 * @interface LocalLog
 */
export interface LocalLog {
    /**
     * 
     * @type {string}
     * @memberof LocalLog
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocalLog
     */
    'sessionID': string;
    /**
     * 
     * @type {string}
     * @memberof LocalLog
     */
    'data'?: string;
    /**
     * 
     * @type {string}
     * @memberof LocalLog
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof LocalLog
     */
    'operation': string;
    /**
     * 
     * @type {string}
     * @memberof LocalLog
     */
    'timestamp'?: string;
}
/**
 * 
 * @export
 * @interface LockEvidenceV1Request
 */
export interface LockEvidenceV1Request {
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Request
     */
    'sessionID': string;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Request
     */
    'clientIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Request
     */
    'serverIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Request
     */
    'lockEvidenceClaim': string;
    /**
     * 
     * @type {object}
     * @memberof LockEvidenceV1Request
     */
    'lockEvidenceFormat'?: object | null;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Request
     */
    'lockEvidenceExpiration': string;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Request
     */
    'hashCommenceAckRequest': string;
    /**
     * 
     * @type {number}
     * @memberof LockEvidenceV1Request
     */
    'clientTransferNumber'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Request
     */
    'signature': string;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Request
     */
    'messageType': string;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Request
     */
    'messageHash'?: string;
    /**
     * 
     * @type {number}
     * @memberof LockEvidenceV1Request
     */
    'sequenceNumber': number;
}
/**
 * 
 * @export
 * @interface LockEvidenceV1Response
 */
export interface LockEvidenceV1Response {
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Response
     */
    'sessionID': string;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Response
     */
    'clientIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Response
     */
    'serverIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Response
     */
    'hashLockEvidenceRequest': string;
    /**
     * 
     * @type {number}
     * @memberof LockEvidenceV1Response
     */
    'serverTransferNumber'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Response
     */
    'signature': string;
    /**
     * 
     * @type {string}
     * @memberof LockEvidenceV1Response
     */
    'messageType': string;
    /**
     * 
     * @type {number}
     * @memberof LockEvidenceV1Response
     */
    'sequenceNumber': number;
}
/**
 * 
 * @export
 * @interface PayloadProfile
 */
export interface PayloadProfile {
    /**
     * 
     * @type {Phase1TransferInitiationRequestV1RequestPayloadProfileAssetProfile}
     * @memberof PayloadProfile
     */
    'assetProfile': Phase1TransferInitiationRequestV1RequestPayloadProfileAssetProfile;
    /**
     * 
     * @type {string}
     * @memberof PayloadProfile
     */
    'capabilities'?: string;
}
/**
 * 
 * @export
 * @interface Phase1TransferInitiationRequestV1Request
 */
export interface Phase1TransferInitiationRequestV1Request {
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'messageType': string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'sessionID': string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'version'?: string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'developerURN'?: string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'credentialProfile'?: Phase1TransferInitiationRequestV1RequestCredentialProfileEnum;
    /**
     * 
     * @type {Phase1TransferInitiationRequestV1RequestPayloadProfile}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'payloadProfile': Phase1TransferInitiationRequestV1RequestPayloadProfile;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'applicationProfile': string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'loggingProfile': string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'accessControlProfile': string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'signature': string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'sourceGatewayPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'sourceGatewayDltSystem': string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'recipientGatewayPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'recipientGatewayDltSystem': string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'escrowType'?: Phase1TransferInitiationRequestV1RequestEscrowTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'expiryTime'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'multipleClaimsAllowed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'multipleCancelsAllowed'?: boolean;
    /**
     * 
     * @type {object}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'permissions'?: object;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'origin'?: string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'destination'?: string;
    /**
     * 
     * @type {object}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'subsequentCalls'?: object;
    /**
     * 
     * @type {Array<Phase1TransferInitiationRequestV1RequestHistoriesInner>}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'histories'?: Array<Phase1TransferInitiationRequestV1RequestHistoriesInner>;
    /**
     * 
     * @type {number}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'sequenceNumber': number;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'sourceBasePath': string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'recipientBasePath': string;
    /**
     * 
     * @type {number}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'maxRetries': number;
    /**
     * 
     * @type {number}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'maxTimeout': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'backupGatewaysAllowed': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'recipientLedgerAssetID': string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1Request
     */
    'sourceLedgerAssetID': string;
}

export const Phase1TransferInitiationRequestV1RequestCredentialProfileEnum = {
    Saml: 'SAML',
    Oauth: 'OAUTH',
    X509: 'X509'
} as const;

export type Phase1TransferInitiationRequestV1RequestCredentialProfileEnum = typeof Phase1TransferInitiationRequestV1RequestCredentialProfileEnum[keyof typeof Phase1TransferInitiationRequestV1RequestCredentialProfileEnum];
export const Phase1TransferInitiationRequestV1RequestEscrowTypeEnum = {
    Faucet: 'FAUCET',
    Timelock: 'TIMELOCK',
    Hashlock: 'HASHLOCK',
    Hashtimelock: 'HASHTIMELOCK',
    Multiclaimpc: 'MULTICLAIMPC',
    Destroy: 'DESTROY',
    Burn: 'BURN'
} as const;

export type Phase1TransferInitiationRequestV1RequestEscrowTypeEnum = typeof Phase1TransferInitiationRequestV1RequestEscrowTypeEnum[keyof typeof Phase1TransferInitiationRequestV1RequestEscrowTypeEnum];

/**
 * 
 * @export
 * @interface Phase1TransferInitiationRequestV1RequestHistoriesInner
 */
export interface Phase1TransferInitiationRequestV1RequestHistoriesInner {
    /**
     * 
     * @type {Array<object>}
     * @memberof Phase1TransferInitiationRequestV1RequestHistoriesInner
     */
    'Transactions'?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof Phase1TransferInitiationRequestV1RequestHistoriesInner
     */
    'Actions'?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1RequestHistoriesInner
     */
    'Origin'?: string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1RequestHistoriesInner
     */
    'Destination'?: string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1RequestHistoriesInner
     */
    'Balance'?: string;
    /**
     * 
     * @type {object}
     * @memberof Phase1TransferInitiationRequestV1RequestHistoriesInner
     */
    'CurrentStatus'?: object;
    /**
     * 
     * @type {object}
     * @memberof Phase1TransferInitiationRequestV1RequestHistoriesInner
     */
    'ApplicationSpecificParameters'?: object;
}
/**
 * 
 * @export
 * @interface Phase1TransferInitiationRequestV1RequestPayloadProfile
 */
export interface Phase1TransferInitiationRequestV1RequestPayloadProfile {
    /**
     * 
     * @type {Phase1TransferInitiationRequestV1RequestPayloadProfileAssetProfile}
     * @memberof Phase1TransferInitiationRequestV1RequestPayloadProfile
     */
    'assetProfile': Phase1TransferInitiationRequestV1RequestPayloadProfileAssetProfile;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1RequestPayloadProfile
     */
    'capabilities'?: string;
}
/**
 * 
 * @export
 * @interface Phase1TransferInitiationRequestV1RequestPayloadProfileAssetProfile
 */
export interface Phase1TransferInitiationRequestV1RequestPayloadProfileAssetProfile {
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1RequestPayloadProfileAssetProfile
     */
    'issuer'?: string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1RequestPayloadProfileAssetProfile
     */
    'assetCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1RequestPayloadProfileAssetProfile
     */
    'assetCodeType'?: string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1RequestPayloadProfileAssetProfile
     */
    'issuanceDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1RequestPayloadProfileAssetProfile
     */
    'expirationDate': string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1RequestPayloadProfileAssetProfile
     */
    'verificationEndPoint'?: string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1RequestPayloadProfileAssetProfile
     */
    'digitalSignature'?: string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationRequestV1RequestPayloadProfileAssetProfile
     */
    'prospectusLink'?: string;
    /**
     * 
     * @type {Array<any>}
     * @memberof Phase1TransferInitiationRequestV1RequestPayloadProfileAssetProfile
     */
    'keyInformationLink'?: Array<any>;
    /**
     * 
     * @type {Array<any>}
     * @memberof Phase1TransferInitiationRequestV1RequestPayloadProfileAssetProfile
     */
    'keyWord'?: Array<any>;
    /**
     * 
     * @type {Array<any>}
     * @memberof Phase1TransferInitiationRequestV1RequestPayloadProfileAssetProfile
     */
    'transferRestriction'?: Array<any>;
    /**
     * 
     * @type {Array<any>}
     * @memberof Phase1TransferInitiationRequestV1RequestPayloadProfileAssetProfile
     */
    'ledgerRequirements'?: Array<any>;
}
/**
 * 
 * @export
 * @interface Phase1TransferInitiationResponseV1Request
 */
export interface Phase1TransferInitiationResponseV1Request {
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationResponseV1Request
     */
    'messageType': string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationResponseV1Request
     */
    'sessionID': string;
    /**
     * 
     * @type {number}
     * @memberof Phase1TransferInitiationResponseV1Request
     */
    'sequenceNumber': number;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationResponseV1Request
     */
    'odapPhase'?: Phase1TransferInitiationResponseV1RequestOdapPhaseEnum;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationResponseV1Request
     */
    'initialRequestMessageHash': string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationResponseV1Request
     */
    'destination'?: string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationResponseV1Request
     */
    'timeStamp': string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationResponseV1Request
     */
    'processedTimeStamp': string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationResponseV1Request
     */
    'serverIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof Phase1TransferInitiationResponseV1Request
     */
    'signature': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Phase1TransferInitiationResponseV1Request
     */
    'backupGatewaysAllowed': Array<string>;
}

export const Phase1TransferInitiationResponseV1RequestOdapPhaseEnum = {
    TransferInitialization: 'TransferInitialization',
    LockEvidenceVerification: 'LockEvidenceVerification',
    CommitmentEstablishment: 'CommitmentEstablishment'
} as const;

export type Phase1TransferInitiationResponseV1RequestOdapPhaseEnum = typeof Phase1TransferInitiationResponseV1RequestOdapPhaseEnum[keyof typeof Phase1TransferInitiationResponseV1RequestOdapPhaseEnum];

/**
 * 
 * @export
 * @interface Phase2LockEvidenceRequestV1Request
 */
export interface Phase2LockEvidenceRequestV1Request {
    /**
     * 
     * @type {string}
     * @memberof Phase2LockEvidenceRequestV1Request
     */
    'sessionID': string;
    /**
     * 
     * @type {string}
     * @memberof Phase2LockEvidenceRequestV1Request
     */
    'clientIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof Phase2LockEvidenceRequestV1Request
     */
    'serverIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof Phase2LockEvidenceRequestV1Request
     */
    'lockEvidenceClaim': string;
    /**
     * 
     * @type {object}
     * @memberof Phase2LockEvidenceRequestV1Request
     */
    'lockEvidenceFormat'?: object | null;
    /**
     * 
     * @type {string}
     * @memberof Phase2LockEvidenceRequestV1Request
     */
    'lockEvidenceExpiration': string;
    /**
     * 
     * @type {string}
     * @memberof Phase2LockEvidenceRequestV1Request
     */
    'hashCommenceAckRequest': string;
    /**
     * 
     * @type {number}
     * @memberof Phase2LockEvidenceRequestV1Request
     */
    'clientTransferNumber'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Phase2LockEvidenceRequestV1Request
     */
    'signature': string;
    /**
     * 
     * @type {string}
     * @memberof Phase2LockEvidenceRequestV1Request
     */
    'messageType': string;
    /**
     * 
     * @type {string}
     * @memberof Phase2LockEvidenceRequestV1Request
     */
    'messageHash'?: string;
    /**
     * 
     * @type {number}
     * @memberof Phase2LockEvidenceRequestV1Request
     */
    'sequenceNumber': number;
}
/**
 * 
 * @export
 * @interface Phase2LockEvidenceResponseV1Request
 */
export interface Phase2LockEvidenceResponseV1Request {
    /**
     * 
     * @type {string}
     * @memberof Phase2LockEvidenceResponseV1Request
     */
    'sessionID': string;
    /**
     * 
     * @type {string}
     * @memberof Phase2LockEvidenceResponseV1Request
     */
    'clientIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof Phase2LockEvidenceResponseV1Request
     */
    'serverIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof Phase2LockEvidenceResponseV1Request
     */
    'hashLockEvidenceRequest': string;
    /**
     * 
     * @type {number}
     * @memberof Phase2LockEvidenceResponseV1Request
     */
    'serverTransferNumber'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Phase2LockEvidenceResponseV1Request
     */
    'signature': string;
    /**
     * 
     * @type {string}
     * @memberof Phase2LockEvidenceResponseV1Request
     */
    'messageType': string;
    /**
     * 
     * @type {number}
     * @memberof Phase2LockEvidenceResponseV1Request
     */
    'sequenceNumber': number;
}
/**
 * 
 * @export
 * @interface Phase2TransferCommenceRequestV1Request
 */
export interface Phase2TransferCommenceRequestV1Request {
    /**
     * 
     * @type {string}
     * @memberof Phase2TransferCommenceRequestV1Request
     */
    'sessionID': string;
    /**
     * 
     * @type {string}
     * @memberof Phase2TransferCommenceRequestV1Request
     */
    'messageType': string;
    /**
     * 
     * @type {string}
     * @memberof Phase2TransferCommenceRequestV1Request
     */
    'originatorPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof Phase2TransferCommenceRequestV1Request
     */
    'beneficiaryPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof Phase2TransferCommenceRequestV1Request
     */
    'senderDltSystem': string;
    /**
     * 
     * @type {string}
     * @memberof Phase2TransferCommenceRequestV1Request
     */
    'recipientDltSystem': string;
    /**
     * 
     * @type {string}
     * @memberof Phase2TransferCommenceRequestV1Request
     */
    'clientIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof Phase2TransferCommenceRequestV1Request
     */
    'serverIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof Phase2TransferCommenceRequestV1Request
     */
    'hashAssetProfile': string;
    /**
     * 
     * @type {number}
     * @memberof Phase2TransferCommenceRequestV1Request
     */
    'assetUnit'?: number;
    /**
     * 
     * @type {string}
     * @memberof Phase2TransferCommenceRequestV1Request
     */
    'hashPrevMessage': string;
    /**
     * 
     * @type {number}
     * @memberof Phase2TransferCommenceRequestV1Request
     */
    'clientTransferNumber'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Phase2TransferCommenceRequestV1Request
     */
    'signature': string;
    /**
     * 
     * @type {number}
     * @memberof Phase2TransferCommenceRequestV1Request
     */
    'sequenceNumber': number;
}
/**
 * 
 * @export
 * @interface Phase2TransferCommenceResponseV1Request
 */
export interface Phase2TransferCommenceResponseV1Request {
    /**
     * 
     * @type {string}
     * @memberof Phase2TransferCommenceResponseV1Request
     */
    'sessionID': string;
    /**
     * 
     * @type {string}
     * @memberof Phase2TransferCommenceResponseV1Request
     */
    'clientIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof Phase2TransferCommenceResponseV1Request
     */
    'serverIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof Phase2TransferCommenceResponseV1Request
     */
    'hashCommenceRequest': string;
    /**
     * 
     * @type {number}
     * @memberof Phase2TransferCommenceResponseV1Request
     */
    'serverTransferNumber'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Phase2TransferCommenceResponseV1Request
     */
    'signature': string;
    /**
     * 
     * @type {string}
     * @memberof Phase2TransferCommenceResponseV1Request
     */
    'messageType': string;
    /**
     * 
     * @type {string}
     * @memberof Phase2TransferCommenceResponseV1Request
     */
    'messageHash'?: string;
    /**
     * 
     * @type {number}
     * @memberof Phase2TransferCommenceResponseV1Request
     */
    'sequenceNumber': number;
}
/**
 * 
 * @export
 * @interface Phase3CommitFinalRequestV1Request
 */
export interface Phase3CommitFinalRequestV1Request {
    /**
     * 
     * @type {string}
     * @memberof Phase3CommitFinalRequestV1Request
     */
    'sessionID': string;
    /**
     * 
     * @type {string}
     * @memberof Phase3CommitFinalRequestV1Request
     */
    'messageType': string;
    /**
     * 
     * @type {string}
     * @memberof Phase3CommitFinalRequestV1Request
     */
    'clientIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof Phase3CommitFinalRequestV1Request
     */
    'serverIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof Phase3CommitFinalRequestV1Request
     */
    'commitFinalClaim': string;
    /**
     * 
     * @type {object}
     * @memberof Phase3CommitFinalRequestV1Request
     */
    'commitFinalClaimFormat'?: object;
    /**
     * 
     * @type {string}
     * @memberof Phase3CommitFinalRequestV1Request
     */
    'hashCommitPrepareAck': string;
    /**
     * 
     * @type {number}
     * @memberof Phase3CommitFinalRequestV1Request
     */
    'clientTransferNumber'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Phase3CommitFinalRequestV1Request
     */
    'signature': string;
    /**
     * 
     * @type {number}
     * @memberof Phase3CommitFinalRequestV1Request
     */
    'sequenceNumber': number;
}
/**
 * 
 * @export
 * @interface Phase3CommitFinalResponseV1Request
 */
export interface Phase3CommitFinalResponseV1Request {
    /**
     * 
     * @type {string}
     * @memberof Phase3CommitFinalResponseV1Request
     */
    'sessionID': string;
    /**
     * 
     * @type {string}
     * @memberof Phase3CommitFinalResponseV1Request
     */
    'messageType': string;
    /**
     * 
     * @type {string}
     * @memberof Phase3CommitFinalResponseV1Request
     */
    'clientIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof Phase3CommitFinalResponseV1Request
     */
    'serverIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof Phase3CommitFinalResponseV1Request
     */
    'commitAcknowledgementClaim': string;
    /**
     * 
     * @type {object}
     * @memberof Phase3CommitFinalResponseV1Request
     */
    'commitAcknowledgementClaimFormat'?: object;
    /**
     * 
     * @type {string}
     * @memberof Phase3CommitFinalResponseV1Request
     */
    'hashCommitFinal': string;
    /**
     * 
     * @type {number}
     * @memberof Phase3CommitFinalResponseV1Request
     */
    'serverTransferNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof Phase3CommitFinalResponseV1Request
     */
    'signature': string;
    /**
     * 
     * @type {number}
     * @memberof Phase3CommitFinalResponseV1Request
     */
    'sequenceNumber': number;
}
/**
 * 
 * @export
 * @interface Phase3CommitPreparationRequestV1Request
 */
export interface Phase3CommitPreparationRequestV1Request {
    /**
     * 
     * @type {string}
     * @memberof Phase3CommitPreparationRequestV1Request
     */
    'sessionID': string;
    /**
     * 
     * @type {string}
     * @memberof Phase3CommitPreparationRequestV1Request
     */
    'messageType': string;
    /**
     * 
     * @type {string}
     * @memberof Phase3CommitPreparationRequestV1Request
     */
    'clientIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof Phase3CommitPreparationRequestV1Request
     */
    'serverIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof Phase3CommitPreparationRequestV1Request
     */
    'hashLockEvidenceAck': string;
    /**
     * 
     * @type {number}
     * @memberof Phase3CommitPreparationRequestV1Request
     */
    'clientTransferNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof Phase3CommitPreparationRequestV1Request
     */
    'signature': string;
    /**
     * 
     * @type {number}
     * @memberof Phase3CommitPreparationRequestV1Request
     */
    'sequenceNumber': number;
}
/**
 * 
 * @export
 * @interface Phase3CommitPreparationResponseV1Request
 */
export interface Phase3CommitPreparationResponseV1Request {
    /**
     * 
     * @type {string}
     * @memberof Phase3CommitPreparationResponseV1Request
     */
    'sessionID': string;
    /**
     * 
     * @type {string}
     * @memberof Phase3CommitPreparationResponseV1Request
     */
    'messageType': string;
    /**
     * 
     * @type {string}
     * @memberof Phase3CommitPreparationResponseV1Request
     */
    'clientIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof Phase3CommitPreparationResponseV1Request
     */
    'serverIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof Phase3CommitPreparationResponseV1Request
     */
    'hashCommitPrep': string;
    /**
     * 
     * @type {string}
     * @memberof Phase3CommitPreparationResponseV1Request
     */
    'serverTransferNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof Phase3CommitPreparationResponseV1Request
     */
    'signature': string;
    /**
     * 
     * @type {number}
     * @memberof Phase3CommitPreparationResponseV1Request
     */
    'sequenceNumber': number;
}
/**
 * 
 * @export
 * @interface Phase3TransferCompleteRequestV1Request
 */
export interface Phase3TransferCompleteRequestV1Request {
    /**
     * 
     * @type {string}
     * @memberof Phase3TransferCompleteRequestV1Request
     */
    'sessionID': string;
    /**
     * 
     * @type {string}
     * @memberof Phase3TransferCompleteRequestV1Request
     */
    'messageType': string;
    /**
     * 
     * @type {string}
     * @memberof Phase3TransferCompleteRequestV1Request
     */
    'clientIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof Phase3TransferCompleteRequestV1Request
     */
    'serverIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof Phase3TransferCompleteRequestV1Request
     */
    'hashCommitFinalAck': string;
    /**
     * 
     * @type {number}
     * @memberof Phase3TransferCompleteRequestV1Request
     */
    'clientTransferNumber'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Phase3TransferCompleteRequestV1Request
     */
    'signature': string;
    /**
     * 
     * @type {string}
     * @memberof Phase3TransferCompleteRequestV1Request
     */
    'hashTransferCommence': string;
    /**
     * 
     * @type {number}
     * @memberof Phase3TransferCompleteRequestV1Request
     */
    'sequenceNumber': number;
}
/**
 * 
 * @export
 * @interface RecoverSuccessV1Message
 */
export interface RecoverSuccessV1Message {
    /**
     * 
     * @type {string}
     * @memberof RecoverSuccessV1Message
     */
    'sessionID': string;
    /**
     * 
     * @type {boolean}
     * @memberof RecoverSuccessV1Message
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof RecoverSuccessV1Message
     */
    'signature': string;
}
/**
 * 
 * @export
 * @interface RecoverUpdateAckV1Message
 */
export interface RecoverUpdateAckV1Message {
    /**
     * 
     * @type {string}
     * @memberof RecoverUpdateAckV1Message
     */
    'sessionID': string;
    /**
     * 
     * @type {boolean}
     * @memberof RecoverUpdateAckV1Message
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof RecoverUpdateAckV1Message
     */
    'changedEntriesHash': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof RecoverUpdateAckV1Message
     */
    'signature': string;
}
/**
 * 
 * @export
 * @interface RecoverUpdateAckV1MessageRequest
 */
export interface RecoverUpdateAckV1MessageRequest {
    /**
     * 
     * @type {string}
     * @memberof RecoverUpdateAckV1MessageRequest
     */
    'sessionID': string;
    /**
     * 
     * @type {boolean}
     * @memberof RecoverUpdateAckV1MessageRequest
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof RecoverUpdateAckV1MessageRequest
     */
    'changedEntriesHash': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof RecoverUpdateAckV1MessageRequest
     */
    'signature': string;
}
/**
 * 
 * @export
 * @interface RecoverUpdateV1Message
 */
export interface RecoverUpdateV1Message {
    /**
     * 
     * @type {string}
     * @memberof RecoverUpdateV1Message
     */
    'sessionID': string;
    /**
     * 
     * @type {Array<RecoverUpdateV1MessageRequestRecoveredLogsInner>}
     * @memberof RecoverUpdateV1Message
     */
    'recoveredLogs': Array<RecoverUpdateV1MessageRequestRecoveredLogsInner>;
    /**
     * 
     * @type {string}
     * @memberof RecoverUpdateV1Message
     */
    'signature': string;
}
/**
 * 
 * @export
 * @interface RecoverUpdateV1MessageRequest
 */
export interface RecoverUpdateV1MessageRequest {
    /**
     * 
     * @type {string}
     * @memberof RecoverUpdateV1MessageRequest
     */
    'sessionID': string;
    /**
     * 
     * @type {Array<RecoverUpdateV1MessageRequestRecoveredLogsInner>}
     * @memberof RecoverUpdateV1MessageRequest
     */
    'recoveredLogs': Array<RecoverUpdateV1MessageRequestRecoveredLogsInner>;
    /**
     * 
     * @type {string}
     * @memberof RecoverUpdateV1MessageRequest
     */
    'signature': string;
}
/**
 * 
 * @export
 * @interface RecoverUpdateV1MessageRequestRecoveredLogsInner
 */
export interface RecoverUpdateV1MessageRequestRecoveredLogsInner {
    /**
     * 
     * @type {string}
     * @memberof RecoverUpdateV1MessageRequestRecoveredLogsInner
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof RecoverUpdateV1MessageRequestRecoveredLogsInner
     */
    'sessionID': string;
    /**
     * 
     * @type {string}
     * @memberof RecoverUpdateV1MessageRequestRecoveredLogsInner
     */
    'data'?: string;
    /**
     * 
     * @type {string}
     * @memberof RecoverUpdateV1MessageRequestRecoveredLogsInner
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof RecoverUpdateV1MessageRequestRecoveredLogsInner
     */
    'operation': string;
    /**
     * 
     * @type {string}
     * @memberof RecoverUpdateV1MessageRequestRecoveredLogsInner
     */
    'timestamp'?: string;
}
/**
 * 
 * @export
 * @interface RecoverV1Message
 */
export interface RecoverV1Message {
    /**
     * 
     * @type {string}
     * @memberof RecoverV1Message
     */
    'sessionID': string;
    /**
     * 
     * @type {string}
     * @memberof RecoverV1Message
     */
    'odapPhase': string;
    /**
     * 
     * @type {number}
     * @memberof RecoverV1Message
     */
    'sequenceNumber': number;
    /**
     * 
     * @type {string}
     * @memberof RecoverV1Message
     */
    'lastLogEntryTimestamp': string;
    /**
     * 
     * @type {boolean}
     * @memberof RecoverV1Message
     */
    'isBackup': boolean;
    /**
     * 
     * @type {string}
     * @memberof RecoverV1Message
     */
    'newBasePath': string;
    /**
     * 
     * @type {string}
     * @memberof RecoverV1Message
     */
    'newGatewayPubKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof RecoverV1Message
     */
    'signature': string;
}
/**
 * 
 * @export
 * @interface RecoverV1MessageRequest
 */
export interface RecoverV1MessageRequest {
    /**
     * 
     * @type {string}
     * @memberof RecoverV1MessageRequest
     */
    'sessionID': string;
    /**
     * 
     * @type {string}
     * @memberof RecoverV1MessageRequest
     */
    'odapPhase': string;
    /**
     * 
     * @type {number}
     * @memberof RecoverV1MessageRequest
     */
    'sequenceNumber': number;
    /**
     * 
     * @type {string}
     * @memberof RecoverV1MessageRequest
     */
    'lastLogEntryTimestamp': string;
    /**
     * 
     * @type {boolean}
     * @memberof RecoverV1MessageRequest
     */
    'isBackup': boolean;
    /**
     * 
     * @type {string}
     * @memberof RecoverV1MessageRequest
     */
    'newBasePath': string;
    /**
     * 
     * @type {string}
     * @memberof RecoverV1MessageRequest
     */
    'newGatewayPubKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof RecoverV1MessageRequest
     */
    'signature': string;
}
/**
 * 
 * @export
 * @interface RecoverV1SuccessRequest
 */
export interface RecoverV1SuccessRequest {
    /**
     * 
     * @type {string}
     * @memberof RecoverV1SuccessRequest
     */
    'sessionID': string;
    /**
     * 
     * @type {boolean}
     * @memberof RecoverV1SuccessRequest
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof RecoverV1SuccessRequest
     */
    'signature': string;
}
/**
 * 
 * @export
 * @interface RollbackAckV1Message
 */
export interface RollbackAckV1Message {
    /**
     * 
     * @type {string}
     * @memberof RollbackAckV1Message
     */
    'sessionID': string;
    /**
     * 
     * @type {boolean}
     * @memberof RollbackAckV1Message
     */
    'success': boolean;
    /**
     * 
     * @type {string}
     * @memberof RollbackAckV1Message
     */
    'signature': string;
}
/**
 * 
 * @export
 * @interface RollbackV1Message
 */
export interface RollbackV1Message {
    /**
     * 
     * @type {string}
     * @memberof RollbackV1Message
     */
    'sessionID': string;
    /**
     * 
     * @type {boolean}
     * @memberof RollbackV1Message
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof RollbackV1Message
     */
    'actionPerformed': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof RollbackV1Message
     */
    'proofs': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof RollbackV1Message
     */
    'signature': string;
}
/**
 * 
 * @export
 * @interface RollbackV1MessageRequest
 */
export interface RollbackV1MessageRequest {
    /**
     * 
     * @type {string}
     * @memberof RollbackV1MessageRequest
     */
    'sessionID': string;
    /**
     * 
     * @type {boolean}
     * @memberof RollbackV1MessageRequest
     */
    'success': boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof RollbackV1MessageRequest
     */
    'actionPerformed': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof RollbackV1MessageRequest
     */
    'proofs': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof RollbackV1MessageRequest
     */
    'signature': string;
}
/**
 * 
 * @export
 * @interface SatpMessage
 */
export interface SatpMessage {
    /**
     * 
     * @type {number}
     * @memberof SatpMessage
     */
    'SequenceNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof SatpMessage
     */
    'Phase'?: SatpMessagePhaseEnum;
    /**
     * 
     * @type {string}
     * @memberof SatpMessage
     */
    'ResourceURL'?: string;
    /**
     * 
     * @type {string}
     * @memberof SatpMessage
     */
    'DeveloperURN'?: string;
    /**
     * 
     * @type {SatpMessageActionResponse}
     * @memberof SatpMessage
     */
    'ActionResponse'?: SatpMessageActionResponse;
    /**
     * 
     * @type {string}
     * @memberof SatpMessage
     */
    'CredentialProfile'?: SatpMessageCredentialProfileEnum;
    /**
     * 
     * @type {Array<any>}
     * @memberof SatpMessage
     */
    'CredentialBlock'?: Array<any>;
    /**
     * 
     * @type {Phase1TransferInitiationRequestV1RequestPayloadProfile}
     * @memberof SatpMessage
     */
    'CredentialsProfile'?: Phase1TransferInitiationRequestV1RequestPayloadProfile;
    /**
     * 
     * @type {object}
     * @memberof SatpMessage
     */
    'ApplicationProfile'?: object;
    /**
     * 
     * @type {object}
     * @memberof SatpMessage
     */
    'Payload'?: object;
    /**
     * 
     * @type {string}
     * @memberof SatpMessage
     */
    'PayloadHash'?: string;
    /**
     * 
     * @type {string}
     * @memberof SatpMessage
     */
    'MessageSignature'?: string;
}

export const SatpMessagePhaseEnum = {
    TransferInitialization: 'TransferInitialization',
    LockEvidenceVerification: 'LockEvidenceVerification',
    CommitmentEstablishment: 'CommitmentEstablishment'
} as const;

export type SatpMessagePhaseEnum = typeof SatpMessagePhaseEnum[keyof typeof SatpMessagePhaseEnum];
export const SatpMessageCredentialProfileEnum = {
    Saml: 'SAML',
    OAuth: 'OAuth',
    X509: 'X509'
} as const;

export type SatpMessageCredentialProfileEnum = typeof SatpMessageCredentialProfileEnum[keyof typeof SatpMessageCredentialProfileEnum];

/**
 * 
 * @export
 * @interface SatpMessageActionResponse
 */
export interface SatpMessageActionResponse {
    /**
     * 
     * @type {string}
     * @memberof SatpMessageActionResponse
     */
    'ResponseCode'?: SatpMessageActionResponseResponseCodeEnum;
    /**
     * 
     * @type {Array<any>}
     * @memberof SatpMessageActionResponse
     */
    'Arguments'?: Array<any>;
}

export const SatpMessageActionResponseResponseCodeEnum = {
    OK: '200',
    RESOURCE_NOT_FOUND: '404'
} as const;

export type SatpMessageActionResponseResponseCodeEnum = typeof SatpMessageActionResponseResponseCodeEnum[keyof typeof SatpMessageActionResponseResponseCodeEnum];

/**
 * 
 * @export
 * @interface SessionData
 */
export interface SessionData {
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof SessionData
     */
    'step'?: number;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'version'?: string;
    /**
     * 
     * @type {number}
     * @memberof SessionData
     */
    'lastSequenceNumber'?: number;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'loggingProfile'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'accessControlProfile'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'applicationProfile'?: string;
    /**
     * 
     * @type {Phase1TransferInitiationRequestV1RequestPayloadProfile}
     * @memberof SessionData
     */
    'payloadProfile'?: Phase1TransferInitiationRequestV1RequestPayloadProfile;
    /**
     * 
     * @type {Phase1TransferInitiationRequestV1RequestPayloadProfileAssetProfile}
     * @memberof SessionData
     */
    'assetProfile'?: Phase1TransferInitiationRequestV1RequestPayloadProfileAssetProfile;
    /**
     * 
     * @type {Array<string>}
     * @memberof SessionData
     */
    'allowedSourceBackupGateways'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SessionData
     */
    'allowedRecipientBackupGateways'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'sourceBasePath'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'recipientBasePath'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'originatorPubkey'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'beneficiaryPubkey'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'sourceGatewayPubkey'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'sourceGatewayDltSystem'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'recipientGatewayPubkey'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'recipientGatewayDltSystem'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'initializationRequestMessageHash'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'initializationResponseMessageHash'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'initializationRequestMessageRcvTimeStamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'initializationRequestMessageProcessedTimeStamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'clientSignatureInitializationRequestMessage'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'serverSignatureInitializationResponseMessage'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'transferCommenceMessageRequestHash'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'transferCommenceMessageResponseHash'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'clientSignatureTransferCommenceRequestMessage'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'serverSignatureTransferCommenceResponseMessage'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'lockEvidenceRequestMessageHash'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'lockEvidenceResponseMessageHash'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'clientSignatureLockEvidenceRequestMessage'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'serverSignatureLockEvidenceResponseMessage'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'lockEvidenceClaim'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'commitPrepareRequestMessageHash'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'commitPrepareResponseMessageHash'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'clientSignatureCommitPreparationRequestMessage'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'serverSignatureCommitPreparationResponseMessage'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'commitFinalRequestMessageHash'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'commitFinalResponseMessageHash'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'commitFinalClaim'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'commitFinalClaimFormat'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'commitAcknowledgementClaim'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'commitAcknowledgementClaimFormat'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'clientSignatureCommitFinalRequestMessage'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'serverSignatureCommitFinalResponseMessage'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'transferCompleteMessageHash'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'clientSignatureTransferCompleteMessage'?: string;
    /**
     * 
     * @type {number}
     * @memberof SessionData
     */
    'maxRetries'?: number;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'recipientLedgerAssetID'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'sourceLedgerAssetID'?: string;
    /**
     * 
     * @type {number}
     * @memberof SessionData
     */
    'maxTimeout'?: number;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'lastLogEntryTimestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'unlockAssetClaim'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'recreateAssetClaim'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'deleteAssetClaim'?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'lastMessageReceivedTimestamp'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SessionData
     */
    'rollback'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SessionData
     */
    'rollbackMessageHash'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SessionData
     */
    'rollbackProofs'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof SessionData
     */
    'rollbackActionsPerformed'?: Array<SessionDataRollbackActionsPerformedEnum>;
}

export const SessionDataRollbackActionsPerformedEnum = {
    Create: 'CREATE',
    Delete: 'DELETE',
    Lock: 'LOCK',
    Unlock: 'UNLOCK'
} as const;

export type SessionDataRollbackActionsPerformedEnum = typeof SessionDataRollbackActionsPerformedEnum[keyof typeof SessionDataRollbackActionsPerformedEnum];

/**
 * 
 * @export
 * @interface TransferCommenceV1Request
 */
export interface TransferCommenceV1Request {
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Request
     */
    'sessionID': string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Request
     */
    'messageType': string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Request
     */
    'originatorPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Request
     */
    'beneficiaryPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Request
     */
    'senderDltSystem': string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Request
     */
    'recipientDltSystem': string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Request
     */
    'clientIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Request
     */
    'serverIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Request
     */
    'hashAssetProfile': string;
    /**
     * 
     * @type {number}
     * @memberof TransferCommenceV1Request
     */
    'assetUnit'?: number;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Request
     */
    'hashPrevMessage': string;
    /**
     * 
     * @type {number}
     * @memberof TransferCommenceV1Request
     */
    'clientTransferNumber'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Request
     */
    'signature': string;
    /**
     * 
     * @type {number}
     * @memberof TransferCommenceV1Request
     */
    'sequenceNumber': number;
}
/**
 * 
 * @export
 * @interface TransferCommenceV1Response
 */
export interface TransferCommenceV1Response {
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Response
     */
    'sessionID': string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Response
     */
    'clientIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Response
     */
    'serverIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Response
     */
    'hashCommenceRequest': string;
    /**
     * 
     * @type {number}
     * @memberof TransferCommenceV1Response
     */
    'serverTransferNumber'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Response
     */
    'signature': string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Response
     */
    'messageType': string;
    /**
     * 
     * @type {string}
     * @memberof TransferCommenceV1Response
     */
    'messageHash'?: string;
    /**
     * 
     * @type {number}
     * @memberof TransferCommenceV1Response
     */
    'sequenceNumber': number;
}
/**
 * 
 * @export
 * @interface TransferCompleteV1Request
 */
export interface TransferCompleteV1Request {
    /**
     * 
     * @type {string}
     * @memberof TransferCompleteV1Request
     */
    'sessionID': string;
    /**
     * 
     * @type {string}
     * @memberof TransferCompleteV1Request
     */
    'messageType': string;
    /**
     * 
     * @type {string}
     * @memberof TransferCompleteV1Request
     */
    'clientIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof TransferCompleteV1Request
     */
    'serverIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof TransferCompleteV1Request
     */
    'hashCommitFinalAck': string;
    /**
     * 
     * @type {number}
     * @memberof TransferCompleteV1Request
     */
    'clientTransferNumber'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TransferCompleteV1Request
     */
    'signature': string;
    /**
     * 
     * @type {string}
     * @memberof TransferCompleteV1Request
     */
    'hashTransferCommence': string;
    /**
     * 
     * @type {number}
     * @memberof TransferCompleteV1Request
     */
    'sequenceNumber': number;
}
/**
 * 
 * @export
 * @interface TransferInitializationV1Request
 */
export interface TransferInitializationV1Request {
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    'messageType': string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    'sessionID': string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    'version'?: string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    'developerURN'?: string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    'credentialProfile'?: TransferInitializationV1RequestCredentialProfileEnum;
    /**
     * 
     * @type {Phase1TransferInitiationRequestV1RequestPayloadProfile}
     * @memberof TransferInitializationV1Request
     */
    'payloadProfile': Phase1TransferInitiationRequestV1RequestPayloadProfile;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    'applicationProfile': string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    'loggingProfile': string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    'accessControlProfile': string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    'signature': string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    'sourceGatewayPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    'sourceGatewayDltSystem': string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    'recipientGatewayPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    'recipientGatewayDltSystem': string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    'escrowType'?: TransferInitializationV1RequestEscrowTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    'expiryTime'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TransferInitializationV1Request
     */
    'multipleClaimsAllowed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TransferInitializationV1Request
     */
    'multipleCancelsAllowed'?: boolean;
    /**
     * 
     * @type {object}
     * @memberof TransferInitializationV1Request
     */
    'permissions'?: object;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    'origin'?: string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    'destination'?: string;
    /**
     * 
     * @type {object}
     * @memberof TransferInitializationV1Request
     */
    'subsequentCalls'?: object;
    /**
     * 
     * @type {Array<Phase1TransferInitiationRequestV1RequestHistoriesInner>}
     * @memberof TransferInitializationV1Request
     */
    'histories'?: Array<Phase1TransferInitiationRequestV1RequestHistoriesInner>;
    /**
     * 
     * @type {number}
     * @memberof TransferInitializationV1Request
     */
    'sequenceNumber': number;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    'sourceBasePath': string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    'recipientBasePath': string;
    /**
     * 
     * @type {number}
     * @memberof TransferInitializationV1Request
     */
    'maxRetries': number;
    /**
     * 
     * @type {number}
     * @memberof TransferInitializationV1Request
     */
    'maxTimeout': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof TransferInitializationV1Request
     */
    'backupGatewaysAllowed': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    'recipientLedgerAssetID': string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Request
     */
    'sourceLedgerAssetID': string;
}

export const TransferInitializationV1RequestCredentialProfileEnum = {
    Saml: 'SAML',
    Oauth: 'OAUTH',
    X509: 'X509'
} as const;

export type TransferInitializationV1RequestCredentialProfileEnum = typeof TransferInitializationV1RequestCredentialProfileEnum[keyof typeof TransferInitializationV1RequestCredentialProfileEnum];
export const TransferInitializationV1RequestEscrowTypeEnum = {
    Faucet: 'FAUCET',
    Timelock: 'TIMELOCK',
    Hashlock: 'HASHLOCK',
    Hashtimelock: 'HASHTIMELOCK',
    Multiclaimpc: 'MULTICLAIMPC',
    Destroy: 'DESTROY',
    Burn: 'BURN'
} as const;

export type TransferInitializationV1RequestEscrowTypeEnum = typeof TransferInitializationV1RequestEscrowTypeEnum[keyof typeof TransferInitializationV1RequestEscrowTypeEnum];

/**
 * 
 * @export
 * @interface TransferInitializationV1Response
 */
export interface TransferInitializationV1Response {
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Response
     */
    'messageType': string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Response
     */
    'sessionID': string;
    /**
     * 
     * @type {number}
     * @memberof TransferInitializationV1Response
     */
    'sequenceNumber': number;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Response
     */
    'odapPhase'?: TransferInitializationV1ResponseOdapPhaseEnum;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Response
     */
    'initialRequestMessageHash': string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Response
     */
    'destination'?: string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Response
     */
    'timeStamp': string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Response
     */
    'processedTimeStamp': string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Response
     */
    'serverIdentityPubkey': string;
    /**
     * 
     * @type {string}
     * @memberof TransferInitializationV1Response
     */
    'signature': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TransferInitializationV1Response
     */
    'backupGatewaysAllowed': Array<string>;
}

export const TransferInitializationV1ResponseOdapPhaseEnum = {
    TransferInitialization: 'TransferInitialization',
    LockEvidenceVerification: 'LockEvidenceVerification',
    CommitmentEstablishment: 'CommitmentEstablishment'
} as const;

export type TransferInitializationV1ResponseOdapPhaseEnum = typeof TransferInitializationV1ResponseOdapPhaseEnum[keyof typeof TransferInitializationV1ResponseOdapPhaseEnum];


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ClientRequestV1Request} [clientRequestV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientRequestV1: async (clientRequestV1Request?: ClientRequestV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-satp-hermes/clientrequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientRequestV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Phase1TransferInitiationRequestV1Request} [phase1TransferInitiationRequestV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase1TransferInitiationRequestV1: async (phase1TransferInitiationRequestV1Request?: Phase1TransferInitiationRequestV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-satp-hermes/phase1/transferinitiationrequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phase1TransferInitiationRequestV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Phase1TransferInitiationResponseV1Request} [phase1TransferInitiationResponseV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase1TransferInitiationResponseV1: async (phase1TransferInitiationResponseV1Request?: Phase1TransferInitiationResponseV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-satp-hermes/phase1/transferinitiationresponse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phase1TransferInitiationResponseV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Phase2LockEvidenceRequestV1Request} [phase2LockEvidenceRequestV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase2LockEvidenceRequestV1: async (phase2LockEvidenceRequestV1Request?: Phase2LockEvidenceRequestV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-satp-hermes/phase2/lockevidencerequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phase2LockEvidenceRequestV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Phase2LockEvidenceResponseV1Request} [phase2LockEvidenceResponseV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase2LockEvidenceResponseV1: async (phase2LockEvidenceResponseV1Request?: Phase2LockEvidenceResponseV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-satp-hermes/phase2/lockevidenceresponse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phase2LockEvidenceResponseV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Phase2TransferCommenceRequestV1Request} [phase2TransferCommenceRequestV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase2TransferCommenceRequestV1: async (phase2TransferCommenceRequestV1Request?: Phase2TransferCommenceRequestV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-satp-hermes/phase2/transfercommencerequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phase2TransferCommenceRequestV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Phase2TransferCommenceResponseV1Request} [phase2TransferCommenceResponseV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase2TransferCommenceResponseV1: async (phase2TransferCommenceResponseV1Request?: Phase2TransferCommenceResponseV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-satp-hermes/phase2/transfercommenceresponse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phase2TransferCommenceResponseV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Phase3CommitFinalRequestV1Request} [phase3CommitFinalRequestV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase3CommitFinalRequestV1: async (phase3CommitFinalRequestV1Request?: Phase3CommitFinalRequestV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-satp-hermes/phase3/commitfinalrequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phase3CommitFinalRequestV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Phase3CommitFinalResponseV1Request} [phase3CommitFinalResponseV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase3CommitFinalResponseV1: async (phase3CommitFinalResponseV1Request?: Phase3CommitFinalResponseV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-satp-hermes/phase3/commitfinalresponse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phase3CommitFinalResponseV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Phase3CommitPreparationRequestV1Request} [phase3CommitPreparationRequestV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase3CommitPreparationRequestV1: async (phase3CommitPreparationRequestV1Request?: Phase3CommitPreparationRequestV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-satp-hermes/phase3/commitpreparationrequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phase3CommitPreparationRequestV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Phase3CommitPreparationResponseV1Request} [phase3CommitPreparationResponseV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase3CommitPreparationResponseV1: async (phase3CommitPreparationResponseV1Request?: Phase3CommitPreparationResponseV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-satp-hermes/phase3/commitpreparationresponse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phase3CommitPreparationResponseV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Phase3TransferCompleteRequestV1Request} [phase3TransferCompleteRequestV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase3TransferCompleteRequestV1: async (phase3TransferCompleteRequestV1Request?: Phase3TransferCompleteRequestV1Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-satp-hermes/phase3/transfercompleterequest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phase3TransferCompleteRequestV1Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RecoverUpdateAckV1MessageRequest} [recoverUpdateAckV1MessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recoverUpdateAckV1Message: async (recoverUpdateAckV1MessageRequest?: RecoverUpdateAckV1MessageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-satp-hermes/recoverupdateackmessage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recoverUpdateAckV1MessageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RecoverUpdateV1MessageRequest} [recoverUpdateV1MessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recoverUpdateV1Message: async (recoverUpdateV1MessageRequest?: RecoverUpdateV1MessageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-satp-hermes/recoverupdatemessage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recoverUpdateV1MessageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RecoverV1MessageRequest} [recoverV1MessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recoverV1Message: async (recoverV1MessageRequest?: RecoverV1MessageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-satp-hermes/recovermessage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recoverV1MessageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RecoverV1SuccessRequest} [recoverV1SuccessRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recoverV1Success: async (recoverV1SuccessRequest?: RecoverV1SuccessRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-satp-hermes/recoversuccessmessage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recoverV1SuccessRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RecoverV1SuccessRequest} [recoverV1SuccessRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rollbackAckV1Message: async (recoverV1SuccessRequest?: RecoverV1SuccessRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-satp-hermes/rollbackackmessage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recoverV1SuccessRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RollbackV1MessageRequest} [rollbackV1MessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rollbackV1Message: async (rollbackV1MessageRequest?: RollbackV1MessageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/@hyperledger/cactus-plugin-satp-hermes/rollbackmessage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rollbackV1MessageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ClientRequestV1Request} [clientRequestV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientRequestV1(clientRequestV1Request?: ClientRequestV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientRequestV1(clientRequestV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Phase1TransferInitiationRequestV1Request} [phase1TransferInitiationRequestV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phase1TransferInitiationRequestV1(phase1TransferInitiationRequestV1Request?: Phase1TransferInitiationRequestV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phase1TransferInitiationRequestV1(phase1TransferInitiationRequestV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Phase1TransferInitiationResponseV1Request} [phase1TransferInitiationResponseV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phase1TransferInitiationResponseV1(phase1TransferInitiationResponseV1Request?: Phase1TransferInitiationResponseV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phase1TransferInitiationResponseV1(phase1TransferInitiationResponseV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Phase2LockEvidenceRequestV1Request} [phase2LockEvidenceRequestV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phase2LockEvidenceRequestV1(phase2LockEvidenceRequestV1Request?: Phase2LockEvidenceRequestV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phase2LockEvidenceRequestV1(phase2LockEvidenceRequestV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Phase2LockEvidenceResponseV1Request} [phase2LockEvidenceResponseV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phase2LockEvidenceResponseV1(phase2LockEvidenceResponseV1Request?: Phase2LockEvidenceResponseV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phase2LockEvidenceResponseV1(phase2LockEvidenceResponseV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Phase2TransferCommenceRequestV1Request} [phase2TransferCommenceRequestV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phase2TransferCommenceRequestV1(phase2TransferCommenceRequestV1Request?: Phase2TransferCommenceRequestV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phase2TransferCommenceRequestV1(phase2TransferCommenceRequestV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Phase2TransferCommenceResponseV1Request} [phase2TransferCommenceResponseV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phase2TransferCommenceResponseV1(phase2TransferCommenceResponseV1Request?: Phase2TransferCommenceResponseV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phase2TransferCommenceResponseV1(phase2TransferCommenceResponseV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Phase3CommitFinalRequestV1Request} [phase3CommitFinalRequestV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phase3CommitFinalRequestV1(phase3CommitFinalRequestV1Request?: Phase3CommitFinalRequestV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phase3CommitFinalRequestV1(phase3CommitFinalRequestV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Phase3CommitFinalResponseV1Request} [phase3CommitFinalResponseV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phase3CommitFinalResponseV1(phase3CommitFinalResponseV1Request?: Phase3CommitFinalResponseV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phase3CommitFinalResponseV1(phase3CommitFinalResponseV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Phase3CommitPreparationRequestV1Request} [phase3CommitPreparationRequestV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phase3CommitPreparationRequestV1(phase3CommitPreparationRequestV1Request?: Phase3CommitPreparationRequestV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phase3CommitPreparationRequestV1(phase3CommitPreparationRequestV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Phase3CommitPreparationResponseV1Request} [phase3CommitPreparationResponseV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phase3CommitPreparationResponseV1(phase3CommitPreparationResponseV1Request?: Phase3CommitPreparationResponseV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phase3CommitPreparationResponseV1(phase3CommitPreparationResponseV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Phase3TransferCompleteRequestV1Request} [phase3TransferCompleteRequestV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phase3TransferCompleteRequestV1(phase3TransferCompleteRequestV1Request?: Phase3TransferCompleteRequestV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phase3TransferCompleteRequestV1(phase3TransferCompleteRequestV1Request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RecoverUpdateAckV1MessageRequest} [recoverUpdateAckV1MessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recoverUpdateAckV1Message(recoverUpdateAckV1MessageRequest?: RecoverUpdateAckV1MessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recoverUpdateAckV1Message(recoverUpdateAckV1MessageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RecoverUpdateV1MessageRequest} [recoverUpdateV1MessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recoverUpdateV1Message(recoverUpdateV1MessageRequest?: RecoverUpdateV1MessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recoverUpdateV1Message(recoverUpdateV1MessageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RecoverV1MessageRequest} [recoverV1MessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recoverV1Message(recoverV1MessageRequest?: RecoverV1MessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recoverV1Message(recoverV1MessageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RecoverV1SuccessRequest} [recoverV1SuccessRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recoverV1Success(recoverV1SuccessRequest?: RecoverV1SuccessRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recoverV1Success(recoverV1SuccessRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RecoverV1SuccessRequest} [recoverV1SuccessRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rollbackAckV1Message(recoverV1SuccessRequest?: RecoverV1SuccessRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rollbackAckV1Message(recoverV1SuccessRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RollbackV1MessageRequest} [rollbackV1MessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rollbackV1Message(rollbackV1MessageRequest?: RollbackV1MessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rollbackV1Message(rollbackV1MessageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {ClientRequestV1Request} [clientRequestV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientRequestV1(clientRequestV1Request?: ClientRequestV1Request, options?: any): AxiosPromise<any> {
            return localVarFp.clientRequestV1(clientRequestV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Phase1TransferInitiationRequestV1Request} [phase1TransferInitiationRequestV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase1TransferInitiationRequestV1(phase1TransferInitiationRequestV1Request?: Phase1TransferInitiationRequestV1Request, options?: any): AxiosPromise<void> {
            return localVarFp.phase1TransferInitiationRequestV1(phase1TransferInitiationRequestV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Phase1TransferInitiationResponseV1Request} [phase1TransferInitiationResponseV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase1TransferInitiationResponseV1(phase1TransferInitiationResponseV1Request?: Phase1TransferInitiationResponseV1Request, options?: any): AxiosPromise<void> {
            return localVarFp.phase1TransferInitiationResponseV1(phase1TransferInitiationResponseV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Phase2LockEvidenceRequestV1Request} [phase2LockEvidenceRequestV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase2LockEvidenceRequestV1(phase2LockEvidenceRequestV1Request?: Phase2LockEvidenceRequestV1Request, options?: any): AxiosPromise<void> {
            return localVarFp.phase2LockEvidenceRequestV1(phase2LockEvidenceRequestV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Phase2LockEvidenceResponseV1Request} [phase2LockEvidenceResponseV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase2LockEvidenceResponseV1(phase2LockEvidenceResponseV1Request?: Phase2LockEvidenceResponseV1Request, options?: any): AxiosPromise<void> {
            return localVarFp.phase2LockEvidenceResponseV1(phase2LockEvidenceResponseV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Phase2TransferCommenceRequestV1Request} [phase2TransferCommenceRequestV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase2TransferCommenceRequestV1(phase2TransferCommenceRequestV1Request?: Phase2TransferCommenceRequestV1Request, options?: any): AxiosPromise<void> {
            return localVarFp.phase2TransferCommenceRequestV1(phase2TransferCommenceRequestV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Phase2TransferCommenceResponseV1Request} [phase2TransferCommenceResponseV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase2TransferCommenceResponseV1(phase2TransferCommenceResponseV1Request?: Phase2TransferCommenceResponseV1Request, options?: any): AxiosPromise<void> {
            return localVarFp.phase2TransferCommenceResponseV1(phase2TransferCommenceResponseV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Phase3CommitFinalRequestV1Request} [phase3CommitFinalRequestV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase3CommitFinalRequestV1(phase3CommitFinalRequestV1Request?: Phase3CommitFinalRequestV1Request, options?: any): AxiosPromise<void> {
            return localVarFp.phase3CommitFinalRequestV1(phase3CommitFinalRequestV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Phase3CommitFinalResponseV1Request} [phase3CommitFinalResponseV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase3CommitFinalResponseV1(phase3CommitFinalResponseV1Request?: Phase3CommitFinalResponseV1Request, options?: any): AxiosPromise<void> {
            return localVarFp.phase3CommitFinalResponseV1(phase3CommitFinalResponseV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Phase3CommitPreparationRequestV1Request} [phase3CommitPreparationRequestV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase3CommitPreparationRequestV1(phase3CommitPreparationRequestV1Request?: Phase3CommitPreparationRequestV1Request, options?: any): AxiosPromise<void> {
            return localVarFp.phase3CommitPreparationRequestV1(phase3CommitPreparationRequestV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Phase3CommitPreparationResponseV1Request} [phase3CommitPreparationResponseV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase3CommitPreparationResponseV1(phase3CommitPreparationResponseV1Request?: Phase3CommitPreparationResponseV1Request, options?: any): AxiosPromise<void> {
            return localVarFp.phase3CommitPreparationResponseV1(phase3CommitPreparationResponseV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Phase3TransferCompleteRequestV1Request} [phase3TransferCompleteRequestV1Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phase3TransferCompleteRequestV1(phase3TransferCompleteRequestV1Request?: Phase3TransferCompleteRequestV1Request, options?: any): AxiosPromise<void> {
            return localVarFp.phase3TransferCompleteRequestV1(phase3TransferCompleteRequestV1Request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RecoverUpdateAckV1MessageRequest} [recoverUpdateAckV1MessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recoverUpdateAckV1Message(recoverUpdateAckV1MessageRequest?: RecoverUpdateAckV1MessageRequest, options?: any): AxiosPromise<void> {
            return localVarFp.recoverUpdateAckV1Message(recoverUpdateAckV1MessageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RecoverUpdateV1MessageRequest} [recoverUpdateV1MessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recoverUpdateV1Message(recoverUpdateV1MessageRequest?: RecoverUpdateV1MessageRequest, options?: any): AxiosPromise<void> {
            return localVarFp.recoverUpdateV1Message(recoverUpdateV1MessageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RecoverV1MessageRequest} [recoverV1MessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recoverV1Message(recoverV1MessageRequest?: RecoverV1MessageRequest, options?: any): AxiosPromise<void> {
            return localVarFp.recoverV1Message(recoverV1MessageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RecoverV1SuccessRequest} [recoverV1SuccessRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recoverV1Success(recoverV1SuccessRequest?: RecoverV1SuccessRequest, options?: any): AxiosPromise<void> {
            return localVarFp.recoverV1Success(recoverV1SuccessRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RecoverV1SuccessRequest} [recoverV1SuccessRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rollbackAckV1Message(recoverV1SuccessRequest?: RecoverV1SuccessRequest, options?: any): AxiosPromise<void> {
            return localVarFp.rollbackAckV1Message(recoverV1SuccessRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RollbackV1MessageRequest} [rollbackV1MessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rollbackV1Message(rollbackV1MessageRequest?: RollbackV1MessageRequest, options?: any): AxiosPromise<void> {
            return localVarFp.rollbackV1Message(rollbackV1MessageRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {ClientRequestV1Request} [clientRequestV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public clientRequestV1(clientRequestV1Request?: ClientRequestV1Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).clientRequestV1(clientRequestV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Phase1TransferInitiationRequestV1Request} [phase1TransferInitiationRequestV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public phase1TransferInitiationRequestV1(phase1TransferInitiationRequestV1Request?: Phase1TransferInitiationRequestV1Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).phase1TransferInitiationRequestV1(phase1TransferInitiationRequestV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Phase1TransferInitiationResponseV1Request} [phase1TransferInitiationResponseV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public phase1TransferInitiationResponseV1(phase1TransferInitiationResponseV1Request?: Phase1TransferInitiationResponseV1Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).phase1TransferInitiationResponseV1(phase1TransferInitiationResponseV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Phase2LockEvidenceRequestV1Request} [phase2LockEvidenceRequestV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public phase2LockEvidenceRequestV1(phase2LockEvidenceRequestV1Request?: Phase2LockEvidenceRequestV1Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).phase2LockEvidenceRequestV1(phase2LockEvidenceRequestV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Phase2LockEvidenceResponseV1Request} [phase2LockEvidenceResponseV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public phase2LockEvidenceResponseV1(phase2LockEvidenceResponseV1Request?: Phase2LockEvidenceResponseV1Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).phase2LockEvidenceResponseV1(phase2LockEvidenceResponseV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Phase2TransferCommenceRequestV1Request} [phase2TransferCommenceRequestV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public phase2TransferCommenceRequestV1(phase2TransferCommenceRequestV1Request?: Phase2TransferCommenceRequestV1Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).phase2TransferCommenceRequestV1(phase2TransferCommenceRequestV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Phase2TransferCommenceResponseV1Request} [phase2TransferCommenceResponseV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public phase2TransferCommenceResponseV1(phase2TransferCommenceResponseV1Request?: Phase2TransferCommenceResponseV1Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).phase2TransferCommenceResponseV1(phase2TransferCommenceResponseV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Phase3CommitFinalRequestV1Request} [phase3CommitFinalRequestV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public phase3CommitFinalRequestV1(phase3CommitFinalRequestV1Request?: Phase3CommitFinalRequestV1Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).phase3CommitFinalRequestV1(phase3CommitFinalRequestV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Phase3CommitFinalResponseV1Request} [phase3CommitFinalResponseV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public phase3CommitFinalResponseV1(phase3CommitFinalResponseV1Request?: Phase3CommitFinalResponseV1Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).phase3CommitFinalResponseV1(phase3CommitFinalResponseV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Phase3CommitPreparationRequestV1Request} [phase3CommitPreparationRequestV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public phase3CommitPreparationRequestV1(phase3CommitPreparationRequestV1Request?: Phase3CommitPreparationRequestV1Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).phase3CommitPreparationRequestV1(phase3CommitPreparationRequestV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Phase3CommitPreparationResponseV1Request} [phase3CommitPreparationResponseV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public phase3CommitPreparationResponseV1(phase3CommitPreparationResponseV1Request?: Phase3CommitPreparationResponseV1Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).phase3CommitPreparationResponseV1(phase3CommitPreparationResponseV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Phase3TransferCompleteRequestV1Request} [phase3TransferCompleteRequestV1Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public phase3TransferCompleteRequestV1(phase3TransferCompleteRequestV1Request?: Phase3TransferCompleteRequestV1Request, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).phase3TransferCompleteRequestV1(phase3TransferCompleteRequestV1Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RecoverUpdateAckV1MessageRequest} [recoverUpdateAckV1MessageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public recoverUpdateAckV1Message(recoverUpdateAckV1MessageRequest?: RecoverUpdateAckV1MessageRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).recoverUpdateAckV1Message(recoverUpdateAckV1MessageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RecoverUpdateV1MessageRequest} [recoverUpdateV1MessageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public recoverUpdateV1Message(recoverUpdateV1MessageRequest?: RecoverUpdateV1MessageRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).recoverUpdateV1Message(recoverUpdateV1MessageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RecoverV1MessageRequest} [recoverV1MessageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public recoverV1Message(recoverV1MessageRequest?: RecoverV1MessageRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).recoverV1Message(recoverV1MessageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RecoverV1SuccessRequest} [recoverV1SuccessRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public recoverV1Success(recoverV1SuccessRequest?: RecoverV1SuccessRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).recoverV1Success(recoverV1SuccessRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RecoverV1SuccessRequest} [recoverV1SuccessRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rollbackAckV1Message(recoverV1SuccessRequest?: RecoverV1SuccessRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rollbackAckV1Message(recoverV1SuccessRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RollbackV1MessageRequest} [rollbackV1MessageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rollbackV1Message(rollbackV1MessageRequest?: RollbackV1MessageRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rollbackV1Message(rollbackV1MessageRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


