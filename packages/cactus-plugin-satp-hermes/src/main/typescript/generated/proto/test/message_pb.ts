// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file test/message.proto (package test.message, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message as Message$1, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message test.message.Message
 */
export class Message extends Message$1<Message> {
  /**
   * @generated from field: string content = 1;
   */
  content = "";

  constructor(data?: PartialMessage<Message>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "test.message.Message";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Message {
    return new Message().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJsonString(jsonString, options);
  }

  static equals(a: Message | PlainMessage<Message> | undefined, b: Message | PlainMessage<Message> | undefined): boolean {
    return proto3.util.equals(Message, a, b);
  }
}

/**
 * @generated from message test.message.ModifyMessageResponse
 */
export class ModifyMessageResponse extends Message$1<ModifyMessageResponse> {
  /**
   * @generated from field: string content = 1;
   */
  content = "";

  constructor(data?: PartialMessage<ModifyMessageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "test.message.ModifyMessageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModifyMessageResponse {
    return new ModifyMessageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModifyMessageResponse {
    return new ModifyMessageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModifyMessageResponse {
    return new ModifyMessageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ModifyMessageResponse | PlainMessage<ModifyMessageResponse> | undefined, b: ModifyMessageResponse | PlainMessage<ModifyMessageResponse> | undefined): boolean {
    return proto3.util.equals(ModifyMessageResponse, a, b);
  }
}

/**
 * @generated from message test.message.ModifyMessageRequest
 */
export class ModifyMessageRequest extends Message$1<ModifyMessageRequest> {
  /**
   * @generated from field: string content = 1;
   */
  content = "";

  constructor(data?: PartialMessage<ModifyMessageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "test.message.ModifyMessageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModifyMessageRequest {
    return new ModifyMessageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModifyMessageRequest {
    return new ModifyMessageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModifyMessageRequest {
    return new ModifyMessageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ModifyMessageRequest | PlainMessage<ModifyMessageRequest> | undefined, b: ModifyMessageRequest | PlainMessage<ModifyMessageRequest> | undefined): boolean {
    return proto3.util.equals(ModifyMessageRequest, a, b);
  }
}

