// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file cacti/satp/v02/common/common_messages.proto (package cacti.satp.v02.common, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum cacti.satp.v02.common.STATUS
 */
export enum STATUS {
  /**
   * @generated from enum value: STATUS_UNSPECIFIED = 0;
   */
  STATUS_UNSPECIFIED = 0,

  /**
   * @generated from enum value: STATUS_OK = 1;
   */
  STATUS_OK = 1,

  /**
   * @generated from enum value: STATUS_ERROR = 2;
   */
  STATUS_ERROR = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(STATUS)
proto3.util.setEnumType(STATUS, "cacti.satp.v02.common.STATUS", [
  { no: 0, name: "STATUS_UNSPECIFIED" },
  { no: 1, name: "STATUS_OK" },
  { no: 2, name: "STATUS_ERROR" },
]);

/**
 * @generated from enum cacti.satp.v02.common.MessageType
 */
export enum MessageType {
  /**
   * @generated from enum value: MESSAGE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: MESSAGE_TYPE_INIT_PROPOSAL = 1;
   */
  INIT_PROPOSAL = 1,

  /**
   * @generated from enum value: MESSAGE_TYPE_INIT_RECEIPT = 2;
   */
  INIT_RECEIPT = 2,

  /**
   * @generated from enum value: MESSAGE_TYPE_INIT_REJECT = 3;
   */
  INIT_REJECT = 3,

  /**
   * @generated from enum value: MESSAGE_TYPE_TRANSFER_COMMENCE_REQUEST = 4;
   */
  TRANSFER_COMMENCE_REQUEST = 4,

  /**
   * @generated from enum value: MESSAGE_TYPE_TRANSFER_COMMENCE_RESPONSE = 5;
   */
  TRANSFER_COMMENCE_RESPONSE = 5,

  /**
   * @generated from enum value: MESSAGE_TYPE_LOCK_ASSERT = 6;
   */
  LOCK_ASSERT = 6,

  /**
   * @generated from enum value: MESSAGE_TYPE_ASSERTION_RECEIPT = 7;
   */
  ASSERTION_RECEIPT = 7,

  /**
   * @generated from enum value: MESSAGE_TYPE_COMMIT_PREPARE = 8;
   */
  COMMIT_PREPARE = 8,

  /**
   * @generated from enum value: MESSAGE_TYPE_COMMIT_READY = 9;
   */
  COMMIT_READY = 9,

  /**
   * @generated from enum value: MESSAGE_TYPE_COMMIT_FINAL = 10;
   */
  COMMIT_FINAL = 10,

  /**
   * @generated from enum value: MESSAGE_TYPE_ACK_COMMIT_FINAL = 11;
   */
  ACK_COMMIT_FINAL = 11,

  /**
   * @generated from enum value: MESSAGE_TYPE_COMMIT_TRANSFER_COMPLETE = 12;
   */
  COMMIT_TRANSFER_COMPLETE = 12,
}
// Retrieve enum metadata with: proto3.getEnumType(MessageType)
proto3.util.setEnumType(MessageType, "cacti.satp.v02.common.MessageType", [
  { no: 0, name: "MESSAGE_TYPE_UNSPECIFIED" },
  { no: 1, name: "MESSAGE_TYPE_INIT_PROPOSAL" },
  { no: 2, name: "MESSAGE_TYPE_INIT_RECEIPT" },
  { no: 3, name: "MESSAGE_TYPE_INIT_REJECT" },
  { no: 4, name: "MESSAGE_TYPE_TRANSFER_COMMENCE_REQUEST" },
  { no: 5, name: "MESSAGE_TYPE_TRANSFER_COMMENCE_RESPONSE" },
  { no: 6, name: "MESSAGE_TYPE_LOCK_ASSERT" },
  { no: 7, name: "MESSAGE_TYPE_ASSERTION_RECEIPT" },
  { no: 8, name: "MESSAGE_TYPE_COMMIT_PREPARE" },
  { no: 9, name: "MESSAGE_TYPE_COMMIT_READY" },
  { no: 10, name: "MESSAGE_TYPE_COMMIT_FINAL" },
  { no: 11, name: "MESSAGE_TYPE_ACK_COMMIT_FINAL" },
  { no: 12, name: "MESSAGE_TYPE_COMMIT_TRANSFER_COMPLETE" },
]);

/**
 * @generated from enum cacti.satp.v02.common.CredentialProfile
 */
export enum CredentialProfile {
  /**
   * @generated from enum value: CREDENTIAL_PROFILE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CREDENTIAL_PROFILE_SAML = 1;
   */
  SAML = 1,

  /**
   * @generated from enum value: CREDENTIAL_PROFILE_OAUTH = 2;
   */
  OAUTH = 2,

  /**
   * @generated from enum value: CREDENTIAL_PROFILE_X509 = 3;
   */
  X509 = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(CredentialProfile)
proto3.util.setEnumType(CredentialProfile, "cacti.satp.v02.common.CredentialProfile", [
  { no: 0, name: "CREDENTIAL_PROFILE_UNSPECIFIED" },
  { no: 1, name: "CREDENTIAL_PROFILE_SAML" },
  { no: 2, name: "CREDENTIAL_PROFILE_OAUTH" },
  { no: 3, name: "CREDENTIAL_PROFILE_X509" },
]);

/**
 * @generated from enum cacti.satp.v02.common.SignatureAlgorithm
 */
export enum SignatureAlgorithm {
  /**
   * @generated from enum value: SIGNATURE_ALGORITHM_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SIGNATURE_ALGORITHM_RSA = 1;
   */
  RSA = 1,

  /**
   * @generated from enum value: SIGNATURE_ALGORITHM_ECDSA = 2;
   */
  ECDSA = 2,

  /**
   * @generated from enum value: SIGNATURE_ALGORITHM_DSA = 3;
   */
  DSA = 3,

  /**
   * @generated from enum value: SIGNATURE_ALGORITHM_HMAC = 4;
   */
  HMAC = 4,

  /**
   * @generated from enum value: SIGNATURE_ALGORITHM_RSASSA_PSS = 5;
   */
  RSASSA_PSS = 5,

  /**
   * @generated from enum value: SIGNATURE_ALGORITHM_EDDSA = 6;
   */
  EDDSA = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(SignatureAlgorithm)
proto3.util.setEnumType(SignatureAlgorithm, "cacti.satp.v02.common.SignatureAlgorithm", [
  { no: 0, name: "SIGNATURE_ALGORITHM_UNSPECIFIED" },
  { no: 1, name: "SIGNATURE_ALGORITHM_RSA" },
  { no: 2, name: "SIGNATURE_ALGORITHM_ECDSA" },
  { no: 3, name: "SIGNATURE_ALGORITHM_DSA" },
  { no: 4, name: "SIGNATURE_ALGORITHM_HMAC" },
  { no: 5, name: "SIGNATURE_ALGORITHM_RSASSA_PSS" },
  { no: 6, name: "SIGNATURE_ALGORITHM_EDDSA" },
]);

/**
 * @generated from enum cacti.satp.v02.common.LockType
 */
export enum LockType {
  /**
   * @generated from enum value: LOCK_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: LOCK_TYPE_FAUCET = 1;
   */
  FAUCET = 1,

  /**
   * @generated from enum value: LOCK_TYPE_TIMELOCK = 2;
   */
  TIMELOCK = 2,

  /**
   * @generated from enum value: LOCK_TYPE_HASHLOCK = 3;
   */
  HASHLOCK = 3,

  /**
   * @generated from enum value: LOCK_TYPE_HASHLOCKTIME = 4;
   */
  HASHLOCKTIME = 4,

  /**
   * @generated from enum value: LOCK_TYPE_MULTICLAIM = 5;
   */
  MULTICLAIM = 5,

  /**
   * @generated from enum value: LOCK_TYPE_DESTROYBURN = 6;
   */
  DESTROYBURN = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(LockType)
proto3.util.setEnumType(LockType, "cacti.satp.v02.common.LockType", [
  { no: 0, name: "LOCK_TYPE_UNSPECIFIED" },
  { no: 1, name: "LOCK_TYPE_FAUCET" },
  { no: 2, name: "LOCK_TYPE_TIMELOCK" },
  { no: 3, name: "LOCK_TYPE_HASHLOCK" },
  { no: 4, name: "LOCK_TYPE_HASHLOCKTIME" },
  { no: 5, name: "LOCK_TYPE_MULTICLAIM" },
  { no: 6, name: "LOCK_TYPE_DESTROYBURN" },
]);

/**
 * @generated from enum cacti.satp.v02.common.Error
 */
export enum Error {
  /**
   * @generated from enum value: ERROR_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ERROR_BADLY_FORMATED_MESSAGE = 1;
   */
  BADLY_FORMATED_MESSAGE = 1,

  /**
   * @generated from enum value: ERROR_INCORRECT_PARAMETER = 2;
   */
  INCORRECT_PARAMETER = 2,

  /**
   * @generated from enum value: ERROR_ACK_MISMATCH = 3;
   */
  ACK_MISMATCH = 3,

  /**
   * @generated from enum value: ERROR_BADLY_FORMATED_MESSAGE_CLAIM = 4;
   */
  BADLY_FORMATED_MESSAGE_CLAIM = 4,

  /**
   * @generated from enum value: ERROR_BADLY_FORMATED_MESSAGE_BAD_SIGNATURE = 5;
   */
  BADLY_FORMATED_MESSAGE_BAD_SIGNATURE = 5,

  /**
   * @generated from enum value: ERROR_BADLY_FORMATED_MESSAGE_WRONG_TRANSACTION_ID = 6;
   */
  BADLY_FORMATED_MESSAGE_WRONG_TRANSACTION_ID = 6,

  /**
   * @generated from enum value: ERROR_BADLY_FORMATED_MESSAGE_MISMATCH_HASH_VALUES = 7;
   */
  BADLY_FORMATED_MESSAGE_MISMATCH_HASH_VALUES = 7,

  /**
   * @generated from enum value: ERROR_EXPIRED_SIGNING_KEY_CERTIFICATE = 8;
   */
  EXPIRED_SIGNING_KEY_CERTIFICATE = 8,

  /**
   * @generated from enum value: ERROR_EXPIRED_CLAIM = 9;
   */
  EXPIRED_CLAIM = 9,

  /**
   * @generated from enum value: ERROR_INCORRERCT_PARAMETER = 10;
   */
  INCORRERCT_PARAMETER = 10,

  /**
   * @generated from enum value: ERROR_MESSAGE_OUT_OF_SEQUENCE = 11;
   */
  MESSAGE_OUT_OF_SEQUENCE = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(Error)
proto3.util.setEnumType(Error, "cacti.satp.v02.common.Error", [
  { no: 0, name: "ERROR_UNSPECIFIED" },
  { no: 1, name: "ERROR_BADLY_FORMATED_MESSAGE" },
  { no: 2, name: "ERROR_INCORRECT_PARAMETER" },
  { no: 3, name: "ERROR_ACK_MISMATCH" },
  { no: 4, name: "ERROR_BADLY_FORMATED_MESSAGE_CLAIM" },
  { no: 5, name: "ERROR_BADLY_FORMATED_MESSAGE_BAD_SIGNATURE" },
  { no: 6, name: "ERROR_BADLY_FORMATED_MESSAGE_WRONG_TRANSACTION_ID" },
  { no: 7, name: "ERROR_BADLY_FORMATED_MESSAGE_MISMATCH_HASH_VALUES" },
  { no: 8, name: "ERROR_EXPIRED_SIGNING_KEY_CERTIFICATE" },
  { no: 9, name: "ERROR_EXPIRED_CLAIM" },
  { no: 10, name: "ERROR_INCORRERCT_PARAMETER" },
  { no: 11, name: "ERROR_MESSAGE_OUT_OF_SEQUENCE" },
]);

/**
 * TODO: define the common parameters to every protocol message
 *
 * @generated from message cacti.satp.v02.common.MessageCore
 */
export class MessageCore extends Message<MessageCore> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<MessageCore>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.MessageCore";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageCore {
    return new MessageCore().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageCore {
    return new MessageCore().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageCore {
    return new MessageCore().fromJsonString(jsonString, options);
  }

  static equals(a: MessageCore | PlainMessage<MessageCore> | undefined, b: MessageCore | PlainMessage<MessageCore> | undefined): boolean {
    return proto3.util.equals(MessageCore, a, b);
  }
}

/**
 * TODO: define the common parameters to every rollback message
 *
 * @generated from message cacti.satp.v02.common.RollbackMessageCore
 */
export class RollbackMessageCore extends Message<RollbackMessageCore> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<RollbackMessageCore>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.RollbackMessageCore";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RollbackMessageCore {
    return new RollbackMessageCore().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RollbackMessageCore {
    return new RollbackMessageCore().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RollbackMessageCore {
    return new RollbackMessageCore().fromJsonString(jsonString, options);
  }

  static equals(a: RollbackMessageCore | PlainMessage<RollbackMessageCore> | undefined, b: RollbackMessageCore | PlainMessage<RollbackMessageCore> | undefined): boolean {
    return proto3.util.equals(RollbackMessageCore, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.common.Ack
 */
export class Ack extends Message<Ack> {
  /**
   * @generated from field: cacti.satp.v02.common.STATUS status = 1;
   */
  status = STATUS.STATUS_UNSPECIFIED;

  constructor(data?: PartialMessage<Ack>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.Ack";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(STATUS) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Ack {
    return new Ack().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Ack {
    return new Ack().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Ack {
    return new Ack().fromJsonString(jsonString, options);
  }

  static equals(a: Ack | PlainMessage<Ack> | undefined, b: Ack | PlainMessage<Ack> | undefined): boolean {
    return proto3.util.equals(Ack, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.common.TransferClaims
 */
export class TransferClaims extends Message<TransferClaims> {
  /**
   * @generated from field: string digital_asset_id = 1;
   */
  digitalAssetId = "";

  /**
   * @generated from field: string asset_profile_id = 2;
   */
  assetProfileId = "";

  /**
   * @generated from field: string verified_originator_entity_id = 3;
   */
  verifiedOriginatorEntityId = "";

  /**
   * @generated from field: string verified_beneficiary_entity_id = 4;
   */
  verifiedBeneficiaryEntityId = "";

  /**
   * @generated from field: string originator_pubkey = 5;
   */
  originatorPubkey = "";

  /**
   * @generated from field: string beneficiary_pubkey = 6;
   */
  beneficiaryPubkey = "";

  /**
   * @generated from field: string sender_gateway_network_id = 7;
   */
  senderGatewayNetworkId = "";

  /**
   * @generated from field: string recipient_gateway_network_id = 8;
   */
  recipientGatewayNetworkId = "";

  /**
   * @generated from field: string client_gateway_pubkey = 9;
   */
  clientGatewayPubkey = "";

  /**
   * @generated from field: string server_gateway_pubkey = 10;
   */
  serverGatewayPubkey = "";

  /**
   * @generated from field: string sender_gateway_owner_id = 11;
   */
  senderGatewayOwnerId = "";

  /**
   * @generated from field: string receiver_gateway_owner_id = 12;
   */
  receiverGatewayOwnerId = "";

  /**
   * @generated from field: uint32 max_retries = 13;
   */
  maxRetries = 0;

  /**
   * @generated from field: uint64 max_timeout = 14;
   */
  maxTimeout = protoInt64.zero;

  constructor(data?: PartialMessage<TransferClaims>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.TransferClaims";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "digital_asset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "asset_profile_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "verified_originator_entity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "verified_beneficiary_entity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "originator_pubkey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "beneficiary_pubkey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "sender_gateway_network_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "recipient_gateway_network_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "client_gateway_pubkey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "server_gateway_pubkey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "sender_gateway_owner_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "receiver_gateway_owner_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "max_retries", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 14, name: "max_timeout", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransferClaims {
    return new TransferClaims().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransferClaims {
    return new TransferClaims().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransferClaims {
    return new TransferClaims().fromJsonString(jsonString, options);
  }

  static equals(a: TransferClaims | PlainMessage<TransferClaims> | undefined, b: TransferClaims | PlainMessage<TransferClaims> | undefined): boolean {
    return proto3.util.equals(TransferClaims, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.common.TransferClaimsFormat
 */
export class TransferClaimsFormat extends Message<TransferClaimsFormat> {
  constructor(data?: PartialMessage<TransferClaimsFormat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.TransferClaimsFormat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransferClaimsFormat {
    return new TransferClaimsFormat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransferClaimsFormat {
    return new TransferClaimsFormat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransferClaimsFormat {
    return new TransferClaimsFormat().fromJsonString(jsonString, options);
  }

  static equals(a: TransferClaimsFormat | PlainMessage<TransferClaimsFormat> | undefined, b: TransferClaimsFormat | PlainMessage<TransferClaimsFormat> | undefined): boolean {
    return proto3.util.equals(TransferClaimsFormat, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.common.Permissions
 */
export class Permissions extends Message<Permissions> {
  constructor(data?: PartialMessage<Permissions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.Permissions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Permissions {
    return new Permissions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Permissions {
    return new Permissions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Permissions {
    return new Permissions().fromJsonString(jsonString, options);
  }

  static equals(a: Permissions | PlainMessage<Permissions> | undefined, b: Permissions | PlainMessage<Permissions> | undefined): boolean {
    return proto3.util.equals(Permissions, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.common.SubsequentCalls
 */
export class SubsequentCalls extends Message<SubsequentCalls> {
  constructor(data?: PartialMessage<SubsequentCalls>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.SubsequentCalls";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubsequentCalls {
    return new SubsequentCalls().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubsequentCalls {
    return new SubsequentCalls().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubsequentCalls {
    return new SubsequentCalls().fromJsonString(jsonString, options);
  }

  static equals(a: SubsequentCalls | PlainMessage<SubsequentCalls> | undefined, b: SubsequentCalls | PlainMessage<SubsequentCalls> | undefined): boolean {
    return proto3.util.equals(SubsequentCalls, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.common.History
 */
export class History extends Message<History> {
  /**
   * @generated from field: repeated cacti.satp.v02.common.Transaction transactions = 1;
   */
  transactions: Transaction[] = [];

  /**
   * @generated from field: repeated cacti.satp.v02.common.ActionCategory action_categories = 2;
   */
  actionCategories: ActionCategory[] = [];

  /**
   * @generated from field: string origin = 3;
   */
  origin = "";

  /**
   * @generated from field: string destination = 4;
   */
  destination = "";

  /**
   * @generated from field: string balance = 5;
   */
  balance = "";

  /**
   * @generated from field: cacti.satp.v02.common.STATUS status = 6;
   */
  status = STATUS.STATUS_UNSPECIFIED;

  /**
   * @generated from field: cacti.satp.v02.common.ApplicationParameters application_parameters = 7;
   */
  applicationParameters?: ApplicationParameters;

  constructor(data?: PartialMessage<History>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.History";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transactions", kind: "message", T: Transaction, repeated: true },
    { no: 2, name: "action_categories", kind: "message", T: ActionCategory, repeated: true },
    { no: 3, name: "origin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "destination", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "balance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(STATUS) },
    { no: 7, name: "application_parameters", kind: "message", T: ApplicationParameters },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): History {
    return new History().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): History {
    return new History().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): History {
    return new History().fromJsonString(jsonString, options);
  }

  static equals(a: History | PlainMessage<History> | undefined, b: History | PlainMessage<History> | undefined): boolean {
    return proto3.util.equals(History, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.common.ActionCategory
 */
export class ActionCategory extends Message<ActionCategory> {
  constructor(data?: PartialMessage<ActionCategory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.ActionCategory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActionCategory {
    return new ActionCategory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActionCategory {
    return new ActionCategory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActionCategory {
    return new ActionCategory().fromJsonString(jsonString, options);
  }

  static equals(a: ActionCategory | PlainMessage<ActionCategory> | undefined, b: ActionCategory | PlainMessage<ActionCategory> | undefined): boolean {
    return proto3.util.equals(ActionCategory, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.common.Transaction
 */
export class Transaction extends Message<Transaction> {
  constructor(data?: PartialMessage<Transaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.Transaction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Transaction {
    return new Transaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Transaction {
    return new Transaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Transaction {
    return new Transaction().fromJsonString(jsonString, options);
  }

  static equals(a: Transaction | PlainMessage<Transaction> | undefined, b: Transaction | PlainMessage<Transaction> | undefined): boolean {
    return proto3.util.equals(Transaction, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.common.ApplicationParameters
 */
export class ApplicationParameters extends Message<ApplicationParameters> {
  constructor(data?: PartialMessage<ApplicationParameters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.ApplicationParameters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApplicationParameters {
    return new ApplicationParameters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApplicationParameters {
    return new ApplicationParameters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApplicationParameters {
    return new ApplicationParameters().fromJsonString(jsonString, options);
  }

  static equals(a: ApplicationParameters | PlainMessage<ApplicationParameters> | undefined, b: ApplicationParameters | PlainMessage<ApplicationParameters> | undefined): boolean {
    return proto3.util.equals(ApplicationParameters, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.common.NetworkCapabilities
 */
export class NetworkCapabilities extends Message<NetworkCapabilities> {
  /**
   * @generated from field: string sender_gateway_network_id = 1;
   */
  senderGatewayNetworkId = "";

  /**
   * @generated from field: cacti.satp.v02.common.SignatureAlgorithm signature_algorithm = 2;
   */
  signatureAlgorithm = SignatureAlgorithm.UNSPECIFIED;

  /**
   * @generated from field: repeated cacti.satp.v02.common.SignatureAlgorithm supported_signature_algorithms = 3;
   */
  supportedSignatureAlgorithms: SignatureAlgorithm[] = [];

  /**
   * @generated from field: cacti.satp.v02.common.LockType lock_type = 4;
   */
  lockType = LockType.UNSPECIFIED;

  /**
   * @generated from field: uint64 lock_expiration_time = 5;
   */
  lockExpirationTime = protoInt64.zero;

  /**
   * @generated from field: cacti.satp.v02.common.Permissions permissions = 6;
   */
  permissions?: Permissions;

  /**
   * @generated from field: string developer_urn = 7;
   */
  developerUrn = "";

  /**
   * @generated from field: cacti.satp.v02.common.CredentialProfile credential_profile = 8;
   */
  credentialProfile = CredentialProfile.UNSPECIFIED;

  /**
   * @generated from field: string application_profile = 9;
   */
  applicationProfile = "";

  /**
   * @generated from field: string logging_profile = 10;
   */
  loggingProfile = "";

  /**
   * @generated from field: string access_control_profile = 11;
   */
  accessControlProfile = "";

  /**
   * @generated from field: cacti.satp.v02.common.SubsequentCalls subsequent_calls = 12;
   */
  subsequentCalls?: SubsequentCalls;

  /**
   * @generated from field: repeated cacti.satp.v02.common.History history = 13;
   */
  history: History[] = [];

  constructor(data?: PartialMessage<NetworkCapabilities>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.NetworkCapabilities";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender_gateway_network_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "signature_algorithm", kind: "enum", T: proto3.getEnumType(SignatureAlgorithm) },
    { no: 3, name: "supported_signature_algorithms", kind: "enum", T: proto3.getEnumType(SignatureAlgorithm), repeated: true },
    { no: 4, name: "lock_type", kind: "enum", T: proto3.getEnumType(LockType) },
    { no: 5, name: "lock_expiration_time", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "permissions", kind: "message", T: Permissions },
    { no: 7, name: "developer_urn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "credential_profile", kind: "enum", T: proto3.getEnumType(CredentialProfile) },
    { no: 9, name: "application_profile", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "logging_profile", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "access_control_profile", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "subsequent_calls", kind: "message", T: SubsequentCalls },
    { no: 13, name: "history", kind: "message", T: History, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NetworkCapabilities {
    return new NetworkCapabilities().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NetworkCapabilities {
    return new NetworkCapabilities().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NetworkCapabilities {
    return new NetworkCapabilities().fromJsonString(jsonString, options);
  }

  static equals(a: NetworkCapabilities | PlainMessage<NetworkCapabilities> | undefined, b: NetworkCapabilities | PlainMessage<NetworkCapabilities> | undefined): boolean {
    return proto3.util.equals(NetworkCapabilities, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.common.CommonSatp
 */
export class CommonSatp extends Message<CommonSatp> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * @generated from field: cacti.satp.v02.common.MessageType message_type = 2;
   */
  messageType = MessageType.UNSPECIFIED;

  /**
   * @generated from field: string session_id = 3;
   */
  sessionId = "";

  /**
   * @generated from field: string transfer_context_id = 4;
   */
  transferContextId = "";

  /**
   * @generated from field: uint64 sequence_number = 5;
   */
  sequenceNumber = protoInt64.zero;

  /**
   * @generated from field: string resource_url = 6;
   */
  resourceUrl = "";

  /**
   * @generated from field: cacti.satp.v02.common.ActionResponse action_response = 8;
   */
  actionResponse?: ActionResponse;

  /**
   * @generated from field: string credential_block = 10;
   */
  credentialBlock = "";

  /**
   * @generated from field: cacti.satp.v02.common.PayloadProfile payload_profile = 11;
   */
  payloadProfile?: PayloadProfile;

  /**
   * @generated from field: cacti.satp.v02.common.Payload payload = 13;
   */
  payload?: Payload;

  /**
   * @generated from field: string payload_hash = 14;
   */
  payloadHash = "";

  /**
   * @generated from field: string signature = 15;
   */
  signature = "";

  /**
   * @generated from field: string client_gateway_pubkey = 16;
   */
  clientGatewayPubkey = "";

  /**
   * @generated from field: string server_gateway_pubkey = 17;
   */
  serverGatewayPubkey = "";

  /**
   * @generated from field: string hash_previous_message = 18;
   */
  hashPreviousMessage = "";

  constructor(data?: PartialMessage<CommonSatp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.CommonSatp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "message_type", kind: "enum", T: proto3.getEnumType(MessageType) },
    { no: 3, name: "session_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "transfer_context_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "sequence_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "resource_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "action_response", kind: "message", T: ActionResponse },
    { no: 10, name: "credential_block", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "payload_profile", kind: "message", T: PayloadProfile },
    { no: 13, name: "payload", kind: "message", T: Payload },
    { no: 14, name: "payload_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "client_gateway_pubkey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "server_gateway_pubkey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "hash_previous_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommonSatp {
    return new CommonSatp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommonSatp {
    return new CommonSatp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommonSatp {
    return new CommonSatp().fromJsonString(jsonString, options);
  }

  static equals(a: CommonSatp | PlainMessage<CommonSatp> | undefined, b: CommonSatp | PlainMessage<CommonSatp> | undefined): boolean {
    return proto3.util.equals(CommonSatp, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.common.ActionResponse
 */
export class ActionResponse extends Message<ActionResponse> {
  constructor(data?: PartialMessage<ActionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.ActionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActionResponse {
    return new ActionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActionResponse {
    return new ActionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActionResponse {
    return new ActionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ActionResponse | PlainMessage<ActionResponse> | undefined, b: ActionResponse | PlainMessage<ActionResponse> | undefined): boolean {
    return proto3.util.equals(ActionResponse, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.common.PayloadProfile
 */
export class PayloadProfile extends Message<PayloadProfile> {
  /**
   * @generated from field: cacti.satp.v02.common.AssetProfile asset_profile = 1;
   */
  assetProfile?: AssetProfile;

  /**
   * @generated from field: string capabilities = 2;
   */
  capabilities = "";

  constructor(data?: PartialMessage<PayloadProfile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.PayloadProfile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "asset_profile", kind: "message", T: AssetProfile },
    { no: 2, name: "capabilities", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PayloadProfile {
    return new PayloadProfile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PayloadProfile {
    return new PayloadProfile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PayloadProfile {
    return new PayloadProfile().fromJsonString(jsonString, options);
  }

  static equals(a: PayloadProfile | PlainMessage<PayloadProfile> | undefined, b: PayloadProfile | PlainMessage<PayloadProfile> | undefined): boolean {
    return proto3.util.equals(PayloadProfile, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.common.AssetProfile
 */
export class AssetProfile extends Message<AssetProfile> {
  /**
   * @generated from field: string issuer = 1;
   */
  issuer = "";

  /**
   * @generated from field: string asset_code = 2;
   */
  assetCode = "";

  /**
   * @generated from field: string asset_code_type = 3;
   */
  assetCodeType = "";

  /**
   * @generated from field: string issuance_date = 4;
   */
  issuanceDate = "";

  /**
   * @generated from field: string expiration_date = 5;
   */
  expirationDate = "";

  /**
   * @generated from field: string verification_end_point = 6;
   */
  verificationEndPoint = "";

  /**
   * @generated from field: string digital_signature = 7;
   */
  digitalSignature = "";

  /**
   * @generated from field: string prospectus_link = 8;
   */
  prospectusLink = "";

  /**
   * @generated from field: repeated string key_information_link = 9;
   */
  keyInformationLink: string[] = [];

  /**
   * @generated from field: repeated string keywords = 10;
   */
  keywords: string[] = [];

  /**
   * @generated from field: repeated string transfer_restrictions = 11;
   */
  transferRestrictions: string[] = [];

  /**
   * @generated from field: repeated string ledger_requirements = 12;
   */
  ledgerRequirements: string[] = [];

  constructor(data?: PartialMessage<AssetProfile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.AssetProfile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "issuer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "asset_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "asset_code_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "issuance_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "expiration_date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "verification_end_point", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "digital_signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "prospectus_link", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "key_information_link", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "keywords", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 11, name: "transfer_restrictions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 12, name: "ledger_requirements", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssetProfile {
    return new AssetProfile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssetProfile {
    return new AssetProfile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssetProfile {
    return new AssetProfile().fromJsonString(jsonString, options);
  }

  static equals(a: AssetProfile | PlainMessage<AssetProfile> | undefined, b: AssetProfile | PlainMessage<AssetProfile> | undefined): boolean {
    return proto3.util.equals(AssetProfile, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.common.Payload
 */
export class Payload extends Message<Payload> {
  constructor(data?: PartialMessage<Payload>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.Payload";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Payload {
    return new Payload().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Payload {
    return new Payload().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Payload {
    return new Payload().fromJsonString(jsonString, options);
  }

  static equals(a: Payload | PlainMessage<Payload> | undefined, b: Payload | PlainMessage<Payload> | undefined): boolean {
    return proto3.util.equals(Payload, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.common.LockAssertionClaim
 */
export class LockAssertionClaim extends Message<LockAssertionClaim> {
  constructor(data?: PartialMessage<LockAssertionClaim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.LockAssertionClaim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LockAssertionClaim {
    return new LockAssertionClaim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LockAssertionClaim {
    return new LockAssertionClaim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LockAssertionClaim {
    return new LockAssertionClaim().fromJsonString(jsonString, options);
  }

  static equals(a: LockAssertionClaim | PlainMessage<LockAssertionClaim> | undefined, b: LockAssertionClaim | PlainMessage<LockAssertionClaim> | undefined): boolean {
    return proto3.util.equals(LockAssertionClaim, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.common.LockAssertionFormat
 */
export class LockAssertionFormat extends Message<LockAssertionFormat> {
  constructor(data?: PartialMessage<LockAssertionFormat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.LockAssertionFormat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LockAssertionFormat {
    return new LockAssertionFormat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LockAssertionFormat {
    return new LockAssertionFormat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LockAssertionFormat {
    return new LockAssertionFormat().fromJsonString(jsonString, options);
  }

  static equals(a: LockAssertionFormat | PlainMessage<LockAssertionFormat> | undefined, b: LockAssertionFormat | PlainMessage<LockAssertionFormat> | undefined): boolean {
    return proto3.util.equals(LockAssertionFormat, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.common.MintAssertionClaims
 */
export class MintAssertionClaims extends Message<MintAssertionClaims> {
  constructor(data?: PartialMessage<MintAssertionClaims>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.MintAssertionClaims";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MintAssertionClaims {
    return new MintAssertionClaims().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MintAssertionClaims {
    return new MintAssertionClaims().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MintAssertionClaims {
    return new MintAssertionClaims().fromJsonString(jsonString, options);
  }

  static equals(a: MintAssertionClaims | PlainMessage<MintAssertionClaims> | undefined, b: MintAssertionClaims | PlainMessage<MintAssertionClaims> | undefined): boolean {
    return proto3.util.equals(MintAssertionClaims, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.common.MintAssertionClaimsFormat
 */
export class MintAssertionClaimsFormat extends Message<MintAssertionClaimsFormat> {
  constructor(data?: PartialMessage<MintAssertionClaimsFormat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.MintAssertionClaimsFormat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MintAssertionClaimsFormat {
    return new MintAssertionClaimsFormat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MintAssertionClaimsFormat {
    return new MintAssertionClaimsFormat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MintAssertionClaimsFormat {
    return new MintAssertionClaimsFormat().fromJsonString(jsonString, options);
  }

  static equals(a: MintAssertionClaimsFormat | PlainMessage<MintAssertionClaimsFormat> | undefined, b: MintAssertionClaimsFormat | PlainMessage<MintAssertionClaimsFormat> | undefined): boolean {
    return proto3.util.equals(MintAssertionClaimsFormat, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.common.BurnAssertionClaim
 */
export class BurnAssertionClaim extends Message<BurnAssertionClaim> {
  constructor(data?: PartialMessage<BurnAssertionClaim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.BurnAssertionClaim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BurnAssertionClaim {
    return new BurnAssertionClaim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BurnAssertionClaim {
    return new BurnAssertionClaim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BurnAssertionClaim {
    return new BurnAssertionClaim().fromJsonString(jsonString, options);
  }

  static equals(a: BurnAssertionClaim | PlainMessage<BurnAssertionClaim> | undefined, b: BurnAssertionClaim | PlainMessage<BurnAssertionClaim> | undefined): boolean {
    return proto3.util.equals(BurnAssertionClaim, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.common.BurnAssertionClaimFormat
 */
export class BurnAssertionClaimFormat extends Message<BurnAssertionClaimFormat> {
  constructor(data?: PartialMessage<BurnAssertionClaimFormat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.BurnAssertionClaimFormat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BurnAssertionClaimFormat {
    return new BurnAssertionClaimFormat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BurnAssertionClaimFormat {
    return new BurnAssertionClaimFormat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BurnAssertionClaimFormat {
    return new BurnAssertionClaimFormat().fromJsonString(jsonString, options);
  }

  static equals(a: BurnAssertionClaimFormat | PlainMessage<BurnAssertionClaimFormat> | undefined, b: BurnAssertionClaimFormat | PlainMessage<BurnAssertionClaimFormat> | undefined): boolean {
    return proto3.util.equals(BurnAssertionClaimFormat, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.common.AssignmentAssertionClaim
 */
export class AssignmentAssertionClaim extends Message<AssignmentAssertionClaim> {
  constructor(data?: PartialMessage<AssignmentAssertionClaim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.AssignmentAssertionClaim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssignmentAssertionClaim {
    return new AssignmentAssertionClaim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssignmentAssertionClaim {
    return new AssignmentAssertionClaim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssignmentAssertionClaim {
    return new AssignmentAssertionClaim().fromJsonString(jsonString, options);
  }

  static equals(a: AssignmentAssertionClaim | PlainMessage<AssignmentAssertionClaim> | undefined, b: AssignmentAssertionClaim | PlainMessage<AssignmentAssertionClaim> | undefined): boolean {
    return proto3.util.equals(AssignmentAssertionClaim, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.common.AssignmentAssertionClaimFormat
 */
export class AssignmentAssertionClaimFormat extends Message<AssignmentAssertionClaimFormat> {
  constructor(data?: PartialMessage<AssignmentAssertionClaimFormat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.AssignmentAssertionClaimFormat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssignmentAssertionClaimFormat {
    return new AssignmentAssertionClaimFormat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssignmentAssertionClaimFormat {
    return new AssignmentAssertionClaimFormat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssignmentAssertionClaimFormat {
    return new AssignmentAssertionClaimFormat().fromJsonString(jsonString, options);
  }

  static equals(a: AssignmentAssertionClaimFormat | PlainMessage<AssignmentAssertionClaimFormat> | undefined, b: AssignmentAssertionClaimFormat | PlainMessage<AssignmentAssertionClaimFormat> | undefined): boolean {
    return proto3.util.equals(AssignmentAssertionClaimFormat, a, b);
  }
}

