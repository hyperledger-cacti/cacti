// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file cacti/satp/v02/stage_0.proto (package cacti.satp.v02, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { CommonSatp, TransferClaims } from "./common/message_pb.js";

/**
 * @generated from message cacti.satp.v02.PreTransferVerificationAndContextEstablishmentRequest
 */
export class PreTransferVerificationAndContextEstablishmentRequest extends Message<PreTransferVerificationAndContextEstablishmentRequest> {
  /**
   * @generated from field: cacti.satp.v02.common.CommonSatp context = 1;
   */
  context?: CommonSatp;

  /**
   * todo other fields
   *
   * @generated from field: cacti.satp.v02.common.TransferClaims transferClaims = 2;
   */
  transferClaims?: TransferClaims;

  constructor(data?: PartialMessage<PreTransferVerificationAndContextEstablishmentRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.PreTransferVerificationAndContextEstablishmentRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "message", T: CommonSatp },
    { no: 2, name: "transferClaims", kind: "message", T: TransferClaims },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PreTransferVerificationAndContextEstablishmentRequest {
    return new PreTransferVerificationAndContextEstablishmentRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PreTransferVerificationAndContextEstablishmentRequest {
    return new PreTransferVerificationAndContextEstablishmentRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PreTransferVerificationAndContextEstablishmentRequest {
    return new PreTransferVerificationAndContextEstablishmentRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PreTransferVerificationAndContextEstablishmentRequest | PlainMessage<PreTransferVerificationAndContextEstablishmentRequest> | undefined, b: PreTransferVerificationAndContextEstablishmentRequest | PlainMessage<PreTransferVerificationAndContextEstablishmentRequest> | undefined): boolean {
    return proto3.util.equals(PreTransferVerificationAndContextEstablishmentRequest, a, b);
  }
}

/**
 * TODO
 *
 * @generated from message cacti.satp.v02.PreTransferVerificationAndContextEstablishmentResponse
 */
export class PreTransferVerificationAndContextEstablishmentResponse extends Message<PreTransferVerificationAndContextEstablishmentResponse> {
  constructor(data?: PartialMessage<PreTransferVerificationAndContextEstablishmentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.PreTransferVerificationAndContextEstablishmentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PreTransferVerificationAndContextEstablishmentResponse {
    return new PreTransferVerificationAndContextEstablishmentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PreTransferVerificationAndContextEstablishmentResponse {
    return new PreTransferVerificationAndContextEstablishmentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PreTransferVerificationAndContextEstablishmentResponse {
    return new PreTransferVerificationAndContextEstablishmentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PreTransferVerificationAndContextEstablishmentResponse | PlainMessage<PreTransferVerificationAndContextEstablishmentResponse> | undefined, b: PreTransferVerificationAndContextEstablishmentResponse | PlainMessage<PreTransferVerificationAndContextEstablishmentResponse> | undefined): boolean {
    return proto3.util.equals(PreTransferVerificationAndContextEstablishmentResponse, a, b);
  }
}

