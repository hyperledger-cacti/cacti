// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file cacti/satp/v02/stage_1.proto (package cacti.satp.v02, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { CommonSatp, NetworkCapabilities, TransferClaims, TransferClaimsFormat } from "./common/message_pb.js";

/**
 * @generated from message cacti.satp.v02.TransferProposalRequestMessage
 */
export class TransferProposalRequestMessage extends Message<TransferProposalRequestMessage> {
  /**
   * @generated from field: cacti.satp.v02.common.CommonSatp common = 1;
   */
  common?: CommonSatp;

  /**
   * @generated from field: cacti.satp.v02.common.TransferClaims transfer_init_claims = 2;
   */
  transferInitClaims?: TransferClaims;

  /**
   * @generated from field: cacti.satp.v02.common.TransferClaimsFormat transfer_init_claims_format = 3;
   */
  transferInitClaimsFormat?: TransferClaimsFormat;

  /**
   * @generated from field: cacti.satp.v02.common.NetworkCapabilities network_capabilities = 4;
   */
  networkCapabilities?: NetworkCapabilities;

  /**
   * @generated from field: bool multiple_claims_allowed = 5;
   */
  multipleClaimsAllowed = false;

  /**
   * @generated from field: bool multiple_cancels_allowed = 6;
   */
  multipleCancelsAllowed = false;

  constructor(data?: PartialMessage<TransferProposalRequestMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.TransferProposalRequestMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "common", kind: "message", T: CommonSatp },
    { no: 2, name: "transfer_init_claims", kind: "message", T: TransferClaims },
    { no: 3, name: "transfer_init_claims_format", kind: "message", T: TransferClaimsFormat },
    { no: 4, name: "network_capabilities", kind: "message", T: NetworkCapabilities },
    { no: 5, name: "multiple_claims_allowed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "multiple_cancels_allowed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransferProposalRequestMessage {
    return new TransferProposalRequestMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransferProposalRequestMessage {
    return new TransferProposalRequestMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransferProposalRequestMessage {
    return new TransferProposalRequestMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TransferProposalRequestMessage | PlainMessage<TransferProposalRequestMessage> | undefined, b: TransferProposalRequestMessage | PlainMessage<TransferProposalRequestMessage> | undefined): boolean {
    return proto3.util.equals(TransferProposalRequestMessage, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.TransferProposalReceiptRejectMessage
 */
export class TransferProposalReceiptRejectMessage extends Message<TransferProposalReceiptRejectMessage> {
  /**
   * @generated from field: cacti.satp.v02.common.CommonSatp common = 1;
   */
  common?: CommonSatp;

  /**
   * @generated from field: string hash_transfer_init_claims = 2;
   */
  hashTransferInitClaims = "";

  /**
   * @generated from field: cacti.satp.v02.common.TransferClaims transfer_counter_claims = 3;
   */
  transferCounterClaims?: TransferClaims;

  /**
   * @generated from field: string timestamp = 4;
   */
  timestamp = "";

  constructor(data?: PartialMessage<TransferProposalReceiptRejectMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.TransferProposalReceiptRejectMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "common", kind: "message", T: CommonSatp },
    { no: 2, name: "hash_transfer_init_claims", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "transfer_counter_claims", kind: "message", T: TransferClaims },
    { no: 4, name: "timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransferProposalReceiptRejectMessage {
    return new TransferProposalReceiptRejectMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransferProposalReceiptRejectMessage {
    return new TransferProposalReceiptRejectMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransferProposalReceiptRejectMessage {
    return new TransferProposalReceiptRejectMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TransferProposalReceiptRejectMessage | PlainMessage<TransferProposalReceiptRejectMessage> | undefined, b: TransferProposalReceiptRejectMessage | PlainMessage<TransferProposalReceiptRejectMessage> | undefined): boolean {
    return proto3.util.equals(TransferProposalReceiptRejectMessage, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.TransferCommenceRequestMessage
 */
export class TransferCommenceRequestMessage extends Message<TransferCommenceRequestMessage> {
  /**
   * @generated from field: cacti.satp.v02.common.CommonSatp common = 1;
   */
  common?: CommonSatp;

  /**
   * @generated from field: string hash_transfer_init_claims = 2;
   */
  hashTransferInitClaims = "";

  /**
   * @generated from field: string client_transfer_number = 3;
   */
  clientTransferNumber = "";

  constructor(data?: PartialMessage<TransferCommenceRequestMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.TransferCommenceRequestMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "common", kind: "message", T: CommonSatp },
    { no: 2, name: "hash_transfer_init_claims", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "client_transfer_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransferCommenceRequestMessage {
    return new TransferCommenceRequestMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransferCommenceRequestMessage {
    return new TransferCommenceRequestMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransferCommenceRequestMessage {
    return new TransferCommenceRequestMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TransferCommenceRequestMessage | PlainMessage<TransferCommenceRequestMessage> | undefined, b: TransferCommenceRequestMessage | PlainMessage<TransferCommenceRequestMessage> | undefined): boolean {
    return proto3.util.equals(TransferCommenceRequestMessage, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.TransferCommenceResponseMessage
 */
export class TransferCommenceResponseMessage extends Message<TransferCommenceResponseMessage> {
  /**
   * @generated from field: cacti.satp.v02.common.CommonSatp common = 1;
   */
  common?: CommonSatp;

  constructor(data?: PartialMessage<TransferCommenceResponseMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.TransferCommenceResponseMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "common", kind: "message", T: CommonSatp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransferCommenceResponseMessage {
    return new TransferCommenceResponseMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransferCommenceResponseMessage {
    return new TransferCommenceResponseMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransferCommenceResponseMessage {
    return new TransferCommenceResponseMessage().fromJsonString(jsonString, options);
  }

  static equals(a: TransferCommenceResponseMessage | PlainMessage<TransferCommenceResponseMessage> | undefined, b: TransferCommenceResponseMessage | PlainMessage<TransferCommenceResponseMessage> | undefined): boolean {
    return proto3.util.equals(TransferCommenceResponseMessage, a, b);
  }
}

