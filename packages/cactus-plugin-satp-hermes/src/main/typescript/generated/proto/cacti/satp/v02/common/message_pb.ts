// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file cacti/satp/v02/common/message.proto (package cacti.satp.v02.common, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum cacti.satp.v02.common.STATUS
 */
export enum STATUS {
  /**
   * @generated from enum value: STATUS_UNSPECIFIED = 0;
   */
  STATUS_UNSPECIFIED = 0,

  /**
   * @generated from enum value: STATUS_OK = 1;
   */
  STATUS_OK = 1,

  /**
   * @generated from enum value: STATUS_ERROR = 2;
   */
  STATUS_ERROR = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(STATUS)
proto3.util.setEnumType(STATUS, "cacti.satp.v02.common.STATUS", [
  { no: 0, name: "STATUS_UNSPECIFIED" },
  { no: 1, name: "STATUS_OK" },
  { no: 2, name: "STATUS_ERROR" },
]);

/**
 * TODO: define the common parameters to every protocol message
 *
 * @generated from message cacti.satp.v02.common.MessageCore
 */
export class MessageCore extends Message<MessageCore> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<MessageCore>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.MessageCore";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageCore {
    return new MessageCore().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageCore {
    return new MessageCore().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageCore {
    return new MessageCore().fromJsonString(jsonString, options);
  }

  static equals(a: MessageCore | PlainMessage<MessageCore> | undefined, b: MessageCore | PlainMessage<MessageCore> | undefined): boolean {
    return proto3.util.equals(MessageCore, a, b);
  }
}

/**
 * TODO: define the common parameters to every rollback message
 *
 * @generated from message cacti.satp.v02.common.RollbackMessageCore
 */
export class RollbackMessageCore extends Message<RollbackMessageCore> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<RollbackMessageCore>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.RollbackMessageCore";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RollbackMessageCore {
    return new RollbackMessageCore().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RollbackMessageCore {
    return new RollbackMessageCore().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RollbackMessageCore {
    return new RollbackMessageCore().fromJsonString(jsonString, options);
  }

  static equals(a: RollbackMessageCore | PlainMessage<RollbackMessageCore> | undefined, b: RollbackMessageCore | PlainMessage<RollbackMessageCore> | undefined): boolean {
    return proto3.util.equals(RollbackMessageCore, a, b);
  }
}

/**
 * @generated from message cacti.satp.v02.common.Ack
 */
export class Ack extends Message<Ack> {
  /**
   * @generated from field: cacti.satp.v02.common.STATUS status = 1;
   */
  status = STATUS.STATUS_UNSPECIFIED;

  constructor(data?: PartialMessage<Ack>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cacti.satp.v02.common.Ack";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(STATUS) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Ack {
    return new Ack().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Ack {
    return new Ack().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Ack {
    return new Ack().fromJsonString(jsonString, options);
  }

  static equals(a: Ack | PlainMessage<Ack> | undefined, b: Ack | PlainMessage<Ack> | undefined): boolean {
    return proto3.util.equals(Ack, a, b);
  }
}

