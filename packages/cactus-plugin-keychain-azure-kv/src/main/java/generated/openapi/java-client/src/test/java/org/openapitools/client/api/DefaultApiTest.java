/*
 * Hyperledger Cactus - Keychain API
 * Contains/describes the Keychain API types/paths for Hyperledger Cactus.
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DeleteKeychainEntryRequestV1;
import org.openapitools.client.model.DeleteKeychainEntryResponseV1;
import org.openapitools.client.model.GetKeychainEntryRequestV1;
import org.openapitools.client.model.GetKeychainEntryResponseV1;
import org.openapitools.client.model.HasKeychainEntryRequestV1;
import org.openapitools.client.model.HasKeychainEntryResponseV1;
import org.openapitools.client.model.SetKeychainEntryRequestV1;
import org.openapitools.client.model.SetKeychainEntryResponseV1;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Deletes a value under a key on the keychain backend.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteKeychainEntryV1Test() throws ApiException {
        DeleteKeychainEntryRequestV1 deleteKeychainEntryRequestV1 = null;
        DeleteKeychainEntryResponseV1 response = api.deleteKeychainEntryV1(deleteKeychainEntryRequestV1);
        // TODO: test validations
    }

    /**
     * Retrieves the contents of a keychain entry from the backend.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getKeychainEntryV1Test() throws ApiException {
        GetKeychainEntryRequestV1 getKeychainEntryRequestV1 = null;
        GetKeychainEntryResponseV1 response = api.getKeychainEntryV1(getKeychainEntryRequestV1);
        // TODO: test validations
    }

    /**
     * Checks that an entry exists under a key on the keychain backend
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hasKeychainEntryV1Test() throws ApiException {
        HasKeychainEntryRequestV1 hasKeychainEntryRequestV1 = null;
        HasKeychainEntryResponseV1 response = api.hasKeychainEntryV1(hasKeychainEntryRequestV1);
        // TODO: test validations
    }

    /**
     * Sets a value under a key on the keychain backend.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setKeychainEntryV1Test() throws ApiException {
        SetKeychainEntryRequestV1 setKeychainEntryRequestV1 = null;
        SetKeychainEntryResponseV1 response = api.setKeychainEntryV1(setKeychainEntryRequestV1);
        // TODO: test validations
    }

}
