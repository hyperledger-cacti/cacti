/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.GetObjectRequestV1
import org.openapitools.client.models.GetObjectResponseV1
import org.openapitools.client.models.HasObjectRequestV1
import org.openapitools.client.models.HasObjectResponseV1
import org.openapitools.client.models.SetObjectRequestV1
import org.openapitools.client.models.SetObjectResponseV1

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class DefaultApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://www.cactus.stream")
        }
    }

    /**
     * Retrieves an object from the object store.
     * 
     * @param getObjectRequestV1 Request body to obtain an object via its key.
     * @return GetObjectResponseV1
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getObjectV1(getObjectRequestV1: GetObjectRequestV1) : GetObjectResponseV1 {
        val localVarResponse = getObjectV1WithHttpInfo(getObjectRequestV1 = getObjectRequestV1)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetObjectResponseV1
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieves an object from the object store.
     * 
     * @param getObjectRequestV1 Request body to obtain an object via its key.
     * @return ApiResponse<GetObjectResponseV1?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getObjectV1WithHttpInfo(getObjectRequestV1: GetObjectRequestV1) : ApiResponse<GetObjectResponseV1?> {
        val localVariableConfig = getObjectV1RequestConfig(getObjectRequestV1 = getObjectRequestV1)

        return request<GetObjectRequestV1, GetObjectResponseV1>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getObjectV1
     *
     * @param getObjectRequestV1 Request body to obtain an object via its key.
     * @return RequestConfig
     */
    fun getObjectV1RequestConfig(getObjectRequestV1: GetObjectRequestV1) : RequestConfig<GetObjectRequestV1> {
        val localVariableBody = getObjectRequestV1
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-object-store-ipfs/get-object",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Checks the presence of an object in the object store.
     * 
     * @param hasObjectRequestV1 Request body to check presence of an object under a key.
     * @return HasObjectResponseV1
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun hasObjectV1(hasObjectRequestV1: HasObjectRequestV1) : HasObjectResponseV1 {
        val localVarResponse = hasObjectV1WithHttpInfo(hasObjectRequestV1 = hasObjectRequestV1)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as HasObjectResponseV1
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Checks the presence of an object in the object store.
     * 
     * @param hasObjectRequestV1 Request body to check presence of an object under a key.
     * @return ApiResponse<HasObjectResponseV1?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun hasObjectV1WithHttpInfo(hasObjectRequestV1: HasObjectRequestV1) : ApiResponse<HasObjectResponseV1?> {
        val localVariableConfig = hasObjectV1RequestConfig(hasObjectRequestV1 = hasObjectRequestV1)

        return request<HasObjectRequestV1, HasObjectResponseV1>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation hasObjectV1
     *
     * @param hasObjectRequestV1 Request body to check presence of an object under a key.
     * @return RequestConfig
     */
    fun hasObjectV1RequestConfig(hasObjectRequestV1: HasObjectRequestV1) : RequestConfig<HasObjectRequestV1> {
        val localVariableBody = hasObjectRequestV1
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-object-store-ipfs/has-object",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Sets an object in the object store under the specified key.
     * 
     * @param setObjectRequestV1 Request body to set an object under a key.
     * @return SetObjectResponseV1
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun setObjectV1(setObjectRequestV1: SetObjectRequestV1) : SetObjectResponseV1 {
        val localVarResponse = setObjectV1WithHttpInfo(setObjectRequestV1 = setObjectRequestV1)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SetObjectResponseV1
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Sets an object in the object store under the specified key.
     * 
     * @param setObjectRequestV1 Request body to set an object under a key.
     * @return ApiResponse<SetObjectResponseV1?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun setObjectV1WithHttpInfo(setObjectRequestV1: SetObjectRequestV1) : ApiResponse<SetObjectResponseV1?> {
        val localVariableConfig = setObjectV1RequestConfig(setObjectRequestV1 = setObjectRequestV1)

        return request<SetObjectRequestV1, SetObjectResponseV1>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation setObjectV1
     *
     * @param setObjectRequestV1 Request body to set an object under a key.
     * @return RequestConfig
     */
    fun setObjectV1RequestConfig(setObjectRequestV1: SetObjectRequestV1) : RequestConfig<SetObjectRequestV1> {
        val localVariableBody = setObjectRequestV1
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-object-store-ipfs/set-object",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
