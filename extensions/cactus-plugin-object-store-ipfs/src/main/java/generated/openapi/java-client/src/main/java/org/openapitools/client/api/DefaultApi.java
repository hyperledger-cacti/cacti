/*
 * Hyperledger Cactus Plugin - Object Store - IPFS 
 * Contains/describes the Hyperledger Cactus Object Store IPFS plugin.
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetObjectRequestV1;
import org.openapitools.client.model.GetObjectResponseV1;
import org.openapitools.client.model.HasObjectRequestV1;
import org.openapitools.client.model.HasObjectResponseV1;
import org.openapitools.client.model.SetObjectRequestV1;
import org.openapitools.client.model.SetObjectResponseV1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getObjectV1
     * @param getObjectRequestV1 Request body to obtain an object via its key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectV1Call(GetObjectRequestV1 getObjectRequestV1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getObjectRequestV1;

        // create path and map variables
        String localVarPath = "/api/v1/plugins/@hyperledger/cactus-plugin-object-store-ipfs/get-object";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectV1ValidateBeforeCall(GetObjectRequestV1 getObjectRequestV1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getObjectRequestV1' is set
        if (getObjectRequestV1 == null) {
            throw new ApiException("Missing the required parameter 'getObjectRequestV1' when calling getObjectV1(Async)");
        }

        return getObjectV1Call(getObjectRequestV1, _callback);

    }

    /**
     * Retrieves an object from the object store.
     * 
     * @param getObjectRequestV1 Request body to obtain an object via its key. (required)
     * @return GetObjectResponseV1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetObjectResponseV1 getObjectV1(GetObjectRequestV1 getObjectRequestV1) throws ApiException {
        ApiResponse<GetObjectResponseV1> localVarResp = getObjectV1WithHttpInfo(getObjectRequestV1);
        return localVarResp.getData();
    }

    /**
     * Retrieves an object from the object store.
     * 
     * @param getObjectRequestV1 Request body to obtain an object via its key. (required)
     * @return ApiResponse&lt;GetObjectResponseV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetObjectResponseV1> getObjectV1WithHttpInfo(GetObjectRequestV1 getObjectRequestV1) throws ApiException {
        okhttp3.Call localVarCall = getObjectV1ValidateBeforeCall(getObjectRequestV1, null);
        Type localVarReturnType = new TypeToken<GetObjectResponseV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves an object from the object store. (asynchronously)
     * 
     * @param getObjectRequestV1 Request body to obtain an object via its key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectV1Async(GetObjectRequestV1 getObjectRequestV1, final ApiCallback<GetObjectResponseV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectV1ValidateBeforeCall(getObjectRequestV1, _callback);
        Type localVarReturnType = new TypeToken<GetObjectResponseV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hasObjectV1
     * @param hasObjectRequestV1 Request body to check presence of an object under a key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hasObjectV1Call(HasObjectRequestV1 hasObjectRequestV1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hasObjectRequestV1;

        // create path and map variables
        String localVarPath = "/api/v1/plugins/@hyperledger/cactus-plugin-object-store-ipfs/has-object";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hasObjectV1ValidateBeforeCall(HasObjectRequestV1 hasObjectRequestV1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hasObjectRequestV1' is set
        if (hasObjectRequestV1 == null) {
            throw new ApiException("Missing the required parameter 'hasObjectRequestV1' when calling hasObjectV1(Async)");
        }

        return hasObjectV1Call(hasObjectRequestV1, _callback);

    }

    /**
     * Checks the presence of an object in the object store.
     * 
     * @param hasObjectRequestV1 Request body to check presence of an object under a key. (required)
     * @return HasObjectResponseV1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public HasObjectResponseV1 hasObjectV1(HasObjectRequestV1 hasObjectRequestV1) throws ApiException {
        ApiResponse<HasObjectResponseV1> localVarResp = hasObjectV1WithHttpInfo(hasObjectRequestV1);
        return localVarResp.getData();
    }

    /**
     * Checks the presence of an object in the object store.
     * 
     * @param hasObjectRequestV1 Request body to check presence of an object under a key. (required)
     * @return ApiResponse&lt;HasObjectResponseV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HasObjectResponseV1> hasObjectV1WithHttpInfo(HasObjectRequestV1 hasObjectRequestV1) throws ApiException {
        okhttp3.Call localVarCall = hasObjectV1ValidateBeforeCall(hasObjectRequestV1, null);
        Type localVarReturnType = new TypeToken<HasObjectResponseV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Checks the presence of an object in the object store. (asynchronously)
     * 
     * @param hasObjectRequestV1 Request body to check presence of an object under a key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hasObjectV1Async(HasObjectRequestV1 hasObjectRequestV1, final ApiCallback<HasObjectResponseV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = hasObjectV1ValidateBeforeCall(hasObjectRequestV1, _callback);
        Type localVarReturnType = new TypeToken<HasObjectResponseV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setObjectV1
     * @param setObjectRequestV1 Request body to set an object under a key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setObjectV1Call(SetObjectRequestV1 setObjectRequestV1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setObjectRequestV1;

        // create path and map variables
        String localVarPath = "/api/v1/plugins/@hyperledger/cactus-plugin-object-store-ipfs/set-object";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setObjectV1ValidateBeforeCall(SetObjectRequestV1 setObjectRequestV1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'setObjectRequestV1' is set
        if (setObjectRequestV1 == null) {
            throw new ApiException("Missing the required parameter 'setObjectRequestV1' when calling setObjectV1(Async)");
        }

        return setObjectV1Call(setObjectRequestV1, _callback);

    }

    /**
     * Sets an object in the object store under the specified key.
     * 
     * @param setObjectRequestV1 Request body to set an object under a key. (required)
     * @return SetObjectResponseV1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SetObjectResponseV1 setObjectV1(SetObjectRequestV1 setObjectRequestV1) throws ApiException {
        ApiResponse<SetObjectResponseV1> localVarResp = setObjectV1WithHttpInfo(setObjectRequestV1);
        return localVarResp.getData();
    }

    /**
     * Sets an object in the object store under the specified key.
     * 
     * @param setObjectRequestV1 Request body to set an object under a key. (required)
     * @return ApiResponse&lt;SetObjectResponseV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SetObjectResponseV1> setObjectV1WithHttpInfo(SetObjectRequestV1 setObjectRequestV1) throws ApiException {
        okhttp3.Call localVarCall = setObjectV1ValidateBeforeCall(setObjectRequestV1, null);
        Type localVarReturnType = new TypeToken<SetObjectResponseV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets an object in the object store under the specified key. (asynchronously)
     * 
     * @param setObjectRequestV1 Request body to set an object under a key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setObjectV1Async(SetObjectRequestV1 setObjectRequestV1, final ApiCallback<SetObjectResponseV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = setObjectV1ValidateBeforeCall(setObjectRequestV1, _callback);
        Type localVarReturnType = new TypeToken<SetObjectResponseV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
