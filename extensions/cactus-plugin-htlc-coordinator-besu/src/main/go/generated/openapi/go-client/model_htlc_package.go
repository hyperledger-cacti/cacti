/*
Hyperledger Cactus Plugin - HTLC Coordinator

Can exchange assets between networks

API version: 2.0.0-rc.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cactus-plugin-htlc-coordinator-besu

import (
	"encoding/json"
	"fmt"
)

// HtlcPackage the model 'HtlcPackage'
type HtlcPackage string

// List of HtlcPackage
const (
	BESU HtlcPackage = "BESU"
	BESU_ERC20 HtlcPackage = "BESU_ERC20"
)

// All allowed values of HtlcPackage enum
var AllowedHtlcPackageEnumValues = []HtlcPackage{
	"BESU",
	"BESU_ERC20",
}

func (v *HtlcPackage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HtlcPackage(value)
	for _, existing := range AllowedHtlcPackageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HtlcPackage", value)
}

// NewHtlcPackageFromValue returns a pointer to a valid HtlcPackage
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHtlcPackageFromValue(v string) (*HtlcPackage, error) {
	ev := HtlcPackage(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HtlcPackage: valid values are %v", v, AllowedHtlcPackageEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HtlcPackage) IsValid() bool {
	for _, existing := range AllowedHtlcPackageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HtlcPackage value
func (v HtlcPackage) Ptr() *HtlcPackage {
	return &v
}

type NullableHtlcPackage struct {
	value *HtlcPackage
	isSet bool
}

func (v NullableHtlcPackage) Get() *HtlcPackage {
	return v.value
}

func (v *NullableHtlcPackage) Set(val *HtlcPackage) {
	v.value = val
	v.isSet = true
}

func (v NullableHtlcPackage) IsSet() bool {
	return v.isSet
}

func (v *NullableHtlcPackage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHtlcPackage(val *HtlcPackage) *NullableHtlcPackage {
	return &NullableHtlcPackage{value: val, isSet: true}
}

func (v NullableHtlcPackage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHtlcPackage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

