/*
 * Hyperledger Cactus Plugin - HTLC Coordinator
 * Can exchange assets between networks
 *
 * The version of the OpenAPI document: v2.0.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import org.openapitools.client.model.HtlcPackage;
import org.openapitools.client.model.Web3SigningCredential;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CounterpartyHTLCRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CounterpartyHTLCRequest {
  public static final String SERIALIZED_NAME_HTLC_PACKAGE = "htlcPackage";
  @SerializedName(SERIALIZED_NAME_HTLC_PACKAGE)
  private HtlcPackage htlcPackage;

  public static final String SERIALIZED_NAME_CONNECTOR_INSTANCE_ID = "connectorInstanceId";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_INSTANCE_ID)
  private String connectorInstanceId;

  public static final String SERIALIZED_NAME_KEYCHAIN_ID = "keychainId";
  @SerializedName(SERIALIZED_NAME_KEYCHAIN_ID)
  private String keychainId;

  public static final String SERIALIZED_NAME_HTLC_ID = "htlcId";
  @SerializedName(SERIALIZED_NAME_HTLC_ID)
  private String htlcId;

  public static final String SERIALIZED_NAME_WEB3_SIGNING_CREDENTIAL = "web3SigningCredential";
  @SerializedName(SERIALIZED_NAME_WEB3_SIGNING_CREDENTIAL)
  private Web3SigningCredential web3SigningCredential;

  public static final String SERIALIZED_NAME_GAS = "gas";
  @SerializedName(SERIALIZED_NAME_GAS)
  private BigDecimal gas;

  public CounterpartyHTLCRequest() {
  }

  public CounterpartyHTLCRequest htlcPackage(HtlcPackage htlcPackage) {
    
    this.htlcPackage = htlcPackage;
    return this;
  }

   /**
   * Get htlcPackage
   * @return htlcPackage
  **/
  @javax.annotation.Nonnull
  public HtlcPackage getHtlcPackage() {
    return htlcPackage;
  }


  public void setHtlcPackage(HtlcPackage htlcPackage) {
    this.htlcPackage = htlcPackage;
  }


  public CounterpartyHTLCRequest connectorInstanceId(String connectorInstanceId) {
    
    this.connectorInstanceId = connectorInstanceId;
    return this;
  }

   /**
   * connector Instance Id for the connector plugin
   * @return connectorInstanceId
  **/
  @javax.annotation.Nonnull
  public String getConnectorInstanceId() {
    return connectorInstanceId;
  }


  public void setConnectorInstanceId(String connectorInstanceId) {
    this.connectorInstanceId = connectorInstanceId;
  }


  public CounterpartyHTLCRequest keychainId(String keychainId) {
    
    this.keychainId = keychainId;
    return this;
  }

   /**
   * keychainId for the keychain plugin
   * @return keychainId
  **/
  @javax.annotation.Nonnull
  public String getKeychainId() {
    return keychainId;
  }


  public void setKeychainId(String keychainId) {
    this.keychainId = keychainId;
  }


  public CounterpartyHTLCRequest htlcId(String htlcId) {
    
    this.htlcId = htlcId;
    return this;
  }

   /**
   * Id for the HTLC
   * @return htlcId
  **/
  @javax.annotation.Nonnull
  public String getHtlcId() {
    return htlcId;
  }


  public void setHtlcId(String htlcId) {
    this.htlcId = htlcId;
  }


  public CounterpartyHTLCRequest web3SigningCredential(Web3SigningCredential web3SigningCredential) {
    
    this.web3SigningCredential = web3SigningCredential;
    return this;
  }

   /**
   * Get web3SigningCredential
   * @return web3SigningCredential
  **/
  @javax.annotation.Nonnull
  public Web3SigningCredential getWeb3SigningCredential() {
    return web3SigningCredential;
  }


  public void setWeb3SigningCredential(Web3SigningCredential web3SigningCredential) {
    this.web3SigningCredential = web3SigningCredential;
  }


  public CounterpartyHTLCRequest gas(BigDecimal gas) {
    
    this.gas = gas;
    return this;
  }

   /**
   * Get gas
   * @return gas
  **/
  @javax.annotation.Nullable
  public BigDecimal getGas() {
    return gas;
  }


  public void setGas(BigDecimal gas) {
    this.gas = gas;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CounterpartyHTLCRequest counterpartyHTLCRequest = (CounterpartyHTLCRequest) o;
    return Objects.equals(this.htlcPackage, counterpartyHTLCRequest.htlcPackage) &&
        Objects.equals(this.connectorInstanceId, counterpartyHTLCRequest.connectorInstanceId) &&
        Objects.equals(this.keychainId, counterpartyHTLCRequest.keychainId) &&
        Objects.equals(this.htlcId, counterpartyHTLCRequest.htlcId) &&
        Objects.equals(this.web3SigningCredential, counterpartyHTLCRequest.web3SigningCredential) &&
        Objects.equals(this.gas, counterpartyHTLCRequest.gas);
  }

  @Override
  public int hashCode() {
    return Objects.hash(htlcPackage, connectorInstanceId, keychainId, htlcId, web3SigningCredential, gas);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CounterpartyHTLCRequest {\n");
    sb.append("    htlcPackage: ").append(toIndentedString(htlcPackage)).append("\n");
    sb.append("    connectorInstanceId: ").append(toIndentedString(connectorInstanceId)).append("\n");
    sb.append("    keychainId: ").append(toIndentedString(keychainId)).append("\n");
    sb.append("    htlcId: ").append(toIndentedString(htlcId)).append("\n");
    sb.append("    web3SigningCredential: ").append(toIndentedString(web3SigningCredential)).append("\n");
    sb.append("    gas: ").append(toIndentedString(gas)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("htlcPackage");
    openapiFields.add("connectorInstanceId");
    openapiFields.add("keychainId");
    openapiFields.add("htlcId");
    openapiFields.add("web3SigningCredential");
    openapiFields.add("gas");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("htlcPackage");
    openapiRequiredFields.add("connectorInstanceId");
    openapiRequiredFields.add("keychainId");
    openapiRequiredFields.add("htlcId");
    openapiRequiredFields.add("web3SigningCredential");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CounterpartyHTLCRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CounterpartyHTLCRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CounterpartyHTLCRequest is not found in the empty JSON string", CounterpartyHTLCRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CounterpartyHTLCRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CounterpartyHTLCRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CounterpartyHTLCRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("connectorInstanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorInstanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorInstanceId").toString()));
      }
      if (!jsonObj.get("keychainId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keychainId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keychainId").toString()));
      }
      if (!jsonObj.get("htlcId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `htlcId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("htlcId").toString()));
      }
      // validate the required field `web3SigningCredential`
      Web3SigningCredential.validateJsonObject(jsonObj.getAsJsonObject("web3SigningCredential"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CounterpartyHTLCRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CounterpartyHTLCRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CounterpartyHTLCRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CounterpartyHTLCRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CounterpartyHTLCRequest>() {
           @Override
           public void write(JsonWriter out, CounterpartyHTLCRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CounterpartyHTLCRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CounterpartyHTLCRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CounterpartyHTLCRequest
  * @throws IOException if the JSON string is invalid with respect to CounterpartyHTLCRequest
  */
  public static CounterpartyHTLCRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CounterpartyHTLCRequest.class);
  }

 /**
  * Convert an instance of CounterpartyHTLCRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

