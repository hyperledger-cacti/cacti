name: SATP-Hermes Gateway CI/CD

# -----------------------------------------------------------------------------
# PROCESS OVERVIEW
#
# Purpose:
#   CI/CD pipeline for the SATP (Secure Asset Transfer Protocol) Hermes Gateway plugin.
#   It builds and tests the plugin, generates code artifacts (protobuf, OpenAPI, Solidity),
#   validates code quality, produces Docker images and (on push) publishes them to registries.
#
# Triggers:
#   - push: branches [main, satp-dev, satp-stg]
#   - pull_request: branches [main, satp-dev, satp-stg]
#
# High-level job flow and intent:
#   1) build-satp
#      - Installs dependencies, runs minimal configure/build for the SATP plugin.
#      - Uploads build artifacts and yarn caches for downstream jobs.
#      - Runs on both push and pull_request because the workflow triggers include both events
#        and the job has no job-level `if` that restricts it.
#
#   2) lint-satp
#      - Runs ESLint, OpenAPI linting and protobuf linting for the SATP plugin.
#      - Depends on build-satp. Runs on both push and pull_request (no restrictive `if`).
#      - Fails the workflow if linting produces version-control side-effects (files changed).
#
#   3) codegen-satp
#      - Generates protobuf artifacts, OpenAPI SDKs and Solidity ABIs.
#      - Depends on build-satp and lint-satp; runs after them on both push and pull_request.
#      - Uploads generated artifacts for tests and downstream jobs.
#
#   4) Test jobs (unit + multiple integration scenarios)
#      - run-satp-tests-unit
#      - run-satp-tests-integration-bridge
#      - run-satp-tests-integration-oracle
#      - run-satp-tests-integration-gateway
#      - run-satp-tests-integration-docker
#      - run-satp-tests-integration-cbdc
 #      - All test jobs depend on build-satp and codegen-satp when declared.
 #      - These jobs run on both push and pull_request events (trigger-level control).
 #      - IMPORTANT: Test jobs are configured to upload JUnit reports and coverage artifacts
 #        even if the test runner fails; the uploads are guarded with `if: always()` so
 #        artifacts are available for debugging. Each test job also runs individual test 
 #        reporting with fail-on-error: true, so the job will fail if any tests fail.
#
 #   5) set-docker-tags
#      - Computes image tags and version strings (tag_suffix, tag_version, dockerhub/ghcr image names).
#      - SATP Tag Generation Process:
#        * Default Development Mode: Creates date-based dev tags for all branches
#          - Format: YYYY-MM-DD-dev-{git_short_hash} (e.g., "2025-09-16-dev-abc1234")
#          - All branches (main, satp-dev, satp-stg) use same dev tag format
#          - No 'latest' tag in development mode to avoid overriding stable releases
#        * Release Mode: Activated via workflow_dispatch with is_release=true
#          - Uses package.json version as the main tag (e.g., "0.0.1-beta")
#          - Includes 'latest' tag to mark as the current stable release
#          - Intended for official releases and deployments
#        * Creates standardized image names:
#          - Docker Hub: hyperledger/satp-hermes-gateway
#          - GHCR: ghcr.io/hyperledger/satp-hermes-gateway
#        * Outputs tag variables for consumption by downstream publish jobs
#      - Manual Release Creation: Use 'create-release-version.yaml' workflow for official releases
#        * Provides a GitHub UI button for creating releases
#        * Validates version format and runs comprehensive tests
#        * Creates GitHub releases with proper tagging and Docker image publishing
#      - NOTE: in this workflow this job is conditional and will only run on push events
#        to the release branches (main, satp-dev, satp-stg). Because of that, any jobs that
#        `needs` set-docker-tags will be skipped when the job is not eligible.
#      - Tag Propagation: The generated tags flow to Docker images through job outputs:
#        set-docker-tags.outputs.tag_version → publish jobs → Docker image tags
#
#   6) build-satp-docker
#      - Builds a docker image (cacheable) for the SATP gateway using Buildx.
#      - This job builds the image for both push and PR events but does not push to registries.
#      - Uses GitHub Actions cache (type=gha) for efficient builds across workflow runs.
#      - The cache-from: type=gha leverages GitHub's Actions cache service to import build cache layers,
#        significantly speeding up builds by reusing previously built layers and dependencies.
#
#   7) publish-satp-images (sub-jobs running in parallel)
#      - publish-satp-image-ghcr: Publishes Docker image to GitHub Container Registry (GHCR)
#        using the built-in GITHUB_TOKEN for authentication.
#      - publish-satp-image-dockerhub: Publishes Docker image to Docker Hub
#        using repository secrets DOCKERHUB_USERNAME and DOCKERHUB_PAT.
#      - Both sub-jobs run in parallel on push events to release branches for faster deployment.
#      - Each sub-job builds and pushes directly with cache-from: type=gha for efficiency.
#
#   8) create-github-release (release mode only, manually triggered)
#      - Creates official GitHub releases when workflow is triggered manually with is_release=true
#      - Validates version format and generates comprehensive release notes
#      - Includes Docker image pull commands and release metadata
#      - Automatically determines if release is prerelease based on version (alpha/beta/rc)
#
# Conditions and secrets required for registry pushes:
#   - Docker Hub publish job requires repository secrets: DOCKERHUB_USERNAME, DOCKERHUB_PAT
#   - GitHub Container Registry jobs use the built-in GITHUB_TOKEN (no custom secrets needed)
#   - When running on pull_request events (especially from forks), custom secrets are not available.
#     The workflow avoids attempting registry logins/pushes on PRs by gating jobs/steps.
#   - Both publish jobs (GHCR and Docker Hub) run in parallel on push events for faster deployment.
#
# Artifacts published by jobs (names to reference):
#   - satp-hermes-build-output: build outputs (dist)
#   - satp-hermes-yarn-cache: cached .yarn directory (fallback to package-specific .yarn)
#   - satp-hermes-generated-protobuf: generated protobuf types
#   - satp-hermes-generated-openapi: bundled OpenAPI YAML/JSON and generated TS SDK
#   - satp-hermes-generated-solidity: generated solidity artifacts/ABIs
#   - satp-unit-junit-report, satp-integration-junit-report-*: JUnit test reports
#   - coverage-reports-satp-hermes: coverage artifacts (uploaded by tests when present)

# Notes and recommended practices:
#   - The workflow's trigger includes both `push` and `pull_request` for the release branches.
#     Job-level `if` filters are used to prevent secret-dependent steps (registry login/push)
#     from running on pull requests.
#   - If you want PR builds to also produce Docker images (for validation) without pushing,
#     modify `build-satp-docker` to allow PRs and set the docker-build action's `push:` to
#     `${{ github.event_name == 'push' }}` so that images are built but not pushed when
#     `github.event_name == 'pull_request'`.
#   - Keep secrets out of PR logs and avoid login steps for PRs from forks.
# Mapping of job -> run condition summary:
#   - build-satp: runs on push and pull_request (trigger-level)
#   - lint-satp: runs after build-satp (both events)
#   - codegen-satp: needs [build-satp, lint-satp] (both events)
#   - run-*-tests: run on both events (depend on build+codegen), fail if any tests fail
#   - set-docker-tags: runs only on push to release branches (job-level `if`)
#   - build-satp-docker: runs on both push and PR events (builds only, no push)
#   - publish-satp-image-ghcr: runs only on push to release branches (stage 7a - GHCR publishing)
#   - publish-satp-image-dockerhub: runs only on push to release branches (stage 7b - Docker Hub publishing)
#
# Change log for maintainers:
#   - Keep this documentation in sync with any future conditional changes to `if:` expressions
#     for the docker-related jobs. The documentation intentionally calls out where to
#     adjust behavior if you want PR-build-only images (no push) vs push-on-push.
# -----------------------------------------------------------------------------

# Continuous Integration pipeline for the SATP (Secure Asset Transfer Protocol) Hermes Gateway.
# This workflow orchestrates a comprehensive build, test, and deployment process with dual tagging modes:
# 
# DEVELOPMENT MODE (Default):
# - Triggered by push/PR events on release branches
# - Creates date-based development tags (YYYY-MM-DD-{env}-{hash})
# - Builds, tests, and publishes development images without affecting 'latest' tag
#
# RELEASE MODE:
# - Triggered manually via workflow_dispatch with is_release=true
# - Uses package.json version for release tags (e.g., 0.0.1-beta)
# - Updates 'latest' tag to point to new release
# - Additional options: custom version, branch selection, test skipping
# - Creates GitHub release with changelog and Docker image information
#
# Core Pipeline Features:
# - Builds all monorepo dependencies and generates protocol artifacts (protobuf, OpenAPI, Solidity)
# - Runs comprehensive test suites including unit tests and integration tests across multiple scenarios
# - Validates code quality through linting and static analysis
# - Creates deployable Docker images and publishes them to container registries
# - Supports multiple deployment environments (main, dev, staging) with appropriate tagging

permissions:
  contents: write  # Required for test result publishing
  checks: write    # Required for test result reports
  packages: write  # Required for publishing to GitHub Container Registry

env:
  NODEJS_VERSION: v22.18.0

on:
  pull_request:
    branches: [main, satp-dev, satp-stg]
  push:
    branches: [main, satp-dev, satp-stg]
  workflow_dispatch:
    inputs:
      is_release:
        description: 'Create release version using package.json version'
        required: false
        default: false
        type: boolean
      release_branch:
        description: 'Branch to create release from (for manual releases)'
        required: false
        default: 'main'
        type: choice
        options:
          - main
          - satp-stg
          - satp-dev
      custom_version:
        description: 'Custom version tag (leave empty to use package.json version)'
        required: false
        type: string
      skip_tests:
        description: 'Skip test execution (for emergency releases only)'
        required: false
        default: false
        type: boolean

jobs:
  build-satp:
    runs-on:
      group: cacti-default
      labels: [cacti-large]
    continue-on-error: false
    env:
      # Disable full build to focus on SATP-specific components
      FULL_BUILD_DISABLED: true
      TOOLS_VALIDATE_BUNDLE_NAMES_DISABLED: true
      CUSTOM_CHECKS_DISABLED: true
      CONFIGURE_DISABLED: false
      CHECK_WORK_TREE_STATUS_DISABLED: true
    steps:
      # Install Cacti pre-requisites
      - name: Use Node.js
        uses: actions/setup-node@v4.0.3
        with:
          node-version: ${{ env.NODEJS_VERSION }}

      - uses: actions/checkout@v4
        with:
          submodules: recursive
  
      - id: yarn-cache
        name: Initialize Yarn Cache
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-yarn-${{ hashFiles('./yarn.lock') }}
          path: ./.yarn/
          restore-keys: |
            ${{ runner.os }}-yarn-${{ hashFiles('./yarn.lock') }}

      - name: Set working directory
        run: cd packages/cactus-plugin-satp-hermes && pwd            

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Install dependencies
        run: yarn install

      - name: Configure
        run: yarn configure

      - name: Build bundle
        run: yarn lerna run build:bundle --scope=@hyperledger/cactus-plugin-satp-hermes

      # Upload build artifacts for reuse in other jobs
      - name: Upload build output
        uses: actions/upload-artifact@v4
        with:
          name: satp-hermes-build-output
          path: packages/cactus-plugin-satp-hermes/dist/

      - name: Upload .yarn cache
        id: upload_yarn_cache
        if: always()
        run: |
          echo "Listing .yarn/ content (root):"
          ls -la ./.yarn/ || echo "no .yarn directory"
          if [ -d ./.yarn ] && [ "$(ls -A ./.yarn 2>/dev/null)" != "" ]; then
            echo "Uploading .yarn cache artifact"
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "No yarn cache found, skipping upload"
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload .yarn cache artifact
        if: steps.upload_yarn_cache.outputs.found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: satp-hermes-yarn-cache
          path: ./.yarn/

      - name: Upload package .yarn cache as fallback
        id: upload_yarn_cache_package
        if: steps.upload_yarn_cache.outputs.found == 'false'
        run: |
          echo "Listing packages/cactus-plugin-satp-hermes/.yarn/ content:"
          ls -la packages/cactus-plugin-satp-hermes/.yarn/ || echo "no package .yarn directory"
          if [ -d packages/cactus-plugin-satp-hermes/.yarn ] && [ "$(ls -A packages/cactus-plugin-satp-hermes/.yarn 2>/dev/null)" != "" ]; then
            echo "Uploading package .yarn cache as fallback"
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "No package .yarn found, skipping upload"
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload package .yarn cache artifact (fallback)
        if: steps.upload_yarn_cache_package.outputs.found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: satp-hermes-yarn-cache
          path: packages/cactus-plugin-satp-hermes/.yarn/

  # Code generation job: generates protobuf, OpenAPI SDKs, and Solidity artifacts
  codegen-satp: 
    needs: [build-satp, lint-satp]
    runs-on:
      group: cacti-default
      labels: [cacti-large]
    continue-on-error: false
    env:
      FULL_BUILD_DISABLED: true
      TOOLS_VALIDATE_BUNDLE_NAMES_DISABLED: true
      CUSTOM_CHECKS_DISABLED: true
      CONFIGURE_DISABLED: false
      CHECK_WORK_TREE_STATUS_DISABLED: true
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # Install Cacti pre-requisites
      - name: Use Node.js
        uses: actions/setup-node@v4.0.3
        with:
          node-version: ${{ env.NODEJS_VERSION }}

      # Download build artifacts using reusable action
      - name: Download SATP build artifacts
        uses: ./.github/actions/satp-download-build-artifacts

      - name: Install dependencies
        run: yarn install

      - name: Set working directory
        run: cd packages/cactus-plugin-satp-hermes && pwd

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Generate protobuf files
        run: yarn workspace @hyperledger/cactus-plugin-satp-hermes codegen:proto

      - name: Generate OpenAPI SDKs
        run: |
          yarn workspace @hyperledger/cactus-plugin-satp-hermes bundle-openapi-yaml
          yarn workspace @hyperledger/cactus-plugin-satp-hermes bundle-openapi-json 
          yarn workspace @hyperledger/cactus-plugin-satp-hermes generate-sdk:typescript-axios-bol

      - name: Generate ABIs
        run: |
          yarn workspace @hyperledger/cactus-plugin-satp-hermes forge:build:all

      # Upload generated artifacts for reuse in other jobs
      - name: Upload generated protobuf files
        uses: actions/upload-artifact@v4
        with:
          name: satp-hermes-generated-protobuf
          path: packages/cactus-plugin-satp-hermes/src/main/typescript/generated/

      - name: Upload generated OpenAPI files
        uses: actions/upload-artifact@v4
        with:
          name: satp-hermes-generated-openapi
          path: |
            packages/cactus-plugin-satp-hermes/src/main/yml/bol/openapi-blo-bundled.yml
            packages/cactus-plugin-satp-hermes/src/main/json/openapi-blo-bundled.json
            packages/cactus-plugin-satp-hermes/src/main/typescript/generated/gateway-client/

      - name: Upload generated Solidity artifacts
        uses: actions/upload-artifact@v4
        with:
          name: satp-hermes-generated-solidity
          path: packages/cactus-plugin-satp-hermes/src/main/solidity/generated/
          
      - name: Show yarn build log if it exists
        if: always()
        run: |
          LOG_FILE=$(find /tmp -type f -name build.log | head -n 1)
          if [ -f "$LOG_FILE" ]; then
            echo "===== Build Log ====="
            cat "$LOG_FILE"
            echo "====================="
          else
            echo "No build log found."
          fi

  # Code quality validation: runs ESLint, OpenAPI validation, and protobuf linting
  lint-satp:
    needs: build-satp
    runs-on:
      group: cacti-default
      labels: [cacti-large]
    continue-on-error: false
    env:
      FULL_BUILD_DISABLED: true
      TOOLS_VALIDATE_BUNDLE_NAMES_DISABLED: true
      CUSTOM_CHECKS_DISABLED: true
      CONFIGURE_DISABLED: false
      CHECK_WORK_TREE_STATUS_DISABLED: true
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Use Node.js
        uses: actions/setup-node@v4.0.3
        with:
          node-version: ${{ env.NODEJS_VERSION }}

      - name: Download SATP build artifacts
        uses: ./.github/actions/satp-download-build-artifacts


      - name: Install dependencies
        run: yarn install

      - name: Set working directory
        run: cd packages/cactus-plugin-satp-hermes && pwd
      
      - run: git status --porcelain
      - run: git status --porcelain | wc -l

      - name: yarn lint (SATP-specific)
        run: yarn workspace @hyperledger/cactus-plugin-satp-hermes lint

      - name: Run additional SATP linting
        run: |
          yarn workspace @hyperledger/cactus-plugin-satp-hermes lint-code || echo "Linting completed with warnings" 
          yarn workspace @hyperledger/cactus-plugin-satp-hermes lint:oapi || echo "OpenAPI linting completed with warnings"
          yarn workspace @hyperledger/cactus-plugin-satp-hermes lint:protobuf || echo "Protobuf linting completed with warnings"
      
      - run: git status --porcelain
      - run: git status --porcelain | wc -l

      - name: Set env.GIT_INDEX_FILE_COUNT
        id: set_env_git_index_file_count
        run: |
            echo "GIT_INDEX_FILE_COUNT=$(git status --porcelain | wc -l)" >> "$GITHUB_ENV"

      - name: Print env.GIT_INDEX_FILE_COUNT
        id: print_env_git_index_file_count
        run: |
            echo "${{ env.GIT_INDEX_FILE_COUNT }}"
      - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
        id: set-result-git_index_file_count
        with:
          script: |
            const { GIT_INDEX_FILE_COUNT } = process.env;
            console.log(`env.GIT_INDEX_FILE_COUNT ${GIT_INDEX_FILE_COUNT}`);
            return parseInt(GIT_INDEX_FILE_COUNT, 10);
          result-encoding: string

      - name: Get result Git Index File Count
        id: get_result_git_index_file_count
        run: echo "${{steps.set-result-git_index_file_count.outputs.result}}"

      - name: Check Lint Side-effects
        if: ${{ steps.set-result-git_index_file_count.outputs.result != 0 }}
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with:
          script: |
            const failMsg = "yarn lint script produced version control " +
              "side-effects: source files have been changed by it that are " +
              "otherwise are under version control. " +
              "This means (99% of the time) that you need to run the " +
              "yarn lint script locally and then include the changes it " +
              "makes in your own commit when submitting your pull request.";
            core.setFailed(failMsg)
      
  # Test execution jobs: run unit and integration tests in parallel
  run-satp-tests-unit:
    needs: [build-satp, codegen-satp]
    if: github.event.inputs.skip_tests != 'true'
    runs-on:
      group: cacti-default
      labels: [cacti-large]
    env:
      FULL_BUILD_DISABLED: true
      JEST_TEST_RUNNER_DISABLED: false
      RUN_CODE_COVERAGE: "true"
      SATP_ENABLE_CRASH_RECOVERY: false
      SATP_LOG_LEVEL: DEBUG
      SATP_ENABLE_LOCAL_REPOSITORY: true
      SATP_ENABLE_REMOTE_REPOSITORY: false

    steps:
      - uses: actions/checkout@v4.1.7
      - name: Use Node.js ${{ env.NODEJS_VERSION }}
        uses: actions/setup-node@v4.0.2
        with:
          node-version: ${{ env.NODEJS_VERSION }}

      # Download build artifacts using reusable action
      - name: Download SATP build artifacts
        uses: ./.github/actions/satp-download-build-artifacts

      # Download generated artifacts
      - name: Download generated artifacts
        uses: ./.github/actions/satp-download-generated-artifacts

      - name: Install dependencies
        run: yarn install

      - name: Configure and build all packages
        run: yarn configure

      - name: Run SATP unit tests (with optional coverage)
        run: |
          set -euo pipefail
          if [ "${{ env.RUN_CODE_COVERAGE }}" = "true" ]; then
            echo "Running unit tests with coverage"
            yarn workspace @hyperledger/cactus-plugin-satp-hermes test:unit --coverage --coverageDirectory=./code-coverage-ts/satp-hermes || true
          else
            echo "Running unit tests without coverage"
            yarn workspace @hyperledger/cactus-plugin-satp-hermes test:unit
          fi

      - name: Upload SATP unit test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: satp-unit-junit-report-${{ github.job }}
          path: packages/cactus-plugin-satp-hermes/reports/junit/satp-hermes-tests-unit.xml

      - name: Check for SATP unit junit report
        id: check_unit_junit
        run: |
          if [ -f packages/cactus-plugin-satp-hermes/reports/junit/satp-hermes-tests-unit.xml ]; then
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Report SATP unit test results (annotate)
        if: always() && steps.check_unit_junit.outputs.found == 'true'
        uses: dorny/test-reporter@v1.9.1
        with:
          name: "SATP Unit Tests"
          path: packages/cactus-plugin-satp-hermes/reports/junit/satp-hermes-tests-unit.xml
          reporter: jest-junit
          list-tests: failed
          fail-on-error: true

      - name: Check for SATP unit coverage artifacts
        id: check_unit_coverage
        run: |
          if [ -d packages/cactus-plugin-satp-hermes/code-coverage-ts ] || [ -f packages/cactus-plugin-satp-hermes/coverage/coverage-final.json ]; then
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload SATP unit coverage (if present)
        if: always() && steps.check_unit_coverage.outputs.found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-satp-hermes-${{ github.job }}
          path: |
            packages/cactus-plugin-satp-hermes/code-coverage-ts/**/
      
  run-satp-tests-integration-bridge:
    needs: [build-satp, codegen-satp]
    if: github.event.inputs.skip_tests != 'true'
    runs-on:
      group: cacti-default
      labels: [cacti-large]
    env:
      FULL_BUILD_DISABLED: true
      JEST_TEST_RUNNER_DISABLED: false
      RUN_CODE_COVERAGE: "true"

      SATP_ENABLE_CRASH_RECOVERY: false
      SATP_LOG_LEVEL: DEBUG
      SATP_ENABLE_LOCAL_REPOSITORY: true
      SATP_ENABLE_REMOTE_REPOSITORY: false

    steps:
      - uses: actions/checkout@v4.1.7
      - name: Use Node.js ${{ env.NODEJS_VERSION }}
        uses: actions/setup-node@v4.0.2
        with:
          node-version: ${{ env.NODEJS_VERSION }}

      # Download build artifacts using reusable action
      - name: Download SATP build artifacts
        uses: ./.github/actions/satp-download-build-artifacts

      # Download generated artifacts
      - name: Download generated artifacts
        uses: ./.github/actions/satp-download-generated-artifacts

      - name: Install dependencies
        run: yarn install
      
      - run: ./tools/ci-env-clean-up.sh   

      - name: Configure and build all packages
        run: yarn configure

      - name: Run SATP integration tests (bridge) (with optional coverage)
        run: |
          set -euo pipefail
          if [ "${{ env.RUN_CODE_COVERAGE }}" = "true" ]; then
            echo "Running integration bridge tests with coverage"
            yarn workspace @hyperledger/cactus-plugin-satp-hermes test:integration:bridge --coverage --coverageDirectory=./code-coverage-ts/satp-hermes-integration-bridge || true
          else
            echo "Running integration bridge tests without coverage"
            yarn workspace @hyperledger/cactus-plugin-satp-hermes test:integration:bridge
          fi

      - name: Upload SATP integration test report - bridge
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: satp-integration-junit-report-bridge-${{ github.job }}
          path: packages/cactus-plugin-satp-hermes/reports/junit/satp-hermes-tests-integration-bridge.xml

      - name: Check for SATP bridge junit report
        id: check_bridge_junit
        run: |
          if [ -f packages/cactus-plugin-satp-hermes/reports/junit/satp-hermes-tests-integration-bridge.xml ]; then
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Report SATP integration (bridge) test results (annotate)
        if: always() && steps.check_bridge_junit.outputs.found == 'true'
        uses: dorny/test-reporter@v1.9.1
        with:
          name: "SATP Integration Tests (Bridge)"
          path: packages/cactus-plugin-satp-hermes/reports/junit/satp-hermes-tests-integration-bridge.xml
          reporter: jest-junit
          list-tests: failed
          fail-on-error: true

      - name: Check for SATP bridge integration coverage artifacts
        id: check_bridge_coverage
        run: |
          if [ -d packages/cactus-plugin-satp-hermes/code-coverage-ts ] || [ -f packages/cactus-plugin-satp-hermes/coverage/coverage-final.json ]; then
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload SATP integration coverage - bridge (if present)
        if: always() && steps.check_bridge_coverage.outputs.found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: SATP-Integration-Tests-Bridge-${{ github.job }}
          path: packages/cactus-plugin-satp-hermes/reports/junit/satp-hermes-tests-integration-bridge.xml

  run-satp-tests-integration-oracle:
    needs: [build-satp, codegen-satp]
    if: github.event.inputs.skip_tests != 'true'
    runs-on:
      group: cacti-default
      labels: [cacti-large]
    env:
      FULL_BUILD_DISABLED: true
      JEST_TEST_RUNNER_DISABLED: false

      RUN_CODE_COVERAGE: "true"

      # SATP specific configuration
      SATP_ENABLE_CRASH_RECOVERY: false
      SATP_LOG_LEVEL: DEBUG
      SATP_ENABLE_LOCAL_REPOSITORY: true
      SATP_ENABLE_REMOTE_REPOSITORY: false

    steps:
      - uses: actions/checkout@v4.1.7
      - name: Use Node.js ${{ env.NODEJS_VERSION }}
        uses: actions/setup-node@v4.0.2
        with:
          node-version: ${{ env.NODEJS_VERSION }}

      # Download build artifacts using reusable action
      - name: Download SATP build artifacts
        uses: ./.github/actions/satp-download-build-artifacts

      # Download generated artifacts
      - name: Download generated artifacts
        uses: ./.github/actions/satp-download-generated-artifacts

      - name: Install dependencies
        run: yarn install
      
      - run: ./tools/ci-env-clean-up.sh

      - name: Configure and build all packages
        run: yarn configure

      - name: Run SATP integration tests (oracle) (with optional coverage)
        run: |
          set -euo pipefail
          if [ "${{ env.RUN_CODE_COVERAGE }}" = "true" ]; then
            echo "Running integration oracle tests with coverage"
            yarn workspace @hyperledger/cactus-plugin-satp-hermes test:integration:oracle --coverage --coverageDirectory=./code-coverage-ts/satp-hermes-integration-oracle || true
          else
            echo "Running integration oracle tests without coverage"
            yarn workspace @hyperledger/cactus-plugin-satp-hermes test:integration:oracle
          fi

      - name: Upload SATP integration test report - oracle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: satp-integration-junit-report-oracle-${{ github.job }}
          path: packages/cactus-plugin-satp-hermes/reports/junit/satp-hermes-tests-integration-oracle.xml

      - name: Check for SATP oracle junit report
        id: check_oracle_junit
        run: |
          if [ -f packages/cactus-plugin-satp-hermes/reports/junit/satp-hermes-tests-integration-oracle.xml ]; then
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Report SATP integration (oracle) test results (annotate)
        if: always() && steps.check_oracle_junit.outputs.found == 'true'
        uses: dorny/test-reporter@v1.9.1
        with:
          name: "SATP Integration Tests (Oracle)"
          path: packages/cactus-plugin-satp-hermes/reports/junit/satp-hermes-tests-integration-oracle.xml
          reporter: jest-junit
          list-tests: failed
          fail-on-error: true

      - name: Check for SATP oracle integration coverage artifacts
        id: check_oracle_coverage
        run: |
          if [ -d packages/cactus-plugin-satp-hermes/code-coverage-ts ] || [ -f packages/cactus-plugin-satp-hermes/coverage/coverage-final.json ]; then
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload SATP integration coverage - oracle (if present)
        if: always() && steps.check_oracle_coverage.outputs.found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-satp-hermes-${{ github.job }}
          path: |
            packages/cactus-plugin-satp-hermes/code-coverage-ts/**/
            packages/cactus-plugin-satp-hermes/coverage/**/
          # list-suites: failed

  run-satp-tests-integration-gateway:
    needs: [build-satp, codegen-satp]
    if: github.event.inputs.skip_tests != 'true'
    runs-on:
      group: cacti-default
      labels: [cacti-large]
    env:
      FULL_BUILD_DISABLED: true
      JEST_TEST_RUNNER_DISABLED: false

      RUN_CODE_COVERAGE: "true"

      # SATP specific configuration
      SATP_ENABLE_CRASH_RECOVERY: false
      SATP_LOG_LEVEL: DEBUG
      SATP_ENABLE_LOCAL_REPOSITORY: true
      SATP_ENABLE_REMOTE_REPOSITORY: false

    steps:
      - uses: actions/checkout@v4.1.7
      - name: Use Node.js ${{ env.NODEJS_VERSION }}
        uses: actions/setup-node@v4.0.2
        with:
          node-version: ${{ env.NODEJS_VERSION }}

      # Download build artifacts using reusable action
      - name: Download SATP build artifacts
        uses: ./.github/actions/satp-download-build-artifacts

      # Download generated artifacts
      - name: Download generated artifacts
        uses: ./.github/actions/satp-download-generated-artifacts

      - name: Install dependencies
        run: yarn install
      
      - run: ./tools/ci-env-clean-up.sh

      - name: Configure and build all packages
        run: yarn configure

      - name: Run SATP integration tests (gateway) (with optional coverage)
        run: |
          set -euo pipefail
          if [ "${{ env.RUN_CODE_COVERAGE }}" = "true" ]; then
            echo "Running integration gateway tests with coverage"
            yarn workspace @hyperledger/cactus-plugin-satp-hermes test:integration:gateway --coverage --coverageDirectory=./code-coverage-ts/satp-hermes-integration-gateway || true
          else
            echo "Running integration gateway tests without coverage"
            yarn workspace @hyperledger/cactus-plugin-satp-hermes test:integration:gateway
          fi

      - name: Upload SATP integration test report - gateway
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: satp-integration-junit-report-gateway-${{ github.job }}
          path: packages/cactus-plugin-satp-hermes/reports/junit/satp-hermes-tests-integration-gateway.xml

      - name: Check for SATP gateway junit report
        id: check_gateway_junit
        run: |
          if [ -f packages/cactus-plugin-satp-hermes/reports/junit/satp-hermes-tests-integration-gateway.xml ]; then
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Report SATP integration (gateway) test results (annotate)
        if: always() && steps.check_gateway_junit.outputs.found == 'true'
        uses: dorny/test-reporter@v1.9.1
        with:
          name: "SATP Integration Tests (Gateway)"
          path: packages/cactus-plugin-satp-hermes/reports/junit/satp-hermes-tests-integration-gateway.xml
          reporter: jest-junit
          list-tests: failed
          fail-on-error: true

      - name: Check for SATP gateway integration coverage artifacts
        id: check_gateway_coverage
        run: |
          if [ -d packages/cactus-plugin-satp-hermes/code-coverage-ts ] || [ -f packages/cactus-plugin-satp-hermes/coverage/coverage-final.json ]; then
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload SATP integration coverage - gateway (if present)
        if: always() && steps.check_gateway_coverage.outputs.found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-satp-hermes-${{ github.job }}
          path: |
            packages/cactus-plugin-satp-hermes/code-coverage-ts/**/

  # TODO change this job to run docker tests with docker version built on current pipeline
  # this can be achieved by allowing the docker tests to receive an ENV variable with docker tag (uses defaults)
  run-satp-tests-integration-docker:
    needs: [build-satp, codegen-satp]
    if: github.event.inputs.skip_tests != 'true'
    runs-on:
      group: cacti-default
      labels: [cacti-large]
    env:
      FULL_BUILD_DISABLED: true
      JEST_TEST_RUNNER_DISABLED: false

      RUN_CODE_COVERAGE: "true"

      # SATP specific configuration
      SATP_ENABLE_CRASH_RECOVERY: false
      SATP_LOG_LEVEL: DEBUG
      SATP_ENABLE_LOCAL_REPOSITORY: true
      SATP_ENABLE_REMOTE_REPOSITORY: false

    steps:
      - uses: actions/checkout@v4.1.7
      - name: Use Node.js ${{ env.NODEJS_VERSION }}
        uses: actions/setup-node@v4.0.2
        with:
          node-version: ${{ env.NODEJS_VERSION }}

      # Download build artifacts using reusable action
      - name: Download SATP build artifacts
        uses: ./.github/actions/satp-download-build-artifacts

      # Download generated artifacts
      - name: Download generated artifacts
        uses: ./.github/actions/satp-download-generated-artifacts

      - name: Install dependencies
        run: yarn install
      
      - run: ./tools/ci-env-clean-up.sh

      - name: Configure and build all packages
        run: yarn configure

      - name: Run SATP integration tests (docker) (with optional coverage)
        run: |
          set -euo pipefail
          if [ "${{ env.RUN_CODE_COVERAGE }}" = "true" ]; then
            echo "Running integration docker tests with coverage"
            yarn workspace @hyperledger/cactus-plugin-satp-hermes test:integration:docker --coverage --coverageDirectory=./code-coverage-ts/satp-hermes-integration-docker || true
          else
            echo "Running integration docker tests without coverage"
            yarn workspace @hyperledger/cactus-plugin-satp-hermes test:integration:docker
          fi

      - name: Upload SATP integration test report - docker
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: satp-integration-junit-report-docker-${{ github.job }}
          path: packages/cactus-plugin-satp-hermes/reports/junit/satp-hermes-tests-integration-docker.xml

      - name: Check for SATP docker junit report
        id: check_docker_junit
        run: |
          if [ -f packages/cactus-plugin-satp-hermes/reports/junit/satp-hermes-tests-integration-docker.xml ]; then
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Report SATP integration (docker) test results (annotate)
        if: always() && steps.check_docker_junit.outputs.found == 'true'
        uses: dorny/test-reporter@v1.9.1
        with:
          name: "SATP Integration Tests (Docker)"
          path: packages/cactus-plugin-satp-hermes/reports/junit/satp-hermes-tests-integration-docker.xml
          reporter: jest-junit
          list-tests: failed
          fail-on-error: true

      - name: Check for SATP docker integration coverage artifacts
        id: check_docker_coverage
        run: |
          if [ -d packages/cactus-plugin-satp-hermes/code-coverage-ts ] || [ -f packages/cactus-plugin-satp-hermes/coverage/coverage-final.json ]; then
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload SATP integration coverage - docker (always attempt)
        if: always()
        run: |
          if [ -d packages/cactus-plugin-satp-hermes/code-coverage-ts ] || [ -f packages/cactus-plugin-satp-hermes/coverage/coverage-final.json ]; then
            echo "Uploading coverage artifacts"
            mkdir -p ./coverage-upload || true
            cp -r packages/cactus-plugin-satp-hermes/code-coverage-ts ./coverage-upload/ 2>/dev/null || true
            cp -r packages/cactus-plugin-satp-hermes/coverage ./coverage-upload/ 2>/dev/null || true
            cp -r packages/cactus-plugin-satp-hermes/reports/junit ./coverage-upload/ 2>/dev/null || true
          else
            echo "No coverage artifacts found to upload"
          fi

      - name: Upload SATP integration coverage - docker artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-satp-hermes-${{ github.job }}
          path: ./coverage-upload/

  run-satp-tests-integration-cbdc:
    needs: [build-satp, codegen-satp]
    if: github.event.inputs.skip_tests != 'true'
    runs-on:
      group: cacti-default
      labels: [cacti-large]
    env:
      FULL_BUILD_DISABLED: true
      JEST_TEST_RUNNER_DISABLED: false

      RUN_CODE_COVERAGE: "true"

      # SATP specific configuration
      SATP_ENABLE_CRASH_RECOVERY: false
      SATP_LOG_LEVEL: DEBUG
      SATP_ENABLE_LOCAL_REPOSITORY: true
      SATP_ENABLE_REMOTE_REPOSITORY: false

    steps:
      - uses: actions/checkout@v4.1.7
      - name: Use Node.js ${{ env.NODEJS_VERSION }}
        uses: actions/setup-node@v4.0.2
        with:
          node-version: ${{ env.NODEJS_VERSION }}

      # Download build artifacts using reusable action
      - name: Download SATP build artifacts
        uses: ./.github/actions/satp-download-build-artifacts

      # Download generated artifacts
      - name: Download generated artifacts
        uses: ./.github/actions/satp-download-generated-artifacts

      - name: Install dependencies
        run: yarn install
      
      - run: ./tools/ci-env-clean-up.sh

      - name: Configure and build all packages
        run: yarn configure

      - name: Run CBDC integration tests (with optional coverage)
        run: |
          set -euo pipefail
          if [ "${{ env.RUN_CODE_COVERAGE }}" = "true" ]; then
            echo "Running CBDC integration tests with coverage"
            yarn workspace @hyperledger/cactus-example-cbdc-bridging-backend test:integration --coverage --coverageDirectory=./code-coverage-ts/satp-hermes-cbdc || true
          else
            echo "Running CBDC integration tests without coverage"
            yarn workspace @hyperledger/cactus-example-cbdc-bridging-backend test:integration
          fi

      - name: Upload CBDC integration test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cbdc-integration-junit-report-${{ github.job }}
          path: examples/cactus-example-cbdc-bridging-backend/reports/junit/cbdc-bridging-tests-integration.xml

      - name: Check for CBDC junit report
        id: check_cbdc_junit
        run: |
          if [ -f examples/cactus-example-cbdc-bridging-backend/reports/junit/cbdc-bridging-tests-integration.xml ]; then
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Report CBDC integration test results (annotate)
        if: always() && steps.check_cbdc_junit.outputs.found == 'true'
        uses: dorny/test-reporter@v1.9.1
        with:
          name: "CBDC Integration Tests"
          path: examples/cactus-example-cbdc-bridging-backend/reports/junit/cbdc-bridging-tests-integration.xml
          reporter: jest-junit
          list-tests: failed
          fail-on-error: true

      - name: Check for CBDC integration coverage artifacts
        id: check_cbdc_coverage
        run: |
          if [ -d packages/cactus-plugin-satp-hermes/code-coverage-ts ] || [ -f packages/cactus-plugin-satp-hermes/coverage/coverage-final.json ]; then
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload CBDC integration coverage (if present)
        if: always() && steps.check_cbdc_coverage.outputs.found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-satp-hermes-${{ github.job }}
          path: |
            packages/cactus-plugin-satp-hermes/code-coverage-ts/**/

  # Set Docker tags based on branch and commit information
  set-docker-tags:
    needs: [build-satp, run-satp-tests-unit, run-satp-tests-integration-bridge, run-satp-tests-integration-oracle, run-satp-tests-integration-gateway, run-satp-tests-integration-cbdc, run-satp-tests-integration-docker]
    # Handle conditional test dependencies - run if tests pass OR if tests are skipped in release mode
    if: |
      always() && (
        (github.event.inputs.skip_tests == 'true' && github.event.inputs.is_release == 'true') ||
        (needs.run-satp-tests-unit.result == 'success' && 
         needs.run-satp-tests-integration-bridge.result == 'success' && 
         needs.run-satp-tests-integration-oracle.result == 'success' && 
         needs.run-satp-tests-integration-gateway.result == 'success' && 
         needs.run-satp-tests-integration-cbdc.result == 'success' && 
         needs.run-satp-tests-integration-docker.result == 'success') ||
        (github.event.inputs.skip_tests != 'true' && 
         (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/satp-dev' || github.ref == 'refs/heads/satp-stg')) ||
         (github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'satp-dev' || github.base_ref == 'satp-stg')) ||
         github.event_name == 'workflow_dispatch')
      )
    runs-on:
      group: cacti-default
      labels: [cacti-large]
    outputs:
      package_version: ${{ steps.set_tags.outputs.package_version }}
      tag_suffix: ${{ steps.set_tags.outputs.tag_suffix }}
      tag_version: ${{ steps.set_tags.outputs.tag_version }}
      dockerhub_image: ${{ steps.set_tags.outputs.dockerhub_image }}
      ghcr_image: ${{ steps.set_tags.outputs.ghcr_image }}
      is_release: ${{ steps.set_tags.outputs.is_release }}
    steps:
      - uses: actions/checkout@v4.1.7  
      - name: Set image tags
        id: set_tags
        run: |
          # Extract SATP package version from package.json
          PACKAGE_VERSION=$(node -e "console.log(require('./packages/cactus-plugin-satp-hermes/package.json').version)")
          
          # Check if this is a release build (manual trigger with is_release=true)
          IS_RELEASE="${{ github.event.inputs.is_release }}"
          if [ "$IS_RELEASE" = "true" ]; then
            # Release mode: Use package.json version or custom version as the main tag
            if [ -n "${{ github.event.inputs.custom_version }}" ]; then
              TAG_VERSION="${{ github.event.inputs.custom_version }}"
              echo "Building release version with custom version: ${{ github.event.inputs.custom_version }}"
            else
              TAG_VERSION="${PACKAGE_VERSION}"
              echo "Building release version with package.json version: ${PACKAGE_VERSION}"
            fi
            TAG_SUFFIX="release"
          else
            # Development mode: Use date-based development tags for all branches
            TAG_SUFFIX="dev"
            TAG_VERSION="$(date -u +"%Y-%m-%d")-${TAG_SUFFIX}-$(git rev-parse --short HEAD)"
            echo "Building development version: ${TAG_VERSION}"
          fi
          
          # Standardized image names for both registries
          BASE_IMAGE_NAME="hyperledger/satp-hermes-gateway"
          DOCKERHUB_IMAGE="${BASE_IMAGE_NAME}"
          GHCR_IMAGE="${BASE_IMAGE_NAME}"
          
          {
            echo "package_version=${PACKAGE_VERSION}"
            echo "tag_suffix=${TAG_SUFFIX}"
            echo "tag_version=${TAG_VERSION}"
            echo "dockerhub_image=${DOCKERHUB_IMAGE}"
            echo "ghcr_image=${GHCR_IMAGE}"
            echo "is_release=${IS_RELEASE:-false}"
          } >> "$GITHUB_OUTPUT"

      - name: Debug Build Info
        run: |
          PACKAGE_VERSION=$(node -e "console.log(require('./packages/cactus-plugin-satp-hermes/package.json').version)")
          {
            echo "Debug: Current ref = ${{ github.ref }}"
            echo "Debug: Event name = ${{ github.event_name }}"
            echo "Debug: GitHub workspace = ${{ github.workspace }}"
            echo "Debug: Repository = ${{ github.repository }}"
            echo "Debug: Building for tag version = ${{ steps.set_tags.outputs.tag_version }}"
            echo "Debug: Building for dockerhub image = ${{ steps.set_tags.outputs.dockerhub_image }}"
            echo "Debug: Node.js version = ${{ env.NODEJS_VERSION }}"
            echo "Debug: Package version = ${PACKAGE_VERSION}"
            echo "Debug: Commit hash = $(git rev-parse --short HEAD)"
          }

  # Build Docker image once for caching and reuse by push jobs
  build-satp-docker:
    needs: [build-satp, set-docker-tags, run-satp-tests-unit, run-satp-tests-integration-bridge, run-satp-tests-integration-oracle, run-satp-tests-integration-gateway, run-satp-tests-integration-cbdc, run-satp-tests-integration-docker]
    # Build Docker images for pushes, PRs targeting the release branches, and manual workflow dispatch.
    # This job only builds, it does not push to registries.
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/satp-dev' || github.ref == 'refs/heads/satp-stg')) || (github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'satp-dev' || github.base_ref == 'satp-stg')) || github.event_name == 'workflow_dispatch'
    runs-on:
      group: cacti-default
      labels: [cacti-large]
    steps:
      - uses: actions/checkout@v4.1.7

      - name: Use Node.js ${{ env.NODEJS_VERSION }}
        uses: actions/setup-node@v4.0.3
        with:
          node-version: ${{ env.NODEJS_VERSION }}

      # Download build artifacts using reusable action
      - name: Download SATP build artifacts
        uses: ./.github/actions/satp-download-build-artifacts

      - name: Configure and ensure build artifacts
        run: |
          yarn install
          yarn configure
          yarn lerna run build --scope=@hyperledger/cactus-plugin-satp-hermes

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (no push)
        uses: docker/build-push-action@v5
        with:
          context: ./packages/cactus-plugin-satp-hermes/
          file: ./packages/cactus-plugin-satp-hermes/satp-hermes-gateway.Dockerfile
          # Build only, no push to registries
          push: false
          tags: |
            ${{ needs.set-docker-tags.outputs.dockerhub_image }}:${{ needs.set-docker-tags.outputs.tag_version }},
            ${{ needs.set-docker-tags.outputs.ghcr_image }}:${{ needs.set-docker-tags.outputs.tag_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =============================================================================
  # STAGE 7: PUBLISH DOCKER IMAGES
  # =============================================================================
  # The following two jobs run in parallel on push events to release branches
  # for faster deployment. Both jobs build and push Docker images directly with
  # GitHub Actions cache (type=gha) for maximum efficiency.
  #
# TAGGING STRATEGY:
# This workflow supports two distinct tagging modes:
#
# 1. DEVELOPMENT MODE (Default):
#    - Triggered by: push events and pull requests
#    - All Branches: Date-based format YYYY-MM-DD-dev-{git_hash}
#    - Examples: "2025-09-16-dev-abc1234" (all branches use same format)
#    - Latest Tag: NOT applied (preserves stable release as latest)
#    - Use Case: Continuous integration, testing, development builds
#
# 2. RELEASE MODE:
#    - Triggered by: workflow_dispatch with is_release=true
#    - Tag Format: Uses package.json version (e.g., "0.0.1-beta", "1.2.3")
#    - Latest Tag: APPLIED (marks as current stable release)
#    - Use Case: Official releases, stable deployments
#    - Alternative: Use dedicated 'create-release-version.yaml' workflow for full release process
#
# - Both registries use the same base image name: hyperledger/satp-hermes-gateway
# - Each image gets appropriate tags based on the mode:
#   * Development: Only version tag (no latest override)
#   * Release: Both version tag AND latest tag
# - Tag propagation flow:
#   Git commit → set-docker-tags → job outputs → publish jobs → Docker registries
# - Registries:
#   * Docker Hub: hyperledger/satp-hermes-gateway:{version|latest}
#   * GHCR: ghcr.io/hyperledger/satp-hermes-gateway:{version|latest}
#
# MANUAL RELEASE WORKFLOW:
# The workflow includes integrated release functionality accessible via GitHub Actions UI:
# 1. Navigate to GitHub Actions → "SATP-Hermes Gateway CI/CD"
# 2. Click "Run workflow" and configure release options:
#    - Set is_release=true for release mode
#    - Select branch (main/satp-stg/satp-dev)  
#    - Optionally specify custom version or use package.json version
#    - Optionally skip tests for emergency releases
# 3. Workflow creates GitHub release with proper tags and Docker image publishing
# 4. Stage 8 job handles GitHub release creation with comprehensive release notes  # Stage 7a: Publish Docker image to GitHub Container Registry (GHCR)
  publish-satp-image-ghcr:
    needs: [build-satp, build-satp-docker, set-docker-tags, run-satp-tests-unit, run-satp-tests-integration-bridge, run-satp-tests-integration-oracle, run-satp-tests-integration-gateway, run-satp-tests-integration-cbdc, run-satp-tests-integration-docker]
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/satp-dev' || github.ref == 'refs/heads/satp-stg')) || github.event_name == 'workflow_dispatch'
    runs-on:
      group: cacti-default
      labels: [cacti-large]
    steps:
      - uses: actions/checkout@v4.1.7

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push to GHCR (Release)
        if: needs.set-docker-tags.outputs.is_release == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./packages/cactus-plugin-satp-hermes/
          file: ./packages/cactus-plugin-satp-hermes/satp-hermes-gateway.Dockerfile
          push: true
          tags: |
            ghcr.io/${{ needs.set-docker-tags.outputs.ghcr_image }}:${{ needs.set-docker-tags.outputs.tag_version }}
            ghcr.io/${{ needs.set-docker-tags.outputs.ghcr_image }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push to GHCR (Development)
        if: needs.set-docker-tags.outputs.is_release != 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./packages/cactus-plugin-satp-hermes/
          file: ./packages/cactus-plugin-satp-hermes/satp-hermes-gateway.Dockerfile
          push: true
          tags: |
            ghcr.io/${{ needs.set-docker-tags.outputs.ghcr_image }}:${{ needs.set-docker-tags.outputs.tag_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Stage 7b: Publish Docker image to Docker Hub
  publish-satp-image-dockerhub:
    needs: [build-satp, build-satp-docker, set-docker-tags, run-satp-tests-unit, run-satp-tests-integration-bridge, run-satp-tests-integration-oracle, run-satp-tests-integration-gateway, run-satp-tests-integration-cbdc, run-satp-tests-integration-docker]
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/satp-dev' || github.ref == 'refs/heads/satp-stg')) || github.event_name == 'workflow_dispatch'
    runs-on:
      group: cacti-default
      labels: [cacti-large]
    steps:
      - uses: actions/checkout@v4.1.7

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Build and push to Docker Hub (Release)
        if: needs.set-docker-tags.outputs.is_release == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./packages/cactus-plugin-satp-hermes/
          file: ./packages/cactus-plugin-satp-hermes/satp-hermes-gateway.Dockerfile
          push: true
          tags: |
            ${{ needs.set-docker-tags.outputs.dockerhub_image }}:${{ needs.set-docker-tags.outputs.tag_version }}
            ${{ needs.set-docker-tags.outputs.dockerhub_image }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push to Docker Hub (Development)
        if: needs.set-docker-tags.outputs.is_release != 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./packages/cactus-plugin-satp-hermes/
          file: ./packages/cactus-plugin-satp-hermes/satp-hermes-gateway.Dockerfile
          push: true
          tags: |
            ${{ needs.set-docker-tags.outputs.dockerhub_image }}:${{ needs.set-docker-tags.outputs.tag_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =============================================================================
  # STAGE 8: CREATE GITHUB RELEASE (MANUAL RELEASE MODE ONLY)
  # =============================================================================
  # This job runs only when the workflow is manually triggered with is_release=true
  # It creates a proper GitHub release with changelog and Docker image information

  create-github-release:
    needs: [set-docker-tags, publish-satp-image-ghcr, publish-satp-image-dockerhub]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.is_release == 'true'
    runs-on:
      group: cacti-default
      labels: [cacti-large]
    steps:
      - uses: actions/checkout@v4.1.7
        with:
          ref: ${{ github.event.inputs.release_branch || github.ref }}

      - name: Validate version format
        run: |
          VERSION="${{ needs.set-docker-tags.outputs.tag_version }}"
          if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+.*$'; then
            echo "Error: Version '$VERSION' does not follow semantic versioning format (x.y.z)"
            exit 1
          fi
          echo "Version format validated: $VERSION"

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: satp-v${{ needs.set-docker-tags.outputs.tag_version }}
          release_name: SATP Hermes Gateway v${{ needs.set-docker-tags.outputs.tag_version }}
          body: |
            # SATP Hermes Gateway Release v${{ needs.set-docker-tags.outputs.tag_version }}
            
            This release was created from branch `${{ github.event.inputs.release_branch || github.ref }}`.
            
            ## Docker Images
            
            **Docker Hub:**
            ```bash
            docker pull hyperledger/satp-hermes-gateway:${{ needs.set-docker-tags.outputs.tag_version }}
            docker pull hyperledger/satp-hermes-gateway:latest
            ```
            
            **GitHub Container Registry:**
            ```bash
            docker pull ghcr.io/hyperledger/satp-hermes-gateway:${{ needs.set-docker-tags.outputs.tag_version }}
            docker pull ghcr.io/hyperledger/satp-hermes-gateway:latest
            ```
            
            ## Release Information
            - Package Version: ${{ needs.set-docker-tags.outputs.package_version }}
            - Release Version: ${{ needs.set-docker-tags.outputs.tag_version }}
            - Custom Version: ${{ github.event.inputs.custom_version || 'None (using package.json)' }}
            - Source Branch: ${{ github.event.inputs.release_branch || github.ref }}
            - Tests Skipped: ${{ github.event.inputs.skip_tests }}
            - Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            Released on: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          draft: false
          prerelease: ${{ contains(needs.set-docker-tags.outputs.tag_version, 'alpha') || contains(needs.set-docker-tags.outputs.tag_version, 'beta') || contains(needs.set-docker-tags.outputs.tag_version, 'rc') }}
