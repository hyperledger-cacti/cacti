name: DAST_Scan_Nuclei

env:
  NODEJS_VERSION: v18.18.2

on:
  push:
    branches: [main, dev]

  pull_request:
    branches: [main, dev]

jobs:
  nuclei-scan:
    runs-on: ubuntu-22.04
    steps:
      - name: Install Indy SDK
        run: >
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys CE7709D068DB5E88 \
            && sudo add-apt-repository "deb https://repo.sovrin.org/sdk/deb bionic stable" \
            && sudo apt-get update \
            && sudo apt-get install -y \
                libindy \
                libnullpay \
                libvcx \
                indy-cli \
            && sudo rm -f /etc/apt/sources.list.d/sovrin.list*

      - name: Set up NodeJS ${{ env.NODEJS_VERSION }}
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b #v4.0.3
        with:
          node-version: ${{ env.NODEJS_VERSION }}

      - name: Install jq
        run: sudo apt update && sudo apt install -y jq

      - name: Verify jq
        run: jq --version

      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 #v4.1.7

      - uses: actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9 #v4.0.0
        with:
          go-version: 1.23

      - run: go install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@v3.3.5

      - run: nuclei --version

      - run: npm run configure

      - name: Create URLs file for Nuclei
        run: |
          echo https://localhost:4000/ > urls.txt
          {
          echo https://localhost:4000/api/v1/api-server/healthcheck
          echo https://localhost:4000/api/v1/plugins/@hyperledger/cactus-plugin-consortium-manual/node/jws
          echo https://localhost:4000/api/v1/plugins/@hyperledger/cactus-plugin-consortium-manual/consortium/jws
          echo https://localhost:4000/api/v1/plugins/@hyperledger/cactus-plugin-consortium-manual/get-prometheus-exporter-metrics
          echo https://localhost:4000/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-fabric/run-transaction
          echo https://localhost:4000/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-fabric/get-transaction-receipt-by-txid
          echo https://localhost:4000/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-fabric/deploy-contract-go-source
          echo https://localhost:4000/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-fabric/deploy-contract
          echo https://localhost:4000/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-fabric/get-prometheus-exporter-metrics
          echo https://localhost:4000/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/deploy-contract-solidity-bytecode
          echo https://localhost:4000/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/get-balance
          echo https://localhost:4000/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/get-block
          echo https://localhost:4000/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/run-transaction
          echo https://localhost:4000/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/get-transaction
          echo https://localhost:4000/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/get-past-logs
          echo https://localhost:4000/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/invoke-contract
          echo https://localhost:4000/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/sign-transaction
          echo https://localhost:4000/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/get-prometheus-exporter-metrics
          echo https://localhost:4000/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/get-besu-record
          } >> urls.txt

      - run: yarn generate-api-server-config

      # Delete the first and the second items in the array (remove keychain and manual consortium plugins)
      - run: jq 'del(.plugins[0,1])' .config.json > .config2.json && mv .config2.json .config.json

      - name: Install Keychain manual plugin into the API server
        run: jq '.plugins += [{ "packageName":"@hyperledger/cactus-plugin-keychain-memory","type":"org.hyperledger.cactus.plugin_import_type.LOCAL","action":"org.hyperledger.cactus.plugin_import_action.INSTALL","options":{"packageSrc":"/home/runner/work/cacti/cacti/packages/cactus-plugin-keychain-memory/","instanceId":"0daacd05-d1cd-4eab-9332-4ad1aff4b909","keychainId":"d29d728e-eaa0-4e2d-b187-d132242b0d9a"}}]' .config.json > .config2.json && mv .config2.json .config.json

      - name: Install Fabric connector into the API server
        run: jq '.plugins += [{ "packageName":"@hyperledger/cactus-plugin-ledger-connector-fabric", "type":"org.hyperledger.cactus.plugin_import_type.LOCAL", "action":"org.hyperledger.cactus.plugin_import_action.INSTALL",  "options":{ "packageSrc":"/home/runner/work/cacti/cacti/packages/cactus-plugin-ledger-connector-fabric/", "instanceId":"some-unique-fabric-connector-instance-id", "peerBinary":"/fabric-samples/bin/peer", "connectionProfile":"{}", "dockerBinary":"usr/local/bin/docker","cliContainerEnv":{"CORE_PEER_LOCALMSPID":"Org1MSP","CORE_PEER_ADDRESS":"peer0.org1.example.com:7051","CORE_PEER_MSPCONFIGPATH":"/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp","CORE_PEER_TLS_ROOTCERT_FILE":"/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt","ORDERER_TLS_ROOTCERT_FILE":"/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem"},"discoveryOptions":{"enabled":true,"asLocalhost":true}}}] ' .config.json > .config2.json && mv .config2.json .config.json

      - name: Install Besu connector into the API server
        run: jq '.plugins += [{"packageName":"@hyperledger/cactus-plugin-ledger-connector-besu","type":"org.hyperledger.cactus.plugin_import_type.LOCAL","action":"org.hyperledger.cactus.plugin_import_action.INSTALL","options":{"packageSrc":"/home/runner/work/cacti/cacti/packages/cactus-plugin-ledger-connector-besu/", "rpcApiHttpHost":"http://127.0.0.1:8545", "rpcApiWsHost":"ws://127.0.0.1:8546", "instanceId":"some-unique-besu-connector-instance-id"}}]' .config.json > .config2.json && mv .config2.json .config.json

      - name: Run Besu all-in-one image
        run: |
          docker run -d -p 0.0.0.0:8545:8545/tcp  -p 0.0.0.0:8546:8546/tcp  -p 0.0.0.0:8888:8888/tcp  -p 0.0.0.0:9001:9001/tcp  -p 0.0.0.0:9545:9545/tcp ghcr.io/hyperledger/cactus-besu-all-in-one:v2.0.0-rc.7
          until curl --fail -X POST --data '{"jsonrpc":"2.0","method":"eth_chainId","params":[],"id":1}' localhost:8545; do sleep 5;  done

      - name: Print API Server Config File - ./.config.json
        run: cat .config.json

      - name: Print Nuclei Config File - ./.nuclei-config.yaml
        run: cat .nuclei-config.yaml

      - name: Print Nuclei URL List File - ./urls.txt
        run: cat urls.txt

      - name: Generate Audience and Issuer
        id: generate_ids
        run: |
          echo "audience=$(uuidgen)" >> "$GITHUB_ENV"
          echo "issuer=$(uuidgen)" >> "$GITHUB_ENV"

      - name: Generate RSA Keys
        run: |
          openssl genpkey -algorithm RSA -out private_key.pem -pkeyopt rsa_keygen_bits:2048
          openssl rsa -in private_key.pem -pubout -out public_key.pem

      - run: jq '.expressJwtOptions.secret = "$(cat public_key.pem)" |
                 .expressJwtOptions.algorithms = ["RS256"] |
                 .expressJwtOptions.issuer = "${{ env.issuer }}" |
                 .expressJwtOptions.audience = "${{ env.audience }}"' .config.json > .config2.json && mv .config2.json .config.json

      - name: Generate Auth Bearer Token
        run: |
          HEADER_B64=$(echo '{"alg":"RS256"}' | openssl base64 -e -A | tr -d '=' | tr '/+' '_-')
          PAYLOAD_B64=$(echo '{"scope":"read:health","iss":"${{ env.issuer }}","aud":"${{ env.audience }}"}' | openssl base64 -e -A | tr -d '=' | tr '/+' '_-')

          SIGNATURE=$(echo -n "$HEADER_B64.$PAYLOAD_B64" | openssl dgst -sha256 -sign private_key.pem | openssl base64 -e -A | tr -d '=' | tr '/+' '_-')
          JWT="$HEADER_B64.$PAYLOAD_B64.$SIGNATURE"
          echo "dast_jwt=$JWT" >> "$GITHUB_ENV"

      - name: Start API Server & Run DAST
        uses: BerniWittmann/background-server-action@4cd0c67a97c1d490dd4ac7e303a528ce56394e29 #v1.1.0
        env:
          # Needed because the wait-on syntax otherwise keeps thinking that
          # there is a problem due to our self signed certificates on the
          # test instance of the API server
          NODE_TLS_REJECT_UNAUTHORIZED: 0
        with:
          build: yarn --version
          start: yarn start:api-server
          command: "nuclei -version"
          command-windows: echo "The project build is not supported on the Windows operating system. Please use Linux or macOS"
          # wait for 10 minutes for the server to respond
          wait-on-timeout: 120
          wait-on-command: |
            curl -X GET https://localhost:4000/api/v1/api-server/healthcheck -k -H "Authorization: Bearer ${{ env.dast_jwt }}"

      - name: Run the dast nuclei scan
        run: "nuclei -list=urls.txt -dast -severity=high,critical -sarif-export ~/nuclei.sarif -output=nuclei.log"

      - name: GitHub Workflow artifacts
        uses: actions/upload-artifact@c7d193f32edcb7bfad88892161225aeda64e9392 #v4.0.0
        with:
          name: nuclei.log
          path: nuclei.log