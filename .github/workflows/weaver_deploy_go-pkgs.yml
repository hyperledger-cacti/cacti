# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: CC-BY-4.0

name: Deploy Go Modules

on:
  push:
    tags:
      - v*
      
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  publish-protos-go:
    if: github.repository_owner == 'hyperledger'
    runs-on: ubuntu-22.04
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4.1.1
          
      - name: Set current date as env
        run: echo "RELEASE_DATE=$(date +%b\ %d,\ %Y)" >> $GITHUB_ENV
                
      - name: Set module tag and description
        run: |
          echo "MODULE_TAG=weaver/common/protos-go" >> $GITHUB_ENV
          echo "MODULE_DESC=GO Weaver Protos" >> $GITHUB_ENV
        
      - name: Update version
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          echo $VERSION
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+[A-Za-z\-]*$ ]]; then
            echo -n $VERSION > VERSION
          fi
          cat VERSION
        working-directory: weaver/common/protos-go
        
      - name: Set module version
        run: echo "VERSION=v$(cat VERSION)" >> $GITHUB_ENV
        working-directory: weaver/common/protos-go
        
      - name: Check if release already exists
        run: (git ls-remote origin | grep "$MODULE_TAG/$VERSION" && echo "PROTOS_GO_RELEASE=false" >> $GITHUB_ENV) || echo "PROTOS_GO_RELEASE=true" >> $GITHUB_ENV
        working-directory: weaver/common/protos-go
            
      - name: Create Release
        if: ${{ env.PROTOS_GO_RELEASE == 'true' }}
        id: protos-go-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.MODULE_TAG }}/${{ env.VERSION }}
          release_name: ${{ env.VERSION }} - ${{ env.MODULE_DESC }} - ${{ env.RELEASE_DATE }}
          body: |
            - Go Module: `github.com/${{ github.repository_owner }}/cacti/${{ env.MODULE_TAG }}`
            - Release: ${{ env.VERSION }}
            - Readme: [Here](https://github.com/${{ github.repository_owner }}/cacti/blob/${{ env.MODULE_TAG }}/${{ env.VERSION }}/${{ env.MODULE_TAG }}/README.md).
            - Source: [Here](https://github.com/${{ github.repository_owner }}/cacti/blob/${{ env.MODULE_TAG }}/${{ env.VERSION }}/${{ env.MODULE_TAG }})
          draft: false
          prerelease: false
          
      - name: Wait for release to be reflected
        if: ${{ env.PROTOS_GO_RELEASE == 'true' }}
        run: sleep 300
          
  publish-lib-utils:
    if: ${{ always() && github.repository_owner == 'hyperledger' }}
    needs: publish-protos-go
    runs-on: ubuntu-22.04
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4.1.1
      
      - name: Set up Go
        uses: actions/setup-go@v4.0.0
        with:
          go-version: '1.20.2'
          
      - name: Set current date as env
        run: echo "RELEASE_DATE=$(date +%b\ %d,\ %Y)" >> $GITHUB_ENV
                
      - name: Set module tag and description
        run: |
          echo "MODULE_TAG=weaver/core/network/fabric-interop-cc/libs/utils" >> $GITHUB_ENV
          echo "MODULE_DESC=GO Fabric Utils Library for Interoperation" >> $GITHUB_ENV
        
      - name: Update version
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          echo $VERSION
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+[A-Za-z\-]*$ ]]; then
            echo -n $VERSION > VERSION
          fi
          cat VERSION
        working-directory: weaver/core/network/fabric-interop-cc/libs/utils
        
      - name: Set module version
        run: echo "VERSION=v$(cat VERSION)" >> $GITHUB_ENV
        working-directory: weaver/core/network/fabric-interop-cc/libs/utils
        
      - name: Build test
        run: go build -v ./...
        working-directory: weaver/core/network/fabric-interop-cc/libs/utils
        
      - name: Check if release already exists
        run: (git ls-remote origin | grep "$MODULE_TAG/$VERSION" && echo "LIB_UTILS_RELEASE=false" >> $GITHUB_ENV) || echo "LIB_UTILS_RELEASE=true" >> $GITHUB_ENV
        working-directory: weaver/core/network/fabric-interop-cc/libs/utils
            
      - name: Create Release
        if: ${{ env.LIB_UTILS_RELEASE == 'true' }}
        id: lib-utils-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.MODULE_TAG }}/${{ env.VERSION }}
          release_name: ${{ env.VERSION }} - ${{ env.MODULE_DESC }} - ${{ env.RELEASE_DATE }}
          body: |
            - Go Module: `github.com/${{ github.repository_owner }}/cacti/${{ env.MODULE_TAG }}`
            - Release: ${{ env.VERSION }}
            - Readme: [Here](https://github.com/${{ github.repository_owner }}/cacti/blob/${{ env.MODULE_TAG }}/${{ env.VERSION }}/${{ env.MODULE_TAG }}/README.md).
            - Source: [Here](https://github.com/${{ github.repository_owner }}/cacti/blob/${{ env.MODULE_TAG }}/${{ env.VERSION }}/${{ env.MODULE_TAG }})
          draft: false
          prerelease: false    
      
      - name: Wait for release to be reflected
        if: ${{ env.LIB_UTILS_RELEASE == 'true' }}
        run: sleep 300

  publish-lib-asset-exchange:
    if: ${{ always() && github.repository_owner == 'hyperledger' }}
    needs: publish-protos-go
    runs-on: ubuntu-22.04
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4.1.1
      
      - name: Set up Go
        uses: actions/setup-go@v4.0.0
        with:
          go-version: '1.20.2'
          
      - name: Set current date as env
        run: echo "RELEASE_DATE=$(date +%b\ %d,\ %Y)" >> $GITHUB_ENV
                
      - name: Set module tag and description
        run: |
          echo "MODULE_TAG=weaver/core/network/fabric-interop-cc/libs/assetexchange" >> $GITHUB_ENV
          echo "MODULE_DESC=GO Fabric Library for Asset Exchange" >> $GITHUB_ENV
        
      - name: Update version
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          echo $VERSION
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+[A-Za-z\-]*$ ]]; then
            echo -n $VERSION > VERSION
          fi
          cat VERSION
        working-directory: weaver/core/network/fabric-interop-cc/libs/assetexchange
        
      - name: Set module version
        run: echo "VERSION=v$(cat VERSION)" >> $GITHUB_ENV
        working-directory: weaver/core/network/fabric-interop-cc/libs/assetexchange

      - name: Build test
        run: go build -v ./...
        working-directory: weaver/core/network/fabric-interop-cc/libs/assetexchange
        
      - name: Check if release already exists
        run: (git ls-remote origin | grep "$MODULE_TAG/$VERSION" && echo "LIB_ASSET_EXCHANGE_RELEASE=false" >> $GITHUB_ENV) || echo "LIB_ASSET_EXCHANGE_RELEASE=true" >> $GITHUB_ENV
        working-directory: weaver/core/network/fabric-interop-cc/libs/assetexchange
            
      - name: Create Release
        if: ${{ env.LIB_ASSET_EXCHANGE_RELEASE == 'true' }}
        id: lib-asset-exchange-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.MODULE_TAG }}/${{ env.VERSION }}
          release_name: ${{ env.VERSION }} - ${{ env.MODULE_DESC }} - ${{ env.RELEASE_DATE }}
          body: |
            - Go Module: `github.com/${{ github.repository_owner }}/cacti/${{ env.MODULE_TAG }}`
            - Release: ${{ env.VERSION }}
            - Readme: [Here](https://github.com/${{ github.repository_owner }}/cacti/blob/${{ env.MODULE_TAG }}/${{ env.VERSION }}/${{ env.MODULE_TAG }}/README.md).
            - Source: [Here](https://github.com/${{ github.repository_owner }}/cacti/blob/${{ env.MODULE_TAG }}/${{ env.VERSION }}/${{ env.MODULE_TAG }})
          draft: false
          prerelease: false
                
      - name: Wait for release to be reflected
        if: ${{ env.LIB_ASSET_EXCHANGE_RELEASE == 'true' }}
        run: sleep 300
      
  publish-interface-asset-mgmt:
    if: ${{ always() && github.repository_owner == 'hyperledger' }}
    needs: [publish-protos-go]
    runs-on: ubuntu-22.04
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4.1.1
      
      - name: Set up Go
        uses: actions/setup-go@v4.0.0
        with:
          go-version: '1.20.2'
          
      - name: Set current date as env
        run: echo "RELEASE_DATE=$(date +%b\ %d,\ %Y)" >> $GITHUB_ENV
                
      - name: Set module tag and description
        run: |
          echo "MODULE_TAG=weaver/core/network/fabric-interop-cc/interfaces/asset-mgmt" >> $GITHUB_ENV
          echo "MODULE_DESC=GO Fabric Asset Management Interface" >> $GITHUB_ENV
        
      - name: Update version
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          echo $VERSION
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+[A-Za-z\-]*$ ]]; then
            echo -n $VERSION > VERSION
          fi
          cat VERSION
        working-directory: weaver/core/network/fabric-interop-cc/interfaces/asset-mgmt
        
      - name: Set module version
        run: echo "VERSION=v$(cat VERSION)" >> $GITHUB_ENV
        working-directory: weaver/core/network/fabric-interop-cc/interfaces/asset-mgmt
      
      - name: Build test
        run: go build -v ./...
        working-directory: weaver/core/network/fabric-interop-cc/interfaces/asset-mgmt
        
      - name: Check if release already exists
        run: (git ls-remote origin | grep "$MODULE_TAG/$VERSION" && echo "INTERFACE_ASSET_MGMT_RELEASE=false" >> $GITHUB_ENV) || echo "INTERFACE_ASSET_MGMT_RELEASE=true" >> $GITHUB_ENV
        working-directory: weaver/core/network/fabric-interop-cc/interfaces/asset-mgmt
            
      - name: Create Release
        if: ${{ env.INTERFACE_ASSET_MGMT_RELEASE == 'true' }}
        id: asset-mgmt-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.MODULE_TAG }}/${{ env.VERSION }}
          release_name: ${{ env.VERSION }} - ${{ env.MODULE_DESC }} - ${{ env.RELEASE_DATE }}
          body: |
            - Go Module: `github.com/${{ github.repository_owner }}/cacti/${{ env.MODULE_TAG }}`
            - Release: ${{ env.VERSION }}
            - Readme: [Here](https://github.com/${{ github.repository_owner }}/cacti/blob/${{ env.MODULE_TAG }}/${{ env.VERSION }}/${{ env.MODULE_TAG }}/README.md).
            - Source: [Here](https://github.com/${{ github.repository_owner }}/cacti/blob/${{ env.MODULE_TAG }}/${{ env.VERSION }}/${{ env.MODULE_TAG }})
          draft: false
          prerelease: false
                
      - name: Wait for release to be reflected
        if: ${{ env.INTERFACE_ASSET_MGMT_RELEASE == 'true' }}
        run: sleep 300

  publish-interop-cc:
    if: ${{ always() && github.repository_owner == 'hyperledger' }}
    needs: [publish-protos-go, publish-lib-utils, publish-lib-asset-exchange]
    runs-on: ubuntu-22.04
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4.1.1
      
      - name: Set up Go
        uses: actions/setup-go@v4.0.0
        with:
          go-version: '1.20.2'
          
      - name: Set current date as env
        run: echo "RELEASE_DATE=$(date +%b\ %d,\ %Y)" >> $GITHUB_ENV
                
      - name: Set module tag and description
        run: |
          echo "MODULE_TAG=weaver/core/network/fabric-interop-cc/contracts/interop" >> $GITHUB_ENV
          echo "MODULE_DESC=GO Fabric Interop Chaincode" >> $GITHUB_ENV
        
      - name: Update version
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          echo $VERSION
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+[A-Za-z\-]*$ ]]; then
            echo -n $VERSION > VERSION
          fi
          cat VERSION
        working-directory: weaver/core/network/fabric-interop-cc/contracts/interop
        
      - name: Set module version
        run: echo "VERSION=v$(cat VERSION)" >> $GITHUB_ENV
        working-directory: weaver/core/network/fabric-interop-cc/contracts/interop
        
      - name: Build test
        run: make build
        working-directory: weaver/core/network/fabric-interop-cc/contracts/interop
        
      - name: Check if release already exists
        run: (git ls-remote origin | grep "$MODULE_TAG/$VERSION" && echo "INTEROPCC_RELEASE=false" >> $GITHUB_ENV) || echo "INTEROPCC_RELEASE=true" >> $GITHUB_ENV
        working-directory: weaver/core/network/fabric-interop-cc/contracts/interop
            
      - name: Create Release
        if: ${{ env.INTEROPCC_RELEASE == 'true' }}
        id: interop-cc-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.MODULE_TAG }}/${{ env.VERSION }}
          release_name: ${{ env.VERSION }} - ${{ env.MODULE_DESC }} - ${{ env.RELEASE_DATE }}
          body: |
            - Go Module: `github.com/${{ github.repository_owner }}/cacti/${{ env.MODULE_TAG }}`
            - Release: ${{ env.VERSION }}
            - Readme: [Here](https://github.com/${{ github.repository_owner }}/cacti/blob/${{ env.MODULE_TAG }}/${{ env.VERSION }}/${{ env.MODULE_TAG }}/README.md).
            - Source: [Here](https://github.com/${{ github.repository_owner }}/cacti/blob/${{ env.MODULE_TAG }}/${{ env.VERSION }}/${{ env.MODULE_TAG }})
          draft: false
          prerelease: false
                
      - name: Wait for release to be reflected
        if: ${{ env.INTEROPCC_RELEASE == 'true' }}
        run: sleep 300

  publish-go-sdk:
    if: ${{ always() && github.repository_owner == 'hyperledger' }}
    needs: [publish-protos-go]
    runs-on: ubuntu-22.04
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4.1.1
      
      - name: Set up Go
        uses: actions/setup-go@v4.0.0
        with:
          go-version: '1.20.2'
          
      - name: Set current date as env
        run: echo "RELEASE_DATE=$(date +%b\ %d,\ %Y)" >> $GITHUB_ENV
                
      - name: Set module tag and description
        run: |
            echo "MODULE_TAG=weaver/sdks/fabric/go-sdk" >> $GITHUB_ENV
            echo "MODULE_DESC=GO Fabric Weaver SDK" >> $GITHUB_ENV
          
      - name: Update version
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          echo $VERSION
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+[A-Za-z\-]*$ ]]; then
            echo -n $VERSION > VERSION
          fi
          cat VERSION
        working-directory: weaver/sdks/fabric/go-sdk
        
      - name: Set module version
        run: echo "VERSION=v$(cat VERSION)" >> $GITHUB_ENV
        working-directory: weaver/sdks/fabric/go-sdk
        
      - name: Build test
        run: make build
        working-directory: weaver/sdks/fabric/go-sdk
        
      - name: Check if release already exists
        run: (git ls-remote origin | grep "$MODULE_TAG/$VERSION" && echo "WEAVER_FABRIC_GO_SDK=false" >> $GITHUB_ENV) || echo "WEAVER_FABRIC_GO_SDK=true" >> $GITHUB_ENV
        working-directory: weaver/sdks/fabric/go-sdk
            
      - name: Create Release
        if: ${{ env.WEAVER_FABRIC_GO_SDK == 'true' }}
        id: go-sdk-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.MODULE_TAG }}/${{ env.VERSION }}
          release_name: ${{ env.VERSION }} - ${{ env.MODULE_DESC }} - ${{ env.RELEASE_DATE }}
          body: |
            - Go Module: `github.com/${{ github.repository_owner }}/cacti/${{ env.MODULE_TAG }}`
            - Release: ${{ env.VERSION }}
            - Readme: [Here](https://github.com/${{ github.repository_owner }}/cacti/blob/${{ env.MODULE_TAG }}/${{ env.VERSION }}/${{ env.MODULE_TAG }}/README.md).
            - Source: [Here](https://github.com/${{ github.repository_owner }}/cacti/blob/${{ env.MODULE_TAG }}/${{ env.VERSION }}/${{ env.MODULE_TAG }})
          draft: false
          prerelease: false
                
      - name: Wait for release to be reflected
        if: ${{ env.WEAVER_FABRIC_GO_SDK == 'true' }}
        run: sleep 300
        
  publish-weaver-fabric-cc-image:
    if: ${{ always() && github.repository_owner == 'hyperledger' }}
    needs: [publish-protos-go, publish-lib-utils, publish-lib-asset-exchange]
    runs-on: ubuntu-22.04
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4.1.1
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if package already exists
        run: (make check-if-tag-exists && echo "WEAVER_FABRIC_CC_PUSH=true" >> $GITHUB_ENV) || echo "WEAVER_FABRIC_CC_PUSH=false" >> $GITHUB_ENV
        working-directory: weaver/core/network/fabric-interop-cc

      - name: Build and Push
        if: ${{ env.WEAVER_FABRIC_CC_PUSH == 'true' }}
        run: make push-image
        working-directory: weaver/core/network/fabric-interop-cc
        
      - name: Push latest tag
        if: ${{ env.WEAVER_FABRIC_CC_PUSH == 'true' }}
        run: make push-image-latest
        working-directory: weaver/core/network/fabric-interop-cc
